   [("Theory_Of_Lists.slistmem_bottom2", "~ slistmem \<bottom> ?xs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)
             )
         )),
    ("Theory_Of_Lists.slistmem_bottom1", "~ slistmem ?x \<bottom>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)
             )
         )),
    ("Theory_Of_Lists.slistmem_nil", "~ slistmem ?x [::]",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)
             )
         )),
    ("Theory_Of_Lists.sinits_not_snil", "sinits$?xs ~= [::]",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_hole 0)
         )),
    ("Theory_Of_Lists.stails_not_snil", "stails$?xs ~= [::]",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_hole 0)
         )),
    ("Theory_Of_Lists.selem_strict", "selem$?x$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Theory_Of_Lists.sall_strict", "sall$?p$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Theory_Of_Lists.srev_srev_ident", "srev$(srev$?xs) = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Theory_Of_Lists.smap_ID'", "Theory_Of_Lists.smap$ID$?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Theory_Of_Lists.sfilter_strict",
     "Theory_Of_Lists.sfilter$?p$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Theory_Of_Lists.sdrop_0", "Theory_Of_Lists.sdrop$0$?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Theory_Of_Lists.sappend_strict2", "?xs :@ \<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Theory_Of_Lists.sappend_snil_id_right", "?xs :@ [::] = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Theory_Of_Lists.smap_strict",
     "Theory_Of_Lists.smap$?f$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Theory_Of_Lists.sconcatMap_strict",
     "sconcatMap$?f$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Theory_Of_Lists.sconcatMap_snil", "sconcatMap$?f$[::] = [::]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Theory_Of_Lists.sdrop_strict",
     "Theory_Of_Lists.sdrop$?i$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Theory_Of_Lists.stake_strict",
     "Theory_Of_Lists.stake$?i$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Theory_Of_Lists.upto_strict", "supto$?m$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Theory_Of_Lists.stake_0", "Theory_Of_Lists.stake$0$?xs << [::]",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1)),
               template_var 0)),
           template_hole 0)
         )),
    ("Theory_Of_Lists.deflation_slist_map",
     "deflation ?a ==> deflation (slist_map$?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Theory_Of_Lists.sfoldl_strict", "sfoldl$?f$?z$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Theory_Of_Lists.sfoldr_strict", "sfoldr$?f$?z$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Theory_Of_Lists.slist_bottom'",
     "(LAM [::]. \<bottom>)$?xs = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1)),
             template_hole 0)),
         template_var 0),
       template_hole 1)),
    ("Theory_Of_Lists.slast_singleton", "slast$[:?x:] = ?x",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0)),
       template_var 0)),
    ("Theory_Of_Lists.snull_bottom_iff",
     "(snull$?xs = \<bottom>) = (?xs = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.snull_TT_conv", "(snull$?xs = TT) = (?xs = [::])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.slength_0_conv", "(slength$?xs = 0) = (?xs = [::])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.slength_bottom_iff",
     "(slength$?xs = \<bottom>) = (?xs = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.srev_bottom_iff",
     "(srev$?xs = \<bottom>) = (?xs = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.sinits_bottom_iff",
     "(sinits$?xs = \<bottom>) = (?xs = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.stails_bottom_iff",
     "(stails$?xs = \<bottom>) = (?xs = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.snull_eq_snil", "snull$?xs = eq$?xs$[::]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0))),
    ("Theory_Of_Lists.sfilter_const_TT",
     "Theory_Of_Lists.sfilter$(LAM x. TT)$?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, t_empty))),
         template_var 0),
       template_var 0)),
    ("Theory_Of_Lists.sdrop_0", "Theory_Of_Lists.sdrop$(MkI$0)$?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))),
         template_var 0),
       template_var 0)),
    ("Theory_Of_Lists.stake_all_triv",
     "Theory_Of_Lists.stake$(slength$?xs)$?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_var 0),
       template_var 0)),
    ("Theory_Of_Lists.sscanl_strict", "sscanl$?f$\<bottom>$?xs = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("Theory_Of_Lists.sscanl_strict", "sscanl$?f$?z$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Theory_Of_Lists.sinits_empty_bottom",
     "(Theory_Of_Lists.sset (sinits$?xs) = {}) = (?xs = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0)),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.sinits_all",
     "(?xs : Theory_Of_Lists.sset (sinits$?xs)) = (?xs ~= \<bottom>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Theory_Of_Lists.stails_all",
     "(?xs : Theory_Of_Lists.sset (stails$?xs)) = (?xs ~= \<bottom>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Theory_Of_Lists.slist_eq_TT_snil",
     "(eq$[::]$?xs = TT) = (?xs = [::])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_var 0),
         template_hole 1),
       template_equation (template_var 0, template_hole 2))),
    ("Theory_Of_Lists.slist_eq_TT_snil",
     "(eq$?xs$[::] = TT) = (?xs = [::])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0)),
           template_hole 2),
         template_hole 1),
       template_equation (template_var 0, template_hole 2))),
    ("Theory_Of_Lists.slength_0_conv",
     "(slength$?xs = MkI$0) = (?xs = [::])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.smap_is_snil_conv",
     "([::] = Theory_Of_Lists.smap$?f$?xs) = (?xs = [::])",
     template_bimplication
      (template_equation
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.smap_is_snil_conv",
     "(Theory_Of_Lists.smap$?f$?xs = [::]) = (?xs = [::])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Theory_Of_Lists.slength_0_conv", "eq$0$(slength$?xs) = snull$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Theory_Of_Lists.slength_0_conv", "eq$(slength$?xs)$0 = snull$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Theory_Of_Lists.sinits_length",
     "slength$(sinits$?xs) = slength$?xs + 1",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0))),
    ("Theory_Of_Lists.stails_slength",
     "slength$(stails$?xs) = slength$?xs + 1",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0))),
    ("Theory_Of_Lists.prefix_scons_snil", "prefix$(?x :# ?xs)$[::] ~= TT",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 1)),
                   template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Theory_Of_Lists.elem_TT",
     "(selem$?x$?xs = TT) = (?x : Theory_Of_Lists.sset ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1)),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Theory_Of_Lists.prefix_refl_conv",
     "(prefix$?xs$?xs = TT) = (?xs ~= \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 0)),
           template_var 0),
         template_hole 3),
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Theory_Of_Lists.sdrop_snil_conv",
     "(Theory_Of_Lists.sdrop$?i$[::] = [::]) = (?i ~= \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 0)),
           template_hole 3),
         template_hole 3),
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Theory_Of_Lists.isodefl_slist",
     "isodefl ?fa ?da ==> isodefl (slist_map$?fa) (slist_defl$?da)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Theory_Of_Lists.slength_ge_0", "slength$?xs = MkI$?n ==> 0 <= ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_hole 4),
            template_var 1),
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0))],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("Theory_Of_Lists.shead_bottom_iff",
     "(shead$?xs = \<bottom>) = (?xs = \<bottom> | ?xs = [::])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("Theory_Of_Lists.stail_bottom_iff",
     "(stail$?xs = \<bottom>) = (?xs = \<bottom> | ?xs = [::])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 0),
         template_hole 2),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 0))
           ))),
    ("Theory_Of_Lists.sconcatMap_monad_laws",
     "sconcatMap$(:#[::])$?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, t_empty))),
         template_var 0),
       template_var 0)),
    ("Theory_Of_Lists.sdrop_snil",
     "?i ~= \<bottom> ==> Theory_Of_Lists.sdrop$?i$[::] = [::]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0),
         template_hole 0))),
    ("Theory_Of_Lists.prefix_refl",
     "?xs ~= \<bottom> ==> prefix$?xs$?xs = TT",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Theory_Of_Lists.stake_0",
     "?xs ~= \<bottom> ==> Theory_Of_Lists.stake$0$?xs = [::]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1)),
           template_var 0),
         template_hole 0))),
    ("Theory_Of_Lists.prefix_FF_not_snilD",
     "prefix$?xs$?ys = FF ==> ?xs ~= [::]",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1)),
            template_var 0),
          template_hole 3)],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Theory_Of_Lists.le_slength_0",
     "(le$0$(slength$?xs) = TT) = (?xs ~= \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_hole 6)),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 0)),
         template_hole 3),
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Theory_Of_Lists.sall_const_TT_conv",
     "(sall$(LAM x. TT)$?xs = TT) = (?xs ~= \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, t_empty))),
           template_var 0),
         template_hole 3),
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Theory_Of_Lists.sfilter_const_FF_conv",
     "(Theory_Of_Lists.sfilter$(LAM x. FF)$?xs = [::]) =
      (?xs ~= \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, t_empty))),
           template_var 0),
         template_hole 2),
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Theory_Of_Lists.prefix_bottom_iff",
     "(prefix$?xs$?ys = \<bottom>) = (?xs = \<bottom> | ?ys = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Theory_Of_Lists.sdrop_bottom_iff",
     "(Theory_Of_Lists.sdrop$?i$?xs = \<bottom>) =
      (?i = \<bottom> | ?xs = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_hole 3))
           ))),
    ("Theory_Of_Lists.stake_bottom_iff",
     "(Theory_Of_Lists.stake$?i$?xs = \<bottom>) =
      (?i = \<bottom> | ?xs = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_hole 3))
           ))),
    ("Theory_Of_Lists.sappend_bottom_iff",
     "(?xs :@ ?ys = \<bottom>) = (?xs = \<bottom> | ?ys = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 1))
           ))),
    ("Theory_Of_Lists.snil_append_iff",
     "(?xs :@ ?ys = [::]) = (?xs = [::] & ?ys = [::])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 1))
           ))),
    ("Theory_Of_Lists.supto_bottom_iff",
     "(supto$?i$?j = \<bottom>) = (?i = \<bottom> | ?j = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Theory_Of_Lists.supto_is_snil_conv",
     "([::] = supto$(MkI$?i)$(MkI$?j)) = (?j < ?i)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Theory_Of_Lists.supto_is_snil_conv",
     "(supto$(MkI$?i)$(MkI$?j) = [::]) = (?j < ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Theory_Of_Lists.slength_sappend",
     "slength$(?xs :@ ?ys) = slength$?xs + slength$?ys",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)))),
    ("Theory_Of_Lists.sconcat_scons",
     "sconcat$(?x :# ?xs) = ?x :@ sconcat$?xs",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("Theory_Of_Lists.sconcat_sfoldl_aux",
     "sfoldl$sappend$?z$?xs = ?z :@ sconcat$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_var 1)),
         template_app
          (template_app (template_hole 7, template_hole 0),
           template_var 0)))),
    ("Theory_Of_Lists.selem_snil_stails",
     "?xs ~= \<bottom> ==> selem$[::]$(stails$?xs) = TT",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0))),
    ("Theory_Of_Lists.lt_slength_0",
     "?xs ~= \<bottom> ==> lt$(slength$?xs)$0 = FF",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0))),
           template_hole 1),
         template_hole 0))),
    ("Theory_Of_Lists.sall_const_TT",
     "?xs ~= \<bottom> ==> sall$(LAM x. TT)$?xs = TT",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, t_empty))),
           template_var 0),
         template_hole 0))),
    ("Theory_Of_Lists.sfilter_const_FF",
     "?xs ~= \<bottom> ==> Theory_Of_Lists.sfilter$(LAM x. FF)$?xs = [::]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, t_empty))),
           template_var 0),
         template_hole 0))),
    ("Theory_Of_Lists.stake_0",
     "?xs ~= \<bottom> ==> Theory_Of_Lists.stake$(MkI$0)$?xs = [::]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1))),
           template_var 0),
         template_hole 0))),
    ("Theory_Of_Lists.supto_simp",
     "?j < ?i ==> supto$(MkI$?i)$(MkI$?j) = [::]",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_hole 0))),
    ("Theory_Of_Lists.sfoldl_strict_f",
     "?f$\<bottom> = \<bottom> ==> sfoldl$?f$\<bottom>$?xs = \<bottom>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1),
            template_hole 6),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_hole 6)),
           template_var 0),
         template_hole 6))),
    ("Theory_Of_Lists.sdrop_neg",
     "le$?i$0 = TT ==> Theory_Of_Lists.sdrop$?i$?xs = ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 1)),
            template_hole 5),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0),
         template_var 0))),
    ("Theory_Of_Lists.prefix_eq_FF",
     "prefix$?xs$?ys = FF ==> eq$?xs$?ys = FF",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1)),
            template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 0),
               template_var 1)),
           template_var 0),
         template_hole 1))),
    ("Theory_Of_Lists.eq_prefix_TT",
     "eq$?xs$?ys = TT ==> prefix$?xs$?ys = TT",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1)),
            template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 0),
               template_var 1)),
           template_var 0),
         template_hole 1))),
    ("Theory_Of_Lists.sinits_sscanl",
     "Theory_Of_Lists.smap$(sfoldl$?f$?z) oo sinits = sscanl$?f$?z",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 1)),
                 template_var 0)))),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0))),
    ("Theory_Of_Lists.prefix_of_snil",
     "prefix$?xs$[::] = (case ?xs of [::] => TT | x :# xs => FF)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_var 0)),
         template_hole 7),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3)),
             template_app (template_hole 2, t_empty))),
         template_var 0))),
    ("Theory_Of_Lists.eq_take_length_prefix",
     "prefix$?xs$?ys = eq$?xs$(Theory_Of_Lists.stake$(slength$?xs)$?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 5),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1))),
           template_var 0)))),
    ("Theory_Of_Lists.srev_sappend",
     "srev$(?xs :@ ?ys) = srev$?ys :@ srev$?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 1)))),
    ("Theory_Of_Lists.sconcat_sappend",
     "sconcat$(?xs :@ ?ys) = sconcat$?xs :@ sconcat$?ys",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1))),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("Theory_Of_Lists.sdrop_numeral_scons",
     "?x ~= \<bottom> ==> Theory_Of_Lists.sdrop$1$(?x :# ?xs) = ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_var 0))),
    ("Theory_Of_Lists.sdrop_elem_stails",
     "?xs ~= \<bottom> ==>
      Theory_Of_Lists.sdrop$(MkI$?i)$?xs
      : Theory_Of_Lists.sset (stails$?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 0))),
                 template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)))
           ))),
    ("Theory_Of_Lists.sdrop_all",
     "le$(slength$?xs)$?i = TT ==> Theory_Of_Lists.sdrop$?i$?xs = [::]",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 1))),
            template_var 0),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Theory_Of_Lists.stake_all",
     "le$(slength$?xs)$?i = TT ==> Theory_Of_Lists.stake$?i$?xs = ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1))),
            template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 1),
         template_var 1))),
    ("Theory_Of_Lists.sfilter_snil_conv",
     "(Theory_Of_Lists.sfilter$?p$?xs = [::]) =
      (sall$(neg oo ?p)$?xs = TT)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, template_hole 10),
               template_var 1)),
           template_var 0),
         template_hole 9),
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_hole 1)),
                 template_var 1))),
           template_var 0),
         template_hole 0))),
    ("Theory_Of_Lists.slength_sfoldl_aux",
     "sfoldl$(LAM i uu_. i + 1)$?z$?xs = ?z + slength$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app (template_hole 4, t_empty))),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 8, template_hole 0),
           template_var 0)))),
    ("Theory_Of_Lists.srev_scons", "srev$(?x :# ?xs) = srev$?xs :@ [:?x:]",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_hole 0)))),
    ("Theory_Of_Lists.sappend_scons",
     "(?x :# ?xs) :@ ?ys = ?x :# ?xs :@ ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0)))),
    ("Theory_Of_Lists.sappend_assoc",
     "(?xs :@ ?ys) :@ ?zs = ?xs :@ ?ys :@ ?zs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Theory_Of_Lists.sinits_sscanl'",
     "Theory_Of_Lists.smap$(sfoldl$?f$?z)$(sinits$?xs) = sscanl$?f$?z$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2)),
             template_var 1)),
         template_var 0))),
    ("Theory_Of_Lists.stails_scons",
     "stails$(?x :# ?xs) = (?x :# ?xs) :# stails$?xs",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("Theory_Of_Lists.sbutlast_sappend_ssnoc",
     "?x ~= \<bottom> ==> sbutlast$(?xs :@ [:?x:]) = ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_hole 0))),
         template_var 0))),
    ("Theory_Of_Lists.slast_sappend_ssnoc",
     "?xs ~= \<bottom> ==> slast$(?xs :@ [:?x:]) = ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0)),
               template_hole 0))),
         template_var 0))),
    ("Theory_Of_Lists.lt_slength_0",
     "?xs ~= \<bottom> ==> lt$(slength$?xs)$(slength$?xs + 1) = TT",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 0)),
             template_hole 1)),
         template_hole 0))),
    ("Theory_Of_Lists.sdrop_sappend_same",
     "?xs ~= \<bottom> ==>
      Theory_Of_Lists.sdrop$(slength$?xs)$(?xs :@ ?ys) = ?ys",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_var 0))),
    ("Theory_Of_Lists.selem_bottom_iff",
     "(selem$?x$?xs = \<bottom>) =
      (?xs = \<bottom> | ?xs ~= [::] & ?x = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 1)),
           template_var 0),
         template_hole 8),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 2))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))
           ))),
    ("Theory_Of_Lists.prefix_slength",
     "prefix$?xs$?ys = TT ==> le$(slength$?xs)$(slength$?ys) = TT",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 1)),
            template_var 0),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_hole 5))),
    ("Theory_Of_Lists.append_prefixD",
     "prefix$(?xs :@ ?ys)$?zs = TT ==> prefix$?xs$?zs = TT",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_hole 1),
                      template_var 2)),
                  template_var 1))),
            template_var 0),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 2)),
           template_var 0),
         template_hole 0))),
    ("Theory_Of_Lists.sfilter_bottom_iff",
     "(Theory_Of_Lists.sfilter$?p$?xs = \<bottom>) =
      (?xs = \<bottom> |
       (EX x:Theory_Of_Lists.sset ?xs. ?p$x = \<bottom>))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 1)),
           template_var 0),
         template_hole 6),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 10, template_var 0),
                 template_hole 6)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               t_empty))
           ))),
    ("Theory_Of_Lists.smap_bottom_iff",
     "(Theory_Of_Lists.smap$?f$?xs = \<bottom>) =
      (?xs = \<bottom> |
       (EX x:Theory_Of_Lists.sset ?xs. ?f$x = \<bottom>))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 1)),
           template_var 0),
         template_hole 8),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               t_empty))
           ))),
    ("Theory_Of_Lists.sconcatMap_bottom_iff",
     "(sconcatMap$?f$?xs = \<bottom>) =
      (?xs = \<bottom> |
       (EX x:Theory_Of_Lists.sset ?xs. ?f$x = \<bottom>))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 1)),
           template_var 0),
         template_hole 6),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               t_empty))
           ))),
    ("Theory_Of_Lists.match_snil_match_scons_slist_case",
     "match_snil$?xs$?k1.0 +++ match_scons$?xs$?k2.0 =
      slist_case$?k1.0$?k2.0$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 2)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_var 2))),
    ("Theory_Of_Lists.sinits_stake'",
     "sinits$?xs =
      Theory_Of_Lists.smap$(LAM i. Theory_Of_Lists.stake$i$?xs)$
      (supto$0$(slength$?xs))",
     template_equation
      (template_app
        (template_app (template_hole 14, template_hole 13), template_var 0),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_hole 10),
             template_app (template_hole 9, t_empty))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Theory_Of_Lists.stails_sdrop'",
     "stails$?xs =
      Theory_Of_Lists.smap$(LAM i. Theory_Of_Lists.sdrop$i$?xs)$
      (supto$0$(slength$?xs))",
     template_equation
      (template_app
        (template_app (template_hole 14, template_hole 13), template_var 0),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_hole 10),
             template_app (template_hole 9, t_empty))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Theory_Of_Lists.sinits_scons",
     "sinits$(?x :# ?xs) =
      [::] :# Theory_Of_Lists.smap$(?x:#)$(sinits$?xs)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_hole 9),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 1))),
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 0))))),
    ("Theory_Of_Lists.stake_numeral_scons",
     "?xs ~= \<bottom> ==> Theory_Of_Lists.stake$1$(?x :# ?xs) = [:?x:]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0)))),
    ("Theory_Of_Lists.stail_append2",
     "?xs ~= [::] ==> stail$(?xs :@ ?ys) = stail$?xs :@ ?ys",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1))),
           template_var 0)))),
    ("Theory_Of_Lists.snull_FF_conv",
     "(snull$?xxs = FF) = (EX x xs. ?xxs ~= \<bottom> & ?xxs = x :# xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_hole 10),
             template_var 0)),
         template_hole 9),
       template_app (template_hole 8, t_empty))),
    ("Theory_Of_Lists.sall_TT",
     "(sall$?p$?xs = TT) =
      (?xs ~= \<bottom> & (ALL x:Theory_Of_Lists.sset ?xs. ?p$x = TT))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 1)),
           template_var 0),
         template_hole 7),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               t_empty))
           ))),
    ("Theory_Of_Lists.prefix_sdrop_slength",
     "prefix$?xs$?ys = TT ==>
      ?xs :@ Theory_Of_Lists.sdrop$(slength$?xs)$?ys = ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 1)),
            template_var 0),
          template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1))),
             template_var 0)),
         template_var 0))),
    ("Theory_Of_Lists.slist_map_unfold",
     "slist_map$?a =
      slist_abs oo ssum_map$ID$(sprod_map$?a$(slist_map$?a)) oo slist_rep",
     template_equation
      (template_app
        (template_app (template_hole 16, template_hole 15), template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_hole 12),
             template_hole 11)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 16, template_hole 15),
                     template_var 0))))),
           template_hole 0)))),
    ("Theory_Of_Lists.sfilter_sfilter",
     "Theory_Of_Lists.sfilter$?p oo Theory_Of_Lists.sfilter$?q =
      Theory_Of_Lists.sfilter$(LAM x. ?q$x andalso ?p$x)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1))),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app (template_hole 6, template_hole 5),
         template_app (template_hole 4, t_empty)))),
    ("Theory_Of_Lists.prefix_slength_strengthen",
     "prefix$?xs$?ys =
      (le$(slength$?xs)$(slength$?ys) andalso prefix$?xs$?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1))),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 1)),
           template_var 0)))),
    ("Theory_Of_Lists.prefix_slength_eq",
     "eq$?xs$?ys = (eq$(slength$?xs)$(slength$?ys) andalso prefix$?xs$?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 1))),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Theory_Of_Lists.sfilter_sappend",
     "Theory_Of_Lists.sfilter$?p$(?xs :@ ?ys) =
      Theory_Of_Lists.sfilter$?p$?xs :@ Theory_Of_Lists.sfilter$?p$?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 2)),
           template_var 0)))),
    ("Theory_Of_Lists.smap_sappend",
     "Theory_Of_Lists.smap$?f$(?xs :@ ?ys) =
      Theory_Of_Lists.smap$?f$?xs :@ Theory_Of_Lists.smap$?f$?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 2)),
           template_var 0)))),
    ("Theory_Of_Lists.sconcatMap_sappend",
     "sconcatMap$?f$(?xs :@ ?ys) = sconcatMap$?f$?xs :@ sconcatMap$?f$?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 2)),
           template_var 0)))),
    ("Theory_Of_Lists.stake_numeral_scons",
     "Theory_Of_Lists.stake$(numeral (num.Bit0 ?k))$(?x :# ?xs) =
      ?x :# Theory_Of_Lists.stake$(numeral (Num.BitM ?k))$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 2)))),
           template_var 0)))),
    ("Theory_Of_Lists.stake_numeral_scons",
     "Theory_Of_Lists.stake$(numeral (num.Bit1 ?k))$(?x :# ?xs) =
      ?x :# Theory_Of_Lists.stake$(numeral (num.Bit0 ?k))$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 2)))),
           template_var 0)))),
    ("Theory_Of_Lists.sconcatMap_monad_laws",
     "sconcatMap$?g$(sconcatMap$?f$?xs) =
      sconcatMap$(LAM x. sconcatMap$?g$(?f$x))$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, t_empty))),
         template_var 0))),
    ("Theory_Of_Lists.sset_simp",
     "[| ?x ~= \<bottom>; ?xs ~= \<bottom> |]
      ==> Theory_Of_Lists.sset (?x :# ?xs) =
          insert ?x (Theory_Of_Lists.sset ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 4, template_var 0))))),
    ("Theory_Of_Lists.le_slength_plus",
     "[| ?xs ~= \<bottom>; ?n ~= \<bottom> |]
      ==> le$?n$(slength$?xs + ?n) = TT",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 10)),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_var 0)),
         template_hole 0))),
    ("Theory_Of_Lists.slength_supto",
     "slength$(supto$(MkI$?i)$(MkI$?j)) =
      MkI$(if ?j < ?i then 0 else ?j - ?i + 1)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_hole 11),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 1))),
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 0))),
       template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1)),
             template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_hole 0))))),
    ("Theory_Of_Lists.smap_smap",
     "?f$\<bottom> = \<bottom> ==>
      Theory_Of_Lists.smap$?f oo Theory_Of_Lists.smap$?g =
      Theory_Of_Lists.smap$(?f oo ?g)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 1),
            template_hole 14),
          template_hole 13)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 1))),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0))))),
    ("Theory_Of_Lists.stail_sappend",
     "stail$(?xs :@ ?ys) =
      (case ?xs of [::] => stail$?ys | z :# zs => zs :@ ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_var 0))),
             template_app (template_hole 1, t_empty))),
         template_var 1))),
    ("Theory_Of_Lists.sfilter_sfilter'",
     "Theory_Of_Lists.sfilter$?p$(Theory_Of_Lists.sfilter$?q$?xs) =
      Theory_Of_Lists.sfilter$(LAM x. ?q$x andalso ?p$x)$?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, t_empty))),
         template_var 0))),
    ("Theory_Of_Lists.stake_slength_plus_1",
     "Theory_Of_Lists.stake$(slength$?xs + 1)$(?y :# ?ys) =
      ?y :# Theory_Of_Lists.stake$(slength$?xs)$?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 2)),
               template_hole 2))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2))),
           template_var 0)))),
    ("Theory_Of_Lists.sdrop_numeral_scons",
     "?x ~= \<bottom> ==>
      Theory_Of_Lists.sdrop$(numeral (num.Bit0 ?k))$(?x :# ?xs) =
      Theory_Of_Lists.sdrop$(numeral (Num.BitM ?k))$?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1)))),
           template_var 0)))),
    ("Theory_Of_Lists.sdrop_numeral_scons",
     "?x ~= \<bottom> ==>
      Theory_Of_Lists.sdrop$(numeral (num.Bit1 ?k))$(?x :# ?xs) =
      Theory_Of_Lists.sdrop$(numeral (num.Bit0 ?k))$?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1)))),
           template_var 0)))),
    ("Theory_Of_Lists.same_prefix_prefix",
     "?xs ~= \<bottom> ==>
      prefix$(?xs :@ ?ys)$(?xs :@ ?zs) = prefix$?ys$?zs",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)))),
    ("Theory_Of_Lists.smap_smap'",
     "?f$\<bottom> = \<bottom> ==>
      Theory_Of_Lists.smap$?f$(Theory_Of_Lists.smap$?g$?xs) =
      Theory_Of_Lists.smap$(?f oo ?g)$?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 2),
            template_hole 14),
          template_hole 13)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 2)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_var 1))),
           template_var 0)))),
    ("Theory_Of_Lists.prefix_sdrop_prefix_eq",
     "prefix$?xs$?ys = TT ==>
      eq$(Theory_Of_Lists.sdrop$(slength$?xs)$?ys)$[::] = eq$?ys$?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_var 1)),
            template_var 0),
          template_hole 7)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 6),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1))),
                 template_var 0))),
           template_hole 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 6),
               template_var 0)),
           template_var 1)))),
    ("Theory_Of_Lists.slengthE",
     "[| ?xs ~= \<bottom>; !!n. [| slength$?xs = MkI$n; 0 <= n |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Theory_Of_Lists.elem_FF",
     "(selem$?x$?xs = FF) =
      (?xs = [::] |
       ?x ~= \<bottom> &
       ?xs ~= \<bottom> & ?x ~: Theory_Of_Lists.sset ?xs)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_var 1)),
           template_var 0),
         template_hole 10),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_hole 7)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 8, template_var 0),
                       template_hole 2))),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_hole 0, template_var 0))))))
           ))),
    ("Theory_Of_Lists.sdrop_sappend",
     "Theory_Of_Lists.sdrop$?i$(?xs :@ ?ys) =
      Theory_Of_Lists.sdrop$?i$?xs :@
      Theory_Of_Lists.sdrop$(?i - slength$?xs)$?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)))),
           template_var 0)))),
    ("Theory_Of_Lists.stake_append",
     "Theory_Of_Lists.stake$?i$(?xs :@ ?ys) =
      Theory_Of_Lists.stake$?i$?xs :@
      Theory_Of_Lists.stake$(?i - slength$?xs)$?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)))),
           template_var 0)))),
    ("Theory_Of_Lists.sconcatMap_scons",
     "?x ~= \<bottom> ==>
      sconcatMap$?f$(?x :# ?xs) = ?f$?x :@ sconcatMap$?f$?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 11))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 1)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 1)),
             template_var 0))))),
    ("Theory_Of_Lists.sdrop_slength_plus_1",
     "?y ~= \<bottom> ==>
      Theory_Of_Lists.sdrop$(slength$?xs + 1)$(?y :# ?ys) =
      Theory_Of_Lists.sdrop$(slength$?xs)$?ys",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_var 1)),
                 template_hole 2))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1))),
           template_var 0)))),
    ("Theory_Of_Lists.slength_smap",
     "(!!x. x ~= \<bottom> ==> ?f$x ~= \<bottom>) ==>
      slength$(Theory_Of_Lists.smap$?f$?xs) = slength$?xs",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Theory_Of_Lists.sset_supto",
     "Theory_Of_Lists.sset (supto$(MkI$?i)$(MkI$?j)) =
      {MkI$k |k. ?i <= k & k <= ?j}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1))),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("Theory_Of_Lists.smap_strict_scons",
     "?f$\<bottom> = \<bottom> ==>
      Theory_Of_Lists.smap$?f$(?x :# ?xs) =
      ?f$?x :# Theory_Of_Lists.smap$?f$?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 2),
            template_hole 11),
          template_hole 10)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app (template_hole 12, template_var 2),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_var 0))))),
    ("Theory_Of_Lists.slist_case_distr",
     "slist_case$?g'$?h'$?xs$?z =
      (case ?xs of [::] => ?g'$?z | x :# xs => ?h'$x$xs$?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 3)),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 11, template_var 3),
                   template_var 0))),
             template_app (template_hole 2, t_empty))),
         template_var 1))),
    ("Theory_Of_Lists.slist_eq_FF_snil",
     "(eq$[::]$?xs = FF) =
      (EX y ys. y ~= \<bottom> & ys ~= \<bottom> & ?xs = y :# ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_hole 12)),
             template_var 0)),
         template_hole 11),
       template_app (template_hole 10, t_empty))),
    ("Theory_Of_Lists.slist_eq_FF_snil",
     "(eq$?xs$[::] = FF) =
      (EX y ys. y ~= \<bottom> & ys ~= \<bottom> & ?xs = y :# ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_var 0)),
             template_hole 12)),
         template_hole 11),
       template_app (template_hole 10, t_empty))),
    ("Theory_Of_Lists.selem_sappend",
     "?ys ~= \<bottom> ==>
      selem$?x$(?xs :@ ?ys) = (selem$?x$?xs orelse selem$?x$?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 1)),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 1)),
             template_var 2))))),
    ("Theory_Of_Lists.slistmem_scons",
     "slistmem ?x (?y :# ?ys) =
      (?x = ?y & ?x ~= \<bottom> & ?ys ~= \<bottom> |
       slistmem ?x ?ys & ?y ~= \<bottom>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_hole 7),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         template_hole 2))),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_var 0)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 2))))
           ))),
    ("Theory_Of_Lists.take_MkI_scons",
     "0 < ?n ==>
      Theory_Of_Lists.stake$(MkI$?n)$(?x :# ?xs) =
      ?x :# Theory_Of_Lists.stake$(MkI$(?n - 1))$?xs",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)))),
             template_var 0))))),
    ("Theory_Of_Lists.sfilter_smap",
     "?p$\<bottom> = \<bottom> ==>
      Theory_Of_Lists.sfilter$?p oo Theory_Of_Lists.smap$?f =
      Theory_Of_Lists.smap$?f oo Theory_Of_Lists.sfilter$(?p oo ?f)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 18, template_var 1),
            template_hole 17),
          template_hole 16)],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_hole 12),
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_var 1))),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_var 0))),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 0)))))),
    ("Theory_Of_Lists.sfilter_smap'",
     "?p$\<bottom> = \<bottom> ==>
      Theory_Of_Lists.sfilter$?p$(Theory_Of_Lists.smap$?f$?xs) =
      Theory_Of_Lists.smap$?f$(Theory_Of_Lists.sfilter$(?p oo ?f)$?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 2),
            template_hole 14),
          template_hole 13)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 2)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 2)),
                   template_var 1))),
             template_var 0))))),
    ("Theory_Of_Lists.stake_scons",
     "le$1$?i = TT ==>
      Theory_Of_Lists.stake$?i$(?x :# ?xs) =
      ?x :# Theory_Of_Lists.stake$(?i - 1)$?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8)),
            template_var 2),
          template_hole 7)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_hole 8))),
             template_var 0))))),
    ("Theory_Of_Lists.prefix_singleton_TT",
     "(prefix$[:?x:]$?ys = TT) =
      (?x ~= \<bottom> & (EX zs. zs ~= \<bottom> & ?ys = ?x :# zs))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_hole 12),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_var 1)),
                 template_hole 8))),
           template_var 0),
         template_hole 7),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3))),
             template_app (template_hole 2, t_empty))
           ))),
    ("Theory_Of_Lists.scons_prefix_scons",
     "(prefix$(?x :# ?xs)$(?y :# ?ys) = TT) =
      (eq$?x$?y = TT & prefix$?xs$?ys = TT)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_var 3)),
                 template_var 2))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1)),
             template_var 0)),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_var 3)),
                     template_var 1)),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_var 2)),
                   template_var 0)),
               template_hole 4))
           ))),
    ("Theory_Of_Lists.sinits_snoc",
     "sinits$(?xs :@ [:?x:]) = sinits$?xs :@ [:?xs :@ [:?x:]:]",
     template_equation
      (template_app
        (template_app (template_hole 13, template_hole 12),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 1)),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 0)),
             template_hole 6))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 13, template_hole 12),
               template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_var 0)),
                   template_hole 6)))),
           template_hole 0)))),
    ("Theory_Of_Lists.supto_simp",
     "?i <= ?j ==>
      supto$(MkI$?i)$(MkI$?j) = MkI$?i :# supto$(MkI$?i + 1)$(MkI$?j)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1))),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_var 1)),
                   template_hole 0))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0)))))),
    ("Theory_Of_Lists.sfoldl_sappend",
     "?f$\<bottom> = \<bottom> ==>
      sfoldl$?f$?z$(?xs :@ ?ys) = sfoldl$?f$(sfoldl$?f$?z$?xs)$?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_hole 9),
          template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 3)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_var 3)),
                     template_var 2)),
                 template_var 1))),
           template_var 0)))),
    ("Theory_Of_Lists.sdrop_pos",
     "le$?i$0 = FF ==>
      Theory_Of_Lists.sdrop$?i$?xs =
      (case ?xs of [::] => [::]
       | y :# ys => Theory_Of_Lists.sdrop$(?i - 1)$ys)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_var 1)),
            template_hole 13),
          template_hole 12)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_hole 4)),
               template_app (template_hole 3, t_empty))),
           template_var 0)))),
    ("Theory_Of_Lists.sinits_foldr'",
     "sinits$?xs =
      sfoldr$(LAM x xs. [:[::]:] :@ Theory_Of_Lists.smap$(x:#)$xs)$[:[::]:]$
      ?xs",
     template_equation
      (template_app
        (template_app (template_hole 17, template_hole 16), template_var 0),
       template_app
        (template_app
          (template_hole 17,
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_app (template_hole 12, t_empty))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_hole 5)),
               template_hole 4))),
         template_var 0))),
    ("Theory_Of_Lists.smap_cong",
     "[| ?xs = ?xs'; !!x. x : Theory_Of_Lists.sset ?xs ==> ?f$x = ?f'$x |]
      ==> Theory_Of_Lists.smap$?f$?xs = Theory_Of_Lists.smap$?f'$?xs'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 2)))),
    ("Theory_Of_Lists.sfilter_cong",
     "[| ?xs = ?xs'; !!x. x : Theory_Of_Lists.sset ?xs ==> ?p$x = ?p'$x |]
      ==> Theory_Of_Lists.sfilter$?p$?xs =
          Theory_Of_Lists.sfilter$?p'$?xs'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 2)))),
    ("Theory_Of_Lists.sdrop_not_snilD",
     "[| Theory_Of_Lists.sdrop$(MkI$?i)$?xs ~= [::]; ?xs ~= \<bottom> |]
      ==> lt$(MkI$?i)$(slength$?xs) = TT & ?xs ~= [::]",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_hole 12),
                    template_app
                     (template_app (template_hole 11, template_hole 10),
                      template_var 1))),
                template_var 0),
              template_hole 9)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_app
                          (template_app
                            (template_hole 11, template_hole 10),
                           template_var 1))),
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 0))),
                 template_hole 0)),
             template_app
              (template_hole 16,
               template_app
                (template_app (template_hole 15, template_var 0),
                 template_hole 9)))
           ))),
    ("Theory_Of_Lists.sset_below",
     "[| ?y : Theory_Of_Lists.sset ?ys; ?xs << ?ys; ?xs ~= \<bottom>;
         !!x. [| x : Theory_Of_Lists.sset ?xs; x << ?y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Theory_Of_Lists.supto_snoc",
     "?i <= ?j ==>
      supto$(MkI$?i)$(MkI$?j) = supto$(MkI$?i)$(MkI$?j - 1) :@ [:MkI$?j:]",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, template_hole 10),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_var 1))),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_var 0)),
                   template_hole 3)))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_var 0))),
             template_hole 0))))),
    ("Theory_Of_Lists.slist_case_distr",
     "?f$\<bottom> = \<bottom> ==>
      ?f$(slist_case$?g$?h$?xs) =
      (case ?xs of [::] => ?f$?g | x :# xs => ?f$(?h$x$xs))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 3),
            template_hole 12),
          template_hole 11)],
       template_equation
        (template_app
          (template_app (template_hole 13, template_var 3),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 13, template_var 3),
                     template_var 2))),
               template_app (template_hole 2, t_empty))),
           template_var 0)))),
    ("Theory_Of_Lists.sfoldr_conv_sfoldl",
     "(!!x. ?f$x$\<bottom> = \<bottom>) ==>
      sfoldr$?f$?z$?xs = sfoldl$(LAM acc x. ?f$x$acc)$?z$(srev$?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, t_empty))),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Theory_Of_Lists.shead_smap_distr",
     "[| ?f$\<bottom> = \<bottom>;
         !!x. x : Theory_Of_Lists.sset ?xs ==> ?f$x ~= \<bottom> |]
      ==> shead$(Theory_Of_Lists.smap$?f$?xs) = ?f$(shead$?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 1),
            template_hole 12),
          template_hole 11),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 13, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Theory_Of_Lists.slength_sdrop",
     "slength$(Theory_Of_Lists.sdrop$?i$?xs) =
      If le$?i$0 then slength$?xs
      else If le$(slength$?xs)$?i then 0 else slength$?xs - ?i",
     template_equation
      (template_app
        (template_app (template_hole 13, template_hole 12),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 13, template_hole 12),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_hole 4)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 13, template_hole 12),
                         template_var 0)),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_app
                      (template_app (template_hole 13, template_hole 12),
                       template_var 0))),
                 template_var 1)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_hole 4)))),
    ("Theory_Of_Lists.stails_snoc",
     "stails$(?xs :@ [:?x:]) =
      Theory_Of_Lists.smap$(LAM ys. ys :@ [:?x:])$(stails$?xs) :@ [:[::]:]",
     template_equation
      (template_app
        (template_app (template_hole 16, template_hole 15),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_hole 12),
               template_var 1)),
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_var 0)),
             template_hole 9))),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, t_empty))),
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_var 1)))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 9)),
           template_hole 0)))),
    ("Theory_Of_Lists.sfilter_scons_let",
     "?p$\<bottom> = \<bottom> ==>
      Theory_Of_Lists.sfilter$?p$(?x :# ?xs) =
      (let xs' = Theory_Of_Lists.sfilter$?p$?xs
       in If ?p$?x then ?x :# xs' else xs')",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 2),
            template_hole 12),
          template_hole 11)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 2)),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_var 2)),
               template_var 0)),
           t_empty)))),
    ("Theory_Of_Lists.sset_smap",
     "(!!x. x : Theory_Of_Lists.sset ?xs ==> ?f$x ~= \<bottom>) ==>
      Theory_Of_Lists.sset (Theory_Of_Lists.smap$?f$?xs) =
      {?f$x |x. x : Theory_Of_Lists.sset ?xs}",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 0)),
             template_var 1)),
         template_app (template_hole 2, t_empty)))),
    ("Theory_Of_Lists.sfilter_strict_scons",
     "?p$\<bottom> = \<bottom> ==>
      Theory_Of_Lists.sfilter$?p$(?x :# ?xs) =
      If ?p$?x then ?x :# Theory_Of_Lists.sfilter$?p$?xs
      else Theory_Of_Lists.sfilter$?p$?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 2),
            template_hole 11),
          template_hole 10)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 2)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 5, template_hole 4),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 7, template_hole 6),
                           template_var 2)),
                       template_var 0)))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 2)),
                 template_var 0))),
           template_app
            (template_app (template_hole 12, template_var 2),
             template_var 1))))),
    ("Theory_Of_Lists.stails_sfoldl'",
     "stails$?xs =
      sfoldl$
      (LAM xs x. Theory_Of_Lists.smap$(LAM ys. ys :@ [:x:])$xs :@ [:[::]:])$
      [:[::]:]$
      ?xs",
     template_equation
      (template_app
        (template_app (template_hole 21, template_hole 20), template_var 0),
       template_app
        (template_app
          (template_hole 21,
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app (template_hole 18, template_hole 17),
                 template_app (template_hole 16, t_empty))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 3)),
               template_hole 0))),
         template_var 0))),
    ("Theory_Of_Lists.sset_sfilter",
     "(!!x. x : Theory_Of_Lists.sset ?xs ==> ?p$x ~= \<bottom>) ==>
      Theory_Of_Lists.sset (Theory_Of_Lists.sfilter$?p$?xs) =
      {x |x. x : Theory_Of_Lists.sset ?xs & ?p$x = TT}",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_equation
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 0)),
             template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Theory_Of_Lists.srev_induct",
     "[| ?P \<bottom>; ?P [::];
         !!x xs.
            [| x ~= \<bottom>; xs ~= \<bottom>; ?P xs |]
            ==> ?P (xs :@ [:x:]) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate
         (template_app (template_var 1, template_hole 12)),
        template_predicate
         (template_app (template_var 1, template_hole 11)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Theory_Of_Lists.supto_split2",
     "[| ?i <= ?j; ?j <= ?k |]
      ==> supto$(MkI$?i)$(MkI$?k) =
          supto$(MkI$?i)$(MkI$?j) :@ supto$(MkI$(?j + 1))$(MkI$?k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 2))),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_var 2))),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0)))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0)))))),
    ("Theory_Of_Lists.supto_split1",
     "[| ?i <= ?j; ?j <= ?k |]
      ==> supto$(MkI$?i)$(MkI$?k) =
          supto$(MkI$?i)$(MkI$(?j - 1)) :@ supto$(MkI$?j)$(MkI$?k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 2))),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_var 2))),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0))))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 1))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0)))))),
    ("Theory_Of_Lists.prefix_singleton_FF",
     "(prefix$[:?x:]$?ys = FF) =
      (?x ~= \<bottom> &
       (?ys = [::] |
        (EX z zs.
            z ~= \<bottom> & zs ~= \<bottom> & ?ys = z :# zs & ?x ~= z)))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app (template_hole 15, template_hole 14),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 12, template_hole 11),
                     template_var 1)),
                 template_hole 10))),
           template_var 0),
         template_hole 9),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 5))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 10)),
               template_app (template_hole 2, t_empty)))
           ))),
    ("Theory_Of_Lists.sfoldl_cong",
     "[| ?xs = ?xs'; ?z = ?z';
         !!x z. x : Theory_Of_Lists.sset ?xs ==> ?f$z$x = ?f'$z$x |]
      ==> sfoldl$?f$?z$?xs = sfoldl$?f'$?z'$?xs'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 3)),
           template_var 5),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               template_var 2)),
           template_var 4)))),
    ("Theory_Of_Lists.sscanl_cong",
     "[| ?xs = ?xs'; ?z = ?z';
         !!x z. x : Theory_Of_Lists.sset ?xs ==> ?f$z$x = ?f'$z$x |]
      ==> sscanl$?f$?z$?xs = sscanl$?f'$?z'$?xs'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 3)),
           template_var 5),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               template_var 2)),
           template_var 4)))),
    ("Theory_Of_Lists.srev_cases",
     "[| ?xs = \<bottom> ==> ?P; ?xs = [::] ==> ?P;
         !!y ys.
            [| y ~= \<bottom>; ys ~= \<bottom>; ?xs = ys :@ [:y:] |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 11)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 10)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Theory_Of_Lists.slist_case_snoc",
     "?g$\<bottom>$\<bottom> = \<bottom> ==>
      slist_case$?f$?g$(?xs :@ [:?x:]) =
      ?g$(shead$(?xs :@ [:?x:]))$(stail$(?xs :@ [:?x:]))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 3),
                template_hole 14)),
            template_hole 13),
          template_hole 12)],
       template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_var 2)),
               template_var 3)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 0)),
               template_hole 3))),
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app (template_hole 15, template_var 3),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 5, template_hole 4),
                         template_var 0)),
                     template_hole 3))))),
           template_app
            (template_app (template_hole 8, template_hole 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 0)),
                 template_hole 3))))))),
    ("Theory_Of_Lists.supto_split3",
     "[| ?i <= ?j; ?j <= ?k |]
      ==> supto$(MkI$?i)$(MkI$?k) =
          supto$(MkI$?i)$(MkI$(?j - 1)) :@
          MkI$?j :# supto$(MkI$(?j + 1))$(MkI$?k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, template_hole 10),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_var 2))),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_var 2))),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3))))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_hole 3)))),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_var 0))))))),
    ("Theory_Of_Lists.sscanl_lfp_fusion",
     "[| ?g$\<bottom> = \<bottom>;
         !!acc x. x ~= \<bottom> ==> ?g$(?f$acc$x) = ?f'$(?g$acc)$x |]
      ==> Theory_Of_Lists.smap$?g oo sscanl$?f$?z = sscanl$?f'$(?g$?z)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 23, template_var 3),
            template_hole 22),
          template_hole 21),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 3))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_app
            (template_app (template_hole 23, template_var 3),
             template_var 0))))),
    ("Theory_Of_Lists.sscanl_lfp_fusion'",
     "[| ?g$\<bottom> = \<bottom>;
         !!acc x. x ~= \<bottom> ==> ?g$(?f$acc$x) = ?f'$(?g$acc)$x |]
      ==> Theory_Of_Lists.smap$?g$(sscanl$?f$?z$?xs) =
          sscanl$?f'$(?g$?z)$?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 23, template_var 4),
            template_hole 22),
          template_hole 21),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 4)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 3)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 23, template_var 4),
                 template_var 1))),
           template_var 0)))),
    ("Theory_Of_Lists.sscanl_ww_fusion",
     "[| ?wrap oo ?unwrap = ID;
         !!z x.
            x ~= \<bottom> ==>
            ?unwrap$(?f$(?wrap$z)$x) = ?f'$(?unwrap$(?wrap$z))$x |]
      ==> sscanl$?f$?z =
          Theory_Of_Lists.smap$?wrap oo sscanl$?f'$(?unwrap$?z)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 27,
              template_app
               (template_app (template_hole 26, template_hole 25),
                template_var 4)),
            template_var 3),
          template_hole 24),
        template_predicate (template_app (template_hole 23, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 4))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 17, template_var 3),
               template_var 0)))))),
    ("Theory_Of_Lists.sscanl_ww_fusion'",
     "[| ?wrap oo ?unwrap = ID;
         !!z x.
            x ~= \<bottom> ==>
            ?unwrap$(?f$(?wrap$z)$x) = ?f'$(?unwrap$(?wrap$z))$x |]
      ==> sscanl$?f$?z$?xs =
          Theory_Of_Lists.smap$?wrap$(sscanl$?f'$(?unwrap$?z)$?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 27,
              template_app
               (template_app (template_hole 26, template_hole 25),
                template_var 5)),
            template_var 4),
          template_hole 24),
        template_predicate (template_app (template_hole 23, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_var 3)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 5)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 17, template_var 4),
                   template_var 1))),
             template_var 0))))),
    ("Theory_Of_Lists.slist_case_cong",
     "[| ?xs = ?xs'; ?xs' = [::] ==> ?n = ?n';
         !!y ys.
            [| ?xs' = y :# ys; y ~= \<bottom>; ys ~= \<bottom> |]
            ==> ?c y ys = ?c' y ys;
         cont (%(x, y). ?c x y); cont (%(x, y). ?c' x y) |]
      ==> (case ?xs of [::] => ?n | x :# xs => ?c x xs) =
          (case ?xs' of [::] => ?n' | x :# xs => ?c' x xs)",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_implication
         ([template_equation (template_var 4, template_hole 18)],
          template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 7, template_app (template_hole 6, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 7, template_app (template_hole 6, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 3)),
               template_app (template_hole 1, t_empty))),
           template_var 5),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 2)),
               template_app (template_hole 1, t_empty))),
           template_var 4))))]
