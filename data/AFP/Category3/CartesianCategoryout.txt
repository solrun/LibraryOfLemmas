Loading theory "Draft.Category" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.FreeCategory")
Loading theory "Draft.Templates" (required by "Draft.CartesianCategoryTemplates" via "Draft.ExtrEqs")
locale partial_magma
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "partial_magma (\<cdot>)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.167s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CartesianCategoryTemplates")
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Draft.Category"
### 0.237s elapsed time, 0.493s cpu time, 0.030s GC time
Loading theory "Draft.ConcreteCategory" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.FreeCategory")
Loading theory "Draft.DiscreteCategory" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit")
Loading theory "Draft.DualCategory" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda")
locale discrete_category
  fixes Obj :: "'a set"
    and Null :: "'a"
  assumes "discrete_category Obj Null"
locale concrete_category
  fixes Obj :: "'o set"
    and Hom :: "'o => 'o => 'a set"
    and Id :: "'o => 'a"
    and Comp :: "'o => 'o => 'o => 'a => 'a => 'a"
  assumes "concrete_category Obj Hom Id Comp"
locale dual_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "dual_category (\<cdot>)"
locale discrete_category
  fixes Obj :: "'a set"
    and Null :: "'a"
  assumes "discrete_category Obj Null"
### theory "Draft.DiscreteCategory"
### 0.145s elapsed time, 0.538s cpu time, 0.070s GC time
Loading theory "Draft.EpiMonoIso" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda" via "Draft.SetCat" via "Draft.SetCategory" via "Draft.Functor" via "Draft.InitialTerminal")
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale dual_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "dual_category (\<cdot>)"
### theory "Draft.DualCategory"
### 0.204s elapsed time, 0.767s cpu time, 0.070s GC time
### theory "Draft.EpiMonoIso"
### 0.215s elapsed time, 0.697s cpu time, 0.085s GC time
Loading theory "Draft.InitialTerminal" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda" via "Draft.SetCat" via "Draft.SetCategory" via "Draft.Functor")
Loading theory "Draft.ProductCategory" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda" via "Draft.FunctorCategory" via "Draft.BinaryFunctor")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.578s elapsed time, 1.746s cpu time, 0.185s GC time
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Draft.InitialTerminal"
### 0.103s elapsed time, 0.351s cpu time, 0.000s GC time
locale product_category
  fixes
    C1 :: "'a1 => 'a1 => 'a1"  (infixr \<open>\<cdot>\<^sub>1\<close> 55)
    and
    C2 :: "'a2 => 'a2 => 'a2"  (infixr \<open>\<cdot>\<^sub>2\<close> 55)
  assumes "product_category (\<cdot>\<^sub>1) (\<cdot>\<^sub>2)"
### theory "Draft.ProductCategory"
### 0.285s elapsed time, 0.727s cpu time, 0.080s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.ConcreteCategory"
### 1.031s elapsed time, 2.400s cpu time, 0.284s GC time
Loading theory "Draft.FreeCategory" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit")
Loading theory "Draft.Functor" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda" via "Draft.SetCat" via "Draft.SetCategory")
locale graph
  fixes Obj :: "'obj set"
    and Arr :: "'arr set"
    and Dom :: "'arr => 'obj"
    and Cod :: "'arr => 'obj"
  assumes "graph Obj Arr Dom Cod"
locale free_category
  fixes Obj :: "'obj set"
    and Arr :: "'arr set"
    and D :: "'arr => 'obj"
    and C :: "'arr => 'obj"
  assumes "free_category Obj Arr D C"
locale discrete_category
  fixes Obj :: "'obj set"
locale functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes "functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale endofunctor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and F :: "'a => 'a"
  assumes "endofunctor (\<cdot>) F"
locale faithful_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "faithful_functor A B F"
locale full_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "full_functor A B F"
locale fully_faithful_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "fully_faithful_functor A B F"
locale embedding_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "embedding_functor A B F"
locale empty_category
locale quiver
  fixes Arr :: "'arr set"
locale embedding_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "embedding_functor A B F"
locale full_embedding_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "full_embedding_functor A B F"
locale essentially_surjective_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes
    "essentially_surjective_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale constant_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and b :: "'b"
  assumes "constant_functor A B b"
locale identity_functor
  fixes C :: "'a => 'a => 'a"
  assumes "identity_functor C"
locale composite_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and C :: "'c => 'c => 'c"
    and F :: "'a => 'b"
    and G :: "'b => 'c"
  assumes "composite_functor A B C F G"
locale inverse_functors
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'b => 'a"
    and G :: "'a => 'b"
  assumes "inverse_functors (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G"
locale parallel_pair
### theory "Draft.FreeCategory"
### 1.869s elapsed time, 4.059s cpu time, 1.179s GC time
locale isomorphic_categories
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "isomorphic_categories (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale invertible_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and G :: "'a => 'b"
  assumes "invertible_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) G"
locale dual_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes "dual_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Draft.Functor"
### 2.899s elapsed time, 5.151s cpu time, 1.297s GC time
Loading theory "Draft.NaturalTransformation" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda" via "Draft.FunctorCategory" via "Draft.BinaryFunctor")
Loading theory "Draft.SetCategory" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda" via "Draft.SetCat")
locale natural_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "natural_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>"
locale set_category_data
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and img :: "'s => 's"
  assumes "set_category_data (\<cdot>)"
locale transformation_by_components
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and t :: "'a => 'b"
  assumes
    "transformation_by_components (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G t"
locale set_category_given_img
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and img :: "'s => 's"
    and \<AA> :: "('t * 't) set"
  assumes "set_category_given_img (\<cdot>) img \<AA>"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale constant_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and g :: "'b"
  assumes "constant_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) g"
locale replete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
  assumes "replete_set_category (\<cdot>)"
locale constant_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and g :: "'b"
  assumes "constant_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) g"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale vertical_composite
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and H :: "'a => 'b"
    and \<sigma> :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "vertical_composite (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G H \<sigma>
      \<tau>"
locale two_set_categories_bij_betw_Univ
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and S' :: "'t => 't => 't"  (infixr \<open>\<cdot>\<acute>\<close> 55)
    and \<AA> :: "('u * 'u) set"
    and \<phi> :: "'s => 't"
  assumes
    "two_set_categories_bij_betw_Univ (\<cdot>) (\<cdot>\<acute>) \<AA>
      \<phi>"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale natural_isomorphism
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "natural_isomorphism (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>"
locale inverse_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "inverse_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>"
locale concrete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<AA> :: "('t * 't) set"
    and U :: "'a set"
    and \<iota> :: "'a => 's"
  assumes "concrete_set_category (\<cdot>\<^sub>S) \<AA> U \<iota>"
locale replete_concrete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and U :: "'a set"
    and \<iota> :: "'a => 's"
  assumes "replete_concrete_set_category (\<cdot>\<^sub>S) U \<iota>"
### theory "Draft.SetCategory"
### 1.435s elapsed time, 2.942s cpu time, 0.343s GC time
Loading theory "Draft.SetCat" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda")
locale setcat
  fixes dummy :: "'e"
    and \<AA> :: "('a * 'a) set"
  assumes "setcat \<AA>"
locale inverse_transformations
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
    and \<tau>' :: "'a => 'b"
  assumes
    "inverse_transformations (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>
      \<tau>'"
### theory "Draft.NaturalTransformation"
### 1.665s elapsed time, 3.405s cpu time, 0.386s GC time
Loading theory "Draft.BinaryFunctor" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda" via "Draft.FunctorCategory")
locale binary_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "binary_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
locale replete_setcat
  fixes dummy :: "'e"
locale product_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and
    B1 :: "'b1 => 'b1 => 'b1"
      (infixr \<open>\<cdot>\<^sub>B\<^sub>1\<close> 55)
    and
    B2 :: "'b2 => 'b2 => 'b2"
      (infixr \<open>\<cdot>\<^sub>B\<^sub>2\<close> 55)
    and F1 :: "'a1 => 'b1"
    and F2 :: "'a2 => 'b2"
  assumes
    "product_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B\<^sub>1) (\<cdot>\<^sub>B\<^sub>2) F1 F2"
locale symmetry_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
  assumes
    "symmetry_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)"
### theory "Draft.SetCat"
### 2.048s elapsed time, 4.175s cpu time, 0.520s GC time
locale binary_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "binary_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
locale binary_functor_transformation
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
    and G :: "'a1 * 'a2 => 'b"
    and \<tau> :: "'a1 * 'a2 => 'b"
  assumes
    "binary_functor_transformation (\<cdot>\<^sub>A\<^sub>1)
      (\<cdot>\<^sub>A\<^sub>2) (\<cdot>\<^sub>B) F G \<tau>"
### theory "Draft.BinaryFunctor"
### 2.384s elapsed time, 4.336s cpu time, 0.555s GC time
Loading theory "Draft.FunctorCategory" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction" via "Draft.Yoneda")
locale functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale evaluation_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "evaluation_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale currying
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes
    "currying (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B)"
locale curried_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "curried_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
locale curried_functor'
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "curried_functor' (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
### theory "Draft.FunctorCategory"
### 5.869s elapsed time, 7.156s cpu time, 1.957s GC time
Loading theory "Draft.Yoneda" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit" via "Draft.Adjunction")
locale hom_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "hom_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
locale hom_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "hom_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale set_valued_functor
  fixes C :: "'c => 'c => 'c"
    and S :: "'s => 's => 's"
    and F :: "'c => 's"
  assumes "set_valued_functor C S F"
locale set_valued_transformation
  fixes C :: "'c => 'c => 'c"
    and S :: "'s => 's => 's"
    and F :: "'c => 's"
    and G :: "'c => 's"
    and \<tau> :: "'c => 's"
  assumes "set_valued_transformation C S F G \<tau>"
locale yoneda_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "yoneda_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
locale yoneda_functor_fixed_object
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and a :: "'c"
  assumes "yoneda_functor_fixed_object (\<cdot>) (\<cdot>\<^sub>S) \<phi> a"
locale yoneda_lemma
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
  assumes "yoneda_lemma (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a"
locale yoneda_lemma_fixed_e
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and e :: "'s"
  assumes "yoneda_lemma_fixed_e (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a e"
locale yoneda_lemma_fixed_\<tau>
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and \<tau> :: "'c => 's"
  assumes
    "yoneda_lemma_fixed_\<tau> (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a
      \<tau>"
locale yoneda_lemma
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
  assumes "yoneda_lemma (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a"
locale yoneda_lemma_for_hom
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and a' :: "'c"
  assumes "yoneda_lemma_for_hom (\<cdot>) (\<cdot>\<^sub>S) \<phi> a a'"
locale yoneda_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "yoneda_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
### theory "Draft.Yoneda"
### 10.783s elapsed time, 12.857s cpu time, 3.272s GC time
Loading theory "Draft.Adjunction" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory" via "Draft.Limit")
locale arrow_from_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
    and x :: "'d"
    and y :: "'c"
    and e :: "'c"
  assumes "arrow_from_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F x y e"
locale terminal_arrow_from_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
    and x :: "'d"
    and y :: "'c"
    and e :: "'c"
  assumes
    "terminal_arrow_from_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F x y
      e"
locale left_adjoint_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
  assumes "left_adjoint_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F"
locale arrow_to_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
    and x :: "'d"
    and y :: "'c"
    and e :: "'d"
  assumes "arrow_to_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G x y e"
locale initial_arrow_to_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
    and x :: "'d"
    and y :: "'c"
    and e :: "'d"
  assumes
    "initial_arrow_to_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G x y e"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale hom_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "hom_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<Phi> \<Psi>"
locale unit_counit_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "unit_counit_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<phi> \<psi> \<eta> \<epsilon> \<Phi> \<Psi>"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale unit_counit_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "unit_counit_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale left_adjoint_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
  assumes "left_adjoint_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale hom_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "hom_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<Phi> \<Psi>"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale unit_counit_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "unit_counit_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale hom_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "hom_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<Phi> \<Psi>"
locale left_adjoint_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
  assumes "left_adjoint_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale inverse_functors
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'b => 'a"
    and G :: "'a => 'b"
  assumes "inverse_functors (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G"
locale composite_adjunction
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'b => 'a"
    and G :: "'a => 'b"
    and F' :: "'c => 'b"
    and G' :: "'b => 'c"
    and \<phi> :: "'b => 'a => 'b"
    and \<psi> :: "'a => 'b => 'a"
    and \<phi>' :: "'c => 'b => 'c"
    and \<psi>' :: "'b => 'c => 'b"
  assumes
    "composite_adjunction (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)
      (\<cdot>\<^sub>C) F G F' G' \<phi> \<psi> \<phi>' \<psi>'"
### theory "Draft.Adjunction"
### 22.918s elapsed time, 27.951s cpu time, 8.115s GC time
Loading theory "Draft.Limit" (required by "Draft.CartesianCategoryTemplates" via "Draft.CartesianCategory")
locale representation_of_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
  assumes
    "representation_of_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a
      \<Phi>"
locale two_representations_one_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and F :: "'c => 's"
    and \<phi> :: "'c * 'c => 'c => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
    and a' :: "'c"
    and \<Phi>' :: "'c => 's"
  assumes
    "two_representations_one_functor (\<cdot>) (\<cdot>\<^sub>S) F \<phi> a
      \<Phi> a' \<Phi>'"
locale diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale cone
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and a :: "'c"
    and \<chi> :: "'j => 'c"
  assumes "Limit.cone (\<cdot>\<^sub>J) (\<cdot>) D a \<chi>"
locale functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes "functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale cones_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<iota> :: "('j => 'c) => 's"
  assumes
    "cones_functor (\<cdot>\<^sub>J) (\<cdot>) D (\<cdot>\<^sub>S) \<iota>"
locale limit_cone
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and a :: "'c"
    and \<chi> :: "'j => 'c"
  assumes "limit_cone (\<cdot>\<^sub>J) (\<cdot>) D a \<chi>"
locale diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale representation_of_cones_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and \<iota> :: "('j => 'c) => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
  assumes
    "representation_of_cones_functor (\<cdot>\<^sub>J) (\<cdot>) D
      (\<cdot>\<^sub>S) \<phi> \<iota> a \<Phi>"
locale limit_situation
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and \<iota> :: "('j => 'c) => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
    and \<chi> :: "'j => 'c"
  assumes
    "limit_situation (\<cdot>\<^sub>J) (\<cdot>) D (\<cdot>\<^sub>S) \<phi>
      \<iota> a \<Phi> \<chi>"
locale limit_cone
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and a :: "'c"
    and \<chi> :: "'j => 'c"
  assumes "D.limit_cone a \<chi>"
locale representation_of_cones_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and \<iota> :: "('j => 'c) => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
  assumes
    "representation_of_cones_functor (\<cdot>\<^sub>J) (\<cdot>) D
      (\<cdot>\<^sub>S) \<phi> \<iota> a \<Phi>"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale diagonal_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
  assumes "diagonal_functor (\<cdot>\<^sub>J) (\<cdot>)"
locale right_adjoint_to_diagonal_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and G :: "('j => 'c, 'j => 'c) concrete_category.arr => 'c"
    and \<phi> :: "'c => ('j => 'c, 'j => 'c) concrete_category.arr => 'c"
    and
    \<psi> ::
      "('j => 'c, 'j => 'c) concrete_category.arr
       => 'c => ('j => 'c, 'j => 'c) concrete_category.arr"
  assumes
    "right_adjoint_to_diagonal_functor (\<cdot>\<^sub>J) (\<cdot>) G \<phi>
      \<psi>"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale empty_diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "empty_diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale discrete_diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "discrete_diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale discrete_diagram_from_map
  fixes I :: "'i set"
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'i => 'c"
    and null :: "'i"
  assumes "discrete_diagram_from_map I (\<cdot>) D null"
locale product_cone
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and a :: "'c"
    and \<pi> :: "'j => 'c"
  assumes "product_cone (\<cdot>\<^sub>J) (\<cdot>) D a \<pi>"
locale discrete_diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "discrete_diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale parallel_pair_diagram
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
  assumes "parallel_pair_diagram (\<cdot>) f0 f1"
locale parallel_pair_diagram
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
  assumes "parallel_pair_diagram (\<cdot>) f0 f1"
locale equalizer_cone
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
    and e :: "'c"
  assumes "equalizer_cone (\<cdot>) f0 f1 e"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale category_with_equalizers
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_with_equalizers (\<cdot>)"
locale diagram_in_set_category
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('a * 'a) set"
    and D :: "'j => 's"
  assumes "diagram_in_set_category (\<cdot>\<^sub>J) (\<cdot>) \<AA> D"
locale diagram_in_replete_set_category
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 's"
  assumes "diagram_in_replete_set_category (\<cdot>\<^sub>J) (\<cdot>) D"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale discrete_diagram_in_replete_set_category
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 's"
  assumes
    "discrete_diagram_in_replete_set_category (\<cdot>\<^sub>J) (\<cdot>) D"
locale replete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
  assumes "replete_set_category (\<cdot>)"
locale parametrized_diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and D :: "'j * 'a => 'b"
  assumes
    "parametrized_diagram (\<cdot>\<^sub>J) (\<cdot>\<^sub>A)
      (\<cdot>\<^sub>B) D"
locale diagram_in_functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and D :: "'j => ('a => 'b, 'a => 'b) concrete_category.arr"
  assumes
    "diagram_in_functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)
      (\<cdot>\<^sub>J) D"
locale functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale yoneda_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "yoneda_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
### theory "Draft.Limit"
### 49.740s elapsed time, 79.109s cpu time, 43.839s GC time
Loading theory "Draft.CartesianCategory" (required by "Draft.CartesianCategoryTemplates")
locale binary_product_shape
locale binary_product_diagram
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and a0 :: "'c"
    and a1 :: "'c"
  assumes "binary_product_diagram (\<cdot>) a0 a1"
Found termination order: "{}"
locale binary_product_diagram
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and a0 :: "'c"
    and a1 :: "'c"
  assumes "binary_product_diagram (\<cdot>) a0 a1"
locale binary_product_cone
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
    and p0 :: "'c"
    and p1 :: "'c"
  assumes "binary_product_cone (\<cdot>) f0 f1 p0 p1"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale category_with_binary_products
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_with_binary_products (\<cdot>)"
locale elementary_category_with_binary_products
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and pr0 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>0[_, _]\<close>)
    and pr1 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>1[_, _]\<close>)
  assumes "elementary_category_with_binary_products (\<cdot>) pr0 pr1"
locale category_with_binary_products
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_with_binary_products (\<cdot>)"
locale elementary_category_with_binary_products
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and pr0 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>0[_, _]\<close>)
    and pr1 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>1[_, _]\<close>)
  assumes "elementary_category_with_binary_products (\<cdot>) pr0 pr1"
locale elementary_category_with_binary_products
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and pr0 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>0[_, _]\<close>)
    and pr1 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>1[_, _]\<close>)
  assumes "elementary_category_with_binary_products (\<cdot>) pr0 pr1"
locale category_with_terminal_object
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_with_terminal_object (\<cdot>)"
locale elementary_category_with_terminal_object
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and one :: "'a"  (\<open>\<one>\<close>)
    and trm :: "'a => 'a"  (\<open>\<t>[_]\<close>)
  assumes "elementary_category_with_terminal_object (\<cdot>) \<one> trm"
locale category_with_terminal_object
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_with_terminal_object (\<cdot>)"
locale cartesian_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "cartesian_category (\<cdot>)"
locale elementary_cartesian_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and pr0 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>0[_, _]\<close>)
    and pr1 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>1[_, _]\<close>)
    and one :: "'a"  (\<open>\<one>\<close>)
    and trm :: "'a => 'a"  (\<open>\<t>[_]\<close>)
  assumes "elementary_cartesian_category (\<cdot>) pr0 pr1 \<one> trm"
locale cartesian_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "cartesian_category (\<cdot>)"
locale elementary_cartesian_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and pr0 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>0[_, _]\<close>)
    and pr1 :: "'a => 'a => 'a"  (\<open>\<pp>\<^sub>1[_, _]\<close>)
    and one :: "'a"  (\<open>\<one>\<close>)
    and trm :: "'a => 'a"  (\<open>\<t>[_]\<close>)
  assumes "elementary_cartesian_category (\<cdot>) pr0 pr1 \<one> trm"
locale category_with_finite_products
  fixes C :: "'c => 'c => 'c"
  assumes "category_with_finite_products C"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Draft.CartesianCategory"
### 6.886s elapsed time, 7.944s cpu time, 1.682s GC time
Loading theory "Draft.CartesianCategoryTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.CartesianCategoryTemplates"
### 0.373s elapsed time, 0.576s cpu time, 0.140s GC time
val it = (): unit
