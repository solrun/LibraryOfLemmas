   [("SetCategory.compose_eq'", "compose ?A ?G ?F = restrict (?G o ?F) ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 2))),
    ("SetCategory.restr_eqE",
     "[| restrict ?F ?A = restrict ?F' ?A; ?x : ?A |] ==> ?F ?x = ?F' ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("SetCategory.restr_eqI",
     "[| ?A = ?A'; !!x. x : ?A ==> ?F x = ?F' x |]
      ==> restrict ?F ?A = restrict ?F' ?A'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("SetCategory.set_category_is_categorical",
     "[| set_category ?S ?\<AA>; set_category ?S' ?\<AA>;
         bij_betw ?\<phi> (Collect (category.terminal ?S))
          (Collect (category.terminal ?S')) |]
      ==> EX \<Phi>.
             invertible_functor ?S ?S' \<Phi> &
             (ALL m.
                 set_category.incl ?S ?\<AA> m -->
                 set_category.incl ?S' ?\<AA> (\<Phi> m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 0),
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3))),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_predicate (template_app (template_hole 6, t_empty))))]
