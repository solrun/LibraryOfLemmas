Loading theory "Draft.Missing_Matrix" (required by "Draft.Integral_Bounded_VectorsTemplates" via "Draft.Integral_Bounded_Vectors" via "Draft.Missing_VS_Connect")
Loading theory "Draft.Templates" (required by "Draft.Integral_Bounded_VectorsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.178s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Integral_Bounded_VectorsTemplates")
### theory "Draft.Missing_Matrix"
### 0.253s elapsed time, 0.545s cpu time, 0.059s GC time
Loading theory "Draft.Sum_Vec_Set" (required by "Draft.Integral_Bounded_VectorsTemplates" via "Draft.Integral_Bounded_Vectors")
Loading theory "Draft.Missing_VS_Connect" (required by "Draft.Integral_Bounded_VectorsTemplates" via "Draft.Integral_Bounded_Vectors")
### theory "Draft.Sum_Vec_Set"
### 0.362s elapsed time, 1.038s cpu time, 0.109s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.609s elapsed time, 1.530s cpu time, 0.168s GC time
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.Missing_VS_Connect"
### 1.106s elapsed time, 1.902s cpu time, 0.233s GC time
Loading theory "Draft.Integral_Bounded_Vectors" (required by "Draft.Integral_Bounded_VectorsTemplates")
### theory "Draft.Integral_Bounded_Vectors"
### 2.730s elapsed time, 3.116s cpu time, 0.633s GC time
Loading theory "Draft.Integral_Bounded_VectorsTemplates"
val templateLemmas =
   [("Integral_Bounded_Vectors.indexed_Ints_vec_subset",
     "\<int>\<^sub>v <= indexed_Ints_vec ?I",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Integral_Bounded_Vectors.unit_vec_integral",
     "unit_vec ?n ?i : \<int>\<^sub>v",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Integral_Bounded_Vectors.Ints_mat_elements_mat",
     "(?A : \<int>\<^sub>m) = (elements_mat ?A <= \<int>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Integral_Bounded_Vectors.Ints_vec_vec_set",
     "(?v : \<int>\<^sub>v) = (set\<^sub>v ?v <= \<int>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Integral_Bounded_Vectors.minus_in_Ints_mat_iff",
     "(- ?A : \<int>\<^sub>m) = (?A : \<int>\<^sub>m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Integral_Bounded_Vectors.minus_in_Ints_vec_iff",
     "(- ?x : \<int>\<^sub>v) = (?x : \<int>\<^sub>v)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Integral_Bounded_Vectors.unit_vec_Bounded_vec",
     "unit_vec ?n ?i : Bounded_vec (max (1::?'a) ?Bnd)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))
         )),
    ("Integral_Bounded_Vectors.Ints_vec_rows_Ints_mat",
     "(set (rows ?A) <= \<int>\<^sub>v) = (?A : \<int>\<^sub>m)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Integral_Bounded_Vectors.minus_in_Bounded_vec",
     "(- ?x : Bounded_vec ?b) = (?x : Bounded_vec ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Integral_Bounded_Vectors.Bounded_mat_mono",
     "?b <= ?B ==> Bounded_mat ?b <= Bounded_mat ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Integral_Bounded_Vectors.Bounded_vec_mono",
     "?b <= ?B ==> Bounded_vec ?b <= Bounded_vec ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Integral_Bounded_Vectors.Bounded_vec_rows_Bounded_mat",
     "(set (rows ?A) <= Bounded_vec ?B) = (?A : Bounded_mat ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Integral_Bounded_Vectors.sq_norm_unit_vec",
     "?i < ?n ==> \<parallel>unit_vec ?n ?i\<parallel>\<^sup>2 = (1::?'a)",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Integral_Bounded_Vectors.Bounded_mat_elements_mat",
     "(?A : Bounded_mat ?b) = (ALL x:elements_mat ?A. \<bar>x\<bar> <= ?b)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Integral_Bounded_Vectors.Bounded_vec_vec_set",
     "(?v : Bounded_vec ?b) = (ALL x:set\<^sub>v ?v. \<bar>x\<bar> <= ?b)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Integral_Bounded_Vectors.smult_indexed_Ints_vec",
     "[| ?x : \<int>; ?v : indexed_Ints_vec ?I |]
      ==> ?x \<cdot>\<^sub>v ?v : indexed_Ints_vec ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Integral_Bounded_Vectors.det_bound",
     "[| ?A : carrier_mat ?n ?n; ?A : Bounded_mat ?x |]
      ==> \<bar>det ?A\<bar> <= det_bound ?n ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Integral_Bounded_Vectors.diff_indexed_Ints_vec",
     "[| ?x : carrier_vec ?n; ?y : carrier_vec ?n; ?x : indexed_Ints_vec ?I;
         ?y : indexed_Ints_vec ?I |]
      ==> ?x - ?y : indexed_Ints_vec ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Integral_Bounded_Vectors.add_indexed_Ints_vec",
     "[| ?x : carrier_vec ?n; ?y : carrier_vec ?n; ?x : indexed_Ints_vec ?I;
         ?y : indexed_Ints_vec ?I |]
      ==> ?x + ?y : indexed_Ints_vec ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 1, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Integral_Bounded_Vectors.Bounded_matD",
     "[| ?A : Bounded_mat ?b; ?A : carrier_mat ?nr ?nc; ?i < ?nr;
         ?j < ?nc |]
      ==> \<bar>?A $$ (?i, ?j)\<bar> <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 3),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 4))),
    ("Integral_Bounded_Vectors.sum_in_Bounded_vecI",
     "[| ?x : Bounded_vec ?B1.0; ?y : Bounded_vec ?B2.0;
         ?x : carrier_vec ?n; ?y : carrier_vec ?n |]
      ==> ?x + ?y : Bounded_vec (?B1.0 + ?B2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)))
           ))),
    ("Integral_Bounded_Vectors.finite_Bounded_vec_Max",
     "[| ?A <= carrier_vec ?n; finite ?A |]
      ==> ?A <= Bounded_vec
                 (Max {\<bar>a $ i\<bar> |a i. a : ?A & i < ?n})",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 12, template_var 0)),
        template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_hole 10,
           template_app
            (template_hole 9, template_app (template_hole 8, t_empty)))))),
    ("Integral_Bounded_Vectors.bounded_vecset_sum",
     "[| ?A <= carrier_vec ?n; ?B <= carrier_vec ?n; ?C = ?A + ?B;
         EX bndC. ?C <= Bounded_vec bndC; ?A ~= {} |]
      ==> EX bndB. ?B <= Bounded_vec bndB",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 2)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_negation
         (template_equation (template_var 3, template_hole 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Integral_Bounded_Vectors.bounded_vecset_sum",
     "[| ?A <= carrier_vec ?n; ?B <= carrier_vec ?n; ?C = ?A + ?B;
         EX bndC. ?C <= Bounded_vec bndC; ?B ~= {} |]
      ==> EX bndA. ?A <= Bounded_vec bndA",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, template_var 2)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_predicate (template_app (template_hole 3, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Integral_Bounded_VectorsTemplates"
### 2.273s elapsed time, 2.569s cpu time, 0.262s GC time
val it = (): unit
