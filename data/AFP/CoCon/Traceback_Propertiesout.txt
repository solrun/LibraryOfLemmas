Loading theory "Fresh_Identifiers.Fresh" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties" via "Draft.Safety_Properties" via "Draft.Automation_Setup" via "Draft.System_Specification" via "Draft.Prelim" via "Fresh_Identifiers.Fresh_String")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class fresh = type +
  fixes fresh :: "'a set => 'a => 'a"
  assumes "fresh_notIn": "!!xs x. finite xs ==> fresh xs x ~: xs"
    and "fresh_eq": "!!xs x. x ~: xs ==> fresh xs x = x"
### Additional type variable(s) in locale specification "infinite": 'a
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class infinite = type +
  assumes "infinite_UNIV": "infinite UNIV"
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.579s cpu time, 0.047s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties" via "Draft.Safety_Properties" via "Draft.Automation_Setup" via "Draft.System_Specification" via "Draft.Prelim" via "Bounded_Deducibility_Security.Trivia")
### theory "Fresh_Identifiers.Fresh"
### 0.240s elapsed time, 0.980s cpu time, 0.047s GC time
Loading theory "Fresh_Identifiers.Fresh_String" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties" via "Draft.Safety_Properties" via "Draft.Automation_Setup" via "Draft.System_Specification" via "Draft.Prelim")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.254s elapsed time, 1.030s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.388s elapsed time, 1.550s cpu time, 0.141s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.ExtrEqs")
instantiation
  String.literal :: fresh
  fresh_literal == fresh ::
    String.literal set => String.literal => String.literal
consts
  prefixes :: "'a list => 'a list list"
### theory "Fresh_Identifiers.Fresh_String"
### 0.276s elapsed time, 1.068s cpu time, 0.186s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.128s elapsed time, 4.271s cpu time, 0.944s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.056s elapsed time, 3.994s cpu time, 0.853s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.687s elapsed time, 6.454s cpu time, 1.168s GC time
Loading theory "Bounded_Deducibility_Security.Trivia" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties" via "Draft.Safety_Properties" via "Draft.Automation_Setup" via "Draft.System_Specification" via "Draft.Prelim")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Bounded_Deducibility_Security.Trivia"
### 0.490s elapsed time, 1.935s cpu time, 0.144s GC time
Loading theory "Bounded_Deducibility_Security.Transition_System" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties" via "Draft.Safety_Properties" via "Bounded_Deducibility_Security.IO_Automaton")
Found termination order: "size <*mlex*> {}"
locale Transition_System
  fixes istate :: "'state"
    and validTrans :: "'trans => bool"
    and srcOf :: "'trans => 'state"
    and tgtOf :: "'trans => 'state"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.301s elapsed time, 8.865s cpu time, 1.412s GC time
Loading theory "Draft.Prelim" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties" via "Draft.Safety_Properties" via "Draft.Automation_Setup" via "Draft.System_Specification")
Found termination order: "{}"
Proofs for inductive predicate(s) "valid"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid2"
  Proving monotonicity ...
"[''Abc'', ''Abd'', ''Ya'', ''Yb'', ''Yzb'', ''Ya'']"
  :: "char list list"
Loading theory "Draft.Templates" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "reach"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reachFrom"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Traceback_PropertiesMoreTemplates")
### theory "Bounded_Deducibility_Security.Transition_System"
### 0.466s elapsed time, 1.829s cpu time, 0.182s GC time
Loading theory "Bounded_Deducibility_Security.IO_Automaton" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties" via "Draft.Safety_Properties")
"[STR ''Abc'', STR ''Abd'', STR ''Ya'', STR ''Yb'', STR ''Yzb'',
  STR ''Ya'']"
  :: "String.literal list"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.678s elapsed time, 2.203s cpu time, 0.253s GC time
locale IO_Automaton
  fixes istate :: "'state"
    and step :: "'state => 'act => 'out * 'state"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### scoreAsInt NoScore = undefined
Found termination order: "{}"
### theory "Bounded_Deducibility_Security.IO_Automaton"
### 1.101s elapsed time, 3.017s cpu time, 0.306s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  userID :: linorder
  less_eq_userID == less_eq :: userID => userID => bool
  less_userID == less :: userID => userID => bool
Found termination order: "{}"
instantiation
  paperID :: linorder
  less_eq_paperID == less_eq :: paperID => paperID => bool
  less_paperID == less :: paperID => paperID => bool
Found termination order: "{}"
instantiation
  confID :: linorder
  less_eq_confID == less_eq :: confID => confID => bool
  less_confID == less :: confID => confID => bool
### theory "Draft.Prelim"
### 4.073s elapsed time, 7.000s cpu time, 0.785s GC time
Loading theory "Draft.System_Specification" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties" via "Draft.Safety_Properties" via "Draft.Automation_Setup")
### Ambiguous input (line 847 of "$AFP/CoCon/System_Specification.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" readFinalDec)
###     ("_cargs" ("_position" s)
###       ("_cargs" ("_position" confID)
###         ("_cargs" ("_position" uID)
###           ("_cargs" ("_position" p) ("_position" papID))))))
###   ("_case_syntax"
###     ("_applC" ("_position" paper)
###       ("_cargs" ("_position" s) ("_position" papID)))
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" Paper)
###           ("_cargs" ("_position" title)
###             ("_cargs" ("_position" abstract)
###               ("_cargs" ("_position" pc)
###                 ("_cargs" ("_position" reviews)
###                   ("_cargs" ("_position" dis) ("_position" decs)))))))
###         ("_case_syntax" ("_position" decs)
###           ("_case1" ("\<^const>List.list.Nil") ("_position" NoDecision))))
###       ("_case1"
###         ("\<^const>List.list.Cons" ("_position" dec) ("_position" decs))
###         ("_position" dec)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" readFinalDec)
###     ("_cargs" ("_position" s)
###       ("_cargs" ("_position" confID)
###         ("_cargs" ("_position" uID)
###           ("_cargs" ("_position" p) ("_position" papID))))))
###   ("_case_syntax"
###     ("_applC" ("_position" paper)
###       ("_cargs" ("_position" s) ("_position" papID)))
###     ("_case1"
###       ("_applC" ("_position" Paper)
###         ("_cargs" ("_position" title)
###           ("_cargs" ("_position" abstract)
###             ("_cargs" ("_position" pc)
###               ("_cargs" ("_position" reviews)
###                 ("_cargs" ("_position" dis) ("_position" decs)))))))
###       ("_case_syntax" ("_position" decs)
###         ("_case2"
###           ("_case1" ("\<^const>List.list.Nil") ("_position" NoDecision))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" dec) ("_position" decs))
###             ("_position" dec)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
See theory exports
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.System_Specification"
### 11.349s elapsed time, 15.979s cpu time, 4.885s GC time
Loading theory "Draft.Automation_Setup" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties" via "Draft.Safety_Properties")
### theory "Draft.Automation_Setup"
### 0.035s elapsed time, 0.086s cpu time, 0.000s GC time
Loading theory "Draft.Safety_Properties" (required by "Draft.Traceback_PropertiesMoreTemplates" via "Draft.Traceback_Properties")
Found termination order: "{}"
### theory "Draft.Safety_Properties"
### 0.766s elapsed time, 0.812s cpu time, 0.058s GC time
Loading theory "Draft.Traceback_Properties" (required by "Draft.Traceback_PropertiesMoreTemplates")
Proofs for inductive predicate(s) "trace_between"
  Proving monotonicity ...
trace_between ?s [] ?s' = (?s' = ?s)
trace_between ?s (?tr ## ?trn) ?s' =
(EX sh a ou.
    ?trn = Trans sh a ou ?s' &
    trace_between ?s ?tr sh & step sh a = (ou, ?s'))
Proofs for inductive predicate(s) "trace_to"
  Proving monotonicity ...
[| trace_to x1 x2; P [] istate;
   !!tr s a ou s'.
      [| trace_to tr s; P tr s; step s a = (ou, s') |]
      ==> P (tr ## Trans s a ou s') s' |]
==> P x1 x2
Proofs for inductive predicate(s) "isAut'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isChair'"
  Proving monotonicity ...
"cConf"
  :: "confID
      => userID => password => String.literal => String.literal => cAct"
Proofs for inductive predicate(s) "isPC'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "isRev'"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "phase'"
  Proving monotonicity ...
### theory "Draft.Traceback_Properties"
### 11.408s elapsed time, 17.196s cpu time, 0.879s GC time
Loading theory "Draft.Traceback_PropertiesMoreTemplates"
val templateLemmas =
   [("Traceback_Properties.trace_to_empty",
     "trace_to [] ?s = (?s = istate)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Traceback_Properties.trace_to_ft",
     "trace_to ?tr ?s = trace_between istate ?tr ?s",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0))),
    ("Traceback_Properties.trace_ft_empty",
     "trace_between ?s [] ?s' = (?s' = ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("Traceback_Properties.trace_to_reach", "trace_to ?tr ?s ==> reach ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, template_hole 2)),
                 template_hole 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Traceback_Properties.reach_trace_to_conv",
     "reach ?s = (EX tr. trace_to tr ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_hole 6),
               template_app (template_hole 5, template_hole 4)),
             template_hole 3),
           template_hole 2),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Traceback_Properties.phase_eq",
     "trace_to ?tr ?s ==> (phase ?s ?cid = ?ph) = phase' ?tr ?cid ?ph",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Traceback_Properties.isRev_eq",
     "trace_to ?tr ?s ==>
      isRev ?s ?cid ?uid ?pid = isRev' ?tr ?cid ?uid ?pid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Traceback_Properties.conflict_eq",
     "trace_to ?tr ?s ==>
      (pref ?s ?uid ?pid = Conflict) = conflict_trace ?uid ?pid ?tr",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3)))),
    ("Traceback_Properties.phase_justify",
     "[| trace_to ?tr ?s; phase' ?tr ?cid ?ph |] ==> phase ?s ?cid = ?ph",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Traceback_Properties.justify_phase",
     "[| trace_to ?tr ?s; phase ?s ?cid = ?ph |] ==> phase' ?tr ?cid ?ph",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Traceback_Properties.isChair_eq",
     "trace_to ?tr ?s ==> isChair ?s ?cid ?uid = isChair' ?tr ?cid ?uid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Traceback_Properties.isPC_eq",
     "trace_to ?tr ?s ==> isPC ?s ?cid ?uid = isPC' ?tr ?cid ?uid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Traceback_Properties.conflict_justify",
     "[| trace_to ?tr ?s; conflict_trace ?uid ?pid ?tr |]
      ==> pref ?s ?uid ?pid = Conflict",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("Traceback_Properties.justify_rev",
     "[| trace_to ?tr ?s; isRev ?s ?cid ?uid ?pid |]
      ==> isRev' ?tr ?cid ?uid ?pid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Traceback_Properties.rev_justify",
     "[| trace_to ?tr ?s; isRev' ?tr ?cid ?uid ?pid |]
      ==> isRev ?s ?cid ?uid ?pid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Traceback_Properties.justify_conflict",
     "[| trace_to ?tr ?s; pref ?s ?uid ?pid = Conflict |]
      ==> conflict_trace ?uid ?pid ?tr",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("Traceback_Properties.trace_ft_append",
     "trace_between ?s (?tr1.0 @ ?tr2.0) ?s' =
      (EX sh. trace_between ?s ?tr1.0 sh & trace_between sh ?tr2.0 ?s')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Traceback_Properties.chair_justify",
     "[| trace_to ?tr ?s; isChair' ?tr ?cid ?uid |]
      ==> isChair ?s ?cid ?uid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("Traceback_Properties.com_justify",
     "[| trace_to ?tr ?s; isPC' ?tr ?cid ?uid |] ==> isPC ?s ?cid ?uid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("Traceback_Properties.justify_chair",
     "[| trace_to ?tr ?s; isChair ?s ?cid ?uid |]
      ==> isChair' ?tr ?cid ?uid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Traceback_Properties.justify_com",
     "[| trace_to ?tr ?s; isPC ?s ?cid ?uid |] ==> isPC' ?tr ?cid ?uid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Traceback_Properties.isAut_eq",
     "trace_to ?tr ?s ==>
      isAut ?s ?cid ?uid ?pid = isAut' ?tr ?cid ?uid ?pid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0),
           template_var 2)))),
    ("Traceback_Properties.author_justify",
     "[| trace_to ?tr ?s; isAut' ?tr ?cid ?uid ?pid |]
      ==> isAut ?s ?cid ?uid ?pid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)))
           ))),
    ("Traceback_Properties.justify_author",
     "[| trace_to ?tr ?s; isAut ?s ?cid ?uid ?pid |]
      ==> isAut' ?tr ?cid ?uid ?pid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Traceback_Properties.reach_to_trace",
     "[| reach ?s; !!tr. trace_to tr ?s ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app (template_hole 5, template_hole 4)),
                  template_hole 3),
                template_hole 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Traceback_Properties.irrev_conflict_impl_conflict",
     "[| trace_to ?tr ?s; EX trn:set ?tr. irrev_conflict ?uid ?pid trn |]
      ==> pref ?s ?uid ?pid = Conflict",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("Traceback_Properties.irrev_conflict_impl_author",
     "[| trace_to ?tr ?s; EX trn:set ?tr. irrev_conflict ?uid ?pid trn |]
      ==> EX cid. isAut ?s cid ?uid ?pid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Traceback_Properties.trace_ft_Cons",
     "trace_between ?s (?trn # ?tr) ?s' =
      (EX sh ou a.
          ?trn = Trans ?s a ou sh &
          step ?s a = (ou, sh) & trace_between sh ?tr ?s')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 3),
           template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Traceback_Properties.trace_ft_snoc",
     "trace_between ?s (?tr ## ?trn) ?s' =
      (EX sh a ou.
          ?trn = Trans sh a ou ?s' &
          trace_between ?s ?tr sh & step sh a = (ou, ?s'))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 12, template_var 3),
           template_app
            (template_app (template_hole 11, template_var 2),
             template_app
              (template_app (template_hole 10, template_var 1),
               template_hole 9))),
         template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Traceback_Properties.trace_to_induct",
     "[| trace_to ?x1.0 ?x2.0; ?P [] istate;
         !!tr s a ou s'.
            [| trace_to tr s; ?P tr s; reach s; reach s';
               step s a = (ou, s') |]
            ==> ?P (tr ## Trans s a ou s') s' |]
      ==> ?P ?x1.0 ?x2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 15),
              template_hole 14)
            ),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Traceback_PropertiesMoreTemplates"
### 0.637s elapsed time, 0.946s cpu time, 0.126s GC time
val it = (): unit
