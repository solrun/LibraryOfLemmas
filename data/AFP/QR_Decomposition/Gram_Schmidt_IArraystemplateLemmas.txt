   [("Gram_Schmidt_IArrays.minus_zero_iarray", "?A - 0 = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Gram_Schmidt_IArrays.matrix_to_iarray_Gram_Schmidt_matrix",
     "matrix_to_iarray (Gram_Schmidt_matrix ?A) =
      Gram_Schmidt_matrix_iarrays (matrix_to_iarray ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Gram_Schmidt_IArrays.vec_to_iarray_inner",
     "?a \<bullet> ?b = vec_to_iarray ?a \<bullet>i vec_to_iarray ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Gram_Schmidt_IArrays.vec_to_iarray_scaleR",
     "vec_to_iarray (?a *\<^sub>R ?x) = ?a *\<^sub>R vec_to_iarray ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Gram_Schmidt_IArrays.length_plus_iarray",
     "IArray.length (?A + ?B) = max (IArray.length ?A) (IArray.length ?B)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Gram_Schmidt_IArrays.matrix_to_iarray_Gram_Schmidt_column_k",
     "?k < ncols ?A ==>
      matrix_to_iarray (Gram_Schmidt_column_k ?A ?k) =
      Gram_Schmidt_column_k_iarrays (matrix_to_iarray ?A) ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1)))),
    ("Gram_Schmidt_IArrays.matrix_to_iarray_Gram_Schmidt_upt_k",
     "?k < ncols ?A ==>
      matrix_to_iarray (Gram_Schmidt_upt_k ?A ?k) =
      Gram_Schmidt_upt_k_iarrays (matrix_to_iarray ?A) ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_var 1)))),
    ("Gram_Schmidt_IArrays.plus_iarray_component",
     "[| ?i < IArray.length ?A; ?i < IArray.length ?B |]
      ==> (?A + ?B) !! ?i = ?A !! ?i + ?B !! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("Gram_Schmidt_IArrays.minus_iarray_component",
     "[| ?i < IArray.length ?A; ?i < IArray.length ?B |]
      ==> (?A - ?B) !! ?i = ?A !! ?i - ?B !! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("Gram_Schmidt_IArrays.length_sum_iarray",
     "[| finite ?S; ?S ~= {} |]
      ==> IArray.length (sum ?f ?S) =
          Max {IArray.length (?f x) |x. x : ?S}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 1)),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Gram_Schmidt_IArrays.sum_component_iarray",
     "[| ALL x:?S. ?i < IArray.length (?f x); finite ?S; ?S ~= {} |]
      ==> sum ?f ?S !! ?i = (SUM x:?S. ?f x !! ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2), t_empty)
            ),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2))))]
