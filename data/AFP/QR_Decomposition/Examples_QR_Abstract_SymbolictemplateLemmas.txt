### theory "Draft.Examples_QR_Abstract_SymbolicMoreTemplates"
### 1.416s elapsed time, 5.601s cpu time, 0.328s GC time
"{[1, 3, 0, 4, 2, 0], [0, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 1]}"
  :: "real list set"
"{[1, 0, 10, 0], [0, 1, - 5, 0], [0, 0, 0, 1]}"
  :: "real list set"
"{[1, 0, 0, 1], [0, 1, 0, 1], [0, 0, 1, 1]}"
  :: "real list set"
"{[1, 0, 0, 1 / 4], [0, 1, 0, 1], [0, 0, 1, 3 / 4]}"
  :: "real list set"
"{[- 4, 0, - 2, 1, 0, 0], [- 2, 0, 0, 0, 1, 0], [- 3, 1, 0, 0, 0, 0]}"
  :: "real list set"
"{[- 1, - 1, - 1, 1]}"
  :: "real list set"
"{[- 10, 5, 1, 0]}"
  :: "real list set"
"{[- (1 / 4), - 1, - (3 / 4), 1]}"
  :: "real list set"
"True"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
"Some ([- (17 / 15), 32 / 15, - (4 / 15)], {})"
  :: "(real list * real list set) option"
"None"
  :: "(real list * real list set) option"
"Some ([4, - 3, 0], {[1, - 1, 1]})"
  :: "(real list * real list set) option"
"Some
  ([63 / 5, 57 / 5, 0, 0], {[2, 2, 1, 0], [- (26 / 5), - (24 / 5), 0, 1]})"
  :: "(real list * real list set) option"
"Some
  ([0, 0, 0, 0, 0],
   {[- (2 / 3), 1, 0, 0, 0], [- (2 / 3), 0, 0, 1, 0],
    [8 / 3, 0, - 3, 0, 1]})"
  :: "(real list * real list set) option"
[| is_basis (columns ?A); card (columns ?A) = ncols ?A |]
==> rank ?A = ncols ?A
"[[5, - 5, - 3, - 4], [- (13 / 3), 4 / 3, 3, - (28 / 3)],
  [11 / 14, 1 / 7, 15 / 14, 0]]"
  :: "real list list"
"[[4, 50 / 77, 15 / 13, 0], [- 6, - (75 / 77), 10 / 13, 0],
  [5, - (130 / 77), 0, 0]]"
  :: "real list list"
"[[4, - 2, - 1, 2], [2, - 1, 2, - 4], [- 1, - 2, - 4, - 2]]"
  :: "real list list"
"[[''1/82*sqrt(82)'', ''1/5*sqrt(5)'', ''4/41*sqrt(41)''],
  [''9/82*sqrt(82)'', ''2/5*sqrt(5)'', ''5/41*sqrt(41)''],
  [''0'', ''0'', ''0'']]"
  :: "char list list list"
"[[''sqrt(82)'', ''19/41*sqrt(82)'', ''49/82*sqrt(82)''],
  [''0'', ''7/41*sqrt(82)'', ''31/82*sqrt(82)''], [''0'', ''0'', ''4'']]"
  :: "char list list list"
"[[''1'', ''2'', ''4''], [''9'', ''4'', ''5''], [''0'', ''0'', ''4'']]"
  :: "char list list list"
"[[''1/82*sqrt(82)'', ''9/82*sqrt(82)'', ''0''],
  [''9/82*sqrt(82)'', ''-1/82*sqrt(82)'', ''0''], [''0'', ''0'', ''1'']]"
  :: "char list list list"
"[[''1'', ''2'', ''4''], [''9'', ''4'', ''5''], [''0'', ''0'', ''4''],
  [''3'', ''5'', ''4'']]"
  :: "char list list list"
"[[''1'', ''2'', ''1''], [''9'', ''4'', ''9''], [''2'', ''0'', ''2''],
  [''0'', ''5'', ''0'']]"
  :: "char list list list"
"[[''1/86*sqrt(86)'', ''67/52159*sqrt(52159)'', ''0''],
  [''9/86*sqrt(86)'', ''1/52159*sqrt(52159)'', ''0''],
  [''1/43*sqrt(86)'', ''-38/52159*sqrt(52159)'', ''0''],
  [''0'', ''5/1213*sqrt(52159)'', ''0'']]"
  :: "char list list list"
"[''1/86*sqrt(86)'', ''9/86*sqrt(86)'', ''1/43*sqrt(86)'', ''0'']"
  :: "char list list"
"[''67/52159*sqrt(52159)'', ''1/52159*sqrt(52159)'',
  ''-38/52159*sqrt(52159)'', ''5/1213*sqrt(52159)'']"
  :: "char list list"
"[[''sqrt(86)'', ''19/43*sqrt(86)'', ''sqrt(86)''],
  [''0'', ''1/43*sqrt(52159)'', ''0''], [''0'', ''0'', ''0'']]"
  :: "char list list list"
"[[''1'', ''2'', ''1''], [''9'', ''4'', ''9'']]"
  :: "char list list list"
"[[''1/82*sqrt(82)'', ''9/82*sqrt(82)'', ''0''],
  [''9/82*sqrt(82)'', ''-1/82*sqrt(82)'', ''0'']]"
  :: "char list list list"
"[[''sqrt(82)'', ''19/41*sqrt(82)'', ''sqrt(82)''],
  [''0'', ''7/41*sqrt(82)'', ''0''], [''0'', ''0'', ''0'']]"
  :: "char list list list"
val it = (): uni
