   [("Gram_Schmidt.orthogonal_Gram_Schmidt_matrix2",
     "pairwise orthogonal (columns (Gram_Schmidt_matrix ?A))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Gram_Schmidt.Gram_Schmidt_column_k_code",
     "($) (Gram_Schmidt_column_k ?A ?k) = Gram_Schmidt_column_k_row ?A ?k",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Gram_Schmidt.span_Gram_Schmidt_matrix",
     "span (columns ?A) = span (columns (Gram_Schmidt_matrix ?A))",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Gram_Schmidt.columns_eq_cols_upt_k",
     "cols_upt_k ?A (ncols ?A - 1) = columns ?A",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Gram_Schmidt.Gram_Schmidt_cons",
     "Gram_Schmidt (?a # ?xs) = Gram_Schmidt_step ?a (Gram_Schmidt ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Gram_Schmidt.Gram_Schmidt_upt_k_suc",
     "Gram_Schmidt_upt_k ?A (Suc ?k) =
      Gram_Schmidt_column_k (Gram_Schmidt_upt_k ?A ?k) (Suc ?k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Gram_Schmidt.card_Gram_Schmidt",
     "distinct ?xs ==> card (set (Gram_Schmidt ?xs)) <= card (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Gram_Schmidt.card_Gram_Schmidt2",
     "distinct ?xs ==> card (set (Gram_Schmidt2 ?xs)) <= card (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Gram_Schmidt.span_Gram_Schmidt_column_k",
     "?k < ncols ?A ==>
      span (columns ?A) = span (columns (Gram_Schmidt_column_k ?A ?k))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Gram_Schmidt.span_Gram_Schmidt_upt_k",
     "?k < ncols ?A ==>
      span (columns ?A) = span (columns (Gram_Schmidt_upt_k ?A ?k))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Gram_Schmidt.orthogonal_Gram_Schmidt_matrix",
     "pairwise orthogonal {column i (Gram_Schmidt_matrix ?A) |i. i : UNIV}",
     template_predicate
      (
         template_app
          (template_app (template_hole 9, template_hole 8),
           template_app (template_hole 7, t_empty))
         )),
    ("Gram_Schmidt.column_Gram_Schmidt_column_k'",
     "?i ~= ?k ==>
      column ?i (Gram_Schmidt_column_k ?A (mod_type_class.to_nat ?k)) =
      column ?i ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Gram_Schmidt.basis_orthogonal'",
     "length (Gram_Schmidt ?xs) = length ?xs &
      span (set (Gram_Schmidt ?xs)) = span (set ?xs) &
      pairwise orthogonal (set (Gram_Schmidt ?xs))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0))),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 5, template_var 0)))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 5, template_var 0)))))
         )),
    ("Gram_Schmidt.basis_orthogonal2",
     "length (Gram_Schmidt2 ?xs) = length ?xs &
      span (set (Gram_Schmidt2 ?xs)) = span (set ?xs) &
      pairwise orthogonal (set (Gram_Schmidt2 ?xs))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0))),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 5, template_var 0)))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 5, template_var 0)))))
         )),
    ("Gram_Schmidt.cols_upt_k_insert",
     "Suc ?k < ncols ?A ==>
      cols_upt_k ?A (Suc ?k) =
      insert (column (mod_type_class.from_nat (Suc ?k)) ?A)
       (cols_upt_k ?A ?k)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 6, template_var 1))),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))))),
    ("Gram_Schmidt.column_eq_Gram_Schmidt_matrix",
     "[| rank ?A = ncols ?A;
         column ?i (Gram_Schmidt_matrix ?A) =
         column ?ia (Gram_Schmidt_matrix ?A) |]
      ==> ?i = ?ia",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 1, template_var 2)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_app (template_hole 1, template_var 2)))],
       template_equation (template_var 1, template_var 0))),
    ("Gram_Schmidt.column_gr_k_Gram_Schmidt_upt",
     "[| ?k < ?i; ?i < ncols ?A |]
      ==> column (mod_type_class.from_nat ?i) (Gram_Schmidt_upt_k ?A ?k) =
          column (mod_type_class.from_nat ?i) ?A",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("Gram_Schmidt.orthogonal_basis_exists'",
     "[| is_basis (set ?V); distinct ?V |]
      ==> is_basis (set (Gram_Schmidt ?V)) &
          distinct (Gram_Schmidt ?V) &
          pairwise orthogonal (set (Gram_Schmidt ?V))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 2, template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 2, template_var 0))),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 2, template_var 0)))))
           ))),
    ("Gram_Schmidt.span_cols_upt_k_Gram_Schmidt_column_k",
     "[| ?k < ncols ?A; ?j < ncols ?A |]
      ==> span (cols_upt_k ?A ?k) =
          span (cols_upt_k (Gram_Schmidt_column_k ?A ?j) ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("Gram_Schmidt.orthogonal_Gram_Schmidt_upt_k",
     "?k < ncols ?A ==>
      pairwise orthogonal
       {column i (Gram_Schmidt_upt_k ?A ?k) |i.
        mod_type_class.to_nat i <= ?k}",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app (template_hole 7, t_empty))
           ))),
    ("Gram_Schmidt.scaleR_columns_Gram_Schmidt_matrix",
     "[| ?i ~= ?j; rank ?A = ncols ?A |]
      ==> column ?j (Gram_Schmidt_matrix ?A) \<bullet>
          column ?i (Gram_Schmidt_matrix ?A) =
          0",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_equation
         (template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Gram_Schmidt.is_basis_columns_Gram_Schmidt_matrix",
     "[| is_basis (columns ?A); card (columns ?A) = ncols ?A |]
      ==> is_basis (columns (Gram_Schmidt_matrix ?A)) &
          card (columns (Gram_Schmidt_matrix ?A)) = ncols ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            ),
        template_equation
         (template_app
           (template_hole 3,
            template_app (template_hole 5, template_var 0)),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 0, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, template_var 0)))),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("Gram_Schmidt.column_Gram_Schmidt_upt_k_preserves",
     "[| mod_type_class.to_nat ?i < Suc ?k; Suc ?k < CARD(?'cols) |]
      ==> column ?i (Gram_Schmidt_upt_k ?A (Suc ?k)) =
          column ?i (Gram_Schmidt_upt_k ?A ?k)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Linear_Algebra.Gram_Schmidt_step",
     "[| pairwise orthogonal ?S; ?x : span ?S |]
      ==> orthogonal ?x
           (?a -
            (SUM b:?S. (b \<bullet> ?a / (b \<bullet> b)) *\<^sub>R b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, t_empty), template_var 2)))
           ))),
    ("Gram_Schmidt.column_Gram_Schmidt_upt_k_preserves2",
     "[| ?a <= mod_type_class.from_nat ?i; ?i <= ?j; ?j < ncols ?A |]
      ==> column ?a (Gram_Schmidt_upt_k ?A ?i) =
          column ?a (Gram_Schmidt_upt_k ?A ?j)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 6, template_var 2)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Gram_Schmidt.independent_columns_Gram_Schmidt_matrix",
     "[| vec.independent (columns ?A); card (columns ?A) = ncols ?A |]
      ==> vec.independent (columns (Gram_Schmidt_matrix ?A)) &
          card (columns (Gram_Schmidt_matrix ?A)) = ncols ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 0))
                )
            ),
        template_equation
         (template_app
           (template_hole 3,
            template_app (template_hole 5, template_var 0)),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, template_var 0))))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, template_var 0)))),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("Gram_Schmidt.set_columns_Gram_Schmidt_matrix",
     "{column i (Gram_Schmidt_matrix ?A) |i. i < ?k} =
      {column i (Gram_Schmidt_upt_k ?A (mod_type_class.to_nat ?k)) |i.
       i < ?k}",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app (template_hole 8, t_empty))),
    ("Gram_Schmidt.column_Gram_Schmidt_matrix2",
     "column ?k ?A =
      column ?k (Gram_Schmidt_matrix ?A) +
      (SUM x:{column i (Gram_Schmidt_matrix ?A) |i. i < ?k}.
          (x \<bullet> column ?k ?A / (x \<bullet> x)) *\<^sub>R x)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_app (template_hole 8, template_var 0))),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 3, t_empty))))),
    ("Gram_Schmidt.column_Gram_Schmidt_matrix",
     "column ?k (Gram_Schmidt_matrix ?A) =
      column ?k ?A -
      (SUM x:{column i (Gram_Schmidt_matrix ?A) |i. i < ?k}.
          (x \<bullet> column ?k ?A / (x \<bullet> x)) *\<^sub>R x)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 3, t_empty))))),
    ("Gram_Schmidt.columns_Gram_Schmidt_matrix_rw",
     "{column i (Gram_Schmidt_matrix ?A) |i. i : UNIV} =
      {column i (Gram_Schmidt_upt_k ?A (ncols ?A - 1)) |i.
       mod_type_class.to_nat i <= ncols ?A - 1}",
     template_equation
      (template_app (template_hole 13, t_empty),
       template_app (template_hole 13, t_empty))),
    ("Gram_Schmidt.column_Gram_Schmidt_column_k",
     "column ?k (Gram_Schmidt_column_k ?A (mod_type_class.to_nat ?k)) =
      column ?k ?A -
      (SUM x:{column i ?A |i. i < ?k}.
          (x \<bullet> column ?k ?A / (x \<bullet> x)) *\<^sub>R x)",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1),
         template_app
          (template_app (template_hole 10, template_var 0),
           template_app (template_hole 9, template_var 1))),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 11, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 3, t_empty))))),
    ("Gram_Schmidt.orthogonal_basis_exists",
     "[| is_basis (set ?V); distinct ?V |]
      ==> vec.independent (set (Gram_Schmidt ?V)) &
          set ?V <= vec.span (set (Gram_Schmidt ?V)) &
          card (set (Gram_Schmidt ?V)) = vec.dim (set ?V) &
          pairwise orthogonal (set (Gram_Schmidt ?V))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_app
                    (template_hole 13,
                     template_app (template_hole 7, template_var 0))))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 13, template_var 0)),
                   template_app
                    (template_app (template_hole 5, template_hole 8),
                     template_app
                      (template_hole 13,
                       template_app (template_hole 7, template_var 0))))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 13,
                           template_app
                            (template_hole 7, template_var 0)))),
                     template_app
                      (template_app (template_hole 2, template_hole 8),
                       template_app (template_hole 13, template_var 0)))),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_hole 13,
                     template_app (template_hole 7, template_var 0))))))
           ))),
    ("Gram_Schmidt.orthogonal_basis_exists2",
     "[| is_basis (set ?V); distinct ?V |]
      ==> vec.independent (set (Gram_Schmidt2 ?V)) &
          set ?V <= vec.span (set (Gram_Schmidt2 ?V)) &
          card (set (Gram_Schmidt2 ?V)) = vec.dim (set ?V) &
          pairwise orthogonal (set (Gram_Schmidt2 ?V))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_app
                    (template_hole 13,
                     template_app (template_hole 7, template_var 0))))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 13, template_var 0)),
                   template_app
                    (template_app (template_hole 5, template_hole 8),
                     template_app
                      (template_hole 13,
                       template_app (template_hole 7, template_var 0))))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 13,
                           template_app
                            (template_hole 7, template_var 0)))),
                     template_app
                      (template_app (template_hole 2, template_hole 8),
                       template_app (template_hole 13, template_var 0)))),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_hole 13,
                     template_app (template_hole 7, template_var 0))))))
           ))),
    ("Gram_Schmidt.columns_Gram_Schmidt_upt_k_rw",
     "Suc ?k < ncols ?A ==>
      {column i (Gram_Schmidt_upt_k ?A (Suc ?k)) |i.
       i < mod_type_class.from_nat (Suc ?k)} =
      {column i (Gram_Schmidt_upt_k ?A ?k) |i.
       i < mod_type_class.from_nat (Suc ?k)}",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_var 1),
          template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 7, t_empty),
         template_app (template_hole 7, t_empty)))),
    ("Gram_Schmidt.Gram_Schmidt_column_k_row_code",
     "($) (Gram_Schmidt_column_k_row ?A ?k ?a) =
      (%b. (if b = mod_type_class.from_nat ?k
            then column b ?A -
                 (SUM x:{column i ?A |i. i < b}.
                     (column b ?A \<bullet> x / (x \<bullet> x)) *\<^sub>R
                     x)
            else column b ?A) $
           ?a)",
     template_equation
      (template_app
        (template_hole 16,
         template_app
          (template_app
            (template_app (template_hole 15, template_var 2),
             template_var 1),
           template_var 0)),
       t_empty)),
    ("Gram_Schmidt.column_Gram_Schmidt_upt_k",
     "?k < ncols ?A ==>
      column (mod_type_class.from_nat ?k) (Gram_Schmidt_upt_k ?A ?k) =
      column (mod_type_class.from_nat ?k) ?A -
      (SUM x:{column i (Gram_Schmidt_upt_k ?A ?k) |i.
              i < mod_type_class.from_nat ?k}.
          (x \<bullet> column (mod_type_class.from_nat ?k) ?A /
           (x \<bullet> x)) *\<^sub>R
          x)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 13, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 1)),
           template_app
            (template_app (template_hole 9, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 3, t_empty)))))),
    ("Gram_Schmidt.column_set_Gram_Schmidt_upt_k",
     "Suc ?k < CARD(?'cols) ==>
      {column i (Gram_Schmidt_upt_k ?A (Suc ?k)) |i.
       mod_type_class.to_nat i <= Suc ?k} =
      {column i (Gram_Schmidt_upt_k ?A ?k) |i.
       mod_type_class.to_nat i <= ?k} Un
      {column (mod_type_class.from_nat (Suc ?k))
        (Gram_Schmidt_upt_k ?A ?k) -
       (SUM x:{column i (Gram_Schmidt_upt_k ?A ?k) |i.
               mod_type_class.to_nat i <= ?k}.
           (x \<bullet>
            column (mod_type_class.from_nat (Suc ?k))
             (Gram_Schmidt_upt_k ?A ?k) /
            (x \<bullet> x)) *\<^sub>R
           x)}",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 20, template_var 1),
          template_app (template_hole 19, template_hole 18))],
       template_equation
        (template_app (template_hole 16, t_empty),
         template_app
          (template_app
            (template_hole 8, template_app (template_hole 16, t_empty)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 20, template_var 1))),
                     template_app
                      (template_app (template_hole 11, template_var 0),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_app (template_hole 16, t_empty)))),
             template_hole 0)))))]
