Loading theory "Draft.List_Vector" (required by "Draft.Linear_Diophantine_EquationsTemplates" via "Draft.Linear_Diophantine_Equations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Linear_Diophantine_EquationsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Linear_Diophantine_EquationsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Linear_Diophantine_EquationsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.573s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Linear_Diophantine_EquationsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.853s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Linear_Diophantine_EquationsTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.360s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Linear_Diophantine_EquationsTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.List_Vector"
### 0.545s elapsed time, 2.171s cpu time, 0.201s GC time
Loading theory "Draft.Linear_Diophantine_Equations" (required by "Draft.Linear_Diophantine_EquationsTemplates")
locale hlde_ops
  fixes a :: "nat list"
    and b :: "nat list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale hlde
  fixes a :: "nat list"
    and b :: "nat list"
  assumes "hlde a b"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale hlde
  fixes a :: "nat list"
    and b :: "nat list"
  assumes "hlde a b"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.002s elapsed time, 3.747s cpu time, 0.939s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Linear_Diophantine_Equations"
### 0.677s elapsed time, 2.449s cpu time, 0.779s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.090s elapsed time, 3.758s cpu time, 0.936s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.898s elapsed time, 5.220s cpu time, 1.081s GC time
Loading theory "Draft.Templates" (required by "Draft.Linear_Diophantine_EquationsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.078s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Linear_Diophantine_EquationsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.482s elapsed time, 0.526s cpu time, 0.053s GC time
Loading theory "Draft.Linear_Diophantine_EquationsTemplates"
val templateLemmas =
   [("Linear_Diophantine_Equations.length_us",
     "length (\<^bold>u ?y ?i) = length ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Linear_Diophantine_Equations.lcm_div_le'", "lcm ?a ?b div ?a <= ?b",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1),
       template_var 0)),
    ("Linear_Diophantine_Equations.lcm_div_le", "lcm ?a ?b div ?b <= ?a",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_var 1)),
    ("Linear_Diophantine_Equations.length_inc",
     "length (inc ?y ?i ?u) = length ?u",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Linear_Diophantine_Equations.sum_list_us_le",
     "sum_list (\<^bold>u ?y ?i) <= ?i + 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Linear_Diophantine_Equations.huets_us_simps",
     "\<^bold>u ?y 0 = inc ?y 0 (zeroes (length ?y))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 3),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_hole 3)))),
    ("Linear_Diophantine_Equations.huets_us_simps",
     "\<^bold>u ?y (Suc ?i) = inc ?y 0 (\<^bold>u ?y ?i)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Linear_Diophantine_Equations.sum_list_us_bounded",
     "?i < ?k ==> sum_list (\<^bold>u ?y ?i) <= ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 1))),
    ("Linear_Diophantine_Equations.us_le",
     "0 < length ?y ==> \<^bold>u ?y ?i \<le>\<^sub>v ?y",
     template_implication
      ([template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Linear_Diophantine_Equations.us_le_mono",
     "?i < ?j ==> \<^bold>u ?y ?i \<le>\<^sub>v \<^bold>u ?y ?j",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Linear_Diophantine_Equations.sum_list_inc_le",
     "?u \<le>\<^sub>v ?y ==> sum_list (inc ?y ?i ?u) <= sum_list ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app (template_hole 1, template_var 1)))),
    ("Linear_Diophantine_Equations.sum_list_us_gt0",
     "sum_list ?y ~= 0 ==> 0 < sum_list (\<^bold>u ?y ?i)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Linear_Diophantine_Equations.inc_ge",
     "length ?u = length ?y ==> ?u \<le>\<^sub>v inc ?y ?i ?u",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Linear_Diophantine_Equations.sum_list_us_eq",
     "?i < sum_list ?y ==> sum_list (\<^bold>u ?y ?i) = ?i + 1",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Linear_Diophantine_Equations.Solutions_sym",
     "((?x, ?y) : Solutions ?a ?b) = ((?y, ?x) : Solutions ?b ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Linear_Diophantine_Equations.Minimal_Solutions_gt0",
     "(?x, ?y) : Minimal_Solutions ?a ?b ==>
      zeroes (length ?x) <\<^sub>v ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3)),
                 template_hole 0)),
             template_var 3)
           ))),
    ("Linear_Diophantine_Equations.Minimal_Solutions_imp_Solutions",
     "(?x, ?y) : Minimal_Solutions ?a ?b ==> (?x, ?y) : Solutions ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Linear_Diophantine_Equations.sum_list_inc_le'",
     "length ?u = length ?y ==> sum_list (inc ?y ?i ?u) <= sum_list ?u + 1",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 2)),
           template_hole 0)))),
    ("Linear_Diophantine_Equations.lcm_div_gt_0",
     "[| 0 < ?a; 0 < ?b |] ==> 0 < lcm ?a ?b div ?a",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1)))),
    ("Linear_Diophantine_Equations.sum_list_list_update_Suc",
     "?i < length ?u ==>
      sum_list (?u[?i := Suc (?u ! ?i)]) = Suc (sum_list ?u)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))),
         template_app
          (template_hole 1,
           template_app (template_hole 3, template_var 0))))),
    ("Linear_Diophantine_Equations.us_mono",
     "[| ?i < ?j; ?j < sum_list ?y |]
      ==> \<^bold>u ?y ?i <\<^sub>v \<^bold>u ?y ?j",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Linear_Diophantine_Equations.lessThan_conv",
     "[| card ?A = ?n; ALL x:?A. x < ?n |] ==> ?A = {..<?n}",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            )],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Linear_Diophantine_Equations.Minimal_Solutions_length",
     "(?x, ?y) : Minimal_Solutions ?a ?b ==>
      length ?x = length ?a & length ?y = length ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Linear_Diophantine_Equations.sum_list_inc_gt0",
     "[| 0 < sum_list ?u; length ?y = length ?u |]
      ==> 0 < sum_list (inc ?y ?i ?u)",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 2))],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2))))),
    ("Linear_Diophantine_Equations.inc_le",
     "[| length ?u = length ?y; ?i < length ?y; ?u \<le>\<^sub>v ?y |]
      ==> inc ?y ?i ?u \<le>\<^sub>v ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Linear_Diophantine_Equations.Minimal_Solutions_sym",
     "[| 0 ~: set ?a; 0 ~: set ?b |]
      ==> (?xs, ?ys) : Minimal_Solutions ?a ?b -->
          (?ys, ?xs) : Minimal_Solutions ?b ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app (template_hole 4, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app (template_hole 4, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)))
           ))),
    ("Linear_Diophantine_Equations.sum_list_inc_gt0'",
     "[| length ?u = length ?y; ?i < length ?y; 0 < ?y ! ?i; ?j <= ?i |]
      ==> 0 < sum_list (inc ?y ?j ?u)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3),
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_than, template_hole 4,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 3))))),
    ("Linear_Diophantine_Equations.Minimal_SolutionsI'",
     "[| (?x, ?y) : Solutions ?a ?b; nonzero ?x;
         ~ (EX (u, v):Minimal_Solutions ?a ?b. u @ v <\<^sub>v ?x @ ?y) |]
      ==> (?x, ?y) : Minimal_Solutions ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_var 0)),
                  template_app (template_hole 2, t_empty))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Linear_Diophantine_Equations.minimize_nonzero_solution",
     "[| (?x, ?y) : Solutions ?a ?b; nonzero ?x;
         !!u v.
            [| u @ v \<le>\<^sub>v ?x @ ?y;
               (u, v) : Minimal_Solutions ?a ?b |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Linear_Diophantine_Equations.Minimal_SolutionsI",
     "[| (?x, ?y) : Solutions ?a ?b; nonzero ?x;
         ~ (EX (u, v):Solutions ?a ?b.
               nonzero u & u @ v <\<^sub>v ?x @ ?y) |]
      ==> (?x, ?y) : Minimal_Solutions ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 8, template_var 1),
                      template_var 0)),
                  template_app (template_hole 4, t_empty))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Linear_Diophantine_Equations.sum_list_inc_eq_sum_list_Suc",
     "[| length ?u = length ?y; ?i < length ?y;
         EX j>=?i. j < length ?y & ?u ! j < ?y ! j |]
      ==> sum_list (inc ?y ?i ?u) = Suc (sum_list ?u)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 2))))),
    ("Linear_Diophantine_Equations.list_mod_cases",
     "[| length ?xs = ?n; 0 < ?n |]
      ==> (EX x:set ?xs. x mod ?n = 0) |
          (EX i<length ?xs.
              EX j<length ?xs. i ~= j & ?xs ! i mod ?n = ?xs ! j mod ?n)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 1), template_var 0),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 t_empty)),
             template_app (template_hole 3, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.Linear_Diophantine_EquationsTemplates"
### 0.346s elapsed time, 0.511s cpu time, 0.071s GC time
val it = (): unit
