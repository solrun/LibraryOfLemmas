Loading theory "Draft.Sorted_Wrt" (required by "Draft.Minimize_WrtTemplates" via "Draft.Minimize_Wrt")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Minimize_WrtTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Minimize_WrtTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Minimize_WrtTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Sorted_Wrt"
### 0.067s elapsed time, 0.300s cpu time, 0.000s GC time
Loading theory "Draft.Minimize_Wrt" (required by "Draft.Minimize_WrtTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.603s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Minimize_WrtTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Minimize_Wrt"
### 0.130s elapsed time, 0.510s cpu time, 0.035s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.243s elapsed time, 0.944s cpu time, 0.035s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Minimize_WrtTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.217s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Minimize_WrtTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.757s elapsed time, 2.310s cpu time, 0.284s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.794s elapsed time, 2.290s cpu time, 0.198s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.857s elapsed time, 4.127s cpu time, 0.769s GC time
Loading theory "Draft.Templates" (required by "Draft.Minimize_WrtTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.108s cpu time, 0.044s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Minimize_WrtTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.437s elapsed time, 0.442s cpu time, 0.000s GC time
Loading theory "Draft.Minimize_WrtTemplates"
val templateLemmas =
   [("Minimize_Wrt.sorted_wrt_minimize_wrt",
     "sorted_wrt ?P (minimize_wrt ?P ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Minimize_Wrt.minimize_wrt_subset",
     "set (minimize_wrt ?P ?xs) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Minimize_Wrt.sorted_wrt_imp_sorted_wrt_minimize_wrt",
     "sorted_wrt ?Q ?xs ==> sorted_wrt ?Q (minimize_wrt ?P ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Minimize_Wrt.minimize_wrtD",
     "?c : set (minimize_wrt ?P ?xs) ==> ?c : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Minimize_Wrt.in_minimize_wrtI",
     "[| ?x : set ?xs; ALL y:set ?xs. ?P y ?x |]
      ==> ?x : set (minimize_wrt ?P ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 2, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Minimize_Wrt.minimize_wrt_ni",
     "[| ?x : set ?xs; ?x ~: set (minimize_wrt ?Q ?xs) |]
      ==> EX y:set ?xs. ~ ?Q y ?x & ?x ~= y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 3, template_var 0),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 5, template_var 1)),
             t_empty)
           ))),
    ("Minimize_Wrt.minimize_wrt_append",
     "ALL x:set ?xs. ALL y:set (?xs @ ?ys). ?P y x ==>
      minimize_wrt ?P (?xs @ ?ys) =
      ?xs @ filter (%y. ALL x:set ?xs. ?P x y) (minimize_wrt ?P ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 0, t_empty),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))))),
    ("Minimize_Wrt.minimize_wrt_eq",
     "[| distinct ?xs;
         !!x y.
            [| x : set ?xs; y : set ?xs |] ==> ?P x y = (?Q x y | x = y) |]
      ==> minimize_wrt ?P ?xs = minimize_wrt ?Q ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Minimize_Wrt.in_minimize_wrt_False",
     "[| !!x y. ?Q x y ==> ~ ?Q y x; sorted_wrt ?Q ?xs;
         ?x : set (minimize_wrt ?P ?xs); ~ ?P ?y ?x; ?Q ?y ?x; ?y : set ?xs;
         ?y ~= ?x |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 3)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_var 1, template_var 0),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 0), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 3))
            ),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_predicate (template_hole 0))),
    ("Minimize_Wrt.set_minimize_wrt",
     "[| !!x y. ?Q x y ==> ~ ?Q y x; sorted_wrt ?Q ?xs;
         !!x y. ~ ?P x y ==> ?Q x y; !!x. ?P x x |]
      ==> set (minimize_wrt ?P ?xs) = {x: set ?xs. ALL y:set ?xs. ?P y x}",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app (template_hole 3, t_empty)))),
    ("Minimize_Wrt.in_minimize_wrt_iff",
     "[| !!x y. ?Q x y ==> ~ ?Q y x; sorted_wrt ?Q ?xs;
         !!x y. ~ ?P x y ==> ?Q x y; !!x. ?P x x |]
      ==> (?x : set (minimize_wrt ?P ?xs)) =
          (?x : set ?xs & (ALL y:set ?xs. ?P y ?x))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 2))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2)),
             t_empty))))),
    ("Minimize_Wrt.in_minimize_wrtD",
     "[| !!x y. ?Q x y ==> ~ ?Q y x; sorted_wrt ?Q ?xs;
         ?x : set (minimize_wrt ?P ?xs); !!x y. ~ ?P x y ==> ?Q x y;
         !!x. ?P x x |]
      ==> ?x : set ?xs & (ALL y:set ?xs. ?P y ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 2)))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 2)),
               t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.Minimize_WrtTemplates"
### 0.278s elapsed time, 0.388s cpu time, 0.047s GC time
val it = (): unit
