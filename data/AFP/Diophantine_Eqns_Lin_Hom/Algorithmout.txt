Loading theory "Draft.List_Vector" (required by "Draft.AlgorithmTemplates" via "Draft.Algorithm" via "Draft.Simple_Algorithm" via "Draft.Linear_Diophantine_Equations")
Loading theory "Draft.Sorted_Wrt" (required by "Draft.AlgorithmTemplates" via "Draft.Algorithm" via "Draft.Simple_Algorithm" via "Draft.Minimize_Wrt")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AlgorithmTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AlgorithmTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Sorted_Wrt"
### 0.075s elapsed time, 0.328s cpu time, 0.000s GC time
Loading theory "Draft.Minimize_Wrt" (required by "Draft.AlgorithmTemplates" via "Draft.Algorithm" via "Draft.Simple_Algorithm")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.571s cpu time, 0.038s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AlgorithmTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Minimize_Wrt"
### 0.196s elapsed time, 0.772s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AlgorithmTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.349s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AlgorithmTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.843s cpu time, 0.083s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AlgorithmTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.List_Vector"
### 0.604s elapsed time, 2.393s cpu time, 0.199s GC time
Loading theory "Draft.Linear_Diophantine_Equations" (required by "Draft.AlgorithmTemplates" via "Draft.Algorithm" via "Draft.Simple_Algorithm")
locale hlde_ops
  fixes a :: "nat list"
    and b :: "nat list"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
locale hlde
  fixes a :: "nat list"
    and b :: "nat list"
  assumes "hlde a b"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
locale hlde
  fixes a :: "nat list"
    and b :: "nat list"
  assumes "hlde a b"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Linear_Diophantine_Equations"
### 0.623s elapsed time, 2.300s cpu time, 0.621s GC time
Loading theory "Draft.Simple_Algorithm" (required by "Draft.AlgorithmTemplates" via "Draft.Algorithm")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.020s elapsed time, 3.862s cpu time, 0.841s GC time
### theory "HOL-Library.Stream"
### 1.044s elapsed time, 3.953s cpu time, 0.841s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Simple_Algorithm"
### 0.370s elapsed time, 0.987s cpu time, 0.123s GC time
Loading theory "Draft.Algorithm" (required by "Draft.AlgorithmTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale bounded_gen_check
  fixes C :: "nat list => nat => bool"
    and B :: "nat"
  assumes "bounded_gen_check C B"
### theory "HOL-Library.Tree"
### 1.943s elapsed time, 5.971s cpu time, 1.100s GC time
Loading theory "Draft.Templates" (required by "Draft.AlgorithmTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AlgorithmTemplates")
Found termination order: "size_list size <*mlex*> {}"
locale bounded_generate_check
  fixes C\<^sub>2 :: "nat list => nat => bool"
    and B\<^sub>2 :: "nat"
    and C\<^sub>1 :: "nat list => nat list => nat list => nat => bool"
    and B\<^sub>1 :: "nat list => nat"
  assumes "bounded_generate_check C\<^sub>2 B\<^sub>2 C\<^sub>1 B\<^sub>1"
Found termination order: "{}"
Found termination order: "{}"
locale bounded_incs
  fixes cond :: "nat list => nat => bool"
    and B :: "nat"
  assumes "bounded_incs cond B"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.801s elapsed time, 1.951s cpu time, 0.874s GC time
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Algorithm"
### 1.459s elapsed time, 3.291s cpu time, 0.995s GC time
Loading theory "Draft.AlgorithmTemplates"
val templateLemmas =
   [("Simple_Algorithm.rlex2_irrefl",
     "~ ?x <\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2 ?x",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0)
             )
         )),
    ("Simple_Algorithm.sorted_wrt_gen",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x) (gen ?B ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Simple_Algorithm.gen_ne", "gen ?B ?n ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Algorithm.alls_ne", "alls ?B ?as ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Algorithm.finite_big_d'", "finite (set (big_d' ?a ?b ?y ?i))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("Algorithm.cond_cons_simp", "cond_cons ?P ([], ?s) = True",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Algorithm.sorted_wrt_alls",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x)
       (map fst (alls ?B ?xs))",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Algorithm.sorted_wrt_generate'",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2)
       (generate' ?A ?B ?a ?b)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Simple_Algorithm.sorted_wrt_generate",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2)
       (generate ?A ?B ?m ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Algorithm.maxne0_impl_le", "maxne0_impl ?x ?a <= Max (set ?a)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Algorithm.alls2_ne", "alls2 ?A ?B ?a ?b ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Simple_Algorithm.gen_nth0", "gen ?B ?n ! 0 = zeroes ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Algorithm.c12_generate_check_code",
     "c12_generate_check ?a ?b ?a ?b = generate_check ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Simple_Algorithm.rlex2_not_sym",
     "?x <\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2 ?y ==>
      ~ ?y <\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2 ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)
               )
           ))),
    ("Algorithm.suffs_Nil", "suffs ?P [] ([], ?s) = (?s = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3),
              template_app
               (template_app (template_hole 2, template_hole 3),
                template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Algorithm.sorted_wrt_check_generate'",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2)
       (check' ?a ?b (generate' ?A ?B ?a ?b))",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3),
               template_var 2)))
         )),
    ("Algorithm.cond1_cond2_zeroes",
     "suffs (cond2 ?a ?b) ?b (zeroes (length ?b), 0)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_hole 0))
         )),
    ("Algorithm.max_x_impl",
     "max_x_impl ?a ?b ?y ?i = hlde_ops.max_x ?a ?b ?y ?i",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Algorithm.max_y_impl",
     "max_y_impl ?a ?b ?x ?j = hlde_ops.max_y ?a ?b ?x ?j",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Algorithm.big_d",
     "set (big_d ?a ?b ?ys ?i) = hlde_ops.Di ?a ?b ?i ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("Algorithm.big_e",
     "set (big_e ?a ?b ?xs ?j) = hlde_ops.Ej ?a ?b ?j ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("Algorithm.solve_efficient",
     "solve ?a ?b = special_solutions ?a ?b @ minimize (fast_filter ?a ?b)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Algorithm.alls_nth0", "alls ?A ?as ! 0 = (zeroes (length ?as), 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_hole 3)),
         template_hole 3))),
    ("Algorithm.cond_cons_simp",
     "cond_cons ?P (?x # ?xs, ?s) = ?P (?x # ?xs) ?s",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Algorithm.cond1_cond2_zeroes",
     "suffs (cond1 ?b (zeroes (length ?b))) ?a (zeroes (length ?a), 0)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_hole 1))),
             template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_hole 1))
         )),
    ("Algorithm.maxne0_impl",
     "length ?x = length ?a ==> maxne0_impl ?x ?a = maxne0 ?x ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algorithm.alls_Cons_tl_conv",
     "alls ?A ?as = (zeroes (length ?as), 0) # tl (alls ?A ?as)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_hole 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))))),
    ("Algorithm.tune",
     "check' ?a ?b (generate' (Max (set ?b)) (Max (set ?a)) ?a ?b) =
      fast_filter ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Simple_Algorithm.sorted_wrt_gen2",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2)
       (Simple_Algorithm.gen2 ?A ?B ?m ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))
         )),
    ("Algorithm.sorted_wrt_gen2",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2)
       (Algorithm.gen2 ?A ?B ?a ?b)",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("Simple_Algorithm.sorted_wrt_check_generate",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2)
       (check_generate ?a ?b)",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0))),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1))),
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0))))
         )),
    ("Simple_Algorithm.gen2_ne", "Simple_Algorithm.gen2 ?A ?B ?m ?n ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_hole 0)
         )),
    ("Algorithm.gen2_ne", "Algorithm.gen2 ?m ?n ?b ?c ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Algorithm.zeroes_ni_generate'",
     "(zeroes (length ?a), zeroes (length ?b))
      ~: set (generate' ?A ?B ?a ?b)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 3)),
                       template_hole 2)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 2)),
                     template_hole 2))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0),
                     template_var 3),
                   template_var 2)))
             )
         )),
    ("Algorithm.concat_map_filter",
     "concat (map ?f (filter ?P ?xs)) =
      concat (map (%x. if ?P x then ?f x else []) ?xs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)))),
    ("Algorithm.le_imp_big_d'_subset",
     "?v \<le>\<^sub>v ?y ==>
      set (big_d' ?a ?b ?v ?i) <= set (big_d' ?a ?b ?y ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 4),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3),
             template_var 0))))),
    ("Algorithm.max_x_impl'",
     "length ?y <= length ?b ==>
      max_x_impl' ?a ?b ?y ?i = hlde_ops.max_x' ?a ?b ?y ?i",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 3),
           template_var 0)))),
    ("Algorithm.big_d'",
     "length ?ys <= length ?b ==>
      set (big_d' ?a ?b ?ys ?i) = hlde_ops.Di' ?a ?b ?i ?ys",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0),
           template_var 3)))),
    ("Algorithm.alls2_nth0",
     "alls2 ?A ?B ?as ?bs ! 0 =
      ((zeroes (length ?as), 0), zeroes (length ?bs), 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_hole 4)),
             template_hole 4)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_hole 4)),
           template_hole 4)))),
    ("Algorithm.c1_gen_check_conv",
     "(?ys, ?s) : set (c2_gen_check ?a ?b ?b) ==>
      c1_gen_check ?b ?ys ?a =
      bounded_gen_check.gen_check (cond1 ?b ?ys) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 1)))),
    ("Algorithm.all_Suc_le_conv",
     "(ALL i<=Suc ?n. ?P i) = (?P 0 & (ALL i<=?n. ?P (Suc i)))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 0, template_hole 0)),
         template_app (template_hole 5, t_empty)))),
    ("Simple_Algorithm.less_imp_rlex2",
     "~ (case ?x of (x, y) => %(u, v). ~ x @ y <\<^sub>v u @ v) ?y ==>
      ?x <\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2 ?y",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 4, t_empty),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Algorithm.le_imp_max_x_impl'_ge",
     "[| ?v \<le>\<^sub>v ?y; ?i < length ?a |]
      ==> max_x_impl' ?a ?b ?y ?i <= max_x_impl' ?a ?b ?v ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 4),
           template_var 2)))),
    ("Simple_Algorithm.set_gen",
     "set (gen ?B ?n) = {xs. length xs = ?n & (ALL i<?n. xs ! i <= ?B)}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Algorithm.filter_pairs_conj",
     "filter (%(x, y). ?P x y & ?Q y) ?xs =
      filter (%(x, y). ?P x y) (filter (?Q o snd) ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)))),
    ("Simple_Algorithm.gen2_nth0",
     "Simple_Algorithm.gen2 ?A ?B ?m ?n ! 0 = (zeroes ?m, zeroes ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_hole 1),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 1)))),
    ("Algorithm.max_x_impl'_conv",
     "[| ?i < length ?a; length ?y = length ?b |]
      ==> max_x_impl' ?a ?b ?y ?i = max_x_impl ?a ?b ?y ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1),
           template_var 3)))),
    ("Simple_Algorithm.zeroes_ni_tl_gen2",
     "(zeroes ?m, zeroes ?n)
      ~: set (tl (Simple_Algorithm.gen2 ?A ?B ?m ?n))",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_hole 6)),
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_hole 6))),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, t_empty),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 2))))))
             )
         )),
    ("Algorithm.alls2_Cons_tl_conv",
     "alls2 ?A ?B ?as ?bs =
      ((zeroes (length ?as), 0), zeroes (length ?bs), 0) #
      tl (alls2 ?A ?B ?as ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_hole 1)),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 1)),
               template_hole 1))),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))))),
    ("Algorithm.gen2_nth0",
     "Algorithm.gen2 ?A ?B ?a ?b ! 0 =
      (zeroes (length ?a), zeroes (length ?b))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))),
         template_hole 2),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_hole 2)))),
    ("Algorithm.in_generate'",
     "?x : set (generate' ?m ?n ?c ?b) ==>
      ?x : set (Algorithm.gen2 ?m ?n ?c ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 4),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("Simple_Algorithm.concat_map_nth0",
     "[| ?xs ~= []; ?f (?xs ! 0) ~= [] |]
      ==> concat (map ?f ?xs) ! 0 = ?f (?xs ! 0) ! 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_negation
         (
            template_equation
             (template_app
               (template_var 0,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_hole 5),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_var 0,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5))),
           template_hole 5)))),
    ("Algorithm.generate_unique",
     "[| ?i < ?j; ?j < length (generate ?A ?B ?a ?b) |]
      ==> generate ?A ?B ?a ?b ! ?i ~= generate ?A ?B ?a ?b ! ?j",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_var 5),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_var 4))
           ))),
    ("Algorithm.suffs_cond2_conv",
     "length ?ys = length ?b ==>
      suffs (cond2 ?a ?b) ?b (?ys, ?b \<bullet> ?ys) =
      ((ALL y:set ?ys. y <= Max (set ?a)) & subdprodr_impl ?a ?b ?ys)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2),
          template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_var 1)),
             template_var 1),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               t_empty)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2))))),
    ("Algorithm.set_alls",
     "set (alls ?B ?a) =
      {(x, s).
       length x = length ?a &
       (ALL i<length ?a. x ! i <= ?B) & s = ?a \<bullet> x}",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app (template_hole 11, template_var 1),
           template_var 0)),
       template_app
        (template_hole 10, template_app (template_hole 9, t_empty)))),
    ("Algorithm.set_gen2",
     "set (Algorithm.gen2 ?A ?B ?a ?b) =
      {(x, y).
       x \<le>\<^sub>v replicate (length ?a) ?A & y
       \<le>\<^sub>v replicate (length ?b) ?B}",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10, template_app (template_hole 9, t_empty)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Algorithm.set_gen2'",
     "(%(x, y). (fst x, fst y)) ` set (alls2 ?A ?B ?a ?b) =
      {(x, y).
       x \<le>\<^sub>v replicate (length ?a) ?A & y
       \<le>\<^sub>v replicate (length ?b) ?B}",
     template_equation
      (template_app
        (template_app
          (template_hole 11, template_app (template_hole 10, t_empty)),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Algorithm.Min_big_d'_le",
     "[| ?i < length ?a; big_d' ?a ?b ?y ?i ~= []; length ?y <= length ?b |]
      ==> Min (set (big_d' ?a ?b ?y ?i)) <= Max (set ?b)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 8, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1),
                  template_var 0),
                template_var 3),
              template_hole 4)
            ),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 0),
          template_app (template_hole 8, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 3))),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 1))))),
    ("Algorithm.suffs_cond2I",
     "[| ALL y:set ?aaa. y <= Max (set ?a); length ?aaa = length ?b;
         subdprodr_impl ?a ?b ?aaa |]
      ==> suffs (cond2 ?a ?b) ?b (?aaa, ?b \<bullet> ?aaa)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("Algorithm.suffs_Cons",
     "suffs ?P (?a # ?as) (?x # ?xs, ?s) =
      (?s = ?a * ?x + ?as \<bullet> ?xs &
       cond_cons ?P (?x # ?xs, ?s) &
       suffs ?P ?as (?xs, ?as \<bullet> ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 7, template_var 2),
                         template_var 1)),
                     template_var 0))),
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 5),
                   template_var 3),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)))))
           ))),
    ("Simple_Algorithm.in_tl_gen2",
     "?x : set (tl (Simple_Algorithm.gen2 ?A ?B ?m ?n)) ==>
      ?x : set (Simple_Algorithm.gen2 ?A ?B ?m ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, t_empty),
                      template_app
                       (template_app (template_hole 0, template_var 1),
                        template_var 0))))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 4),
             template_app
              (template_hole 6,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("Algorithm.suffs_cond1I",
     "[| ALL y:set ?aa. y <= maxne0_impl ?aaa ?b; length ?aa = length ?a;
         ?a \<bullet> ?aa = ?b \<bullet> ?aaa |]
      ==> suffs (cond1 ?b ?aaa) ?a (?aa, ?b \<bullet> ?aaa)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 4, template_var 3),
          template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 3),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2)))
           ))),
    ("Algorithm.concat_map_filter_filter",
     "(!!x. [| x : set ?xs; ~ ?Q x |] ==> filter ?P (?f x) = []) ==>
      concat (map (filter ?P o ?f) (filter ?Q ?xs)) =
      concat (map (filter ?P o ?f) ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 1)),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 1)),
                 template_var 0)),
             template_var 3))))),
    ("Algorithm.set_generate''",
     "set (generate' ?A ?B ?a ?b) =
      {(x, y).
       (x, y) ~= (zeroes (length ?a), zeroes (length ?b)) &
       x \<le>\<^sub>v replicate (length ?a) ?A & y
       \<le>\<^sub>v replicate (length ?b) ?B}",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 9, template_app (template_hole 8, t_empty)))),
    ("Simple_Algorithm.set_generate",
     "set (generate ?A ?B ?m ?n) =
      {(x, y).
       (x, y) ~= (zeroes ?m, zeroes ?n) &
       (x, y) : set (Simple_Algorithm.gen2 ?A ?B ?m ?n)}",
     template_equation
      (template_app
        (template_hole 14,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 13, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 12, template_app (template_hole 11, t_empty)))),
    ("Algorithm.set_generate'",
     "set (generate' ?A ?B ?a ?b) =
      {(x, y).
       (x, y) ~= (zeroes (length ?a), zeroes (length ?b)) &
       (x, y) : set (Algorithm.gen2 ?A ?B ?a ?b)}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 14, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 13, template_app (template_hole 12, t_empty)))),
    ("Simple_Algorithm.set_gen2",
     "set (Simple_Algorithm.gen2 ?A ?B ?m ?n) =
      {(x, y).
       length x = ?m &
       length y = ?n & (ALL i<?m. x ! i <= ?A) & (ALL j<?n. y ! j <= ?B)}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, t_empty),
             template_app
              (template_app (template_hole 10, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 9, template_app (template_hole 8, t_empty)))),
    ("Simple_Algorithm.set_solutions_iff",
     "set (solutions ?a ?b) =
      {(x, y).
       (x, y) : set (check_generate ?a ?b) &
       ~ (EX (u, v):set (check_generate ?a ?b). u @ v <\<^sub>v x @ y)}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app (template_hole 14, template_var 1),
           template_var 0)),
       template_app
        (template_hole 13, template_app (template_hole 12, t_empty)))),
    ("Simple_Algorithm.gen2_unique",
     "[| ?i < ?j; ?j < length (Simple_Algorithm.gen2 ?A ?B ?m ?n) |]
      ==> Simple_Algorithm.gen2 ?A ?B ?m ?n ! ?i ~=
          Simple_Algorithm.gen2 ?A ?B ?m ?n ! ?j",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_hole 8,
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, t_empty),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)))),
               template_var 5),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)))),
               template_var 4))
           ))),
    ("Algorithm.gen2_unique",
     "[| ?i < ?j; ?j < length (Algorithm.gen2 ?A ?B ?a ?b) |]
      ==> Algorithm.gen2 ?A ?B ?a ?b ! ?i ~=
          Algorithm.gen2 ?A ?B ?a ?b ! ?j",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_hole 8,
            template_app
             (template_app
               (template_hole 7, template_app (template_hole 6, t_empty)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, t_empty)),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0))),
               template_var 5),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, t_empty)),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0))),
               template_var 4))
           ))),
    ("Algorithm.set_alls2",
     "set (alls2 ?A ?B ?a ?b) =
      {((x, s), y, t).
       length x = length ?a &
       length y = length ?b &
       (ALL i<length ?a. x ! i <= ?A) &
       (ALL j<length ?b. y ! j <= ?B) &
       s = ?a \<bullet> x & t = ?b \<bullet> y}",
     template_equation
      (template_app
        (template_hole 14,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 13, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 12,
         template_app
          (template_hole 11, template_app (template_hole 10, t_empty))))),
    ("Algorithm.check_cond_conv",
     "(?x, ?y) : set (alls2 (Max (set ?b)) (Max (set ?a)) ?a ?b) ==>
      check_cond ?a ?b (fst ?x, fst ?y) =
      (static_bounds ?a ?b (fst ?x) (fst ?y) &
       ?a \<bullet> fst ?x = ?b \<bullet> fst ?y &
       boundr_impl ?a ?b (fst ?x) (fst ?y) &
       suffs (cond1 ?b (fst ?y)) ?a ?x & suffs (cond2 ?a ?b) ?b ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_hole 13,
                          template_app (template_hole 12, template_var 1))),
                      template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_var 0))),
                    template_var 0),
                  template_var 1)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 0),
                  template_var 1),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 3)),
                  template_app (template_hole 8, template_var 2)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 1),
                     template_app (template_hole 8, template_var 3)),
                   template_app (template_hole 8, template_var 2))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_app (template_hole 8, template_var 3))),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app (template_hole 8, template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 0),
                           template_var 1),
                         template_app (template_hole 8, template_var 3)),
                       template_app (template_hole 8, template_var 2))),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 1),
                               template_app
                                (template_hole 8, template_var 2))),
                           template_var 0),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 0, template_var 0),
                             template_var 1)),
                         template_var 1),
                       template_var 2)))))
             )))),
    ("Simple_Algorithm.set_minimize_check_generate",
     "set (minimize (check_generate ?a ?b)) =
      {(x, y).
       (x, y) : set (check_generate ?a ?b) &
       ~ (EX (u, v):set (check_generate ?a ?b). u @ v <\<^sub>v x @ y)}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_hole 14,
           template_app
            (template_app
              (template_app (template_hole 13, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 0))),
                   template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_var 1))),
                 template_app (template_hole 9, template_var 1)),
               template_app (template_hole 9, template_var 0))))),
       template_app
        (template_hole 8, template_app (template_hole 7, t_empty)))),
    ("Simple_Algorithm.set_check_generate",
     "set (check_generate ?a ?b) =
      {(x, y).
       (x, y) ~= (zeroes (length ?a), zeroes (length ?b)) &
       length x = length ?a &
       length y = length ?b &
       ?a \<bullet> x = ?b \<bullet> y &
       (ALL i<length ?a. x ! i <= Max (set ?b)) &
       (ALL j<length ?b. y ! j <= Max (set ?a))}",
     template_equation
      (template_app
        (template_hole 20,
         template_app
          (template_app
            (template_app (template_hole 19, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_hole 17,
                     template_app (template_hole 16, template_var 0))),
                 template_app
                  (template_hole 17,
                   template_app (template_hole 16, template_var 1))),
               template_app (template_hole 15, template_var 1)),
             template_app (template_hole 15, template_var 0)))),
       template_app
        (template_hole 14, template_app (template_hole 13, t_empty))))]:
   (string * thm * template) list
### theory "Draft.AlgorithmTemplates"
### 0.384s elapsed time, 0.588s cpu time, 0.064s GC time
val it = (): unit
