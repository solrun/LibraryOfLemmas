Loading theory "Draft.List_Vector" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.Simple_Algorithm" via "Draft.Linear_Diophantine_Equations")
Loading theory "Draft.Sorted_Wrt" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.Simple_Algorithm" via "Draft.Minimize_Wrt")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Sorted_Wrt"
### 0.073s elapsed time, 0.329s cpu time, 0.000s GC time
Loading theory "Draft.Minimize_Wrt" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.Simple_Algorithm")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.633s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Minimize_Wrt"
### 0.188s elapsed time, 0.741s cpu time, 0.034s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.315s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.858s cpu time, 0.074s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.List_Vector"
### 0.550s elapsed time, 2.179s cpu time, 0.195s GC time
Loading theory "Draft.Linear_Diophantine_Equations" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.Simple_Algorithm")
locale hlde_ops
  fixes a :: "nat list"
    and b :: "nat list"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale hlde
  fixes a :: "nat list"
    and b :: "nat list"
  assumes "hlde a b"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale hlde
  fixes a :: "nat list"
    and b :: "nat list"
  assumes "hlde a b"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Linear_Diophantine_Equations"
### 0.443s elapsed time, 1.750s cpu time, 0.181s GC time
Loading theory "Draft.Simple_Algorithm" (required by "Draft.Simple_AlgorithmTemplates")
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 1.024s elapsed time, 3.853s cpu time, 0.968s GC time
### theory "HOL-Library.Stream"
### 1.086s elapsed time, 4.085s cpu time, 0.968s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Simple_Algorithm"
### 0.652s elapsed time, 1.930s cpu time, 0.787s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.976s elapsed time, 5.527s cpu time, 1.208s GC time
Loading theory "Draft.Templates" (required by "Draft.Simple_AlgorithmTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Simple_AlgorithmTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.487s elapsed time, 0.539s cpu time, 0.065s GC time
Loading theory "Draft.Simple_AlgorithmTemplates"
val templateLemmas =
   [("Simple_Algorithm.rlex2_irrefl",
     "~ ?x <\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2 ?x",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0)
             )
         )),
    ("Simple_Algorithm.sorted_wrt_gen",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x) (gen ?B ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Simple_Algorithm.gen_ne", "gen ?B ?n ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Simple_Algorithm.sorted_wrt_generate",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2)
       (generate ?A ?B ?m ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Simple_Algorithm.gen_nth0", "gen ?B ?n ! 0 = zeroes ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Simple_Algorithm.rlex2_not_sym",
     "?x <\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2 ?y ==>
      ~ ?y <\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2 ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)
               )
           ))),
    ("Simple_Algorithm.sorted_wrt_gen2",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2)
       (gen2 ?A ?B ?m ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))
         )),
    ("Simple_Algorithm.sorted_wrt_check_generate",
     "sorted_wrt (<\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2)
       (check_generate ?a ?b)",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0))),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1))),
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0))))
         )),
    ("Simple_Algorithm.gen2_ne", "gen2 ?A ?B ?m ?n ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_hole 0)
         )),
    ("Simple_Algorithm.less_imp_rlex2",
     "~ (case ?x of (x, y) => %(u, v). ~ x @ y <\<^sub>v u @ v) ?y ==>
      ?x <\<^sub>r\<^sub>l\<^sub>e\<^sub>x\<^sub>2 ?y",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 4, t_empty),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Simple_Algorithm.set_gen",
     "set (gen ?B ?n) = {xs. length xs = ?n & (ALL i<?n. xs ! i <= ?B)}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("Simple_Algorithm.gen2_nth0",
     "gen2 ?A ?B ?m ?n ! 0 = (zeroes ?m, zeroes ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_hole 1),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 1)))),
    ("Simple_Algorithm.zeroes_ni_tl_gen2",
     "(zeroes ?m, zeroes ?n) ~: set (tl (gen2 ?A ?B ?m ?n))",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_hole 6)),
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_hole 6))),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, t_empty),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 2))))))
             )
         )),
    ("Simple_Algorithm.concat_map_nth0",
     "[| ?xs ~= []; ?f (?xs ! 0) ~= [] |]
      ==> concat (map ?f ?xs) ! 0 = ?f (?xs ! 0) ! 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_negation
         (
            template_equation
             (template_app
               (template_var 0,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_hole 5),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_var 0,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5))),
           template_hole 5)))),
    ("Simple_Algorithm.in_tl_gen2",
     "?x : set (tl (gen2 ?A ?B ?m ?n)) ==> ?x : set (gen2 ?A ?B ?m ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, t_empty),
                      template_app
                       (template_app (template_hole 0, template_var 1),
                        template_var 0))))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 4),
             template_app
              (template_hole 6,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("Simple_Algorithm.set_generate",
     "set (generate ?A ?B ?m ?n) =
      {(x, y).
       (x, y) ~= (zeroes ?m, zeroes ?n) & (x, y) : set (gen2 ?A ?B ?m ?n)}",
     template_equation
      (template_app
        (template_hole 14,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 13, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 12, template_app (template_hole 11, t_empty)))),
    ("Simple_Algorithm.set_gen2",
     "set (gen2 ?A ?B ?m ?n) =
      {(x, y).
       length x = ?m &
       length y = ?n & (ALL i<?m. x ! i <= ?A) & (ALL j<?n. y ! j <= ?B)}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, t_empty),
             template_app
              (template_app (template_hole 10, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 9, template_app (template_hole 8, t_empty)))),
    ("Simple_Algorithm.set_solutions_iff",
     "set (solutions ?a ?b) =
      {(x, y).
       (x, y) : set (check_generate ?a ?b) &
       ~ (EX (u, v):set (check_generate ?a ?b). u @ v <\<^sub>v x @ y)}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app (template_hole 14, template_var 1),
           template_var 0)),
       template_app
        (template_hole 13, template_app (template_hole 12, t_empty)))),
    ("Simple_Algorithm.gen2_unique",
     "[| ?i < ?j; ?j < length (gen2 ?A ?B ?m ?n) |]
      ==> gen2 ?A ?B ?m ?n ! ?i ~= gen2 ?A ?B ?m ?n ! ?j",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_hole 8,
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, t_empty),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)))),
               template_var 5),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, t_empty),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)))),
               template_var 4))
           ))),
    ("Simple_Algorithm.set_minimize_check_generate",
     "set (minimize (check_generate ?a ?b)) =
      {(x, y).
       (x, y) : set (check_generate ?a ?b) &
       ~ (EX (u, v):set (check_generate ?a ?b). u @ v <\<^sub>v x @ y)}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_hole 14,
           template_app
            (template_app
              (template_app (template_hole 13, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 0))),
                   template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_var 1))),
                 template_app (template_hole 9, template_var 1)),
               template_app (template_hole 9, template_var 0))))),
       template_app
        (template_hole 8, template_app (template_hole 7, t_empty)))),
    ("Simple_Algorithm.set_check_generate",
     "set (check_generate ?a ?b) =
      {(x, y).
       (x, y) ~= (zeroes (length ?a), zeroes (length ?b)) &
       length x = length ?a &
       length y = length ?b &
       ?a \<bullet> x = ?b \<bullet> y &
       (ALL i<length ?a. x ! i <= Max (set ?b)) &
       (ALL j<length ?b. y ! j <= Max (set ?a))}",
     template_equation
      (template_app
        (template_hole 20,
         template_app
          (template_app
            (template_app (template_hole 19, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_hole 17,
                     template_app (template_hole 16, template_var 0))),
                 template_app
                  (template_hole 17,
                   template_app (template_hole 16, template_var 1))),
               template_app (template_hole 15, template_var 1)),
             template_app (template_hole 15, template_var 0)))),
       template_app
        (template_hole 14, template_app (template_hole 13, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Simple_AlgorithmTemplates"
### 0.347s elapsed time, 0.503s cpu time, 0.074s GC time
val it = (): unit
