Loading theory "Automatic_Refinement.Foldi" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Collections.SetIteratorOperations" via "Collections.SetIterator")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Collections.SetIteratorOperations" via "Collections.SetIterator" via "Automatic_Refinement.Misc")
Loading theory "Automatic_Refinement.Refine_Util_Bootstrap1" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Refine_Util")
Loading theory "Automatic_Refinement.Prio_List" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
infix 1 ##
signature BASIC_REFINE_UTIL =
  sig
    val ## : ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val map_fold: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val seq_is_empty: 'a Seq.seq -> bool * 'a Seq.seq
    val split: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_matching:
       ('a -> 'b -> bool) ->
         'a list -> 'b list -> ('b list * 'b list) option
    val yield_singleton2:
       ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
  end
structure Basic_Refine_Util: BASIC_REFINE_UTIL
val map_option = fn: ('a -> 'b) -> 'a option -> 'b option
val split = fn: ('a -> bool) -> 'a list -> 'a list * 'a list
val map_fold = fn: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
val split_matching = fn:
   ('a -> 'b -> bool) -> 'a list -> 'b list -> ('b list * 'b list) option
val seq_is_empty = fn: 'a Seq.seq -> bool * 'a Seq.seq
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
val yield_singleton2 = fn:
   ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
signature PRIO_LIST =
  sig
    type T
    val add_after: T -> item -> item -> T
    val add_before: T -> item -> item -> T
    val add_first: T -> item -> T
    val add_last: T -> item -> T
    val contains: T -> item -> bool
    val delete: item -> T -> T
    val dest: T -> item list
    val empty: T
    type item
    val merge: T * T -> T
    val merge': T * T -> item list * T
    val prio_of: (item -> bool) -> (item * item -> bool) -> T -> int
  end
functor Prio_List (sig val eq: item * item -> bool type item end): PRIO_LIST
### theory "Automatic_Refinement.Refine_Util_Bootstrap1"
### 0.040s elapsed time, 0.156s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Mk_Term_Antiquot" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Refine_Util")
consts
  foldli :: "'b list => ('a => bool) => ('b => 'a => 'a) => 'a => 'a"
### theory "Automatic_Refinement.Prio_List"
### 0.041s elapsed time, 0.159s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Mpat_Antiquot" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Refine_Util")
val mk_term_antiquot = fn:
   Context.generic * Token.T list ->
     string * (Context.generic * Token.T list)
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "Automatic_Refinement.Mk_Term_Antiquot"
### 0.079s elapsed time, 0.284s cpu time, 0.029s GC time
Loading theory "Collections.ICF_Tools" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Record_Intf")
### theory "Automatic_Refinement.Foldi"
### 0.129s elapsed time, 0.473s cpu time, 0.029s GC time
Loading theory "Draft.Benchmark_Comparison" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF")
val mpat_antiquot = fn:
   Context.generic * Token.T list ->
     string * (Context.generic * Token.T list)
### theory "Automatic_Refinement.Mpat_Antiquot"
### 0.125s elapsed time, 0.473s cpu time, 0.029s GC time
Loading theory "Automatic_Refinement.Refine_Util" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib")
structure Eisbach_Rule_Insts: sig end
infix 0 ##
signature ICF_TOOLS =
  sig
    val changed_conv: conv -> conv
    val chead_of: cterm -> cterm
    val chead_of_thm: thm -> cterm
    val define_simple:
       string -> term -> local_theory -> (term * thm) * local_theory
    val define_simple_global:
       string -> term -> theory -> (term * thm) * theory
    val define_simple_local:
       string -> term -> local_theory -> (term * thm) * local_theory
    val dest_def_eq: term -> term * term
    val dt_head: term -> term
    val dt_lhs: term -> term
    val dt_params: term -> term list
    val dt_rhs: term -> term
    val dthm_head: thm -> term
    val dthm_lhs: thm -> term
    val dthm_params: thm -> term list
    val dthm_rhs: thm -> term
    val gen_variant: (string -> bool) -> string -> string
    val import_cterm: cterm -> Proof.context -> cterm * Proof.context
    val inst_meta_cong: Proof.context -> cterm -> thm
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val norm_def_thm: thm -> thm
    val parse_cpat: cterm context_parser
    val rem_dup_prems: Proof.context -> thm -> thm
    val rename_cterm: cterm * cterm -> ctyp TVars.table * cterm Vars.table
    val renames_cterm: cterm * cterm -> bool
    val repeat_top_sweep_conv:
       (Proof.context -> conv) -> Proof.context -> conv
    val revert_abbrevs: string -> theory -> theory
    val sss_add: thm list -> Proof.context -> Proof.context
    val wrap_lthy_global: (local_theory -> local_theory) -> theory -> theory
    val wrap_lthy_local:
       (local_theory -> local_theory) -> local_theory -> local_theory
    val wrap_lthy_result_global:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> theory -> 'b * theory
    val wrap_lthy_result_local:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> local_theory -> 'b * local_theory
  end
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
structure ICF_Tools: ICF_TOOLS
### theory "Collections.ICF_Tools"
### 0.130s elapsed time, 0.495s cpu time, 0.032s GC time
Loading theory "Collections.Ord_Code_Preproc" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Record_Intf")
### ML warning (line 26 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 37 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (trace_ft) has not been referenced.
### ML warning (line 50 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (process) has not been referenced.
signature ORD_CODE_PREPROC =
  sig
    val add: int * string * (theory -> thm -> thm) -> theory -> theory
    val get: theory -> (int * string * (theory -> thm -> thm)) list
    val rem: string -> theory -> theory
    val setup: theory -> theory
    val trace_enabled: bool ref
  end
signature OC_SIMPSET =
  sig
    val get: theory -> simpset
    val map: (simpset -> simpset) -> theory -> theory
    val setup: theory -> theory
  end
structure Ord_Code_Preproc: ORD_CODE_PREPROC
functor Oc_Simpset (sig val name: string val prio: int end): OC_SIMPSET
### theory "Collections.Ord_Code_Preproc"
### 0.049s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "Collections.Locale_Code" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### ML warning (line 343 of "$AFP/Collections/ICF/tools/Locale_Code.thy"):
### Pattern is not exhaustive.
signature LOCALE_CODE =
  sig
    val add_pat_eq: cterm -> thm list -> theory -> theory
    val close_block: theory -> theory
    val del_pat: cterm -> theory -> theory
    val get_unf_ss: theory -> simpset
    val lc_decl_del: term -> local_theory -> local_theory
    val lc_decl_eq: thm list -> local_theory -> local_theory
    val open_block: theory -> theory
    type pat_eq = cterm * thm list
    val setup: theory -> theory
    val tracing_enabled: bool ref
  end
structure Locale_Code: LOCALE_CODE
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "Collections.Locale_Code"
### 0.117s elapsed time, 0.448s cpu time, 0.049s GC time
Loading theory "Collections.Record_Intf" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base")
### theory "HOL-Eisbach.Eisbach"
### 0.454s elapsed time, 1.712s cpu time, 0.109s GC time
Loading theory "Finger-Trees.FingerTree" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.FTAnnotatedListImpl")
signature RECORD_INTF =
  sig
    val add_unf_thms: thm list -> Context.generic -> Context.generic
    val add_unf_thms_global: thm list -> theory -> theory
    val get_unf_ss: Context.generic -> simpset
    val get_unf_thms: Context.generic -> thm list
    val icf_locales_tac: Proof.context -> tactic
    val icf_rec_def: thm -> Context.generic -> Context.generic
    val icf_rec_def_attr: attribute context_parser
    val setup: theory -> theory
  end
structure Record_Intf: RECORD_INTF
### theory "Collections.Record_Intf"
### 0.072s elapsed time, 0.329s cpu time, 0.000s GC time
Loading theory "Trie.Trie" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.TrieSetImpl" via "Collections.TrieMapImpl" via "Collections.Trie2" via "Collections.Trie_Impl")
### ML warning (line 563 of "$AFP/Automatic_Refinement/Lib/Refine_Util.thy"):
### Handler catches all exceptions.
infix 0 THEN_ELSE'
infix 0 THEN_ELSE_COMB'
infix 1 THEN_ALL_NEW_FWD
infix 1 THEN_INTERVAL
infix 2 ORELSE_INTERVAL
infix 3 ->>
type itactic = int -> int -> tactic
type tactic' = int -> tactic
signature BASIC_REFINE_UTIL =
  sig
    val ## : ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val ->> :
       'a context_parser * ('a * Context.generic -> 'b * Context.generic) ->
         'b context_parser
    val ALL_GOALS_FWD: tactic' -> tactic
    val ALL_GOALS_FWD': tactic' -> tactic'
    val APPEND_LIST': tactic' list -> tactic'
    val CAN': tactic' -> tactic'
    val CASES': (tactic' * tactic) list -> tactic'
    val CONCL_COND': (term -> bool) -> tactic'
    val COND': (term -> bool) -> tactic'
    val IF_EXGOAL: (int -> tactic) -> tactic'
    val INTERVAL_FWD: tactic' -> int -> int -> tactic
    val NTIMES': tactic' -> int -> tactic'
    val ORELSE_INTERVAL: itactic * itactic -> itactic
    val REPEAT': tactic' -> tactic'
    val REPEAT_ALL_NEW_FWD: tactic' -> tactic'
    val REPEAT_DETERM': tactic' -> tactic'
    val RSm: Proof.context -> thm -> thm -> thm
    val SINGLE_INTERVAL: itactic -> tactic'
    val THEN_ALL_NEW_FWD: tactic' * tactic' -> tactic'
    val THEN_ELSE': tactic' * (tactic' * tactic') -> tactic'
    val THEN_ELSE_COMB':
       tactic' * ((tactic' * tactic' -> tactic') * tactic' * tactic') ->
         tactic'
    val THEN_INTERVAL: itactic * itactic -> itactic
    val TRADE: (Proof.context -> tactic') -> Proof.context -> tactic'
    val TRY_SOLVED': tactic' -> tactic'
    val WITH_concl: (term -> tactic') -> tactic'
    val WITH_subgoal: (term -> tactic') -> tactic'
    val elim_all_tac: Proof.context -> thm list -> tactic
    val eqsubst_inst_meth: (Proof.context -> Proof.method) context_parser
    val eqsubst_inst_tac:
       Proof.context ->
         bool ->
           int list ->
             ((indexname * Position.T) * string) list ->
               thm -> int -> tactic
    val fo_resolve_tac: thm list -> Proof.context -> tactic'
    val fo_rtac: thm -> Proof.context -> tactic'
    val has_Var: term -> bool
    val insert_subgoal_tac: cterm -> tactic'
    val insert_subgoals_tac: cterm list -> tactic'
    val is_Abs: term -> bool
    val is_Comb: term -> bool
    val is_TFree: typ -> bool
    val is_def_thm: thm -> bool
    type itactic = int -> int -> tactic
    val map_fold: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val prefer_tac: int -> tactic
    val rprem_tac: int -> Proof.context -> tactic'
    val rprems_tac: Proof.context -> tactic'
    val seq_is_empty: 'a Seq.seq -> bool * 'a Seq.seq
    val split: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_matching:
       ('a -> 'b -> bool) ->
         'a list -> 'b list -> ('b list * 'b list) option
    type tactic' = int -> tactic
    val yield_singleton2:
       ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
  end
signature REFINE_UTIL =
  sig
    val ## : ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val ->> :
       'a context_parser * ('a * Context.generic -> 'b * Context.generic) ->
         'b context_parser
    val ALL_GOALS_FWD: tactic' -> tactic
    val ALL_GOALS_FWD': tactic' -> tactic'
    val APPEND_LIST': tactic' list -> tactic'
    val CAN': tactic' -> tactic'
    val CASES': (tactic' * tactic) list -> tactic'
    val CONCL_COND': (term -> bool) -> tactic'
    val COND': (term -> bool) -> tactic'
    val HOL_concl_conv: (Proof.context -> conv) -> Proof.context -> conv
    val IF_EXGOAL: (int -> tactic) -> tactic'
    val INTERVAL_FWD: tactic' -> int -> int -> tactic
    val NTIMES': tactic' -> int -> tactic'
    val OF_fst: thm list -> thm list -> thm
    val ORELSE_INTERVAL: itactic * itactic -> itactic
    val REPEAT': tactic' -> tactic'
    val REPEAT_ALL_NEW_FWD: tactic' -> tactic'
    val REPEAT_DETERM': tactic' -> tactic'
    val RS_fst: thm -> thm list -> thm
    val RSm: Proof.context -> thm -> thm -> thm
    val SINGLE_INTERVAL: itactic -> tactic'
    val THEN_ALL_NEW_FWD: tactic' * tactic' -> tactic'
    val THEN_ELSE': tactic' * (tactic' * tactic') -> tactic'
    val THEN_ELSE_COMB':
       tactic' * ((tactic' * tactic' -> tactic') * tactic' * tactic') ->
         tactic'
    val THEN_INTERVAL: itactic * itactic -> itactic
    val TRADE: (Proof.context -> tactic') -> Proof.context -> tactic'
    val TRY_SOLVED': tactic' -> tactic'
    val WITH_concl: (term -> tactic') -> tactic'
    val WITH_subgoal: (term -> tactic') -> tactic'
    val abs_def: Proof.context -> thm -> thm
    val anorm_term: term -> term
    val anorm_typ: typ -> typ
    val apply_configs:
       ('a Config.T * 'a) list -> Proof.context -> Proof.context
    val build_res_net: thm list -> (int * thm) Net.net
    val cfg_trace_f_tac_conv: bool Config.T
    val changed_rule: (thm -> thm) -> thm -> thm
    val dest_itselfT: typ -> typ
    val dummify_tvars: term -> term
    val elim_all_tac: Proof.context -> thm list -> tactic
    val eqsubst_inst_meth: (Proof.context -> Proof.method) context_parser
    val eqsubst_inst_tac:
       Proof.context ->
         bool ->
           int list ->
             ((indexname * Position.T) * string) list ->
               thm -> int -> tactic
    val f_tac_conv:
       Proof.context -> (term -> term) -> (Proof.context -> tactic) -> conv
    val fcomb_conv: conv -> conv
    val fix_conv: Proof.context -> conv -> conv
    val fix_left_tuple_from_Ts:
       string -> typ list -> Proof.context -> term * Proof.context
    val fixup_vars: cterm -> thm -> thm
    val fixup_vars_conv: conv -> conv
    val fixup_vars_conv': (Proof.context -> conv) -> Proof.context -> conv
    val fo_matches: theory -> cterm -> term -> bool
    val fo_matchp: theory -> cterm -> term -> term list option
    val fo_resolve_tac: thm list -> Proof.context -> tactic'
    val fo_rtac: thm -> Proof.context -> tactic'
    val fold_binop_left:
       ('a -> 'b * 'a) ->
         ('c -> 'a -> 'b * 'a) ->
           ('b * 'b -> 'b) -> 'c list -> 'a -> 'b * 'a
    val fsub_conv: (Proof.context -> conv) -> Proof.context -> conv
    val ftop_conv: (Proof.context -> conv) -> Proof.context -> conv
    val has_Var: term -> bool
    val import_conv: (Proof.context -> conv) -> Proof.context -> conv
    val import_cterms:
       bool -> cterm list -> Proof.context -> cterm list * Proof.context
    val insert_subgoal_tac: cterm -> tactic'
    val insert_subgoals_tac: cterm list -> tactic'
    val instantiate_tuples:
       Proof.context -> (indexname * typ) list -> thm -> thm
    val instantiate_tuples_from_term_tac: Proof.context -> term -> tactic
    val instantiate_tuples_subgoal_tac: Proof.context -> tactic'
    val is_Abs: term -> bool
    val is_Comb: term -> bool
    val is_TFree: typ -> bool
    val is_def_thm: thm -> bool
    type itactic = int -> int -> tactic
    val ite_conv: conv -> conv -> conv -> conv
    val lambda_tuple: term list -> term -> term
    val list_binop_left: 'a -> ('a * 'a -> 'a) -> 'a list -> 'a
    val list_prodT_left: typ list -> typ
    val map_fold: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val mk_compN: int -> term -> term -> term
    val mk_compN1: typ list -> int -> term -> term -> term
    val mk_ltuple: term list -> term
    val monitor_conv: string -> conv -> conv
    val monitor_conv':
       string -> (Proof.context -> conv) -> Proof.context -> conv
    val order_by: ('a * 'a -> order) -> ('b -> 'a) -> 'b list -> 'b list
    val parse_bool_config: string -> bool Config.T -> bool context_parser
    val parse_bool_config':
       string ->
         bool Config.T ->
           Token.T list -> (bool Config.T * bool) * Token.T list
    val parse_paren_list: 'a context_parser -> 'a list context_parser
    val parse_paren_list':
       'a parser -> Token.T list -> 'a list * Token.T list
    val parse_paren_lists: 'a context_parser -> 'a list list context_parser
    val pat_conv: cterm -> (Proof.context -> conv) -> Proof.context -> conv
    val pat_conv':
       cterm -> (string -> Proof.context -> conv) -> Proof.context -> conv
    val prefer_tac: int -> tactic
    val repeat_rule: (thm -> thm) -> thm -> thm
    val rprem_tac: int -> Proof.context -> tactic'
    val rprems_tac: Proof.context -> tactic'
    val seq_is_empty: 'a Seq.seq -> bool * 'a Seq.seq
    val shift_lambda_left: thm -> thm
    val shift_lambda_leftN: int -> thm -> thm
    val split: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_matching:
       ('a -> 'b -> bool) ->
         'a list -> 'b list -> ('b list * 'b list) option
    val strip_prodT_left: typ -> typ list
    val subsume_sort: ('a -> term) -> theory -> 'a list -> 'a list
    val subsume_sort_gen:
       ('a -> term) -> Context.generic -> 'a list -> 'a list
    type tactic' = int -> tactic
    val trace_conv: conv
    val trade_rule:
       (Proof.context -> thm -> thm) -> Proof.context -> thm -> thm
    val try_rule: (thm -> thm) -> thm -> thm
    val yield_singleton2:
       ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
  end
structure Refine_Util: REFINE_UTIL
structure Basic_Refine_Util: BASIC_REFINE_UTIL
val map_option = fn: ('a -> 'b) -> 'a option -> 'b option
val split = fn: ('a -> bool) -> 'a list -> 'a list * 'a list
val REPEAT_DETERM' = fn: tactic' -> tactic'
val RSm = fn: Proof.context -> thm -> thm -> thm
val NTIMES' = fn: tactic' -> int -> tactic'
val fo_resolve_tac = fn: thm list -> Proof.context -> tactic'
val SINGLE_INTERVAL = fn: itactic -> tactic'
val insert_subgoals_tac = fn: cterm list -> tactic'
val insert_subgoal_tac = fn: cterm -> tactic'
val THEN_ALL_NEW_FWD = fn: tactic' * tactic' -> tactic'
val TRY_SOLVED' = fn: tactic' -> tactic'
val INTERVAL_FWD = fn: tactic' -> int -> int -> tactic
val IF_EXGOAL = fn: (int -> tactic) -> tactic'
val eqsubst_inst_tac = fn:
   Proof.context ->
     bool ->
       int list ->
         ((indexname * Position.T) * string) list -> thm -> int -> tactic
val fo_rtac = fn: thm -> Proof.context -> tactic'
val TRADE = fn: (Proof.context -> tactic') -> Proof.context -> tactic'
val is_TFree = fn: typ -> bool
val ALL_GOALS_FWD = fn: tactic' -> tactic
val yield_singleton2 = fn:
   ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
val CAN' = fn: tactic' -> tactic'
val WITH_concl = fn: (term -> tactic') -> tactic'
val is_Abs = fn: term -> bool
val COND' = fn: (term -> bool) -> tactic'
val split_matching = fn:
   ('a -> 'b -> bool) -> 'a list -> 'b list -> ('b list * 'b list) option
val REPEAT_ALL_NEW_FWD = fn: tactic' -> tactic'
val CASES' = fn: (tactic' * tactic) list -> tactic'
val APPEND_LIST' = fn: tactic' list -> tactic'
val map_fold = fn: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
val is_def_thm = fn: thm -> bool
val THEN_INTERVAL = fn: itactic * itactic -> itactic
val rprems_tac = fn: Proof.context -> tactic'
val WITH_subgoal = fn: (term -> tactic') -> tactic'
val is_Comb = fn: term -> bool
val THEN_ELSE_COMB' = fn:
   tactic' * ((tactic' * tactic' -> tactic') * tactic' * tactic') -> tactic'
val eqsubst_inst_meth = fn: (Proof.context -> Proof.method) context_parser
val elim_all_tac = fn: Proof.context -> thm list -> tactic
val ->> = fn:
   'a context_parser * ('a * Context.generic -> 'b * Context.generic) ->
     'b context_parser
val ALL_GOALS_FWD' = fn: tactic' -> tactic'
val prefer_tac = fn: int -> tactic
val rprem_tac = fn: int -> Proof.context -> tactic'
val has_Var = fn: term -> bool
val REPEAT' = fn: tactic' -> tactic'
val THEN_ELSE' = fn: tactic' * (tactic' * tactic') -> tactic'
val CONCL_COND' = fn: (term -> bool) -> tactic'
val ORELSE_INTERVAL = fn: itactic * itactic -> itactic
val seq_is_empty = fn: 'a Seq.seq -> bool * 'a Seq.seq
locale FingerTreeStruc_loc
### theory "Automatic_Refinement.Refine_Util"
### 0.345s elapsed time, 1.334s cpu time, 0.121s GC time
Loading theory "Automatic_Refinement.Anti_Unification" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib")
signature ANTI_UNIFICATION =
  sig
    val anti_unify: term * term -> term
    val anti_unifyT: typ * typ -> typ_env -> typ * typ_env
    val anti_unify_env: term * term -> env -> term * env
    val anti_unify_list: term list -> term
    val empty: env
    val empty_term: term_env
    val empty_typ: typ_env
    type env = typ_env * term_env
    val specialize_net_tac: Proof.context -> (int * thm) Net.net -> tactic'
    val specialize_tac: Proof.context -> thm list -> tactic'
    type term_env
    type typ_env
  end
structure Anti_Unification: ANTI_UNIFICATION
### theory "Automatic_Refinement.Anti_Unification"
### 0.059s elapsed time, 0.237s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Attr_Comb" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
infixr 5 THEN_ATTR
infixr 4 ELSE_ATTR
signature ATTR_COMB =
  sig
    exception ATTR_EXC of string
    val CHECK_PREPARE:
       (Context.generic * thm -> bool) -> attribute -> attribute
    val COND_attr: (Context.generic * thm -> bool) -> attribute
    val EFF_ATTR: (Context.generic * thm -> 'a) -> attribute
    val ELSE_ATTR: attribute * attribute -> attribute
    val ID_ATTR: attribute
    val IGNORE_THM: attribute -> attribute
    val ITE_ATTR: attribute -> attribute -> attribute -> attribute
    val ITE_ATTR': attribute -> attribute -> (exn -> attribute) -> attribute
    val NO_ATTR: attribute
    val RPT1_ATTR: attribute -> attribute
    val RPT_ATTR: attribute -> attribute
    val RS_attr: thm -> attribute
    val RSm_attr: thm -> attribute
    val THEN_ATTR: attribute * attribute -> attribute
    val TRACE_ATTR: string -> attribute -> attribute
    val TRY_ATTR: attribute -> attribute
    val WARN_ATTR: Context.generic -> string -> attribute
  end
structure Attr_Comb: ATTR_COMB
### theory "Automatic_Refinement.Attr_Comb"
### 0.048s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Named_Sorted_Thms" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib")
signature NAMED_SORTED_THMS =
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    val member: Proof.context -> thm -> bool
    val setup: theory -> theory
  end
functor Named_Sorted_Thms (
  sig
    val description: string
    val name: binding
    val sort: Context.generic -> thm list -> thm list
    val transform: Context.generic -> thm -> thm list
  end
  ): 
  NAMED_SORTED_THMS
### theory "Automatic_Refinement.Named_Sorted_Thms"
### 0.049s elapsed time, 0.178s cpu time, 0.063s GC time
Loading theory "Automatic_Refinement.Autoref_Data" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
signature AUTOREF_DATA =
  sig
    type T
    exception exCIRCULAR
    exception exNULL
    val get: Proof.context -> T
    val init: Proof.context -> Proof.context
  end
functor Autoref_Data (
  sig
    type T
    val compute: Proof.context -> T
    val prereq: (Proof.context -> Proof.context) list
  end
  ): 
  AUTOREF_DATA
### theory "Automatic_Refinement.Autoref_Data"
### 0.023s elapsed time, 0.083s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Indep_Vars" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib")
signature INDEP_VARS = sig val indep_tac: Proof.context -> tactic' end
structure Indep_Vars: INDEP_VARS
### theory "Automatic_Refinement.Indep_Vars"
### 0.037s elapsed time, 0.145s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Mk_Record_Simp" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib")
val mk_record_simp = fn: Context.generic -> thm -> thm
### theory "Automatic_Refinement.Mk_Record_Simp"
### 0.033s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Tagged_Solver" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib")
signature TAGGED_SOLVER =
  sig
    val add_triggers:
       string -> thm list -> morphism -> Context.generic -> Context.generic
    val cfg_full: bool Config.T
    val cfg_keep: bool Config.T
    val cfg_step: bool Config.T
    val cfg_trace: bool Config.T
    val declare_solver:
       thm list ->
         binding ->
           string ->
             (Proof.context -> tactic') ->
               morphism -> Context.generic -> Context.generic
    val delete_solver:
       string -> morphism -> Context.generic -> Context.generic
    val get_potential_solvers: Proof.context -> int -> thm -> solver list
    val get_potential_tacs: Proof.context -> int -> thm -> tactic' list
    val get_solvers: Proof.context -> solver list
    val lookup_solver: string -> Context.generic -> solver option
    val pretty_solvers: Proof.context -> Pretty.T
    val solve_full_keep_tac: Proof.context -> tactic'
    val solve_full_step_tac: Proof.context -> tactic'
    val solve_full_tac: Proof.context -> tactic'
    val solve_greedy_keep_tac: Proof.context -> tactic'
    val solve_greedy_step_tac: Proof.context -> tactic'
    val solve_greedy_tac: Proof.context -> tactic'
    val solve_tac: Proof.context -> tactic'
    type solver = thm list * string * string * (Proof.context -> tactic')
    val tac_of_solver: Proof.context -> solver -> tactic'
  end
structure Tagged_Solver: TAGGED_SOLVER
### theory "Automatic_Refinement.Tagged_Solver"
### 0.233s elapsed time, 0.765s cpu time, 0.399s GC time
Loading theory "Automatic_Refinement.Select_Solve" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Automatic_Refinement.Refine_Lib")
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
consts
  lookup ::
    "nat => natural set * natural * natural => natural * natural * natural"
signature SELECT_SOLVE =
  sig
    val AS_FIRSTGOAL: tactic -> tactic'
    val IF_SUBGOAL_SOLVED: tactic -> tactic -> tactic -> tactic
    val PREFER_SOLVED: tactic -> tactic
    val REPEAT_SOLVE_FWD_SELECT: Proof.context -> int -> tactic' -> tactic'
    val SELECT_FIRST: Proof.context -> tactic -> tactic
    val TRY_SOLVE_FWD: int -> tactic -> tactic
  end
structure Select_Solve: SELECT_SOLVE
### theory "Automatic_Refinement.Select_Solve"
### 0.081s elapsed time, 0.296s cpu time, 0.043s GC time
Loading theory "Binomial-Heaps.BinomialHeap" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.BinoPrioImpl")
### theory "Draft.Benchmark_Comparison"
### 0.969s elapsed time, 3.606s cpu time, 0.626s GC time
Loading theory "Binomial-Heaps.SkewBinomialHeap" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SkewPrioImpl")
locale BinomialHeapStruc_loc
locale SkewBinomialHeapStruc_loc
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### Ignoring sort constraints in type variables(s): "'a"
### in type abbreviation "BinomialQueue_inv"
### Ignoring sort constraints in type variables(s): "'a"
### in type abbreviation "SkewBinomialQueue"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "case_sum size (size_list size) <*mlex*> {}"
Found termination order: "case_sum size (size_list size) <*mlex*> {}"
### theory "Trie.Trie"
### 1.732s elapsed time, 6.393s cpu time, 1.671s GC time
Loading theory "HOL-ex.Quicksort" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Collections.SetIteratorOperations" via "Collections.SetIterator" via "Automatic_Refinement.Misc")
Found termination order: "{}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "length <*mlex*> {}"
### theory "HOL-ex.Quicksort"
### 0.472s elapsed time, 1.810s cpu time, 0.201s GC time
Loading theory "Automatic_Refinement.Misc" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Collections.SetIteratorOperations" via "Collections.SetIterator")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "case_sum size (size_list size) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "case_sum size (size_list size) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*>
   (%p. size_list size (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### getMinTree [] = undefined
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
locale Assoc
  fixes f :: "'a => 'a => 'a"
  assumes "Assoc f"
locale AC
  fixes f :: "'a => 'a => 'a"
  assumes "AC f"
locale su_rel_fun
  fixes F :: "('a * 'b) set"
    and f :: "'a => 'b"
  assumes "su_rel_fun F f"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*>
   (%p. size_list size (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### getMinTree [] = undefined
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale BinomialHeap_loc
### Ignoring duplicate rewrite rule:
### dom (%x. Some (?f1 x)) == UNIV
consts
  filter_rev_aux :: "'a list => ('a => bool) => 'a list => 'a list"
### Missing patterns in function definition:
### !!a v va. zipf a (v # va) [] = undefined
### !!a v va. zipf a [] (v # va) = undefined
locale FingerTreeStruc_loc
consts
  gmn :: "('e, 'a) Node => 'a"
### theory "Binomial-Heaps.BinomialHeap"
### 3.539s elapsed time, 13.336s cpu time, 3.061s GC time
Loading theory "Draft.Templates" (required by "Draft.Benchmark_ICFTemplates" via "Draft.ExtrEqs")
consts
  gmd :: "('e, 'a) Digit => 'a"
consts
  gmft :: "('e, 'a) FingerTreeStruc => 'a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.286s cpu time, 0.000s GC time
Loading theory "Collections.DatRef" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  is_leveln_digit :: "nat => ('e, 'a) Digit => bool"
consts
  is_leveln_ftree :: "nat => ('e, 'a) FingerTreeStruc => bool"
consts
  is_measured_node :: "('e, 'a) Node => bool"
consts
  is_measured_digit :: "('e, 'a) Digit => bool"
consts
  is_measured_ftree :: "('e, 'a) FingerTreeStruc => bool"
consts
  nodeToList :: "('e, 'a) Node => ('e * 'a) list"
consts
  digitToList :: "('e, 'a) Digit => ('e * 'a) list"
consts
  toList :: "('e, 'a) FingerTreeStruc => ('e * 'a) list"
locale while_algo
  fixes WA :: "'S while_algo"
  assumes "while_algo WA"
locale wa_refine
  fixes WAC :: "'C while_algo"
    and WAA :: "'A while_algo"
    and \<alpha> :: "'C => 'A"
  assumes "wa_refine WAC WAA \<alpha>"
locale wa_precise_refine
  fixes WAC :: "'C while_algo"
    and WAA :: "'A while_algo"
    and \<alpha> :: "'C => 'A"
  assumes "wa_precise_refine WAC WAA \<alpha>"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale det_while_algo
  fixes WA :: "'S det_while_algo"
  assumes "det_while_algo WA"
locale Bootstrapped
### theory "Collections.DatRef"
### 0.770s elapsed time, 2.959s cpu time, 0.382s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Benchmark_ICFTemplates")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  toTree :: "('e * 'a) list => ('e, 'a) FingerTreeStruc"
consts
  digitToTree :: "('e, 'a) Digit => ('e, 'a) FingerTreeStruc"
consts
  nodeToDigit :: "('e, 'a) Node => ('e, 'a) Digit"
### Missing patterns in function definition:
### nlistToDigit [] = undefined
### !!v vb va vc vd vf. nlistToDigit (v # vb # va # vc # vd # vf) = undefined
### Code generator: dropping subsumed code equation
### quicksort (?x # ?xs) ==
### quicksort (filter (%y. y < ?x) ?xs) @
### [?x] @ quicksort (filter ((<=) ?x) ?xs)
### Code generator: dropping subsumed code equation
### quicksort [] == []
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  digitToNlist :: "('e, 'a) Digit => ('e, 'a) Node list"
consts
  n_unwrap :: "('e, 'a) Node => 'e * 'a"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.739s elapsed time, 2.877s cpu time, 0.309s GC time
Loading theory "Refine_Monadic.Refine_Chapter" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic")
### theory "Refine_Monadic.Refine_Chapter"
### 0.026s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Native_Word.Code_Target_Bits_Int" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.HashSet" via "Collections.HashMap" via "Collections.HashMap_Impl" via "Collections.Code_Target_ICF")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  lconsNlist ::
    "('e, 'a) Node list
     => ('e, 'a) FingerTreeStruc => ('e, 'a) FingerTreeStruc"
consts
  rconsNlist ::
    "('e, 'a) FingerTreeStruc
     => ('e, 'a) Node list => ('e, 'a) FingerTreeStruc"
### theory "Native_Word.Code_Target_Bits_Int"
### 0.268s elapsed time, 1.045s cpu time, 0.123s GC time
Loading theory "Collections.Code_Target_ICF" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.HashSet" via "Collections.HashMap" via "Collections.HashMap_Impl")
### Missing patterns in function definition:
### nodes [] = undefined
### !!v. nodes [v] = undefined
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Collections.Code_Target_ICF"
### 0.379s elapsed time, 1.463s cpu time, 0.243s GC time
val mk_2elem_list = fn: term -> term -> term
val mk_compr = fn: term -> term -> term
val test1 = "[1, 2]": cterm
val test2 = "{x: {1, 2, 3}. 2 < x}": cterm
val test3 =
   Const ("Groups.plus_class.plus", "nat => nat => nat") $ Bound 0 $
     Bound 0:
   term
val dest_pair_singleton = fn: term -> term
val dest_nat_pair_singleton = fn: term -> term * term
val dest_pair_singleton_T = fn: term -> (term * typ) * (term * typ)
val dest_pair_lambda = fn: term -> string * typ * string * typ * term * term
val foo = fn: term -> term * term * int * term * term
val it = fn:
   (theory -> theory) ->
     (Proof.context -> Proof.context) -> Context.generic -> Context.generic
"True"
  :: "bool"
rank_invar (meld bq1 bq2) ==>
min (rank (link t1 t2)) (rank (hd (meld bq1 bq2)))
<= rank (hd (ins (link t1 t2) (meld bq1 bq2)))
(0 < length ?xs) = (?xs ~= [])
[| ALL t:set (filter (%t. rank t = 0) (children (getMinTree q))).
      rank t = 0 & children t = [];
   queue_invar ?q |]
==> queue_to_multiset
     (insertList (filter (%t. rank t = 0) (children (getMinTree q))) ?q) =
    queue_to_multiset (filter (%t. rank t = 0) (children (getMinTree q))) +
    queue_to_multiset ?q
"merge"
  :: "'a"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  the_default :: "'a => 'a option => 'a"
Found termination order: "size <*mlex*> {}"
consts
  prio :: "('e, 'a) BsSkewBinomialTree => 'a"
consts
  nlistToList :: "('e, 'a) Node list => ('e * 'a) list"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!a b. splitNlist a b [] = undefined
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |] ==> x <= Sup A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> Sup A <= z"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Automatic_Refinement.Misc"
### 4.658s elapsed time, 17.501s cpu time, 2.845s GC time
Loading theory "Automatic_Refinement.Refine_Lib" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator")
Loading theory "Collections.SetIterator" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Collections.SetIteratorOperations")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
Found termination order:
  "(%p. size_list size (snd p)) <*mlex*>
   (%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  gmnl :: "('e, 'a) Node list => 'a"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### getMinTree [] = undefined
Found termination order: "size_list size <*mlex*> {}"
consts
  findMin' :: "('a, 'b) BsSkewElem => 'a * 'b"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  foldl_digit :: "('s => 'e * 'a => 's) => 's => ('e, 'a) Digit => 's"
consts
  foldr_node :: "('e * 'a => 's => 's) => ('e, 'a) Node => 's => 's"
Found termination order: "{}"
consts
  foldr_digit :: "('e * 'a => 's => 's) => ('e, 'a) Digit => 's => 's"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  foldl :: "('s => 'e * 'a => 's) => 's => ('e, 'a) FingerTreeStruc => 's"
Found termination order: "{}"
consts
  foldr :: "('e * 'a => 's => 's) => ('e, 'a) FingerTreeStruc => 's => 's"
consts
  count_node :: "('e, 'a) Node => nat"
consts
  count_digit :: "('e, 'a) Digit => nat"
signature COND_REWR_CONV =
  sig
    val cond_rewr_conv:
       (Proof.context -> tactic) -> thm -> Proof.context -> conv
    val cond_rewrs_conv:
       (Proof.context -> tactic) -> thm list -> Proof.context -> conv
  end
structure Cond_Rewr_Conv: COND_REWR_CONV
signature REVERT_ABBREV =
  sig
    val revert_abbrev: string -> theory -> theory
    val revert_abbrev_matching: (string -> bool) -> theory -> theory
  end
structure Revert_Abbrev: REVERT_ABBREV
consts
  count :: "('e, 'a) FingerTreeStruc => nat"
### theory "Automatic_Refinement.Refine_Lib"
### 1.039s elapsed time, 4.064s cpu time, 0.330s GC time
Loading theory "Automatic_Refinement.Autoref_Phases" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
Found termination order: "{}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
signature AUTOREF_PHASES =
  sig
    val all_phases_tac: Proof.context -> tactic'
    val cfg_debug: bool Config.T
    val cfg_keep_goal: bool Config.T
    val cfg_trace: bool Config.T
    val declare_solver:
       thm list ->
         binding ->
           string ->
             (Proof.context -> tactic') ->
               morphism -> Context.generic -> Context.generic
    val delete_phase:
       string -> morphism -> Context.generic -> Context.generic
    val get_phase: string -> Proof.context -> (string * int * phase) option
    val get_phases: Proof.context -> (string * int * phase) list
    val init_data: Proof.context -> Proof.context
    val init_phase: string * int * phase -> Proof.context -> Proof.context
    val init_phases:
       (string * int * phase) list -> Proof.context -> Proof.context
    type phase =
       {analyze: Proof.context -> int -> int -> thm -> bool,
        init: Proof.context -> Proof.context,
        pretty_failure: Proof.context -> int -> int -> thm -> Pretty.T,
        tac: Proof.context -> int -> int -> tactic}
    val phase_tac: string * int * phase -> Proof.context -> tactic'
    val phase_tacN: string -> Proof.context -> tactic'
    val phases_tac: (string * int * phase) list -> Proof.context -> tactic'
    val phases_tacN: string list -> Proof.context -> tactic'
    val register_phase:
       string ->
         int -> phase -> morphism -> Context.generic -> Context.generic
  end
structure Autoref_Phases: AUTOREF_PHASES
### theory "Automatic_Refinement.Autoref_Phases"
### 0.122s elapsed time, 0.450s cpu time, 0.120s GC time
Loading theory "Automatic_Refinement.Autoref_Tagging" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
### theory "Collections.SetIterator"
### 1.179s elapsed time, 4.591s cpu time, 0.450s GC time
Loading theory "Automatic_Refinement.Relators" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Parametricity" via "Automatic_Refinement.Param_Tool")
structure Autoref_Tag_Defs: NAMED_THMS
structure Refine_Relators_Thms:
  sig structure rel_comb_def_rules: NAMED_THMS end
Found termination order: "case_sum size (size_list size) <*mlex*> {}"
signature AUTOREF_TAGGING =
  sig
    val ABS_beta_conv: Proof.context -> conv
    val is_valid_tagged: term -> bool
    val lambda': string * typ -> term -> term
    val list_APP: term * term list -> term
    val mk_ABS_conv: Proof.context -> conv
    val mk_ANNOT_conv: cterm -> conv
    val mk_APP: term -> term -> term
    val mk_APP_conv: conv
    val mk_OP: term -> term
    val mk_OP_conv: conv
    val mk_rel_ANNOT_conv: Proof.context -> cterm -> conv
    val rhs_conv: (Proof.context -> conv) -> Proof.context -> conv
    val strip_app: term -> term * term list
    val term_of_tagged: term -> term
    val untag_conv: Proof.context -> conv
  end
structure Autoref_Tagging: AUTOREF_TAGGING
### theory "Automatic_Refinement.Autoref_Tagging"
### 0.105s elapsed time, 0.417s cpu time, 0.000s GC time
Loading theory "Collections.SetIteratorOperations" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator")
Found termination order: "{}"
### No equation for constructor "Inl"
consts
  bs_findMin :: "'c + ('a, 'b) BsSkewElem => 'a * 'b"
structure relator_props: NAMED_THMS
structure solve_relator_props: NAMED_THMS
### ML warning (line 560 of "$AFP/Automatic_Refinement/Parametricity/Relators.thy"):
### Handler catches all exceptions.
signature RELATORS =
  sig
    val declare_natural_relator:
       string * string -> Context.generic -> Context.generic
    val dest_prodrel: term -> term * term
    val dest_relT: typ -> typ * typ
    val is_prodrel: term -> bool
    val list_prodrel_left: term list -> term
    val list_rel: term list -> term -> term
    val list_relAPP: term list -> term -> term
    val mk_fun_rel: term -> term -> term
    val mk_natural_relator:
       Proof.context -> term list -> string -> term option
    val mk_prodrel: term * term -> term
    val mk_relAPP: term -> term -> term
    val mk_relT: typ * typ -> typ
    val natural_relator_of: Proof.context -> string -> string option
    val rel_absT: term -> typ
    val rel_concT: term -> typ
    val remove_natural_relator: string -> Context.generic -> Context.generic
    val setup: theory -> theory
    val strip_prodrel_left: term -> term list
    val strip_relAPP: term -> term list * term
  end
structure Relators: RELATORS
Found termination order: "{}"
consts
  bs_insert ::
    "'e => 'a => unit + ('e, 'a) BsSkewElem => unit + ('e, 'a) BsSkewElem"
### Missing patterns in function definition:
### !!v. bs_deleteMin (Inl v) = undefined
Found termination order: "{}"
consts
  bs_invar :: "unit + ('e, 'a) BsSkewElem => bool"
consts
  bs_to_mset :: "unit + ('e, 'a) BsSkewElem => ('e * 'a) multiset"
### theory "Automatic_Refinement.Relators"
### 0.969s elapsed time, 3.763s cpu time, 0.497s GC time
Loading theory "Automatic_Refinement.Param_Tool" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Parametricity")
signature PARAMETRICITY =
  sig
    val add_dflt: thm -> Context.generic -> Context.generic
    val add_dflt_attr: attribute
    val adjust_arity: int -> thm -> thm
    val adjust_arity_tac: int -> Proof.context -> tactic'
    val asm_param_tac: Proof.context -> tactic'
    val cfg_single_step: bool Config.T
    val cfg_use_asm: bool Config.T
    val del_dflt: thm -> Context.generic -> Context.generic
    val del_dflt_attr: attribute
    val dest_param_goal: int -> thm -> param_ruleT
    val dest_param_rule: thm -> param_ruleT
    val dest_param_term: term -> param_ruleT
    val fo_rule: thm -> thm
    val get_dflt: Proof.context -> param_net
    val net_add: thm -> param_net -> param_net
    val net_add_int: Context.generic -> thm -> param_net -> param_net
    val net_del: thm -> param_net -> param_net
    val net_del_int: Context.generic -> thm -> param_net -> param_net
    val net_empty: param_net
    val net_tac: param_net -> Proof.context -> tactic'
    type param_net
    type param_ruleT =
       {R: term, arity: int, lhs: term, rhs: term, rhs_head: term}
    val param_rule_tac: Proof.context -> thm -> tactic'
    val param_rules_tac: Proof.context -> thm list -> tactic'
    val prepare_tac: Proof.context -> tactic'
    val safe_fun_relD_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val unlambda_tac: Proof.context -> tactic'
  end
structure Parametricity: PARAMETRICITY
val cnv_relAPP = fn: term -> term
val to_relAPP_conv = fn: Proof.context -> conv
val to_relAPP_attr = fn: attribute
### theory "Automatic_Refinement.Param_Tool"
### 0.166s elapsed time, 0.640s cpu time, 0.091s GC time
Loading theory "Automatic_Refinement.Param_HOL" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Parametricity")
locale FingerTree_loc
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  is_Inl :: "'a + 'b => bool"
consts
  is_Inr :: "'b + 'a => bool"
consts
  list_all2_alt :: "('a => 'b => bool) => 'a list => 'b list => bool"
### Cannot skip proof of schematic goal statement
### theory "Finger-Trees.FingerTree"
### 9.865s elapsed time, 37.333s cpu time, 6.125s GC time
Loading theory "Collections.Sorted_List_Operations" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.ListSetImpl_Sorted")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  list_all_rec :: "('a => bool) => 'a list => bool"
consts
  list_ex_rec :: "('a => bool) => 'a list => bool"
locale SkewBinomialHeap_loc
### theory "Collections.SetIteratorOperations"
### 1.894s elapsed time, 7.371s cpu time, 0.958s GC time
Loading theory "Collections.Assoc_List" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.HashSet" via "Collections.HashMap" via "Collections.HashMap_Impl" via "Collections.ListMapImpl")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "Automatic_Refinement.Param_HOL"
### 0.884s elapsed time, 3.482s cpu time, 0.369s GC time
Loading theory "Automatic_Refinement.Parametricity" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
### theory "Binomial-Heaps.SkewBinomialHeap"
### 9.589s elapsed time, 36.471s cpu time, 5.753s GC time
Loading theory "Collections.Dlist_add" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.ListSetImpl")
### theory "Automatic_Refinement.Parametricity"
### 0.028s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Autoref_Id_Ops" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  dlist_remove1' :: "'a => 'a list => 'a list => 'a list"
### theory "Collections.Dlist_add"
### 0.272s elapsed time, 1.062s cpu time, 0.136s GC time
Loading theory "Collections.Proper_Iterator" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.It_to_It")
instantiation
  assoc_list :: (equal, equal) equal
  equal_assoc_list == equal_class.equal ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  assoc_list :: (type, type) size
  size_assoc_list == size :: ('a, 'b) assoc_list => nat
consts
  map_ran ::
    "('key => 'val => 'val') => ('key * 'val) list => ('key * 'val') list"
### theory "Collections.Assoc_List"
### 0.432s elapsed time, 1.700s cpu time, 0.136s GC time
Loading theory "Collections.Diff_Array" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.ArrayHashSet" via "Collections.ArrayHashMap" via "Collections.ArrayHashMap_Impl")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Collections.Sorted_List_Operations"
### 0.744s elapsed time, 2.950s cpu time, 0.309s GC time
Loading theory "Collections.Trie_Impl" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.TrieSetImpl" via "Collections.TrieMapImpl" via "Collections.Trie2")
structure Icf_Proper_Iterator:
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    structure icf_proper_iteratorI: NAMED_THMS
    val setup: theory -> theory
  end
val limit_depth = fn: int -> term -> term
val depth_of = fn: term -> int
val depth_of_lhs = fn: thm -> int
val depth_of_rhs = fn: thm -> int
val pretty_rewrite = fn: Proof.context -> thm -> thm -> Pretty.T
val index_rewr_thms = fn: thm list -> thm Item_Net.T
val net_rewr_tac = fn:
   thm Item_Net.T -> (term -> term) -> (conv -> 'a -> conv) -> 'a -> tactic'
signature AUTOREF_ID_OPS =
  sig
    val cfg_ss_id_op: bool Config.T
    val cfg_trace_failed_id: bool Config.T
    val cfg_trace_id_tags: bool Config.T
    val cfg_trace_intf_unif: bool Config.T
    val cfg_trace_patterns: bool Config.T
    val cfg_use_id_tags: bool Config.T
    val decl_derived_typing:
       bool -> term -> term -> Context.generic -> Context.generic
    val dest_const_intf: term -> term * term
    val dest_const_intf_thm: thm -> term * term
    val has_typ_thms: Proof.context -> term -> bool
    val id_phase: Autoref_Phases.phase
    val id_tac: Proof.context -> tactic'
    val mk_const_intf: term -> term -> term
    val mk_const_intf_thm: Proof.context -> term -> term -> thm
    val setup: theory -> theory
    val typ_thms_of_seq: Proof.context -> term -> thm Seq.seq
  end
structure Autoref_Id_Ops: AUTOREF_ID_OPS
### theory "Collections.Proper_Iterator"
### 0.481s elapsed time, 1.864s cpu time, 0.204s GC time
Loading theory "Collections.It_to_It" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale proper_it_loc
  fixes
    it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
    and
    it' ::
      "'s => ('\<sigma> => bool)
             => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
  assumes "proper_it_loc it it'"
signature AUTOREF_REL_INF =
  sig
    val cfg_sbias: int Config.T
    val roi_phase: Autoref_Phases.phase
    val roi_step_tac: Proof.context -> tactic'
    val roi_tac: Proof.context -> tactic'
    val setup: theory -> theory
  end
structure Autoref_Rel_Inf: AUTOREF_REL_INF
### theory "Automatic_Refinement.Autoref_Id_Ops"
### 0.814s elapsed time, 3.177s cpu time, 0.340s GC time
Loading theory "Automatic_Refinement.Autoref_Fix_Rel" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate")
### theory "Collections.Trie_Impl"
### 0.450s elapsed time, 1.750s cpu time, 0.204s GC time
Loading theory "Collections.Trie2" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.TrieSetImpl" via "Collections.TrieMapImpl")
### theory "Collections.It_to_It"
### 0.129s elapsed time, 0.494s cpu time, 0.078s GC time
Loading theory "Collections.SetIteratorGA" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator")
structure Autoref_Rules: NAMED_THMS
instantiation
  trie :: (equal, equal) equal
  equal_trie == equal_class.equal :: ('a, 'b) trie => ('a, 'b) trie => bool
### theory "Collections.Trie2"
### 0.161s elapsed time, 0.614s cpu time, 0.078s GC time
Loading theory "Refine_Monadic.Refine_Mono_Prover" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc")
signature REFINE_MONO_PROVER =
  sig
    val add_mono_thm: thm -> Context.generic -> Context.generic
    val decl_setup: morphism -> Context.generic -> Context.generic
    val declare_mono_triggers:
       thm list -> morphism -> Context.generic -> Context.generic
    val del_mono_thm: thm -> Context.generic -> Context.generic
    val gen_split_cases_tac: pat_extractor -> Proof.context -> tactic'
    val get_mono_thms: Proof.context -> thm list
    val mono_tac: Proof.context -> tactic'
    type pat_extractor =
       term ->
         (term * ((Proof.context -> conv) -> Proof.context -> conv)) option
    val setup: theory -> theory
    val split_cases_tac: Proof.context -> tactic'
    val untriggered_mono_tac: Proof.context -> tactic'
  end
structure Refine_Mono_Prover: REFINE_MONO_PROVER
locale mono_setup_loc
  fixes le :: "'a => 'a => bool"
  assumes "mono_setup_loc le"
### theory "Refine_Monadic.Refine_Mono_Prover"
### 0.133s elapsed time, 0.507s cpu time, 0.101s GC time
[| !!e a r ts. ?Q ts ==> ?P (SkewBinomialHeapStruc.Node e a r ts); ?Q [];
   !!t q. [| ?P t; ?Q q |] ==> ?Q (t # q) |]
==> ?P ?a0.0
[| !!e a r ts. ?Q ts ==> ?P (SkewBinomialHeapStruc.Node e a r ts); ?Q [];
   !!t q. [| ?P t; ?Q q |] ==> ?Q (t # q) |]
==> ?Q ?a1.0
val it = "foo == ANNOT foo bar": thm
val it = "foo == foo ::: bar": thm
"set_rel"
  :: "('a * 'b) set => ('a set * 'b set) set"
val it = "Ra \<times>\<^sub>r \<langle>Rb\<rangle>option_rel": cterm
val it =
   "\<langle>Id\<rangle>option_rel \<rightarrow>
    \<langle>Id\<rangle>list_rel":
   cterm
"list_update"
  :: "'a list => nat => 'a => 'a list"
val it = 4: int
val it = "(1::'a) # \<dots> # \<dots>": cterm
val it = [2, 3, 4, 5]: int list
consts
  array_length :: "'a array => nat"
consts
  array_get :: "'a array => nat => 'a"
consts
  array_set :: "'a array => nat => 'a => 'a array"
consts
  array_grow :: "'a array => nat => 'a => 'a array"
consts
  array_shrink :: "'a array => nat => 'a array"
consts
  list_of_array :: "'a array => 'a list"
consts
  assoc_list_of_array :: "'a array => (nat * 'a) list"
### ML warning (line 350 of "$AFP/Automatic_Refinement/Tool/Autoref_Fix_Rel.thy"):
### Value identifier (phi) has not been referenced.
signature AUTOREF_FIX_REL =
  sig
    val add_hom_rule: thm -> Context.generic -> Context.generic
    val add_tyrel_rule: thm -> Context.generic -> Context.generic
    val analyze: Proof.context -> int -> int -> thm -> bool
    val compute_hom_net: thm_pairs -> Proof.context -> hom_net
    type constraint = (term * term) list * (term * term)
    val constraint_of_thm: Proof.context -> thm -> constraint
    val constraints_of_goal: int -> thm -> (term * term) list
    val constraints_of_term: term -> (term * term) list
    val declare_prio:
       string -> term -> prio_relpos -> local_theory -> local_theory
    val del_hom_rule: thm -> Context.generic -> Context.generic
    val del_tyrel_rule: thm -> Context.generic -> Context.generic
    val delete_prio: string -> local_theory -> local_theory
    val get_hom_rules: Proof.context -> thm list
    val get_tyrel_rules: Proof.context -> thm list
    val guess_relators_tac: Proof.context -> itactic
    type hom_net = (int * thm) Net.net
    val insert_CONSTRAINTS_tac: Proof.context -> tactic'
    val insert_tyrel_tac: Proof.context -> int -> int -> tactic'
    val internal_hom_tac: Proof.context -> itactic
    val internal_solve_tac: Proof.context -> itactic
    val internal_spec_tac: Proof.context -> itactic
    val mk_CONSTRAINT: term * term -> term
    val mk_CONSTRAINT_rl: Proof.context -> constraint -> thm
    val phase: Autoref_Phases.phase
    val pretty_constraint: Proof.context -> constraint -> Pretty.T
    val pretty_constraints: Proof.context -> constraint list -> Pretty.T
    val pretty_failure: Proof.context -> int -> int -> thm -> Pretty.T
    val pretty_thm_pair:
       Proof.context -> constraint option * thm -> Pretty.T
    val pretty_thm_pairs: Proof.context -> thm_pairs -> Pretty.T
    val print_prios: Proof.context -> unit
    datatype prio_relpos
    = PR_AFTER of string | PR_BEFORE of string | PR_FIRST | PR_LAST
    val setup: theory -> theory
    val solve_step_tac: Proof.context -> tactic'
    val solve_tyrel_tac: Proof.context -> tactic'
    type thm_pairs = (constraint option * thm) list
    val thm_pairsD_get: Proof.context -> thm_pairs
    val thm_pairsD_init: Proof.context -> Proof.context
    val try_solve_tac: Proof.context -> tactic'
    val tyrel_tac: Proof.context -> itactic
  end
structure Autoref_Fix_Rel: AUTOREF_FIX_REL
### theory "Automatic_Refinement.Autoref_Fix_Rel"
### 0.433s elapsed time, 1.658s cpu time, 0.227s GC time
Loading theory "Automatic_Refinement.Autoref_Translate" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool")
Loading theory "Automatic_Refinement.Autoref_Relator_Interface" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool")
### Rewrite rule not in simpset:
### Wellfounded.accp assoc_list_of_array_code_rel (?a1, ?n1) ==>
### assoc_list_of_array_code ?a1 ?n1 ==
### if array_length ?a1 <= ?n1 then []
### else (?n1, array_get ?a1 ?n1) # assoc_list_of_array_code ?a1 (?n1 + 1)
signature AUTOREF_RELATOR_INTERFACE =
  sig
    val declare_rel_intf: thm -> Context.generic -> Context.generic
    val delete_rel_intf: thm -> Context.generic -> Context.generic
    val get_rel_intfs: Proof.context -> thm list
    val intf_of_rel: Proof.context -> term -> term
    val itype_of_rule: Proof.context -> thm -> (term * term) option
    val list_invented_intf: term -> term list
    val mk_intfAPP: term -> term -> term
    val setup: theory -> theory
    val warn_invented_intf: Proof.context -> term -> unit
  end
structure Autoref_Relator_Interface: AUTOREF_RELATOR_INTERFACE
### theory "Automatic_Refinement.Autoref_Relator_Interface"
### 0.102s elapsed time, 0.516s cpu time, 0.000s GC time
signature AUTOREF_TACTICALS =
  sig
    val COND'': (int -> thm -> bool) -> tactic' -> tactic' -> tactic'
    val IF_SOLVED: tactic' -> tactic' -> tactic' -> tactic'
    val REPEAT_INTERVAL: tactic' -> itactic
    val REPEAT_ON_SUBGOAL: tactic' -> tactic'
    val is_defer_cond: int -> thm -> bool
    val is_prefer_cond: int -> thm -> bool
  end
signature AUTOREF_TRANSLATE =
  sig
    val add_post_rule: thm -> Context.generic -> Context.generic
    val compute_trans_net:
       Autoref_Fix_Rel.thm_pairs -> Proof.context -> trans_net
    val delete_post_rule: thm -> Context.generic -> Context.generic
    val get_post_rules: Proof.context -> thm list
    val setup: theory -> theory
    val side_dbg_tac: Proof.context -> tactic'
    val side_tac: Proof.context -> tactic'
    val trans_analyze: Proof.context -> int -> int -> thm -> bool
    val trans_dbg_step_tac: Proof.context -> tactic'
    type trans_net = (int * thm) Net.net
    val trans_phase: Autoref_Phases.phase
    val trans_pretty_failure: Proof.context -> int -> int -> thm -> Pretty.T
    val trans_step_only_tac: Proof.context -> tactic'
    val trans_step_tac: Proof.context -> tactic'
    val trans_tac: Proof.context -> itactic
  end
structure Autoref_Tacticals: AUTOREF_TACTICALS
structure Autoref_Translate: AUTOREF_TRANSLATE
### theory "Automatic_Refinement.Autoref_Translate"
### 0.200s elapsed time, 0.874s cpu time, 0.102s GC time
Loading theory "Automatic_Refinement.Autoref_Gen_Algo" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool")
structure Autoref_Gen_Algo:
  sig
    val decl_setup: morphism -> Context.generic -> Context.generic
    structure ga_side_thms: NAMED_SORTED_THMS
    val setup: theory -> theory
    val side_ga_op_tac: Proof.context -> int -> tactic
    val side_ga_tac: Proof.context -> int -> tactic
    val transform_ga_rule: Context.generic -> thm -> thm list
  end
### theory "Automatic_Refinement.Autoref_Gen_Algo"
### 0.064s elapsed time, 0.238s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Autoref_Tool" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement")
### theory "Collections.SetIteratorGA"
### 0.811s elapsed time, 3.072s cpu time, 0.322s GC time
structure Autoref_Debug:
  sig
    val print_thm_pairs: Proof.context -> unit
    val print_thm_pairs_matching: Proof.context -> cterm -> unit
  end
### theory "Collections.Diff_Array"
### 1.361s elapsed time, 5.135s cpu time, 0.604s GC time
locale autoref_syn
### theory "Automatic_Refinement.Autoref_Tool"
### 0.541s elapsed time, 0.941s cpu time, 0.127s GC time
Loading theory "Automatic_Refinement.Autoref_Bindings_HOL" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement")
structure Autoref_Struct_Expand:
  sig
    structure autoref_struct_expand: NAMED_THMS
    val decl_setup: morphism -> Context.generic -> Context.generic
    val expand_tac: Proof.context -> int -> tactic
    val setup: theory -> theory
  end
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
"(o)"
  :: "('a => 'b) => ('c => 'a) => 'c => 'b"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Adding overloaded interface type to constant: ?a ::\<^sub>i i_of_rel Id
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Automatic_Refinement.Autoref_Bindings_HOL"
### 1.757s elapsed time, 1.862s cpu time, 0.156s GC time
Loading theory "Automatic_Refinement.Automatic_Refinement" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc")
### theory "Automatic_Refinement.Automatic_Refinement"
### 0.029s elapsed time, 0.033s cpu time, 0.000s GC time
Loading theory "Collections.Idx_Iterator" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator")
Loading theory "Refine_Monadic.Refine_Misc" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic")
locale galois_connection
  fixes \<alpha> :: "'a => 'b"
    and \<gamma> :: "'b => 'a"
  assumes "galois_connection \<alpha> \<gamma>"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Collections.Idx_Iterator"
### 0.320s elapsed time, 0.748s cpu time, 0.121s GC time
### Ignoring duplicate rewrite rule:
### map_to_set Map.empty == {}
### theory "Refine_Monadic.Refine_Misc"
### 0.456s elapsed time, 0.953s cpu time, 0.121s GC time
Loading theory "Refine_Monadic.RefineG_Domain" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.RefineG_Recursion")
Loading theory "Refine_Monadic.RefineG_Transfer" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.RefineG_Recursion")
structure RefineG_Transfer:
  sig
    structure Post_Processors: THEORY_DATA
    structure Post_Simp: GENERIC_DATA
    val add_post_processor:
       Symtab.key -> (Proof.context -> tactic') -> theory -> theory
    val add_post_simps: thm list -> Context.generic -> Context.generic
    val align_tac: Proof.context -> tactic'
    val del_post_simps: thm list -> Context.generic -> Context.generic
    val delete_post_processor: Symtab.key -> theory -> theory
    val get_post_processors:
       theory -> (Symtab.key * (Proof.context -> tactic')) list
    val get_post_simp_rules: Context.generic -> thm list
    val get_post_ss: Proof.context -> Proof.context
    val post_process_tac: Proof.context -> tactic'
    val post_simps_op:
       (Proof.context * 'a -> Proof.context) ->
         'a -> Context.generic -> Context.generic
    structure post_subst: NAMED_THMS
    val post_subst_tac: Proof.context -> int -> tactic
    val post_transfer_tac: thm list -> Proof.context -> int -> tactic
    val setup: theory -> theory
    structure transfer: NAMED_THMS
    val transfer_tac: thm list -> Proof.context -> int -> thm -> thm Seq.seq
  end
locale transfer
  fixes \<alpha> :: "'c => 'a"
locale ordered_transfer
  fixes \<alpha> :: "'c => 'a"
locale dist_transfer
  fixes \<alpha> :: "'c => 'a"
  assumes "dist_transfer \<alpha>"
locale ccpo_transfer
  fixes \<alpha> :: "'c => 'a"
locale dist_ccpo_transfer
  fixes \<alpha> :: "'c => 'a"
  assumes "dist_ccpo_transfer \<alpha>"
### theory "Refine_Monadic.RefineG_Transfer"
### 0.144s elapsed time, 0.318s cpu time, 0.071s GC time
Loading theory "Refine_Monadic.RefineG_Assert" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic")
locale generic_Assert
  fixes bind :: "'mu => (unit => 'ma) => 'ma"
    and return :: "unit => 'mu"
    and ASSERT :: "bool => 'mu"
    and ASSUME :: "bool => 'mu"
  assumes "generic_Assert bind return ASSERT ASSUME"
locale transfer_generic_Assert
  fixes cbind :: "'muc => (unit => 'mac) => 'mac"
    and creturn :: "unit => 'muc"
    and cASSERT :: "bool => 'muc"
    and cASSUME :: "bool => 'muc"
    and abind :: "'mua => (unit => 'maa) => 'maa"
    and areturn :: "unit => 'mua"
    and aASSERT :: "bool => 'mua"
    and aASSUME :: "bool => 'mua"
    and \<alpha> :: "'mac => 'maa"
  assumes
    "transfer_generic_Assert cbind creturn cASSERT cASSUME abind areturn
      aASSERT aASSUME"
locale transfer_generic_Assert_remove
  fixes abind :: "'mua => (unit => 'maa) => 'maa"
    and areturn :: "unit => 'mua"
    and aASSERT :: "bool => 'mua"
    and aASSUME :: "bool => 'mua"
    and \<alpha> :: "'mac => 'maa"
  assumes "transfer_generic_Assert_remove abind areturn aASSERT aASSUME"
### theory "Refine_Monadic.RefineG_Assert"
### 0.921s elapsed time, 3.212s cpu time, 3.007s GC time
### theory "Refine_Monadic.RefineG_Domain"
### 1.370s elapsed time, 3.863s cpu time, 3.122s GC time
Loading theory "Refine_Monadic.RefineG_Recursion" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic")
### Ignoring duplicate rewrite rule:
### flat_ord ?b1 ?b1 ?x1 == True
theorem flatf_fp_induct_pointwise:
  fixes pre :: "'a => 'b => bool"
    and post :: "'a => 'b => 'c => bool"
    and b :: "'c"
    and B :: "('b => 'c) => 'b => 'c"
    and a :: "'a"
    and x :: "'b"
  assumes "!!a x. pre a x ==> post a x b"
    and "flatf_mono b B"
    and "pre a x"
    and
    "!!f a x.
        [| !!a' x'. pre a' x' ==> post a' x' (f x'); pre a x;
           flatf_ord b f (flatf_fp b B) |]
        ==> post a x (B f x)"
  shows "post a x (flatf_fp b B x)"
### theory "Refine_Monadic.RefineG_Recursion"
### 0.252s elapsed time, 0.288s cpu time, 0.000s GC time
Loading theory "Refine_Monadic.RefineG_While" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_While")
Loading theory "Refine_Monadic.Refine_Basic" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic")
locale generic_WHILE
  fixes bind :: "'m => ('a => 'm) => 'm"
    and return :: "'a => 'm"
    and WHILEIT :: "('a => bool) => ('a => bool) => ('a => 'm) => 'a => 'm"
    and WHILEI :: "('a => bool) => ('a => bool) => ('a => 'm) => 'a => 'm"
    and WHILET :: "('a => bool) => ('a => 'm) => 'a => 'm"
    and WHILE :: "('a => bool) => ('a => 'm) => 'a => 'm"
  assumes "generic_WHILE bind return WHILEIT WHILEI WHILET WHILE"
locale transfer_WHILE
  fixes cbind :: "'mc => ('a => 'mc) => 'mc"
    and creturn :: "'a => 'mc"
    and
    cWHILEIT :: "('a => bool) => ('a => bool) => ('a => 'mc) => 'a => 'mc"
    and
    cWHILEI :: "('a => bool) => ('a => bool) => ('a => 'mc) => 'a => 'mc"
    and cWHILET :: "('a => bool) => ('a => 'mc) => 'a => 'mc"
    and cWHILE :: "('a => bool) => ('a => 'mc) => 'a => 'mc"
    and abind :: "'ma => ('a => 'ma) => 'ma"
    and areturn :: "'a => 'ma"
    and
    aWHILEIT :: "('a => bool) => ('a => bool) => ('a => 'ma) => 'a => 'ma"
    and
    aWHILEI :: "('a => bool) => ('a => bool) => ('a => 'ma) => 'a => 'ma"
    and aWHILET :: "('a => bool) => ('a => 'ma) => 'a => 'ma"
    and aWHILE :: "('a => bool) => ('a => 'ma) => 'a => 'ma"
    and \<alpha> :: "'mc => 'ma"
  assumes
    "transfer_WHILE cbind creturn cWHILEIT cWHILEI cWHILET cWHILE abind
      areturn aWHILEIT aWHILEI aWHILET aWHILE \<alpha>"
locale generic_WHILE_rules
  fixes bind :: "'a => ('b => 'a) => 'a"
    and return :: "'b => 'a"
    and SPEC :: "('b => bool) => 'a"
    and WHILEIT :: "('b => bool) => ('b => bool) => ('b => 'a) => 'b => 'a"
    and WHILEI :: "('b => bool) => ('b => bool) => ('b => 'a) => 'b => 'a"
    and WHILET :: "('b => bool) => ('b => 'a) => 'b => 'a"
    and WHILE :: "('b => bool) => ('b => 'a) => 'b => 'a"
  assumes "generic_WHILE_rules bind return SPEC WHILEIT WHILEI WHILET WHILE"
### theory "Refine_Monadic.RefineG_While"
### 0.362s elapsed time, 0.770s cpu time, 0.113s GC time
Loading theory "Refine_Monadic.Refine_Det" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Foreach" via "Refine_Monadic.Refine_Pfun")
instantiation
  nres :: (type) complete_lattice
  Inf_nres == Inf :: 'a nres set => 'a nres
  Sup_nres == Sup :: 'a nres set => 'a nres
  bot_nres == bot :: 'a nres
  sup_nres == sup :: 'a nres => 'a nres => 'a nres
  top_nres == top :: 'a nres
  inf_nres == inf :: 'a nres => 'a nres => 'a nres
  less_eq_nres == less_eq :: 'a nres => 'a nres => bool
  less_nres == less :: 'a nres => 'a nres => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
structure refine_pw_simps: NAMED_THMS
### No equation for constructor "FAILi"
consts
  the_RES :: "'a nres => 'a set"
instantiation
  dres :: (type) complete_lattice
  Inf_dres == Inf :: 'a dres set => 'a dres
  Sup_dres == Sup :: 'a dres set => 'a dres
  bot_dres == bot :: 'a dres
  sup_dres == sup :: 'a dres => 'a dres => 'a dres
  top_dres == top :: 'a dres
  inf_dres == inf :: 'a dres => 'a dres => 'a dres
  less_eq_dres == less_eq :: 'a dres => 'a dres => bool
  less_dres == less :: 'a dres => 'a dres => bool
structure Refine:
  sig
    val no_prod_split: bool Config.T
    val post_tac: Proof.context -> tactic'
    val rcg_tac: thm list -> Proof.context -> tactic'
    structure refine: NAMED_THMS
    structure refine0: NAMED_THMS
    structure refine2: NAMED_THMS
    structure vcg: NAMED_THMS
    structure vcg_cons: NAMED_THMS
  end
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Refine_Monadic.Refine_Det"
### 1.377s elapsed time, 2.934s cpu time, 0.368s GC time
### theory "Refine_Monadic.Refine_Basic"
### 1.916s elapsed time, 3.886s cpu time, 0.481s GC time
Loading theory "Refine_Monadic.Refine_Heuristics" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic")
Loading theory "Refine_Monadic.Refine_Leof" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic")
Loading theory "Refine_Monadic.Refine_Pfun" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Foreach")
structure refine_heuristics_simps: NAMED_THMS
### ML warning (line 65 of "$AFP/Refine_Monadic/Refine_Heuristics.thy"):
### Value identifier (ctxt) has not been referenced.
structure Refine_dref_type:
  sig
    structure RELATES_rules: NAMED_THMS
    val has_schematic: term -> bool
    val match_goal_shape_tac:
       (term -> bool) -> Proof.context -> int -> thm -> thm Seq.seq
    val output_failed_msg: Proof.context -> term -> unit
    structure pattern_rules: NAMED_THMS
    val tracing: bool Config.T
    val type_tac: Proof.context -> tactic
  end
### theory "Refine_Monadic.Refine_Heuristics"
### 0.123s elapsed time, 0.380s cpu time, 0.092s GC time
### theory "Refine_Monadic.Refine_Leof"
### 0.135s elapsed time, 0.403s cpu time, 0.092s GC time
Loading theory "Refine_Monadic.Refine_More_Comb" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic")
Loading theory "Refine_Monadic.Refine_While" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic")
### theory "Refine_Monadic.Refine_Pfun"
### 0.243s elapsed time, 0.727s cpu time, 0.092s GC time
### theory "Refine_Monadic.Refine_More_Comb"
### 0.186s elapsed time, 0.482s cpu time, 0.000s GC time
Proofs for inductive predicate(s) "rwof"
  Proving monotonicity ...
consts
  bounded_WHILE' ::
    "nat => ('a => bool) => ('a => 'a nres) => 'a nres => 'a nres"
consts
  bounded_WHILE ::
    "nat => ('a => bool) => ('a => 'a nres) => 'a nres => 'a nres"
### theory "Refine_Monadic.Refine_While"
### 0.766s elapsed time, 1.091s cpu time, 0.083s GC time
Loading theory "Refine_Monadic.Refine_Transfer" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Foreach")
### Missing patterns in function definition:
### the_res dSUCCEEDi = undefined
### the_res dFAILi = undefined
Found termination order: "{}"
### theory "Refine_Monadic.Refine_Transfer"
### 0.258s elapsed time, 0.266s cpu time, 0.000s GC time
Loading theory "Refine_Monadic.Autoref_Monadic" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic")
Loading theory "Refine_Monadic.Refine_Automation" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic")
Loading theory "Refine_Monadic.Refine_Foreach" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator" via "Refine_Monadic.Refine_Monadic")
structure Autoref_Monadic:
  sig
    val autoref_monadic_tac: Proof.context -> int -> tactic
    val cfg_plain: bool Config.T
  end
### theory "Refine_Monadic.Autoref_Monadic"
### 0.073s elapsed time, 0.230s cpu time, 0.117s GC time
signature REFINE_AUTOMATION =
  sig
    val add_cd_pattern: cterm -> Context.generic -> Context.generic
    val add_extraction: string -> extraction -> theory -> theory
    val add_vc_rec_thm: thm -> Context.generic -> Context.generic
    val add_vc_solve_thm: thm -> Context.generic -> Context.generic
    val define_concrete_fun:
       extraction list option ->
         binding ->
           Token.src list ->
             indexname list ->
               thm ->
                 cterm list -> local_theory -> (thm * thm) * local_theory
    val del_cd_pattern: cterm -> Context.generic -> Context.generic
    val del_vc_rec_thm: thm -> Context.generic -> Context.generic
    val del_vc_solve_thm: thm -> Context.generic -> Context.generic
    val extract_as_def:
       (string * typ) list ->
         string -> term -> local_theory -> (term * thm) * local_theory
    val extract_recursion_eqs:
       extraction list -> string -> thm -> local_theory -> local_theory
    type extraction =
       {gen_tac: local_theory -> tactic', gen_thm: thm, pattern: term}
    val get_cd_patterns: Proof.context -> cterm list
    val get_vc_rec_thms: Proof.context -> thm list
    val get_vc_solve_thms: Proof.context -> thm list
    val mk_qualified: string -> bstring -> binding
    val prepare_cd_pattern: Proof.context -> cterm -> cterm
    val prepare_code_thms_cmd:
       string list -> thm -> local_theory -> local_theory
    val setup: theory -> theory
    val vc_solve_modifiers: Method.modifier parser list
    val vc_solve_tac: Proof.context -> bool -> tactic'
  end
structure Refine_Automation: REFINE_AUTOMATION
val it = (): unit
val it = (): unit
### theory "Refine_Monadic.Refine_Automation"
### 0.142s elapsed time, 0.315s cpu time, 0.000s GC time
locale trimono_spec
[| RETURN ?tsl <= ?tsl';
   !!x \<sigma>. RETURN (?f x \<sigma>) <= ?f' x \<sigma> |]
==> RETURN (foldli ?tsl ?c ?f ?\<sigma>)
    <= LIST_FOREACH' ?tsl' ?c ?f' ?\<sigma>
[| ?\<sigma> ~= dSUCCEED; !!x \<sigma>. ?f x \<sigma> ~= dSUCCEED |]
==> foldli ?l ?c (%x s. s >>= ?f x) ?\<sigma> ~= dSUCCEED
(!!x s. nres_of (?f x s) <= ?f' x s) ==>
nres_of
 (foldli ?l (case_dres False False ?c) (%x s. s >>= ?f x) (dRETURN ?s))
<= nfoldli ?l ?c ?f' ?s
(!!x s. RETURN (?f x s) <= ?f' x s) ==>
RETURN (foldli ?l ?c ?f ?s) <= nfoldli ?l ?c ?f' ?s
[| ?\<Phi>; ?\<Phi> ==> RETURN ?M <= ?M' |]
==> RETURN ?M <= ASSUME ?\<Phi> >>= (%_. ?M')
(?\<Phi> ==> RETURN ?M <= ?M') ==> RETURN ?M <= ASSERT ?\<Phi> >>= (%_. ?M')
[| RETURN ?x <= ?M; !!x. RETURN (?f x) <= ?F x |]
==> RETURN (Let ?x ?f) <= ?M >>= ?F
RETURN ?a <= RETURN ?a
[| !!x. ?fr x = ?b ?fr x;
   !!F f x. (!!x. RETURN (f x) <= F x) ==> RETURN (?b f x) <= ?B F x |]
==> RETURN (?fr ?x) <= REC\<^sub>T ?B ?x
[| !!s. RETURN (?fn s) <= ?fn' s;
   !!n rec rec' s.
      (!!s. RETURN (rec s) <= rec' s) ==>
      RETURN (?fs n rec s) <= ?fs' n rec' s |]
==> RETURN (rec_nat ?fn ?fs ?n ?s) <= rec_nat ?fn' ?fs' ?n ?s
[| !!s. RETURN (?fn s) <= ?fn' s;
   !!x l rec rec' s.
      (!!s. RETURN (rec s) <= rec' s) ==>
      RETURN (?fc x l rec s) <= ?fc' x l rec' s |]
==> RETURN (rec_list ?fn ?fc ?l ?s) <= rec_list ?fn' ?fc' ?l ?s
[| RETURN ?fn <= ?Fn; !!x xs. RETURN (?fc x xs) <= ?Fc x xs |]
==> RETURN (case ?l of [] => ?fn | x # xa => ?fc x xa)
    <= (case ?l of [] => ?Fn | x # xa => ?Fc x xa)
[| !!l. RETURN (?fl l) <= ?Fl l; !!r. RETURN (?fr r) <= ?Fr r |]
==> RETURN (case ?x of Inl x => ?fl x | Inr x => ?fr x)
    <= (case ?x of Inl x => ?Fl x | Inr x => ?Fr x)
[| RETURN ?fa <= ?Fa; !!x. RETURN (?fb x) <= ?Fb x |]
==> RETURN (case ?x of None => ?fa | Some x => ?fb x)
    <= (case ?x of None => ?Fa | Some x => ?Fb x)
(!!x. RETURN (?f x) <= ?F x) ==> RETURN (Let ?x ?f) <= Let ?x ?F
(!!a b. RETURN (?f a b) <= ?F a b) ==>
RETURN (case ?x of (x, xa) => ?f x xa) <= (case ?x of (x, xa) => ?F x xa)
[| ?b ==> RETURN ?s1.0 <= ?S1.0; ~ ?b ==> RETURN ?s2.0 <= ?S2.0 |]
==> RETURN (if ?b then ?s1.0 else ?s2.0) <= (if ?b then ?S1.0 else ?S2.0)
(!!x. nres_of (?f x) <= ?F x) ==>
nres_of (dWHILET ?b ?f ?x) <= WHILE\<^sub>T ?b ?F ?x
(!!x. nres_of (?f x) <= ?F x) ==>
nres_of (dWHILE ?b ?f ?x) <= WHILE ?b ?F ?x
(!!x. nres_of (?f x) <= ?F x) ==>
nres_of (dWHILEI ?I ?b ?f ?x) <= WHILE\<^bsup>?I\<^esup> ?b ?F ?x
(!!x. nres_of (?f x) <= ?F x) ==>
nres_of (dWHILEIT ?I ?b ?f ?x) <= WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?F ?x
[| ?\<Phi>; ?\<Phi> ==> nres_of ?M <= ?M' |]
==> nres_of ?M <= ASSUME ?\<Phi> >>= (%_. ?M')
(?\<Phi> ==> nres_of ?M <= ?M') ==>
nres_of ?M <= ASSERT ?\<Phi> >>= (%_. ?M')
[| nres_of ?m <= ?M; !!x. nres_of (?f x) <= ?F x |]
==> nres_of (?m >>= ?f) <= ?M >>= ?F
nres_of (dRETURN ?x) <= RETURN ?x
nres_of dSUCCEED <= SUCCEED
nres_of dFAIL <= FAIL
nres_of ?x <= nres_of ?x
[| !!F f x. (!!x. nres_of (f x) <= F x) ==> nres_of (?b f x) <= ?B F x;
   trimono ?b |]
==> nres_of (REC ?b ?x) <= REC ?B ?x
[| !!F f x. (!!x. nres_of (f x) <= F x) ==> nres_of (?b f x) <= ?B F x;
   trimono ?b |]
==> nres_of (REC\<^sub>T ?b ?x) <= REC\<^sub>T ?B ?x
[| !!x. ?fr x = ?b ?fr x;
   !!F f x. (!!x. nres_of (f x) <= F x) ==> nres_of (?b f x) <= ?B F x |]
==> nres_of (?fr ?x) <= REC\<^sub>T ?B ?x
[| !!s. nres_of (?fn s) <= ?fn' s;
   !!n rec rec' s.
      (!!s. nres_of (rec s) <= rec' s) ==>
      nres_of (?fs n rec s) <= ?fs' n rec' s |]
==> nres_of (rec_nat ?fn ?fs ?n ?s) <= rec_nat ?fn' ?fs' ?n ?s
[| !!s. nres_of (?fn s) <= ?fn' s;
   !!x l rec rec' s.
      (!!s. nres_of (rec s) <= rec' s) ==>
      nres_of (?fc x l rec s) <= ?fc' x l rec' s |]
==> nres_of (rec_list ?fn ?fc ?l ?s) <= rec_list ?fn' ?fc' ?l ?s
[| nres_of ?fn <= ?Fn; !!x xs. nres_of (?fc x xs) <= ?Fc x xs |]
==> nres_of (case ?l of [] => ?fn | x # xa => ?fc x xa)
    <= (case ?l of [] => ?Fn | x # xa => ?Fc x xa)
[| !!l. nres_of (?fl l) <= ?Fl l; !!r. nres_of (?fr r) <= ?Fr r |]
==> nres_of (case ?x of Inl x => ?fl x | Inr x => ?fr x)
    <= (case ?x of Inl x => ?Fl x | Inr x => ?Fr x)
[| nres_of ?fa <= ?Fa; !!x. nres_of (?fb x) <= ?Fb x |]
==> nres_of (case ?x of None => ?fa | Some x => ?fb x)
    <= (case ?x of None => ?Fa | Some x => ?Fb x)
(!!x. nres_of (?f x) <= ?F x) ==> nres_of (Let ?x ?f) <= Let ?x ?F
(!!a b. nres_of (?f a b) <= ?F a b) ==>
nres_of (case ?x of (x, xa) => ?f x xa) <= (case ?x of (x, xa) => ?F x xa)
[| ?b ==> nres_of ?s1.0 <= ?S1.0; ~ ?b ==> nres_of ?s2.0 <= ?S2.0 |]
==> nres_of (if ?b then ?s1.0 else ?s2.0) <= (if ?b then ?S1.0 else ?S2.0)
(!!x. RETURN (?f x) <= ?F x) ==>
RETURN (while ?b ?f ?x) <= WHILE\<^sub>T ?b ?F ?x
(!!x. RETURN (?f x) <= ?F x) ==>
RETURN (while ?b ?f ?x) <= WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?F ?x
(!!x. ?f x ~= dSUCCEED) ==> dWHILET ?b ?f ?s ~= dSUCCEED
(!!x. ?f x ~= dSUCCEED) ==> dWHILEIT ?I ?b ?f ?s ~= dSUCCEED
(!!f x. (!!x. f x ~= dSUCCEED) ==> ?B f x ~= dSUCCEED) ==>
REC\<^sub>T ?B ?x ~= dSUCCEED
[| ?fn ~= dSUCCEED; !!x xs. ?fc x xs ~= dSUCCEED |]
==> (case ?x of [] => ?fn | x # xa => ?fc x xa) ~= dSUCCEED
[| ?fn ~= dSUCCEED; !!v. ?fs v ~= dSUCCEED |]
==> (case ?x of None => ?fn | Some x => ?fs x) ~= dSUCCEED
(!!x1 x2. ?g x1 x2 ~= dSUCCEED) ==>
(case ?p of (x, xa) => ?g x xa) ~= dSUCCEED
(!!x. ?f x ~= dSUCCEED) ==> Let ?x ?f ~= dSUCCEED
[| ?m1.0 ~= dSUCCEED; ?m2.0 ~= dSUCCEED |]
==> (if ?b then ?m1.0 else ?m2.0) ~= dSUCCEED
dASSERT ?\<Phi> ~= dSUCCEED
[| ?m ~= dSUCCEED; !!x. ?f x ~= dSUCCEED |] ==> ?m >>= ?f ~= dSUCCEED
dRETURN ?x ~= dSUCCEED
dFAIL ~= dSUCCEED
(!!x. dRETURN (?f x) <= ?F x) ==>
dRETURN (while ?b ?f ?x) <= dWHILET ?b ?F ?x
(!!x. dRETURN (?f x) <= ?F x) ==>
dRETURN (while ?b ?f ?x) <= dWHILEIT ?I ?b ?F ?x
### theory "Refine_Monadic.Refine_Foreach"
### 1.207s elapsed time, 1.453s cpu time, 0.116s GC time
Loading theory "Refine_Monadic.Refine_Monadic" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator" via "Collections.Gen_Iterator")
locale Refine_Monadic_Syntax
### theory "Refine_Monadic.Refine_Monadic"
### 0.563s elapsed time, 0.635s cpu time, 0.100s GC time
Loading theory "Collections.Gen_Iterator" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base" via "Collections.Iterator")
Loading theory "Collections.Intf_Map" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Autoref")
Loading theory "Collections.Intf_Set" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Autoref")
"op_map_restrict"
  :: "('a * 'b => bool) => ('a => 'b option) => 'a => 'b option"
### theory "Collections.Intf_Set"
### 0.240s elapsed time, 0.715s cpu time, 0.062s GC time
### theory "Collections.Intf_Map"
### 0.252s elapsed time, 0.746s cpu time, 0.062s GC time
### theory "Collections.Gen_Iterator"
### 0.402s elapsed time, 0.890s cpu time, 0.062s GC time
Loading theory "Collections.Iterator" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec" via "Collections.ICF_Spec_Base")
### theory "Collections.Iterator"
### 0.386s elapsed time, 0.451s cpu time, 0.093s GC time
Loading theory "Collections.ICF_Spec_Base" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetSpec")
Loading theory "Collections.RBT_add" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.RBTSetImpl" via "Collections.RBTMapImpl")
### theory "Collections.ICF_Spec_Base"
### 0.214s elapsed time, 0.425s cpu time, 0.000s GC time
Loading theory "Collections.AnnotatedListSpec" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
Loading theory "Collections.ListSpec" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
Loading theory "Collections.MapSpec" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
locale al
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
locale al_no_invar
  fixes \<alpha> :: "'a => ('b * 'c) list"
    and invar :: "'a => bool"
  assumes "al_no_invar invar"
locale list
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
locale al_empty
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "al_empty \<alpha> invar empty"
locale list_no_invar
  fixes \<alpha> :: "'a => 'b list"
    and invar :: "'a => bool"
  assumes "list_no_invar invar"
consts
  rm_iterateoi ::
    "('k, 'v) rbt
     => ('\<sigma> => bool)
        => ('k * 'v => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
locale al_isEmpty
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "al_isEmpty \<alpha> invar isEmpty"
locale map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
locale list_empty
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "list_empty \<alpha> invar empty"
locale al_count
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and count :: "'s => nat"
  assumes "al_count \<alpha> invar count"
locale map_no_invar
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "map_no_invar invar"
locale list_isEmpty
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "list_isEmpty \<alpha> invar isEmpty"
locale al_consl
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and consl :: "'e => 'a => 's => 's"
  assumes "al_consl \<alpha> invar consl"
locale poly_list_iteratei
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
locale map_empty
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "map_empty \<alpha> invar empty"
consts
  rm_reverse_iterateoi ::
    "('k, 'v) rbt
     => ('\<sigma> => bool)
        => ('k * 'v => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
locale al_consr
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and consr :: "'s => 'e => 'a => 's"
  assumes "al_consr \<alpha> invar consr"
locale map_lookup
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and lookup :: "'u => 's => 'v option"
  assumes "map_lookup \<alpha> invar lookup"
locale al_head
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and head :: "'s => 'e * 'a"
  assumes "al_head \<alpha> invar head"
locale poly_list_rev_iteratei
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
locale map_update
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and update :: "'u => 'v => 's => 's"
  assumes "map_update \<alpha> invar update"
locale al_tail
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and tail :: "'s => 's"
  assumes "al_tail \<alpha> invar tail"
locale al_headR
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and headR :: "'s => 'e * 'a"
  assumes "al_headR \<alpha> invar headR"
locale map_update_dj
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and update_dj :: "'u => 'v => 's => 's"
  assumes "map_update_dj \<alpha> invar update_dj"
locale list_size
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and size :: "'s => nat"
  assumes "list_size \<alpha> invar size"
locale al_tailR
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and tailR :: "'s => 's"
  assumes "al_tailR \<alpha> invar tailR"
locale al_foldl
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and foldl :: "('z => 'e * 'a => 'z) => 'z => 's => 'z"
  assumes "al_foldl \<alpha> invar foldl"
locale list_appendl
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and appendl :: "'x => 's => 's"
  assumes "list_appendl \<alpha> invar appendl"
locale map_delete
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and delete :: "'u => 's => 's"
  assumes "map_delete \<alpha> invar delete"
locale al_foldr
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and foldr :: "('e * 'a => 'z => 'z) => 's => 'z => 'z"
  assumes "al_foldr \<alpha> invar foldr"
locale poly_al_fold
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
locale map_add
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and add :: "'s => 's => 's"
  assumes "MapSpec.map_add \<alpha> invar add"
locale list_removel
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and removel :: "'s => 'x * 's"
  assumes "list_removel \<alpha> invar removel"
locale al_app
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and app :: "'s => 's => 's"
  assumes "al_app \<alpha> invar app"
locale map_add_dj
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and add_dj :: "'s => 's => 's"
  assumes "map_add_dj \<alpha> invar add_dj"
locale list_leftmost
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and leftmost :: "'s => 'x"
  assumes "list_leftmost \<alpha> invar leftmost"
locale al_annot
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and annot :: "'s => 'a"
  assumes "al_annot \<alpha> invar annot"
locale map_isEmpty
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "map_isEmpty \<alpha> invar isEmpty"
locale list_appendr
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and appendr :: "'x => 's => 's"
  assumes "list_appendr \<alpha> invar appendr"
locale map_sng
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sng :: "'u => 'v => 's"
  assumes "map_sng \<alpha> invar sng"
locale map_isSng
  fixes \<alpha> :: "'s => 'k => 'v option"
    and invar :: "'s => bool"
    and isSng :: "'s => bool"
  assumes "map_isSng \<alpha> invar isSng"
locale list_remover
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and remover :: "'s => 's * 'x"
  assumes "list_remover \<alpha> invar remover"
locale al_splits
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and splits :: "('a => bool) => 'a => 's => 's * ('e * 'a) * 's"
  assumes "al_splits \<alpha> invar splits"
locale list_rightmost
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and rightmost :: "'s => 'x"
  assumes "list_rightmost \<alpha> invar rightmost"
locale finite_map
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "finite_map \<alpha> invar"
locale list_get
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and get :: "'s => nat => 'x"
  assumes "list_get \<alpha> invar get"
locale map_size
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and size :: "'s => nat"
  assumes "map_size \<alpha> invar size"
locale list_set
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and set :: "'s => nat => 'x => 's"
  assumes "list_set \<alpha> invar set"
locale map_size_abort
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and size_abort :: "nat => 's => nat"
  assumes "map_size_abort \<alpha> invar size_abort"
locale poly_map_iteratei_defs
  fixes
    list_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_map_iteratei
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_iteratei \<alpha> invar list_it"
locale map_ball
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and ball :: "'s => ('u * 'v => bool) => bool"
  assumes "map_ball \<alpha> invar ball"
locale map_bex
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and bex :: "'s => ('u * 'v => bool) => bool"
  assumes "map_bex \<alpha> invar bex"
locale map_sel
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sel :: "'s => ('u * 'v => 'r option) => 'r option"
  assumes "map_sel \<alpha> invar sel"
locale map_sel'
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sel' :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_sel' \<alpha> invar sel'"
locale map_to_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_list :: "'s => ('u * 'v) list"
  assumes "map_to_list \<alpha> invar to_list"
locale list_to_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_map :: "('u * 'v) list => 's"
  assumes "list_to_map \<alpha> invar to_map"
locale map_image_filter
  fixes \<alpha>1 :: "'m1 => 'u1 => 'v1 option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u2 => 'v2 option"
    and invar2 :: "'m2 => bool"
    and
    map_image_filter :: "('u1 * 'v1 => ('u2 * 'v2) option) => 'm1 => 'm2"
  assumes
    "map_image_filter \<alpha>1 invar1 \<alpha>2 invar2 map_image_filter"
locale map_value_image_filter
  fixes \<alpha>1 :: "'m1 => 'u => 'v1 option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u => 'v2 option"
    and invar2 :: "'m2 => bool"
    and map_value_image_filter :: "('u => 'v1 => 'v2 option) => 'm1 => 'm2"
  assumes
    "map_value_image_filter \<alpha>1 invar1 \<alpha>2 invar2
      map_value_image_filter"
locale map_restrict
  fixes \<alpha>1 :: "'m1 => 'u => 'v option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u => 'v option"
    and invar2 :: "'m2 => bool"
    and restrict :: "('u * 'v => bool) => 'm1 => 'm2"
  assumes "map_restrict \<alpha>1 invar1 \<alpha>2 invar2 restrict"
locale ordered_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
locale ordered_finite_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
  assumes "ordered_finite_map \<alpha> invar"
locale poly_map_iterateoi_defs
  fixes
    olist_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_map_iterateoi
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_ordered_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_iterateoi \<alpha> invar list_ordered_it"
locale poly_map_rev_iterateoi_defs
  fixes
    list_rev_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_map_rev_iterateoi
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_rev_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_rev_iterateoi \<alpha> invar list_rev_it"
locale map_min
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and min :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_min \<alpha> invar min"
locale map_max
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and max :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_max \<alpha> invar max"
locale map_to_sorted_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_sorted_list :: "'s => ('u * 'v) list"
  assumes "MapSpec.map_to_sorted_list \<alpha> invar to_sorted_list"
locale map_to_rev_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_rev_list :: "'s => ('u * 'v) list"
  assumes "map_to_rev_list \<alpha> invar to_rev_list"
consts
  bheight_aux :: "('a, 'b) rbt => nat => nat"
### theory "Collections.RBT_add"
### 2.480s elapsed time, 8.951s cpu time, 4.760s GC time
Loading theory "Collections.PrioSpec" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
locale prio
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
locale prio_no_invar
  fixes \<alpha> :: "'a => ('b * 'c) multiset"
    and invar :: "'a => bool"
  assumes "prio_no_invar invar"
locale prio_empty
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and empty :: "unit => 'p"
  assumes "prio_empty \<alpha> invar empty"
locale prio_isEmpty
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and isEmpty :: "'p => bool"
  assumes "prio_isEmpty \<alpha> invar isEmpty"
locale prio_find
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and find :: "'p => 'e * 'a"
  assumes "prio_find \<alpha> invar find"
locale prio_insert
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and insert :: "'e => 'a => 'p => 'p"
  assumes "prio_insert \<alpha> invar insert"
locale prio_meld
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and meld :: "'p => 'p => 'p"
  assumes "prio_meld \<alpha> invar meld"
locale prio_delete
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and find :: "'p => 'e * 'a"
    and delete :: "'p => 'p"
  assumes "prio_delete \<alpha> invar find delete"
locale StdListDefs
  fixes ops :: "('a, 's, 'more) list_ops_scheme"
locale StdList
  fixes ops :: "('a, 's, 'more) list_ops_scheme"
  assumes "StdList ops"
locale StdList_no_invar
  fixes ops :: "('a, 'b, 'c) list_ops_scheme"
  assumes "StdList_no_invar ops"
### theory "Collections.ListSpec"
### 2.541s elapsed time, 9.609s cpu time, 4.838s GC time
Loading theory "Collections.ListGA" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.ArrayHashSet" via "Collections.ArrayHashMap" via "Collections.ArrayHashMap_Impl")
locale idx_iteratei_loc
  fixes \<alpha> :: "'s => 'a list"
    and invar :: "'s => bool"
    and size :: "'s => nat"
    and get :: "'s => nat => 'a"
  assumes "idx_iteratei_loc \<alpha> invar size get"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale StdALDefs
  fixes ops :: "('e, 'a, 's, 'more) alist_ops_scheme"
locale StdAL
  fixes ops :: "('a, 'b, 'c, 'd) alist_ops_scheme"
  assumes "StdAL ops"
locale StdAL_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) alist_ops_scheme"
  assumes "StdAL_no_invar ops"
### theory "Collections.AnnotatedListSpec"
### 3.023s elapsed time, 11.479s cpu time, 5.134s GC time
Loading theory "Collections.FTAnnotatedListImpl" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale StdMapDefs
  fixes ops :: "('k, 'v, 's, 'more) map_ops_scheme"
locale StdPrioDefs
  fixes ops :: "('e, 'a, 'p) prio_ops"
locale it_size_loc
  fixes \<alpha> :: "'s => 'a list"
    and invar :: "'s => bool"
locale rev_it_size_loc
  fixes \<alpha> :: "'s => 'a list"
    and invar :: "'s => bool"
locale it_get_loc
  fixes \<alpha> :: "'s => 'a list"
    and invar :: "'s => bool"
### theory "Collections.ListGA"
### 1.787s elapsed time, 6.683s cpu time, 4.740s GC time
Loading theory "Collections.Fifo" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
locale StdPrio
  fixes ops :: "('a, 'b, 'c) prio_ops"
  assumes "StdPrio ops"
locale StdPrio_no_invar
  fixes ops :: "('a, 'b, 'c) prio_ops"
  assumes "StdPrio_no_invar ops"
### theory "Collections.PrioSpec"
### 2.098s elapsed time, 7.906s cpu time, 4.818s GC time
Loading theory "Collections.BinoPrioImpl" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
locale StdMap
  fixes ops :: "('k, 'v, 's, 'more) map_ops_scheme"
  assumes "StdMap ops"
locale StdMap_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) map_ops_scheme"
  assumes "StdMap_no_invar ops"
### theory "Collections.Fifo"
### 0.581s elapsed time, 2.263s cpu time, 0.215s GC time
Loading theory "Collections.PrioByAnnotatedList" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.FTPrioImpl")
### theory "Collections.BinoPrioImpl"
### 0.604s elapsed time, 2.358s cpu time, 0.215s GC time
Loading theory "Collections.SkewPrioImpl" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
locale StdOMapDefs
  fixes ops :: "('k, 'v, 's, 'more) omap_ops_scheme"
### theory "Collections.FTAnnotatedListImpl"
### 2.496s elapsed time, 9.463s cpu time, 5.017s GC time
Loading theory "Collections.PrioUniqueSpec" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
locale uprio
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
locale uprio_no_invar
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "uprio_no_invar invar"
locale uprio_finite
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "uprio_finite \<alpha> invar"
locale uprio_empty
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "uprio_empty \<alpha> invar empty"
locale uprio_isEmpty
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "uprio_isEmpty \<alpha> invar isEmpty"
locale uprio_pop
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and pop :: "'s => 'e * 'a * 's"
  assumes "uprio_pop \<alpha> invar pop"
locale StdOMap
  fixes ops :: "('k, 'v, 's, 'more) omap_ops_scheme"
  assumes "StdOMap ops"
### theory "Collections.MapSpec"
### 5.596s elapsed time, 21.240s cpu time, 10.151s GC time
Loading theory "Collections.SetSpec" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
locale uprio_insert
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and insert :: "'s => 'e => 'a => 's"
  assumes "uprio_insert \<alpha> invar insert"
locale uprio_distinct_insert
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and insert :: "'s => 'e => 'a => 's"
  assumes "uprio_distinct_insert \<alpha> invar insert"
locale uprio_prio
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and prio :: "'s => 'e => 'a option"
  assumes "uprio_prio \<alpha> invar prio"
locale set
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
locale set_no_invar
  fixes \<alpha> :: "'a => 'b set"
    and invar :: "'a => bool"
  assumes "set_no_invar invar"
locale set_empty
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "set_empty \<alpha> invar empty"
locale set_memb
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and memb :: "'x => 's => bool"
  assumes "set_memb \<alpha> invar memb"
locale set_ins
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and ins :: "'x => 's => 's"
  assumes "set_ins \<alpha> invar ins"
locale set_ins_dj
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and ins_dj :: "'x => 's => 's"
  assumes "set_ins_dj \<alpha> invar ins_dj"
locale set_delete
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and delete :: "'x => 's => 's"
  assumes "set_delete \<alpha> invar delete"
locale set_isEmpty
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "set_isEmpty \<alpha> invar isEmpty"
### theory "Collections.SkewPrioImpl"
### 0.740s elapsed time, 2.904s cpu time, 0.359s GC time
locale set_ball
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and ball :: "'s => ('x => bool) => bool"
  assumes "set_ball \<alpha> invar ball"
locale set_bex
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and bex :: "'s => ('x => bool) => bool"
  assumes "set_bex \<alpha> invar bex"
locale finite_set
  fixes \<alpha> :: "'a => 'b set"
    and invar :: "'a => bool"
  assumes "finite_set \<alpha> invar"
locale set_size
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and size :: "'s => nat"
  assumes "set_size \<alpha> invar size"
locale set_size_abort
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and size_abort :: "nat => 's => nat"
  assumes "set_size_abort \<alpha> invar size_abort"
locale set_sng
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and sng :: "'x => 's"
  assumes "set_sng \<alpha> invar sng"
locale set_isSng
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and isSng :: "'s => bool"
  assumes "set_isSng \<alpha> invar isSng"
### Missing patterns in function definition:
### p_unwrap Infty = undefined
locale poly_set_iteratei_defs
  fixes
    list_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
locale poly_set_iteratei
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and
    list_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
  assumes "poly_set_iteratei \<alpha> invar list_it"
Found termination order: "{}"
locale set_copy
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and copy :: "'s1 => 's2"
  assumes "set_copy \<alpha>1 invar1 \<alpha>2 invar2 copy"
locale set_union
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'a set"
    and invar3 :: "'s3 => bool"
    and union :: "'s1 => 's2 => 's3"
  assumes
    "set_union \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3 union"
locale set_union_dj
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'a set"
    and invar3 :: "'s3 => bool"
    and union_dj :: "'s1 => 's2 => 's3"
  assumes
    "set_union_dj \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3
      union_dj"
locale set_union_list
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and union_list :: "'s1 list => 's2"
  assumes "set_union_list \<alpha>1 invar1 \<alpha>2 invar2 union_list"
locale set_diff
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and diff :: "'s1 => 's2 => 's1"
  assumes "set_diff \<alpha>1 invar1 \<alpha>2 invar2 diff"
Found termination order: "{}"
locale set_inter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'a set"
    and invar3 :: "'s3 => bool"
    and inter :: "'s1 => 's2 => 's3"
  assumes
    "set_inter \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3 inter"
locale set_subset
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and subset :: "'s1 => 's2 => bool"
  assumes "set_subset \<alpha>1 invar1 \<alpha>2 invar2 subset"
instantiation
  Prio :: (type, linorder) monoid_add
  zero_Prio == zero_class.zero :: ('a, 'b) Prio
  plus_Prio == plus :: ('a, 'b) Prio => ('a, 'b) Prio => ('a, 'b) Prio
locale set_equal
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and equal :: "'s1 => 's2 => bool"
  assumes "set_equal \<alpha>1 invar1 \<alpha>2 invar2 equal"
locale set_image_filter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and image_filter :: "('a => 'b option) => 's1 => 's2"
  assumes "set_image_filter \<alpha>1 invar1 \<alpha>2 invar2 image_filter"
locale set_inj_image_filter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and inj_image_filter :: "('a => 'b option) => 's1 => 's2"
  assumes
    "set_inj_image_filter \<alpha>1 invar1 \<alpha>2 invar2
      inj_image_filter"
locale set_image
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and image :: "('a => 'b) => 's1 => 's2"
  assumes "set_image \<alpha>1 invar1 \<alpha>2 invar2 image"
locale set_inj_image
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and inj_image :: "('a => 'b) => 's1 => 's2"
  assumes "set_inj_image \<alpha>1 invar1 \<alpha>2 invar2 inj_image"
locale set_filter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and filter :: "('a => bool) => 's1 => 's2"
  assumes "set_filter \<alpha>1 invar1 \<alpha>2 invar2 filter"
Found termination order: "{}"
locale set_Union_image
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'b set"
    and invar3 :: "'s3 => bool"
    and Union_image :: "('a => 's2) => 's1 => 's3"
  assumes
    "set_Union_image \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3
      Union_image"
locale set_disjoint
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and disjoint :: "'s1 => 's2 => bool"
  assumes "set_disjoint \<alpha>1 invar1 \<alpha>2 invar2 disjoint"
locale set_disjoint_witness
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and disjoint_witness :: "'s1 => 's2 => 'a option"
  assumes
    "set_disjoint_witness \<alpha>1 invar1 \<alpha>2 invar2
      disjoint_witness"
locale set_sel
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and sel :: "'s => ('x => 'r option) => 'r option"
  assumes "set_sel \<alpha> invar sel"
locale set_sel'
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and sel' :: "'s => ('x => bool) => 'x option"
  assumes "set_sel' \<alpha> invar sel'"
locale set_to_list
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_list :: "'s => 'x list"
  assumes "set_to_list \<alpha> invar to_list"
Found termination order: "{}"
locale list_to_set
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_set :: "'x list => 's"
  assumes "list_to_set \<alpha> invar to_set"
locale ordered_set
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
locale ordered_finite_set
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
  assumes "ordered_finite_set \<alpha> invar"
locale poly_set_iterateoi_defs
  fixes
    olist_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
instantiation
  Prio :: (type, linorder) preorder
  less_eq_Prio == less_eq :: ('a, 'b) Prio => ('a, 'b) Prio => bool
  less_Prio == less :: ('a, 'b) Prio => ('a, 'b) Prio => bool
locale poly_set_iterateoi
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and
    list_ordered_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
  assumes "poly_set_iterateoi \<alpha> invar list_ordered_it"
locale poly_set_rev_iterateoi_defs
  fixes
    list_rev_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
locale StdUprioDefs
  fixes ops :: "('e, 'a, 's, 'more) uprio_ops_scheme"
locale poly_set_rev_iterateoi
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and
    list_rev_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
  assumes "poly_set_rev_iterateoi \<alpha> invar list_rev_it"
locale StdUprio
  fixes ops :: "('a, 'b, 'c, 'd) uprio_ops_scheme"
  assumes "StdUprio ops"
locale set_min
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
    and min :: "'s => ('u => bool) => 'u option"
  assumes "set_min \<alpha> invar min"
locale StdUprio_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) uprio_ops_scheme"
  assumes "StdUprio_no_invar ops"
### theory "Collections.PrioUniqueSpec"
### 0.835s elapsed time, 2.735s cpu time, 0.204s GC time
Loading theory "Collections.PrioUniqueByAnnotatedList" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.FTPrioUniqueImpl")
locale set_max
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
    and max :: "'s => ('u => bool) => 'u option"
  assumes "set_max \<alpha> invar max"
locale set_to_sorted_list
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_sorted_list :: "'s => 'x list"
  assumes "SetSpec.set_to_sorted_list \<alpha> invar to_sorted_list"
locale set_to_rev_list
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_rev_list :: "'s => 'x list"
  assumes "set_to_rev_list \<alpha> invar to_rev_list"
locale alprio_defs
  fixes ops :: "(unit, ('e, 'a) Prio, 's) alist_ops"
locale alprio
  fixes ops :: "(unit, ('e, 'a) Prio, 's) alist_ops"
  assumes "alprio ops"
### theory "Collections.PrioByAnnotatedList"
### 1.561s elapsed time, 5.462s cpu time, 0.563s GC time
### Missing patterns in function definition:
### p_unwrap Infty = undefined
Found termination order: "{}"
locale StdSetDefs
  fixes ops :: "('x, 's, 'more) set_ops_scheme"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  LP :: (linorder, linorder) monoid_add
  zero_LP == zero_class.zero :: ('a, 'b) LP
  plus_LP == plus :: ('a, 'b) LP => ('a, 'b) LP => ('a, 'b) LP
Found termination order: "{}"
Found termination order: "{}"
instantiation
  LP :: (type, linorder) preorder
  less_eq_LP == less_eq :: ('a, 'b) LP => ('a, 'b) LP => bool
  less_LP == less :: ('a, 'b) LP => ('a, 'b) LP => bool
locale StdSet
  fixes ops :: "('x, 's, 'more) set_ops_scheme"
  assumes "StdSet ops"
locale StdSet_no_invar
  fixes ops :: "('a, 'b, 'c) set_ops_scheme"
  assumes "StdSet_no_invar ops"
locale aluprio_defs
  fixes ops :: "(unit, ('e, 'a) LP, 's) alist_ops"
locale aluprio
  fixes ops :: "(unit, ('e, 'a) LP, 's) alist_ops"
  assumes "aluprio ops"
### theory "Collections.PrioUniqueByAnnotatedList"
### 1.473s elapsed time, 3.403s cpu time, 0.602s GC time
locale StdOSetDefs
  fixes ops :: "('x, 's, 'more) oset_ops_scheme"
locale StdOSet
  fixes ops :: "('x, 's, 'more) oset_ops_scheme"
  assumes "StdOSet ops"
### theory "Collections.SetSpec"
### 2.611s elapsed time, 6.191s cpu time, 0.806s GC time
Loading theory "Collections.Algos" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
Loading theory "Collections.SetIndex" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl")
Loading theory "Collections.SetIteratorCollectionsGA" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.ListSetImpl" via "Collections.SetGA")
locale index_loc
  fixes m_ops :: "('i, 's, 'm, 'more1) map_ops_scheme"
    and s_ops :: "('x, 's, 'more2) set_ops_scheme"
  assumes "index_loc m_ops s_ops"
### theory "Collections.SetIteratorCollectionsGA"
### 0.255s elapsed time, 0.772s cpu time, 0.000s GC time
Loading theory "Collections.MapGA" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.RBTSetImpl" via "Collections.RBTMapImpl")
Loading theory "Collections.SetGA" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.ListSetImpl")
locale g_set_xx_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
locale map_to_nat_loc
  fixes s_ops :: "('x, 's, 'more1) set_ops_scheme"
    and m_ops :: "('x, nat, 'm, 'more2) map_ops_scheme"
  assumes "map_to_nat_loc s_ops m_ops"
locale build_index_loc
  fixes m_ops :: "('i, 's, 'm, 'more1) map_ops_scheme"
    and s_ops :: "('x, 's, 'more3) set_ops_scheme"
    and t_ops :: "('x, 't, 'more2) set_ops_scheme"
  assumes "build_index_loc m_ops s_ops t_ops"
### theory "Collections.SetIndex"
### 0.454s elapsed time, 1.532s cpu time, 0.186s GC time
locale it_dom_fun_to_map_loc
  fixes s_ops :: "('k, 's, 'more1) set_ops_scheme"
    and m_ops :: "('k, 'v, 'm, 'more2) map_ops_scheme"
  assumes "it_dom_fun_to_map_loc s_ops m_ops"
locale set_to_list_defs_loc
  fixes s_ops :: "('x, 's, 'more1) set_ops_scheme"
    and l_ops :: "('x, 'l, 'more2) list_ops_scheme"
locale g_set_xx_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
  assumes "g_set_xx_loc ops1 ops2"
locale set_to_list_loc
  fixes s_ops :: "('x, 's, 'more1) set_ops_scheme"
    and l_ops :: "('x, 'l, 'more2) list_ops_scheme"
  assumes "set_to_list_loc s_ops l_ops"
### theory "Collections.Algos"
### 0.605s elapsed time, 2.001s cpu time, 0.186s GC time
locale g_set_xxx_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('x, 's3, 'more3) set_ops_scheme"
locale g_set_xxx_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('x, 's3, 'more3) set_ops_scheme"
  assumes "g_set_xxx_loc ops1 ops2 ops3"
locale g_set_xy_defs_loc
  fixes ops1 :: "('x1, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x2, 's2, 'more2) set_ops_scheme"
  assumes "g_set_xy_defs_loc ops1 ops2"
locale StdBasicMapDefs
  fixes ops :: "('k, 'v, 's, 'more) map_basic_ops_scheme"
locale g_set_xy_loc
  fixes ops1 :: "('x1, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x2, 's2, 'more2) set_ops_scheme"
  assumes "g_set_xy_loc ops1 ops2"
locale StdBasicOMapDefs
  fixes ops :: "('k, 'v, 's, 'more) omap_basic_ops_scheme"
locale StdBasicMap
  fixes ops :: "('k, 'v, 's, 'more) map_basic_ops_scheme"
  assumes "StdBasicMap ops"
locale g_set_xyy_defs_loc
  fixes ops0 :: "('x0, 's0, 'more0) set_ops_scheme"
    and ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
locale StdBasicOMap
  fixes ops :: "('k, 'v, 's, 'more) omap_basic_ops_scheme"
  assumes "StdBasicOMap ops"
locale StdBasicMapDefs
  fixes ops :: "('k, 'v, 's, 'more) map_basic_ops_scheme"
locale g_set_xyy_loc
  fixes ops0 :: "('x0, 's0, 'more0) set_ops_scheme"
    and ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
  assumes "g_set_xyy_loc ops0 ops1 ops2"
locale StdBasicMap
  fixes ops :: "('k, 'v, 's, 'more) map_basic_ops_scheme"
  assumes "StdBasicMap ops"
locale StdBasicOMapDefs
  fixes ops :: "('k, 'v, 's, 'more) omap_basic_ops_scheme"
locale StdBasicOMap
  fixes ops :: "('k, 'v, 's, 'more) omap_basic_ops_scheme"
  assumes "StdBasicOMap ops"
locale g_image_filter_defs_loc
  fixes ops1 :: "('k1, 'v1, 's1, 'm1) map_ops_scheme"
    and ops2 :: "('k2, 'v2, 's2, 'm2) map_ops_scheme"
locale g_image_filter_loc
  fixes ops1 :: "('k1, 'v1, 's1, 'm1) map_ops_scheme"
    and ops2 :: "('k2, 'v2, 's2, 'm2) map_ops_scheme"
  assumes "g_image_filter_loc ops1 ops2"
locale StdBasicSetDefs
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
locale StdBasicOSetDefs
  fixes ops :: "('x, 's, 'more) oset_basic_ops_scheme"
locale g_value_image_filter_defs_loc
  fixes ops1 :: "('k, 'v1, 's1, 'm1) map_ops_scheme"
    and ops2 :: "('k, 'v2, 's2, 'm2) map_ops_scheme"
locale StdBasicSet
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
  assumes "StdBasicSet ops"
locale g_value_image_filter_loc
  fixes ops1 :: "('k, 'v1, 's1, 'm1) map_ops_scheme"
    and ops2 :: "('k, 'v2, 's2, 'm2) map_ops_scheme"
  assumes "g_value_image_filter_loc ops1 ops2"
locale StdBasicOSet
  fixes ops :: "('x, 's, 'more) oset_basic_ops_scheme"
  assumes "StdBasicOSet ops"
locale StdBasicSetDefs
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
### theory "Collections.MapGA"
### 1.487s elapsed time, 3.561s cpu time, 0.344s GC time
Loading theory "Collections.ListMapImpl" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.HashSet" via "Collections.HashMap" via "Collections.HashMap_Impl")
Loading theory "Collections.ListMapImpl_Invar" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.MapStdImpl")
Loading theory "Collections.TrieMapImpl" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.TrieSetImpl")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale StdBasicSet
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
  assumes "StdBasicSet ops"
locale StdBasicSet
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
  assumes "StdBasicSet ops"
locale StdBasicOSetDefs
  fixes ops :: "('x, 's, 'more) oset_basic_ops_scheme"
locale StdBasicOSet
  fixes ops :: "('x, 's, 'more) oset_basic_ops_scheme"
  assumes "StdBasicOSet ops"
locale image_filter_cp_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('z, 's3, 'more3) set_ops_scheme"
locale image_filter_cp_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('z, 's3, 'more3) set_ops_scheme"
  assumes "image_filter_cp_loc ops1 ops2 ops3"
locale inj_image_filter_cp_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('z, 's3, 'more3) set_ops_scheme"
### theory "Collections.ListMapImpl"
### 1.143s elapsed time, 4.503s cpu time, 0.322s GC time
Loading theory "Collections.RBTMapImpl" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.RBTSetImpl")
### theory "Collections.TrieMapImpl"
### 1.151s elapsed time, 4.546s cpu time, 0.322s GC time
"revg"
  :: "'a list => 'a list => 'a list"
locale inj_image_filter_cp_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('z, 's3, 'more3) set_ops_scheme"
  assumes "inj_image_filter_cp_loc ops1 ops2 ops3"
locale cart_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('x * 'y, 's3, 'more3) set_ops_scheme"
locale cart_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('x * 'y, 's3, 'more3) set_ops_scheme"
  assumes "cart_loc ops1 ops2 ops3"
### theory "Collections.SetGA"
### 2.958s elapsed time, 9.070s cpu time, 0.774s GC time
Loading theory "Collections.ListSetImpl" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl")
Loading theory "Collections.ListSetImpl_Invar" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl")
### theory "Collections.ListMapImpl_Invar"
### 1.794s elapsed time, 6.798s cpu time, 0.430s GC time
Loading theory "Collections.ListSetImpl_NotDist" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl")
### theory "Collections.ListSetImpl"
### 1.133s elapsed time, 4.474s cpu time, 0.275s GC time
Loading theory "Collections.ListSetImpl_Sorted" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl")
### theory "Collections.ListSetImpl_Invar"
### 1.196s elapsed time, 4.731s cpu time, 0.275s GC time
Loading theory "Collections.SetByMap" (required by "Draft.Benchmark_ICFTemplates" via "Draft.Benchmark_ICF" via "Collections.CollectionsV1" via "Collections.Collections" via "Collections.ICF_Impl" via "Collections.SetStdImpl" via "Collections.RBTSetImpl")
locale SetByMapDefs
  fixes ops :: "('x, unit, 's, 'more) map_basic_ops_scheme"
locale SetByMap
  fixes ops :: "('x, unit, 's, 'more) map_basic_ops_scheme"
  assumes "SetByMap ops"
locale OSetByOMapDefs
  fixes ops :: "('x, unit, 's, 'more) omap_basic_ops_scheme"
### theory "Collections.ListSetImpl_NotDist"
### 1.556s elapsed time, 6.140s cpu time, 0.443s GC time
locale OSetByOMap
  fixes ops :: "('x, unit, 's, 'more) omap_basic_ops_scheme"
  assumes "OSetByOMap ops"
### theory "Collections.RBTMapImpl"
### 2.661s elapsed time, 9.810s cpu time, 0.689s GC time
### theory "Collections.SetByMap"
### 1.445s elapsed time, 4.696s cpu time, 0.306s GC time
### theory "Collections.ListSetImpl_Sorted"
### 2.086s elapsed time, 5.519s cpu time, 0.306s GC time
*** Failed to load theory "Collections.Array_Iterator" (unresolved "Collections.Diff_Array")
*** Failed to load theory "Collections.FTPrioImpl" (unresolved "Collections.FTAnnotatedListImpl")
*** Failed to load theory "Collections.FTPrioUniqueImpl" (unresolved "Collections.FTAnnotatedListImpl")
*** Failed to load theory "Collections.ArrayMapImpl" (unresolved "Collections.Diff_Array")
*** Failed to load theory "Collections.ArrayHashMap_Impl" (unresolved "Collections.Array_Iterator", "Collections.Diff_Array", "Collections.ListMapImpl")
*** Failed to load theory "Collections.ArrayHashMap" (unresolved "Collections.ArrayHashMap_Impl")
*** Failed to load theory "Collections.HashMap_Impl" (unresolved "Collections.ListMapImpl", "Collections.RBTMapImpl")
*** Failed to load theory "Collections.HashMap" (unresolved "Collections.HashMap_Impl")
*** Failed to load theory "Collections.MapStdImpl" (unresolved "Collections.ArrayHashMap", "Collections.ArrayMapImpl", "Collections.HashMap", "Collections.ListMapImpl", "Collections.ListMapImpl_Invar", "Collections.RBTMapImpl", "Collections.TrieMapImpl")
*** Failed to load theory "Collections.ArraySetImpl" (unresolved "Collections.ArrayMapImpl")
*** Failed to load theory "Collections.TrieSetImpl" (unresolved "Collections.TrieMapImpl")
*** Failed to load theory "Collections.RBTSetImpl" (unresolved "Collections.RBTMapImpl")
*** Failed to load theory "Collections.ArrayHashSet" (unresolved "Collections.ArrayHashMap")
*** Failed to load theory "Collections.HashSet" (unresolved "Collections.HashMap")
*** Failed to load theory "Collections.SetStdImpl" (unresolved "Collections.ArrayHashSet", "Collections.ArraySetImpl", "Collections.HashSet", "Collections.ListSetImpl", "Collections.ListSetImpl_Invar", "Collections.ListSetImpl_NotDist", "Collections.ListSetImpl_Sorted", "Collections.RBTSetImpl", "Collections.TrieSetImpl")
*** Failed to load theory "Collections.ICF_Impl" (unresolved "Collections.BinoPrioImpl", "Collections.FTAnnotatedListImpl", "Collections.FTPrioImpl", "Collections.FTPrioUniqueImpl", "Collections.Fifo", "Collections.MapStdImpl", "Collections.SetStdImpl", "Collections.SkewPrioImpl")
*** Failed to load theory "Collections.ICF_Refine_Monadic" (unresolved "Collections.ICF_Impl")
*** Failed to load theory "Collections.ICF_Autoref" (unresolved "Collections.ICF_Refine_Monadic")
*** Failed to load theory "Collections.Collections" (unresolved "Collections.ICF_Autoref", "Collections.ICF_Impl", "Collections.ICF_Refine_Monadic")
*** Failed to load theory "Collections.CollectionsV1" (unresolved "Collections.Collections")
*** Failed to load theory "Draft.Benchmark_ICF" (unresolved "Collections.CollectionsV1")
*** Failed to load theory "Draft.Benchmark_ICFTemplates" (unresolved "Draft.Benchmark_ICF")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "86")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 298 of "$AFP/Collections/ICF/impl/ListSetImpl_Sorted.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "84")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 135 of "$AFP/Collections/ICF/impl/RBTMapImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "82")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 202 of "$AFP/Collections/ICF/impl/ListSetImpl_NotDist.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "80")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 105 of "$AFP/Collections/ICF/impl/ListSetImpl_Invar.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "78")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 120 of "$AFP/Collections/ICF/impl/ListSetImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "76")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 155 of "$AFP/Collections/ICF/impl/ListMapImpl_Invar.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "74")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 163 of "$AFP/Collections/ICF/impl/TrieMapImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "72")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 101 of "$AFP/Collections/ICF/impl/ListMapImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "70")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 110 of "$AFP/Collections/ICF/impl/SkewPrioImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "68")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 219 of "$AFP/Collections/ICF/impl/FTAnnotatedListImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "66")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 114 of "$AFP/Collections/ICF/impl/BinoPrioImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "64")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 224 of "$AFP/Collections/ICF/impl/Fifo.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "62")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 1067 of "$AFP/Collections/Lib/Diff_Array.thy")
Exception- TOPLEVEL_ERROR raised
