Loading theory "Draft.Benchmark_Set" (required by "Draft.Benchmark_Set_LCTemplates" via "Draft.Benchmark_Set_LC")
Loading theory "Draft.Templates" (required by "Draft.Benchmark_Set_LCTemplates" via "Draft.ExtrEqs")
instantiation
  word :: (len) card_UNIV
  card_UNIV_word == card_UNIV_class.card_UNIV :: ('a word, nat) phantom
  finite_UNIV_word == finite_UNIV :: ('a word, bool) phantom
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.163s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Benchmark_Set_LCTemplates")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 1.083s cpu time, 0.071s GC time
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
consts
  lookup ::
    "nat
     => nat
        => 32 word set set * natural * natural => nat * natural * natural"
### theory "Draft.Benchmark_Set"
### 0.791s elapsed time, 1.441s cpu time, 0.071s GC time
Loading theory "Draft.Benchmark_Set_LC" (required by "Draft.Benchmark_Set_LCTemplates")
instantiation
  word :: (len) ceq
  ceq_word == ceq :: ('a word => 'a word => bool) option
instantiation
  word :: (len) compare
  compare_word == compare :: 'a word => 'a word => order
instantiation
  word :: (len) ccompare
  ccompare_word == ccompare :: ('a word => 'a word => order) option
instantiation
  word :: (len) set_impl
  set_impl_word == set_impl :: ('a word, set_impl) phantom
instantiation
  word :: (len) proper_interval
  proper_interval_word == proper_interval ::
    'a word option => 'a word option => bool
Found termination order: "{}"
instantiation
  word :: (len) cproper_interval
  cproper_interval_word == cproper_interval ::
    'a word option => 'a word option => bool
instantiation
  word :: (len) cenum
  cEnum_word == cEnum ::
    ('a word list *
     (('a word => bool) => bool) * (('a word => bool) => bool)) option
### theory "Draft.Benchmark_Set_LC"
### 0.730s elapsed time, 0.771s cpu time, 0.042s GC time
Loading theory "Draft.Benchmark_Set_LCTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Benchmark_Set_LCTemplates"
### 0.608s elapsed time, 0.835s cpu time, 0.139s GC time
val it = (): unit
