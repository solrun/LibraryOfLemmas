   [("Benchmark_Set.word_of_integer_code",
     "word_of_integer ?k =
      (if ?k < 0 then - word_of_integer (- ?k)
       else if ?k = 0 then 0
            else let (q, r) = divmod_integer ?k 2
                 in if r = 0 then 2 * word_of_integer q
                    else 2 * word_of_integer q + 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app (template_hole 15, template_var 0),
                   template_hole 14)),
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 17,
                   template_app (template_hole 12, template_var 0)))),
             template_app
              (template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_app (template_hole 11, template_var 0),
                     template_hole 14)),
                 template_hole 10),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5)))),
                 template_app (template_hole 4, t_empty))))
           )))]
