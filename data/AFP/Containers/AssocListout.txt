Loading theory "Draft.AssocList" (required by "Draft.AssocListTemplates")
Loading theory "Draft.Templates" (required by "Draft.AssocListTemplates" via "Draft.ExtrEqs")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.157s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AssocListTemplates")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.AssocList"
### 0.270s elapsed time, 0.574s cpu time, 0.034s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 0.757s cpu time, 0.034s GC time
Loading theory "Draft.AssocListTemplates"
val templateLemmas =
   [("AssocList.finite_dom_lookup", "finite (dom (DAList.lookup ?m))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("AssocList.zip_with_index_from_simps",
     "zip_with_index_from ?n [] = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("AssocList.dom_lookup_keys",
     "dom (DAList.lookup ?al) = AssocList.keys ?al",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("AssocList.size_eq_card_dom_lookup",
     "size ?al = card (dom (DAList.lookup ?al))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("AssocList.update_conv_update_with",
     "DAList.update ?k ?v = AssocList.update_with ?v ?k (%_. ?v)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         t_empty))),
    ("AssocList.lookup_delete",
     "DAList.lookup (AssocList.delete ?k ?al) = (DAList.lookup ?al)
      (?k := None)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("AssocList.keys_update",
     "AssocList.keys (DAList.update ?k ?v ?al) =
      insert ?k (AssocList.keys ?al)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 2, template_var 0)))),
    ("AssocList.keys_delete",
     "AssocList.keys (AssocList.delete ?k ?al) = AssocList.keys ?al - {?k}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("AssocList.keys_update_with",
     "AssocList.keys (AssocList.update_with ?v ?k ?f ?al) =
      insert ?k (AssocList.keys ?al)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 2, template_var 0)))),
    ("AssocList.update_conv_update_with_aux",
     "AList.update ?k ?v ?xs = update_with_aux ?v ?k (%_. ?v) ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           t_empty),
         template_var 0))),
    ("AssocList.lookup_update",
     "DAList.lookup (DAList.update ?k ?v ?al) = DAList.lookup ?al(?k |->
      ?v)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("AssocList.distinct_delete_aux",
     "distinct (map fst ?ps) ==> distinct (map fst (delete_aux ?k ?ps))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("AssocList.distinct_update_with_aux",
     "distinct (map fst (update_with_aux ?v ?k ?f ?ps)) =
      distinct (map fst ?ps)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("AssocList.set_delete",
     "AssocList.set (AssocList.delete ?k ?al) =
      AssocList.set ?al - {?k} \<times> UNIV",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           t_empty)))),
    ("AssocList.zip_with_index_from_simps",
     "zip_with_index_from ?n (?x # ?xs) =
      (?n, ?x) # zip_with_index_from (Suc ?n) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("AssocList.zip_with_index_from_append",
     "zip_with_index_from ?n (?xs @ ?ys) =
      zip_with_index_from ?n ?xs @
      zip_with_index_from (?n + length ?xs) ?ys",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("AssocList.map_of_delete_aux'",
     "distinct (map fst ?xs) ==>
      map_of (delete_aux ?k ?xs) = (map_of ?xs)(?k := None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 1)),
             template_var 0),
           template_hole 0)))),
    ("AssocList.dom_update_with_aux",
     "fst ` set (update_with_aux ?v ?k ?f ?ps) = {?k} Un fst ` set ?ps",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app (template_hole 4, template_var 0))))),
    ("AssocList.zip_with_index_from_conv_nth",
     "zip_with_index_from ?n ?xs =
      map (%i. (?n + i, ?xs ! i)) [0..<length ?xs]",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("AssocList.map_of_delete_aux",
     "distinct (map fst ?xs) ==>
      map_of (delete_aux ?k ?xs) ?k' = ((map_of ?xs)(?k := None)) ?k'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 2)),
               template_var 1),
             template_hole 0),
           template_var 0)))),
    ("AssocList.delete_aux_eq_Nil_conv",
     "(delete_aux ?k ?ts = []) = (?ts = [] | (EX v. ?ts = [(?k, v)]))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 4)),
             template_app (template_hole 2, t_empty))
           ))),
    ("AssocList.map_of_map'",
     "map_of (map (%(k, v). (k, ?f k v)) ?xs) ?x =
      map_option (?f ?x) (map_of ?xs ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("AssocList.set_delete_aux",
     "distinct (map fst ?xs) ==>
      set (delete_aux ?k ?xs) = set ?xs - {?k} \<times> UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             t_empty))))),
    ("AssocList.lookup_update_with",
     "DAList.lookup (AssocList.update_with ?v ?k ?f ?al) = DAList.lookup ?al
      (?k |-> case DAList.lookup ?al ?k of None => ?f ?v | Some v => ?f v)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 0)),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 3)),
               t_empty),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)))))),
    ("AssocList.map_of_update_with_aux",
     "map_of (update_with_aux ?v ?k ?f ?ps) = map_of ?ps(?k |->
      case map_of ?ps ?k of None => ?f ?v | Some v => ?f v)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 0)),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 3)),
               t_empty),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)))))),
    ("AssocList.set_update",
     "AssocList.set (DAList.update ?k ?v ?al) =
      AssocList.set ?al - {?k} \<times> UNIV Un {(?k, ?v)}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 10, template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_hole 4)),
               t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_hole 0)))),
    ("AssocList.dom_delete_aux",
     "distinct (map fst ?ps) ==>
      fst ` set (delete_aux ?k ?ps) = fst ` set ?ps - {?k}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 7),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_hole 7),
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("AssocList.map_of_update_with_aux'",
     "map_of (update_with_aux ?v ?k ?f ?ps) ?k' =
      (map_of ?ps(?k |->
       case map_of ?ps ?k of None => ?f ?v | Some v => ?f v))
       ?k'",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 1)),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app (template_var 2, template_var 4)),
                 t_empty),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 3)))),
         template_var 0))),
    ("AssocList.map_of_zip_with_index_from",
     "map_of (zip_with_index_from ?n ?xs) ?i =
      (if ?n <= ?i & ?i < ?n + length ?xs then Some (?xs ! (?i - ?n))
       else None)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app (template_hole 4, template_var 1))))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))),
         template_hole 0))),
    ("AssocList.set_update_with",
     "AssocList.set (AssocList.update_with ?v ?k ?f ?al) =
      AssocList.set ?al - {?k} \<times> UNIV Un
      {(?k, ?f (case DAList.lookup ?al ?k of None => ?v | Some v => v))}",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 11, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 12, template_var 0)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               t_empty))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_var 1,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     t_empty),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2))))),
           template_hole 0)))),
    ("AssocList.set_update_with_aux",
     "distinct (map fst ?xs) ==>
      set (update_with_aux ?v ?k ?f ?xs) =
      set ?xs - {?k} \<times> UNIV Un
      {(?k, ?f (case map_of ?xs ?k of None => ?v | Some v => v))}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 11, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 12, template_var 3)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6)),
                 t_empty))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_var 0,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 2),
                       t_empty),
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 1))))),
             template_hole 0)))))]:
   (string * thm * template) list
### theory "Draft.AssocListTemplates"
### 0.337s elapsed time, 0.474s cpu time, 0.062s GC time
val it = (): unit
