Loading theory "Draft.Containers_Auxiliary" (required by "Draft.DList_SetTemplates" via "Draft.DList_Set" via "Draft.Collection_Eq")
Loading theory "Draft.Equal" (required by "Draft.DList_SetTemplates" via "Draft.DList_Set")
Loading theory "Draft.Templates" (required by "Draft.DList_SetTemplates" via "Draft.ExtrEqs")
locale equal_base
  fixes equal :: "'a => 'a => bool"
locale Equal.equal
  fixes equal :: "'a => 'a => bool"
  assumes "equal equal"
### theory "Draft.Equal"
### 0.029s elapsed time, 0.114s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.212s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DList_SetTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Dropping global mixfix syntax: "less_eq_prod" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod" (infix \<open>\<sqsubset>\<close> 50)
### Dropping global mixfix syntax: "less_eq_prod'" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod'" (infix \<open>\<sqsubset>\<close> 50)
### theory "Draft.Containers_Auxiliary"
### 0.184s elapsed time, 0.436s cpu time, 0.032s GC time
Loading theory "Draft.Containers_Generator" (required by "Draft.DList_SetTemplates" via "Draft.DList_Set" via "Draft.Collection_Eq")
signature CONTAINERS_GENERATOR =
  sig
    val HOLogic_list_conj: term list -> term
    val all_tys: term -> typ list -> term -> term
    val derive_is_c_dots_lemma:
       typ -> string -> thm list -> string -> theory -> theory
    val derive_none:
       string -> sort -> (typ -> term) -> string -> theory -> theory
    val derive_set_map_impl:
       string ->
         sort ->
           (string * term) list -> string -> string -> theory -> theory
    val is_class_instance: theory -> string -> sort -> bool
    val mk_Some: term -> term
    val mk_is_c_dots: typ -> string -> term
    val register_is_c_dots_lemma:
       string -> string -> thm -> theory -> theory
  end
structure Containers_Generator: CONTAINERS_GENERATOR
### theory "Draft.Containers_Generator"
### 0.308s elapsed time, 0.619s cpu time, 0.000s GC time
Loading theory "Draft.Collection_Eq" (required by "Draft.DList_SetTemplates" via "Draft.DList_Set")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.531s elapsed time, 1.083s cpu time, 0.080s GC time
class ceq = type +
  fixes ceq :: "('a => 'a => bool) option"
  assumes "ceq": "!!eqa. ceq = Some eqa ==> eqa = (=)"
signature CEQ_GENERATOR =
  sig
    val ceq_instance_via_eq: string -> theory -> theory
    val ceq_instance_via_equality: string -> theory -> theory
    val derive_no_ceq: string -> theory -> theory
  end
structure Ceq_Generator: CEQ_GENERATOR
deriving "ceq" instance for type "Product_Type.unit" via "="
derived is_ceq_unit-lemma
### Code generator: dropping subsumed code equation
### CEQ(unit) == Some (=)
deriving "ceq" instance for type "HOL.bool" via "="
derived is_ceq_bool-lemma
deriving "ceq" instance for type "Nat.nat" via "="
derived is_ceq_nat-lemma
deriving "ceq" instance for type "Int.int" via "="
derived is_ceq_int-lemma
deriving "ceq" instance for type "Enum.finite_1" via "="
derived is_ceq_finite_1-lemma
deriving "ceq" instance for type "Enum.finite_2" via "="
derived is_ceq_finite_2-lemma
deriving "ceq" instance for type "Enum.finite_3" via "="
derived is_ceq_finite_3-lemma
deriving "ceq" instance for type "Enum.finite_4" via "="
derived is_ceq_finite_4-lemma
deriving "ceq" instance for type "Enum.finite_5" via "="
derived is_ceq_finite_5-lemma
deriving "ceq" instance for type "Code_Numeral.integer" via "="
derived is_ceq_integer-lemma
deriving "ceq" instance for type "Code_Numeral.natural" via "="
derived is_ceq_natural-lemma
deriving "ceq" instance for type "String.char" via "="
derived is_ceq_char-lemma
deriving "ceq" instance for type "String.literal" via "="
derived is_ceq_literal-lemma
deriving "ceq" instance for type "Sum_Type.sum"
derived is_ceq_sum-lemma
deriving "ceq" instance for type "Product_Type.prod"
derived is_ceq_prod-lemma
deriving "ceq" instance for type "List.list"
derived is_ceq_list-lemma
deriving "ceq" instance for type "Option.option"
derived is_ceq_option-lemma
use None as trivial implementation of ceq for type fun
registered fun in class ceq
instantiation
  set :: (ceq) ceq
  ceq_set == ceq :: ('a set => 'a set => bool) option
instantiation
  Predicate.pred :: (ceq) ceq
  ceq_pred == ceq :: ('a Predicate.pred => 'a Predicate.pred => bool) option
### theory "Draft.Collection_Eq"
### 0.379s elapsed time, 0.504s cpu time, 0.048s GC time
Loading theory "Draft.DList_Set" (required by "Draft.DList_SetTemplates")
locale equal_base
  fixes equal :: "'a => 'a => bool"
consts
  list_member :: "'a list => 'a => bool"
consts
  list_distinct :: "'a list => bool"
consts
  list_remove1 :: "'a => 'a list => 'a list"
consts
  list_remdups :: "'a list => 'a list"
locale Equal.equal
  fixes equal :: "'a => 'a => bool"
  assumes "equal equal"
### theory "Draft.DList_Set"
### 0.420s elapsed time, 0.449s cpu time, 0.044s GC time
Loading theory "Draft.DList_SetTemplates"
val templateLemmas =
   [("DList_Set.list_of_dlist_inverse",
     "Abs_dlist (list_of_dlist ?dxs) = ?dxs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("DList_Set.fold_empty", "DList_Set.fold ?f DList_Set.empty ?b = ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 0)),
    ("DList_Set.null_iff", "DList_Set.null ?xs = (?xs = DList_Set.empty)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation (template_var 0, template_hole 0))),
    ("DList_Set.set_list_of_dlist_Abs_dlist",
     "set (list_of_dlist (Abs_dlist ?xs)) = set ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("DList_Set.list_of_dlist_eq_Nil_iff",
     "(list_of_dlist ?dxs = []) = (?dxs = DList_Set.empty)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("DList_Set.ID_ceq", "ID CEQ(?'a) = Some ?eq ==> equal ?eq",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_hole 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("DList_Set.distinct_list_of_dlist",
     "ID CEQ(?'a) ~= None ==> distinct (list_of_dlist ?dxs)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_hole 3),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("DList_Set.set_fold_insert",
     "set (fold List.insert ?xs1.0 ?xs2.0) = set ?xs1.0 Un set ?xs2.0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("DList_Set.finite_member",
     "ID CEQ(?'a) ~= None ==> finite (Collect (DList_Set.member ?dxs))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_hole 4),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("DList_Set.list_of_dlist_eq_singleton_conv",
     "(list_of_dlist ?dxs = [?x]) =
      (?dxs = DList_Set.insert ?x DList_Set.empty)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("DList_Set.card_eq_length",
     "ID CEQ(?'a) ~= None ==>
      card (Collect (DList_Set.member ?dxs)) = DList_Set.length ?dxs",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_hole 6),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("DList_Set.Collect_member",
     "ID CEQ(?'a) ~= None ==>
      Collect (DList_Set.member ?dxs) = set (list_of_dlist ?dxs)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_hole 6),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("DList_Set.list_of_dlist_insert",
     "~ DList_Set.member ?dxs ?x ==>
      list_of_dlist (DList_Set.insert ?x ?dxs) = ?x # list_of_dlist ?dxs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("DList_Set.member_insert",
     "ID CEQ(?'a) ~= None ==>
      DList_Set.member (DList_Set.insert ?x ?xs) = (DList_Set.member ?xs)
      (?x := True)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_hole 6),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             template_var 1),
           template_hole 0)))),
    ("DList_Set.member_remove",
     "ID CEQ(?'a) ~= None ==>
      DList_Set.member (DList_Set.remove ?x ?xs) = (DList_Set.member ?xs)
      (?x := False)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_hole 6),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             template_var 1),
           template_hole 0)))),
    ("DList_Set.member_empty_empty",
     "ID CEQ(?'a) ~= None ==>
      (ALL x. ~ DList_Set.member ?dxs x) = (?dxs = DList_Set.empty)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_hole 6),
              template_hole 5)
            )],
       template_implication
        ([template_predicate (template_app (template_hole 3, t_empty))],
         template_equation (template_var 0, template_hole 0)))),
    ("DList_Set.product_code",
     "list_of_dlist (DList_Set.product ?dxs1.0 ?dxs2.0) =
      DList_Set.fold (%a. DList_Set.fold (%c. (#) (a, c)) ?dxs2.0) ?dxs1.0
       []",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_var 1),
         template_hole 0))),
    ("DList_Set.fold_insert",
     "~ DList_Set.member ?dxs ?x ==>
      DList_Set.fold ?f (DList_Set.insert ?x ?dxs) ?b =
      DList_Set.fold ?f ?dxs (?f ?x ?b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_app
            (template_app (template_var 1, template_var 2),
             template_var 0))))),
    ("DList_Set.member_filter",
     "ID CEQ(?'a) ~= None ==>
      DList_Set.member (DList_Set.filter ?P ?xs) =
      (%x. DList_Set.member ?xs x & ?P x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_hole 5),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         t_empty))),
    ("DList_Set.dlist_all_conv_member",
     "ID CEQ(?'a) ~= None ==>
      DList_Set.dlist_all ?P ?dxs =
      (ALL x. DList_Set.member ?dxs x --> ?P x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_hole 6),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app (template_hole 2, t_empty)))),
    ("DList_Set.dlist_ex_conv_member",
     "ID CEQ(?'a) ~= None ==>
      dlist_ex ?P ?dxs = (EX x. DList_Set.member ?dxs x & ?P x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_hole 6),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app (template_hole 2, t_empty)))),
    ("DList_Set.member_union",
     "ID CEQ(?'a) ~= None ==>
      DList_Set.member (DList_Set.union ?xs1.0 ?xs2.0) ?x =
      (DList_Set.member ?xs1.0 ?x | DList_Set.member ?xs2.0 ?x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_hole 5),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("DList_Set.member_Id_on",
     "ID CEQ(?'a) ~= None ==>
      DList_Set.member (DList_Set.Id_on ?dxs) =
      (%(x, y). x = y & DList_Set.member ?dxs x)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_hole 8),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("DList_Set.Abs_dlist_inverse",
     "?y : {xs. equal_base.list_distinct ceq' xs | ID CEQ(?'a) = None} ==>
      list_of_dlist (Abs_dlist ?y) = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, t_empty))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("DList_Set.member_fold_insert",
     "ID CEQ(?'a) ~= None ==>
      DList_Set.member (fold DList_Set.insert ?xs ?dxs) ?x =
      (DList_Set.member ?dxs ?x | ?x : set ?xs)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 9, template_hole 8),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("DList_Set.Abs_dlist_induct",
     "(!!y. y : {xs.
                 equal_base.list_distinct ceq' xs | ID CEQ(?'a) = None} ==>
            ?P (Abs_dlist y)) ==>
      ?P ?x",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("DList_Set.Abs_dlist_cases",
     "(!!y. [| ?x = Abs_dlist y;
               y : {xs.
                    equal_base.list_distinct ceq' xs |
                    ID CEQ(?'a) = None} |]
            ==> ?P) ==>
      ?P",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("DList_Set.fold_transfer2",
     "[| ID CEQ(?'a) ~= None; is_equality ?A |]
      ==> rel_fun
           (rel_fun ?A (rel_fun (pcr_set_dlist (=)) (pcr_set_dlist (=))))
           (rel_fun (pcr_set_dlist (=))
             (rel_fun (pcr_set_dlist (=)) (pcr_set_dlist (=))))
           fold DList_Set.fold",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 13, template_hole 12),
              template_hole 11)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5)),
                       template_app (template_hole 6, template_hole 5)))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5)),
                     template_app (template_hole 6, template_hole 5)))),
               template_hole 1),
             template_hole 0)
           ))),
    ("DList_Set.product_member",
     "[| ID CEQ(?'a) ~= None; ID CEQ(?'b) ~= None |]
      ==> DList_Set.member (DList_Set.product ?dxs1.0 ?dxs2.0) =
          (%(a, b).
              DList_Set.member ?dxs1.0 a & DList_Set.member ?dxs2.0 b)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 13, template_hole 12),
              template_hole 11)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 9, template_hole 8),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("DList_Set.set_dlist_induct",
     "[| ID CEQ(?'a) ~= None; ?P DList_Set.empty;
         !!a dxs.
            [| ~ DList_Set.member dxs a; ?P dxs |]
            ==> ?P (DList_Set.insert a dxs) |]
      ==> ?P ?dxs",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_hole 6),
              template_hole 5)
            ),
        template_predicate (template_app (template_var 1, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("DList_Set.Abs_dlist_inject",
     "[| ?x : {xs. equal_base.list_distinct ceq' xs | ID CEQ(?'a) = None};
         ?y : {xs. equal_base.list_distinct ceq' xs | ID CEQ(?'a) = None} |]
      ==> (Abs_dlist ?x = Abs_dlist ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app (template_hole 11, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app (template_hole 11, t_empty))
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.DList_SetTemplates"
### 0.329s elapsed time, 0.469s cpu time, 0.054s GC time
val it = (): unit
