Loading theory "Draft.TwoSat_Ex" (required by "Draft.TwoSat_ExTemplates")
Loading theory "Draft.Templates" (required by "Draft.TwoSat_ExTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.153s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TwoSat_ExTemplates")
consts
  negate :: "lit => lit"
locale construct_sa
  fixes cnf :: "lit uprod set"
  assumes "construct_sa cnf"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 1.101s cpu time, 0.101s GC time
deriving "linorder" instance for type "TwoSat_Ex.lit"
generating comparator for type "TwoSat_Ex.lit"
### theory "Draft.TwoSat_Ex"
### 0.639s elapsed time, 1.295s cpu time, 0.101s GC time
Loading theory "Draft.TwoSat_ExTemplates"
val templateLemmas =
   [("TwoSat_Ex.comparator_lit_pointwise",
     "peq_comp comparator_lit ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("TwoSat_Ex.comparator_lit_pointwise",
     "psym_comp comparator_lit ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("TwoSat_Ex.comparator_lit_pointwise",
     "ptrans_comp comparator_lit ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("TwoSat_Ex.inj_on_Neg", "inj_on Neg ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("TwoSat_Ex.inj_on_Pos", "inj_on Pos ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("TwoSat_Ex.double_negate", "negate (negate ?l) = ?l",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TwoSat_Ex.var_negate", "var (negate ?l) = var ?l",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TwoSat_Ex.lits_of_cnf_finite",
     "finite (lits_of_cnf ?cnf) = finite (vars_of_cnf ?cnf)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("TwoSat_Ex.vars_of_cnf_finite",
     "finite ?cnf ==> finite (vars_of_cnf ?cnf)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("TwoSat_Ex.imp_graph_finite",
     "finite (vars_of_cnf ?cnf) ==> finite (imp_graph ?cnf)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("TwoSat_Ex.negate_sat",
     "sat_lit ?\<sigma> (negate ?l) = (~ sat_lit ?\<sigma> ?l)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("TwoSat_Ex.negate_inject", "(negate ?x = negate ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("TwoSat_Ex.imp_graph_nodes",
     "imp_graph ?cnf <= lits_of_cnf ?cnf \<times> lits_of_cnf ?cnf",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("TwoSat_Ex.imp_graph_insert",
     "imp_graph (insert ?cl ?cls) = edges_of_clause ?cl Un imp_graph ?cls",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("TwoSat_Ex.is_2sat_simps",
     "is_2sat (insert ?cl ?cnf) = (proper_uprod ?cl & is_2sat ?cnf)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("TwoSat_Ex.sat_lit_alt",
     "sat_lit ?\<sigma> (Lit ?p ?v) = (?\<sigma> ?v = ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_var 2, template_var 0), template_var 1))),
    ("TwoSat_Ex.lit_eq_negate_conv",
     "(negate ?l = Lit ?p ?v) = (?l = Lit (~ ?p) ?v)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("TwoSat_Ex.lit_eq_negate_conv",
     "(Lit ?p ?v = negate ?l) = (?l = Lit (~ ?p) ?v)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 2)),
           template_var 1)))),
    ("TwoSat_Ex.imp_graph_vars",
     "(?l, ?l') : imp_graph ?cnf ==> var ?l : vars_of_cnf ?cnf",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("TwoSat_Ex.eq_SomeD", "[| ?x = Eps ?P; EX x. ?P x |] ==> ?P ?x",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 1, template_var 0)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("TwoSat_Ex.imp_graph_skew_sym",
     "(?l\<^sub>1, ?l\<^sub>2) : imp_graph ?cnf ==>
      (negate ?l\<^sub>2, negate ?l\<^sub>1) : imp_graph ?cnf",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 1)),
                 template_app (template_hole 0, template_var 2))),
             template_app (template_hole 1, template_var 0))
           ))),
    ("TwoSat_Ex.comparator_lit_simps",
     "comparator_lit (Lit ?x ?xa) (Lit ?y ?ya) =
      (case comparator_bool ?x ?y of Eq => comparator_of ?xa ?ya | Lt => Lt
       | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("TwoSat_Ex.imp_graph_rtrancl_skew_sym",
     "(?l\<^sub>1, ?l\<^sub>2) : (imp_graph ?cnf)^* ==>
      (negate ?l\<^sub>2, negate ?l\<^sub>1) : (imp_graph ?cnf)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 1)),
                 template_app (template_hole 0, template_var 2))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("TwoSat_Ex.ln_loop",
     "[| sat_cnf ?\<sigma> ?cnf; (?l, negate ?l) : (imp_graph ?cnf)^* |]
      ==> ~ sat_lit ?\<sigma> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app (template_hole 4, template_var 0))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)
               )
           ))),
    ("TwoSat_Ex.imp_graph_alt",
     "imp_graph ?cnf = {(negate l1, l2) |l1 l2. Upair l1 l2 : ?cnf}",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app (template_hole 7, t_empty))),
    ("TwoSat_Ex.imp_step",
     "[| sat_cnf ?\<sigma> ?cnf; sat_lit ?\<sigma> ?l\<^sub>1;
         (?l\<^sub>1, ?l\<^sub>2) : imp_graph ?cnf |]
      ==> sat_lit ?\<sigma> ?l\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3), template_var 0)
           ))),
    ("TwoSat_Ex.imp_steps",
     "[| sat_cnf ?\<sigma> ?cnf; sat_lit ?\<sigma> ?l\<^sub>1;
         (?l\<^sub>1, ?l\<^sub>2) : (imp_graph ?cnf)^* |]
      ==> sat_lit ?\<sigma> ?l\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3), template_var 0)
           ))),
    ("TwoSat_Ex.loop_imp_unsat",
     "[| (Pos ?x, Neg ?x) : (imp_graph ?cnf)^*;
         (Neg ?x, Pos ?x) : (imp_graph ?cnf)^* |]
      ==> ~ satisfiable ?cnf",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 6, template_hole 4),
                    template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 4),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("TwoSat_Ex.finite_2sat_iff",
     "[| finite (vars_of_cnf ?cnf); is_2sat ?cnf |]
      ==> satisfiable ?cnf =
          (ALL x:vars_of_cnf ?cnf.
              ~ ((Pos x, Neg x) : (imp_graph ?cnf)^* &
                 (Neg x, Pos x) : (imp_graph ?cnf)^*))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_equation
        (template_app (template_hole 10, template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 13, template_var 0)),
           t_empty))))]:
   (string * thm * template) list
### theory "Draft.TwoSat_ExTemplates"
### 0.297s elapsed time, 0.404s cpu time, 0.000s GC time
val it = (): unit
