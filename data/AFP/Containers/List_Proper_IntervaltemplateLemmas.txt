   [("List_Proper_Interval.proper_interval_list_aux_simps",
     "proper_interval_list_aux ?xs [] = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("List_Proper_Interval.Nil_less_conv_neq_Nil",
     "([] < ?xs) = (?xs ~= [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 2)))),
    ("List_Proper_Interval.less_append_same_iff",
     "(?xs < ?xs @ ?ys) = ([] < ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 0), template_var 0))),
    ("List_Proper_Interval.less_append_same2_iff",
     "(?xs @ ?ys < ?xs @ ?zs) = (?ys < ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("List_Proper_Interval.proper_interval_list_aux_correct",
     "proper_interval_list_aux ?xs ?ys = (EX zs>?xs. zs < ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("List_Proper_Interval.proper_interval_list_aux_simps",
     "proper_interval_list_aux [] (?y # ?ys) =
      (?ys ~= [] | proper_interval None (Some ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 7))),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("List_Proper_Interval.proper_interval_list_aux_simps",
     "proper_interval_list_aux (?x # ?xs) (?y # ?ys) =
      (?x < ?y | ?x = ?y & proper_interval_list_aux ?xs ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("List_Proper_Interval.Cons_less_iff",
     "(?x # ?xs < ?ys) =
      (EX y ys'. ?ys = y # ys' & (?x < y | ?x = y & ?xs < ys'))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty)))]
