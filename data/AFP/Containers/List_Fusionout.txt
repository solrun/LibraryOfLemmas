Loading theory "Draft.List_Fusion" (required by "Draft.List_FusionTemplates")
Loading theory "Draft.Templates" (required by "Draft.List_FusionTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "terminates_onp"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.166s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.List_FusionTemplates")
locale list
  fixes g :: "('a, 's) generator"
consts
  list_has_next :: "'a list => bool"
### No equation for constructor "[]"
consts
  list_next :: "'a list => 'a * 'a list"
Found termination order: "{}"
Found termination order: "case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.131s cpu time, 0.101s GC time
Proofs for inductive predicate(s) "filter_has_next"
  Proving monotonicity ...
### theory "Draft.List_Fusion"
### 0.766s elapsed time, 1.436s cpu time, 0.101s GC time
Loading theory "Draft.List_FusionTemplates"
val templateLemmas =
   [("List_Fusion.terminates_on_generator_eq_UNIV",
     "terminates_on (generator ?g) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("List_Fusion.unfoldr_list_generator",
     "list.unfoldr list_generator ?xs = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("List_Fusion.length_fusion_code",
     "length_fusion ?g = gen_length_fusion ?g 0",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("List_Fusion.terminates_on_conv_dom_terminates_within",
     "terminates_on ?g = dom (terminates_within ?g)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("List_Fusion.terminates_within_generator_neq_None",
     "terminates_within (generator ?g) ?s ~= None",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0),
           template_hole 0)
         )),
    ("List_Fusion.has_next_map_generator",
     "list.has_next (map_generator ?f ?g) = list.has_next ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("List_Fusion.terminates_on_stop",
     "terminates_on (%_. False, ?next) = UNIV",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_hole 0)),
    ("List_Fusion.terminates_onp_terminates_on_eq",
     "terminates_onp ?g = (%x. x : terminates_on ?g)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("List_Fusion.has_next_replicate_generator",
     "list.has_next (replicate_generator ?a) ?n = (0 < ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("List_Fusion.has_next_upto_generator",
     "list.has_next (upto_generator ?bound) ?n = (?n <= ?bound)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Fusion.has_next_upt_generator",
     "list.has_next (upt_generator ?bound) ?n = (?n < ?bound)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Fusion.unfoldr_replicate_generator",
     "list.unfoldr (replicate_generator ?a) ?n = replicate ?n ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Fusion.unfoldr_upto_generator",
     "list.unfoldr (upto_generator ?bound) ?n = [?n..?bound]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Fusion.unfoldr_upt_generator",
     "list.unfoldr (upt_generator ?bound) ?n = [?n..<?bound]",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("List_Fusion.terminatesD", "terminates ?g ==> ?s : terminates_on ?g",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("List_Fusion.terminates_within_stop",
     "terminates_within (%_. False, ?next) ?s = Some 0",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)),
         template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("List_Fusion.next_upt_generator",
     "list.next (upt_generator ?bound) ?n = (?n, Suc ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("List_Fusion.unfoldr_map_generator",
     "list.unfoldr (map_generator ?f ?g) = map ?f o list.unfoldr ?g",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("List_Fusion.next_map_generator",
     "list.next (map_generator ?f ?g) = apfst ?f o list.next ?g",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("List_Fusion.Nil_eq_unfoldr_iff",
     "([] = list.unfoldr ?g ?s) = (~ list.has_next ?g ?s)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List_Fusion.unfoldr_eq_Nil_iff",
     "(list.unfoldr ?g ?s = []) = (~ list.has_next ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List_Fusion.has_next_append_generator",
     "list.has_next (append_generator ?g1.0 ?g2.0) (Inr ?s2.0) =
      list.has_next ?g2.0 ?s2.0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("List_Fusion.unfoldr_append_generator_Inr",
     "list.unfoldr (append_generator ?g1.0 ?g2.0) (Inr ?s2.0) =
      list.unfoldr ?g2.0 ?s2.0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("List_Fusion.next_replicate_generator",
     "list.next (replicate_generator ?a) ?n = (?a, ?n - 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("List_Fusion.next_upto_generator",
     "list.next (upto_generator ?bound) ?n = (?n, ?n + 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("List_Fusion.terminatesI",
     "(!!s. s : terminates_on ?g) ==> terminates ?g",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List_Fusion.unfoldr_filter_generator",
     "list.unfoldr (filter_generator ?P ?g) ?s =
      filter ?P (list.unfoldr ?g ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("List_Fusion.next_append_generator",
     "list.next (append_generator ?g1.0 ?g2.0) (Inr ?s2.0) =
      apsnd Inr (list.next ?g2.0 ?s2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("List_Fusion.terminates_replicate_generator",
     "terminates ((<) 0, %n. (?a, n - 1))",
     template_predicate
      (
         template_app
          (template_hole 6,
           template_app (template_app (template_hole 5, t_empty), t_empty))
         )),
    ("List_Fusion.hd_fusion_code",
     "hd_fusion ?g ?s =
      (if list.has_next ?g ?s then fst (list.next ?g ?s) else undefined)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_hole 0))),
    ("List_Fusion.filter_generator_empty_conv",
     "list.has_next (filter_generator ?P ?g) ?s =
      (EX x:set (list.unfoldr ?g ?s). ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         t_empty))),
    ("List_Fusion.singleton_list_fusion_code",
     "singleton_list_fusion ?g ?s =
      (list.has_next ?g ?s & ~ list.has_next ?g (snd (list.next ?g ?s)))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("List_Fusion.has_next_zip_generator",
     "list.has_next (zip_generator ?g1.0 ?g2.0) (?s1.0, ?s2.0) =
      (list.has_next ?g1.0 ?s1.0 & list.has_next ?g2.0 ?s2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Fusion.unfoldr_append_generator",
     "list.unfoldr (append_generator ?g1.0 ?g2.0)
       (append_init ?s1.0 ?s2.0) =
      list.unfoldr ?g1.0 ?s1.0 @ list.unfoldr ?g2.0 ?s2.0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Fusion.unfoldr_zip_generator",
     "list.unfoldr (zip_generator ?g1.0 ?g2.0) (?s1.0, ?s2.0) =
      zip (list.unfoldr ?g1.0 ?s1.0) (list.unfoldr ?g2.0 ?s2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Fusion.has_next_append_generator",
     "list.has_next (append_generator ?g1.0 ?g2.0) (Inl (?s1.0, ?s2.0)) =
      (list.has_next ?g1.0 ?s1.0 | list.has_next ?g2.0 ?s2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Fusion.unfoldr_append_generator_Inl",
     "list.unfoldr (append_generator ?g1.0 ?g2.0) (Inl (?s1.0, ?s2.0)) =
      list.unfoldr ?g1.0 ?s1.0 @ list.unfoldr ?g2.0 ?s2.0",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Fusion.gen_length_fusion_code",
     "gen_length_fusion ?g ?n ?s =
      (if list.has_next ?g ?s
       then gen_length_fusion ?g (Suc ?n) (snd (list.next ?g ?s)) else ?n)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))),
         template_var 1))),
    ("List_Fusion.Option_map_mono",
     "monotone option.le_fun option_ord ?f ==>
      monotone option.le_fun option_ord (%x. map_option ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6))),
                template_app (template_hole 5, template_hole 4)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app (template_hole 2, template_hole 1)),
             t_empty)
           ))),
    ("List_Fusion.terminates_wfD",
     "terminates ?g ==> wf {(snd (snd ?g s), s) |s. fst ?g s}",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 8, template_app (template_hole 7, t_empty))
           ))),
    ("List_Fusion.terminates_within_unfold",
     "?has_next ?s ==>
      terminates_within (?has_next, ?next) ?s =
      map_option (%n. n + 1)
       (terminates_within (?has_next, ?next) (snd (?next ?s)))",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 0,
               template_app (template_var 0, template_var 1))))))),
    ("List_Fusion.list_all_fusion_code",
     "list_all_fusion ?g ?P ?s =
      (list.has_next ?g ?s -->
       (let (x, s') = list.next ?g ?s in ?P x & list_all_fusion ?g ?P s'))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app (template_hole 1, t_empty))))),
    ("List_Fusion.wf_terminates",
     "[| wf ?R; !!s. fst ?g s ==> (snd (snd ?g s), s) : ?R |]
      ==> terminates ?g",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("List_Fusion.map_fusion_code",
     "map_fusion ?f ?g ?s =
      (if list.has_next ?g ?s
       then let (x, s') = list.next ?g ?s in ?f x # map_fusion ?f ?g s'
       else [])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app (template_hole 2, t_empty))),
         template_hole 0))),
    ("List_Fusion.next_filter_generator",
     "list.next (filter_generator ?P ?g) ?s =
      (let (x, s') = list.next ?g ?s
       in if ?P x then (x, s') else list.next (filter_generator ?P ?g) s')",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 2, t_empty)))),
    ("List_Fusion.fold_fusion_code",
     "fold_fusion ?g ?f ?s ?b =
      (if list.has_next ?g ?s
       then let (x, s') = list.next ?g ?s in fold_fusion ?g ?f s' (?f x ?b)
       else ?b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app (template_hole 0, t_empty))),
         template_var 0))),
    ("List_Fusion.has_next_filter_generator",
     "list.has_next (filter_generator ?P ?g) ?s =
      (list.has_next ?g ?s &
       (let (x, s') = list.next ?g ?s
        in if ?P x then True
           else list.has_next (filter_generator ?P ?g) s'))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app (template_hole 2, t_empty))))),
    ("List_Fusion.append_fusion",
     "append_fusion ?g1.0 ?g2.0 ?s1.0 ?s2.0 =
      (if list.has_next ?g1.0 ?s1.0
       then let (x, s1') = list.next ?g1.0 ?s1.0
            in x # append_fusion ?g1.0 ?g2.0 s1' ?s2.0
       else list.unfoldr ?g2.0 ?s2.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1)),
             template_app (template_hole 2, t_empty))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("List_Fusion.next_zip_generator",
     "list.next (zip_generator ?g1.0 ?g2.0) (?s1.0, ?s2.0) =
      ((fst (list.next ?g1.0 ?s1.0), fst (list.next ?g2.0 ?s2.0)),
       snd (list.next ?g1.0 ?s1.0), snd (list.next ?g2.0 ?s2.0))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 1))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("List_Fusion.terminates_wfE",
     "[| terminates ?g;
         !!R. [| wf R; !!s. fst ?g s ==> (snd (snd ?g s), s) : R |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("List_Fusion.next_append_generator",
     "list.next (append_generator ?g1.0 ?g2.0) (Inl (?s1.0, ?s2.0)) =
      (if list.has_next ?g1.0 ?s1.0
       then let (x, s1') = list.next ?g1.0 ?s1.0 in (x, Inl (s1', ?s2.0))
       else list.next (append_generator ?g1.0 ?g2.0) (Inr ?s2.0))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2)),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1)),
             template_app (template_hole 2, t_empty))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2)),
           template_app (template_hole 0, template_var 0))))),
    ("List_Fusion.zip_fusion_code",
     "zip_fusion ?g1.0 ?g2.0 ?s1.0 ?s2.0 =
      (if list.has_next ?g1.0 ?s1.0 & list.has_next ?g2.0 ?s2.0
       then let (x, s1') = list.next ?g1.0 ?s1.0;
                (y, s2') = list.next ?g2.0 ?s2.0
            in (x, y) # zip_fusion ?g1.0 ?g2.0 s1' s2'
       else [])",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 13, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 1)),
             template_app (template_hole 6, t_empty))),
         template_hole 0))),
    ("List_Fusion.list_all2_fusion_code",
     "list_all2_fusion ?P ?g1.0 ?g2.0 ?s1.0 ?s2.0 =
      (if list.has_next ?g1.0 ?s1.0
       then list.has_next ?g2.0 ?s2.0 &
            (let (x, s1') = list.next ?g1.0 ?s1.0;
                 (y, s2') = list.next ?g2.0 ?s2.0
             in ?P x y & list_all2_fusion ?P ?g1.0 ?g2.0 s1' s2')
       else ~ list.has_next ?g2.0 ?s2.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 11, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1)),
               template_app (template_hole 4, t_empty)))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 0))))),
    ("List_Fusion.has_next_filter_generator_induct",
     "[| list.has_next (filter_generator ?P ?g) ?s;
         !!s. [| list.has_next ?g s; ?P (fst (list.next ?g s)) |] ==> ?Q s;
         !!s. [| list.has_next ?g s; ~ ?P (fst (list.next ?g s));
                 ?Q (snd (list.next ?g s)) |]
              ==> ?Q s |]
      ==> ?Q ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("List_Fusion.list_all2_coinduct",
     "[| ?X ?xs ?ys; !!xs ys. ?X xs ys ==> (xs = []) = (ys = []);
         !!xs ys.
            [| ?X xs ys; xs ~= []; ys ~= [] |]
            ==> ?A (hd xs) (hd ys) &
                (?X (tl xs) (tl ys) | list_all2 ?A (tl xs) (tl ys)) |]
      ==> list_all2 ?A ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.List_FusionTemplates"
### 0.286s elapsed time, 0.426s cpu time, 0.055s GC time
val it = (): unit
