Loading theory "Draft.List_Fusion" (required by "Draft.RBT_extTemplates" via "Draft.RBT_ext")
Loading theory "Draft.Containers_Auxiliary" (required by "Draft.RBT_extTemplates" via "Draft.RBT_ext")
Loading theory "Draft.Templates" (required by "Draft.RBT_extTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "terminates_onp"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.092s elapsed time, 0.302s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RBT_extTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Dropping global mixfix syntax: "less_eq_prod" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod" (infix \<open>\<sqsubset>\<close> 50)
### Dropping global mixfix syntax: "less_eq_prod'" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod'" (infix \<open>\<sqsubset>\<close> 50)
### theory "Draft.Containers_Auxiliary"
### 0.188s elapsed time, 0.581s cpu time, 0.041s GC time
locale list
  fixes g :: "('a, 's) generator"
consts
  list_has_next :: "'a list => bool"
### No equation for constructor "[]"
consts
  list_next :: "'a list => 'a * 'a list"
Found termination order: "{}"
Found termination order: "case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.551s elapsed time, 1.215s cpu time, 0.108s GC time
Proofs for inductive predicate(s) "filter_has_next"
  Proving monotonicity ...
### theory "Draft.List_Fusion"
### 0.816s elapsed time, 1.713s cpu time, 0.174s GC time
Loading theory "Draft.RBT_ext" (required by "Draft.RBT_extTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Dropping global mixfix syntax: "less_eq_prod'" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod'" (infix \<open>\<sqsubset>\<close> 50)
consts
  RBT_Impl_diag :: "('a, 'b) rbt => ('a * 'a, 'b) rbt"
Found termination order: "{}"
### Missing patterns in function definition:
### rbt_keys_next ([], rbt.Empty) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### rbt_entries_next ([], rbt.Empty) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.RBT_ext"
### 1.111s elapsed time, 1.235s cpu time, 0.162s GC time
Loading theory "Draft.RBT_extTemplates"
val templateLemmas =
   [("RBT_ext.RBT_Impl_rbt_all_simps",
     "RBT_Impl_rbt_all ?P rbt.Empty = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("RBT_ext.RBT_Impl_rbt_ex_simps",
     "RBT_Impl_rbt_ex ?P rbt.Empty = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("RBT_ext.bheight_RBT_Impl_diag",
     "bheight (RBT_Impl_diag ?t) = bheight ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("RBT_ext.alist_product_simps", "alist_product ?f [] ?ys = []",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_hole 0)),
    ("RBT_ext.alist_product_simps", "alist_product ?f ?xs [] = []",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_hole 0)),
    ("RBT_ext.unfoldr_rbt_keys_generator",
     "list.unfoldr rbt_keys_generator (rbt_init ?t) = RBT_Impl.keys ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("RBT_ext.unfoldr_rbt_entries_generator",
     "list.unfoldr rbt_entries_generator (rbt_init ?t) =
      RBT_Impl.entries ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("RBT_ext.keys_RBT_Impl_diag",
     "RBT_Impl.keys (RBT_Impl_diag ?t) =
      map (%k. (k, k)) (RBT_Impl.keys ?t)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("RBT_ext.inv_RBT_Impl_diag",
     "[| inv1 ?t; inv2 ?t |] ==> inv1 (RBT_Impl_diag ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("RBT_ext.inv_RBT_Impl_diag",
     "[| inv1 ?t; inv2 ?t |] ==> inv2 (RBT_Impl_diag ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("RBT_ext.is_rbt_RBT_Impl_diag",
     "ord.is_rbt ?lt ?t ==>
      ord.is_rbt (less_prod ?leq ?lt ?lt) (RBT_Impl_diag ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2),
                 template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("RBT_ext.rbt_sorted_RBT_Impl_diag",
     "ord.rbt_sorted ?lt ?t ==>
      ord.rbt_sorted (less_prod ?leq ?lt ?lt) (RBT_Impl_diag ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2),
                 template_var 2)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("RBT_ext.entries_RBT_Impl_diag",
     "RBT_Impl.entries (RBT_Impl_diag ?t) =
      map (%(k, v). ((k, k), v)) (RBT_Impl.entries ?t)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("RBT_ext.RBT_Impl_fold1_simps",
     "RBT_Impl_fold1 ?f (Branch ?c rbt.Empty ?k ?v ?r) =
      RBT_Impl.fold (%k v. ?f k) ?r ?k",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_hole 1),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 0),
         template_var 2))),
    ("RBT_ext.unfoldr_rbt_keys_generator_aux",
     "list.unfoldr rbt_keys_generator (?kts, ?t) =
      RBT_Impl.keys ?t @ concat (map (%(k, t). k # RBT_Impl.keys t) ?kts)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_var 1))))),
    ("RBT_ext.unfoldr_rbt_entries_generator_aux",
     "list.unfoldr rbt_entries_generator (?kts, ?t) =
      RBT_Impl.entries ?t @
      concat (map (%(k, t). k # RBT_Impl.entries t) ?kts)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_var 1))))),
    ("RBT_ext.linorder_prod",
     "[| class.linorder ?leq_a ?less_a; class.linorder ?leq_b ?less_b |]
      ==> class.linorder (less_eq_prod ?leq_a ?less_a ?leq_b)
           (less_prod ?leq_a ?less_a ?less_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("RBT_ext.distinct_alist_product",
     "[| distinct (map fst ?xs); distinct (map fst ?ys) |]
      ==> distinct (map fst (alist_product ?f ?xs ?ys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1)))
           ))),
    ("RBT_ext.inv_RBT_Impl_diag",
     "[| inv1 ?t; inv2 ?t; color_of ?t = color.B |]
      ==> color_of (RBT_Impl_diag ?t) = color.B",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_hole 2))),
    ("RBT_ext.RBT_Impl_rbt_all_simps",
     "RBT_Impl_rbt_all ?P (Branch ?c ?l ?k ?v ?r) =
      (?P ?k ?v & RBT_Impl_rbt_all ?P ?l & RBT_Impl_rbt_all ?P ?r)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 5),
               template_var 3)),
           template_app
            (template_app (template_hole 2, template_var 5),
             template_var 0))))),
    ("RBT_ext.RBT_Impl_rbt_ex_simps",
     "RBT_Impl_rbt_ex ?P (Branch ?c ?l ?k ?v ?r) =
      (?P ?k ?v | RBT_Impl_rbt_ex ?P ?l | RBT_Impl_rbt_ex ?P ?r)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 5),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 5),
               template_var 3)),
           template_app
            (template_app (template_hole 2, template_var 5),
             template_var 0))))),
    ("RBT_ext.map_of_alist_product",
     "map_of (alist_product ?f ?xs ?ys) (?a, ?c) =
      (case map_of ?xs ?a of None => None
       | Some b => map_option (?f ?a b ?c) (map_of ?ys ?c))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), t_empty),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("RBT_ext.alist_product_simps",
     "alist_product ?f ((?a, ?b) # ?xs) ?ys =
      map (%(c, d). ((?a, c), ?f ?a ?b c d)) ?ys @
      alist_product ?f ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 4),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 4),
             template_var 1),
           template_var 0)))),
    ("RBT_ext.rbt_product_code",
     "rbt_product ?f ?rbt1.0 ?rbt2.0 =
      rbtreeify
       (rev (RBT_Impl.fold
              (%a b. RBT_Impl.fold (%c d. (#) ((a, c), ?f a b c d)) ?rbt2.0)
              ?rbt1.0 []))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 1),
             template_hole 0))))),
    ("RBT_ext.set_alist_product",
     "set (alist_product ?f ?xs ?ys) =
      (%((a, b), c, d). ((a, c), ?f a b c d)) ` (set ?xs \<times> set ?ys)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           t_empty)))),
    ("RBT_ext.alist_product_code",
     "alist_product ?f ?xs ?ys =
      rev (fold (%(a, b). fold (%(c, d). (#) ((a, c), ?f a b c d)) ?ys) ?xs
            [])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_var 1),
           template_hole 0)))),
    ("RBT_ext.is_rbt_rbt_product",
     "[| class.linorder ?leq_a ?less_a; class.linorder ?leq_b ?less_b;
         ord.is_rbt ?less_a ?rbt1.0; ord.is_rbt ?less_b ?rbt2.0 |]
      ==> ord.is_rbt (less_prod ?leq_a ?less_a ?less_b)
           (rbt_product ?f ?rbt1.0 ?rbt2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("RBT_ext.RBT_Impl_fold1_simps",
     "RBT_Impl_fold1 ?f (Branch ?c (Branch ?c' ?l' ?k' ?v' ?r') ?k ?v ?r) =
      RBT_Impl.fold (%k v. ?f k) ?r
       (?f ?k (RBT_Impl_fold1 ?f (Branch ?c' ?l' ?k' ?v' ?r')))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 9),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 8),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3)),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 0),
         template_app
          (template_app (template_var 9, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 9),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3)))))),
    ("RBT_ext.append_alist_product_conv_fold",
     "?zs @ alist_product ?f ?xs ?ys =
      rev (fold (%(a, b). fold (%(c, d). (#) ((a, c), ?f a b c d)) ?ys) ?xs
            (rev ?zs))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_var 1),
           template_app (template_hole 7, template_var 3))))),
    ("RBT_ext.sorted_alist_product",
     "[| class.linorder ?leq_a ?less_a; class.linorder ?leq_b ?less_b;
         sorted_wrt ?leq_a (map fst ?xs); distinct (map fst ?xs);
         sorted_wrt ?leq_b (map fst ?ys) |]
      ==> sorted_wrt (less_eq_prod ?leq_a ?less_a ?leq_b)
           (map fst (alist_product ?f ?xs ?ys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 6),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1)))
           ))),
    ("RBT_ext.rbt_lookup_rbt_product",
     "[| class.linorder ?leq_a ?less_a; class.linorder ?leq_b ?less_b;
         ord.is_rbt ?less_a ?rbt1.0; ord.is_rbt ?less_b ?rbt2.0 |]
      ==> ord.rbt_lookup (less_prod ?leq_a ?less_a ?less_b)
           (rbt_product ?f ?rbt1.0 ?rbt2.0) (?a, ?c) =
          (case ord.rbt_lookup ?less_a ?rbt1.0 ?a of None => None
           | Some b =>
               map_option (?f ?a b ?c)
                (ord.rbt_lookup ?less_b ?rbt2.0 ?c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 7),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 8),
                   template_var 7),
                 template_var 5)),
             template_app
              (template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 4),
               template_var 3)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3), t_empty),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 7),
               template_var 4),
             template_var 1))))),
    ("RBT_ext.rbt_generator_induct",
     "[| ?P ([], rbt.Empty);
         !!k t kts. ?P (kts, t) ==> ?P ((k, t) # kts, rbt.Empty);
         !!kts c l k v r.
            ?P ((?f k v, r) # kts, l) ==> ?P (kts, Branch c l k v r) |]
      ==> ?P ?ktst",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_hole 9))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_var 2, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.RBT_extTemplates"
### 0.539s elapsed time, 0.980s cpu time, 0.433s GC time
val it = (): unit
