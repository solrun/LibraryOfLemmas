Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RecsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RecsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RecsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.RecsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.586s cpu time, 0.046s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.RecsMoreTemplates" via "Draft.Recs")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.906s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RecsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Discrete"
### 0.172s elapsed time, 0.673s cpu time, 0.090s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.341s elapsed time, 1.335s cpu time, 0.135s GC time
Loading theory "Draft.Recs" (required by "Draft.RecsMoreTemplates")
Loading theory "HOL-Library.Stream" (required by "Draft.RecsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.807s elapsed time, 3.154s cpu time, 0.311s GC time
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.165s elapsed time, 4.194s cpu time, 0.849s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va vb. rec_eval (Pr v va vb) [] = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size_list size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "terminates"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.079s elapsed time, 6.800s cpu time, 1.155s GC time
Loading theory "Draft.Templates" (required by "Draft.RecsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.135s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RecsMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.559s elapsed time, 1.176s cpu time, 0.103s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Recs"
### 2.428s elapsed time, 6.828s cpu time, 1.123s GC time
Loading theory "Draft.RecsMoreTemplates"
val templateLemmas =
   [("Recs.Quo0", "Quo 0 ?y = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Recs.ldec_zero", "ldec 0 ?n = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Recs.inside_False", "inside 0 ?n = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Recs.lenc_length_le", "length ?xs <= lenc ?xs",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Recs.enclen_length", "enclen (lenc ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Recs.constn_lemma", "rec_eval (constn ?n) ?xs = ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 1)),
    ("Recs.le_triangle", "?m <= triangle (?n + ?m)",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Recs.nth", "(?x # ?xs) ! 0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("Recs.Quo_div", "Quo ?x ?y = ?y div ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Recs.Quo1", "?x * Quo ?x ?y <= ?y",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Recs.enclen_lemma", "rec_eval rec_enclen [?z] = enclen ?z",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Recs.fact_lemma", "rec_eval rec_fact [?x] = fact ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Recs.triangle_lemma", "rec_eval rec_triangle [?x] = triangle ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Recs.if_zero_one", "(0 < (if ?P then 1 else 0)) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           template_hole 2)),
       template_var 0)),
    ("Recs.nth", "(?x # ?y # ?xs) ! 1 = ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_hole 0),
       template_var 1)),
    ("Recs.pdec1_lemma", "rec_eval rec_pdec1 [?z] = pdec1 ?z",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Recs.pdec2_lemma", "rec_eval rec_pdec2 [?z] = pdec2 ?z",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Recs.pred_lemma", "rec_eval rec_predecessor [?x] = ?x - 1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Recs.setprod_one", "(PROD i<=?n. Suc 0) = Suc 0",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 2, template_hole 1))),
    ("Recs.setprod_one", "(PROD i<?n. Suc 0) = Suc 0",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 2, template_hole 1))),
    ("Recs.inside_length", "inside (lenc ?xs) ?s = (?s < length ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Recs.if_zero_one", "((if ?P then 1 else 0) = 0) = (~ ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2),
             template_hole 1)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Recs.if_zero_one", "(if ?P then 0 else 1) = (if ~ ?P then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 1),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0)),
           template_hole 1),
         template_hole 2))),
    ("Recs.fact_aux_lemma", "rec_eval rec_fact_aux [?x, ?y] = fact ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app (template_hole 0, template_var 1))),
    ("Recs.Iter_comm", "Iter ?f ?n (?f ?x) = ?f (Iter ?f ?n ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_var 2, template_var 0)),
       template_app
        (template_var 2,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Recs.Quo3", "?n * Quo ?n ?m = ?m - ?m mod ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Recs.add_lemma", "rec_eval rec_add [?x, ?y] = ?x + ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Recs.ldec_lemma", "rec_eval rec_ldec [?z, ?n] = ldec ?z ?n",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Recs.minus_lemma", "rec_eval rec_minus [?x, ?y] = ?x - ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Recs.mult_lemma", "rec_eval rec_mult [?x, ?y] = ?x * ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Recs.power_lemma", "rec_eval rec_power [?x, ?y] = ?x ^ ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Recs.Quo_rec_quo", "rec_eval rec_quo [?y, ?x] = Quo ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Recs.quo_lemma", "rec_eval rec_quo [?y, ?x] = ?y div ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Recs.Quo2", "?b * Quo ?b ?a + ?a mod ?b = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_var 0)),
    ("Recs.y_aux", "?y <= Max_triangle_aux ?y ?k",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Recs.Max_triangle_le", "Max_triangle ?z <= ?z",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_var 0)),
    ("Recs.lenc_lemma",
     "rec_eval (rec_lenc ?fs) ?xs = lenc (map (%f. rec_eval f ?xs) ?fs)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Recs.not_lemma", "rec_eval rec_not [?x] = (if ?x = 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_hole 1)
           ))),
    ("Recs.sign_lemma",
     "rec_eval rec_sign [?x] = (if ?x = 0 then 0 else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 1)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Recs.enclen_penc",
     "enclen (penc (Suc ?x) (lenc ?xs)) = Suc (enclen (lenc ?xs))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_hole 1,
         template_app
          (template_hole 4,
           template_app (template_hole 0, template_var 0))))),
    ("Recs.penc_lemma", "rec_eval rec_penc [?m, ?n] = penc ?m ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Recs.Max_triangle_triangle_le", "triangle (Max_triangle ?z) <= ?z",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)))),
       template_var 0)),
    ("Recs.nth", "(?x # ?y # ?z # ?xs) ! 2 = ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 1)),
    ("Recs.inside_iter", "inside ?z ?n = (0 < Iter pdec2 ?n ?z)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 0),
           template_var 1)))),
    ("Recs.list_encode_inverse",
     "ldec (lenc ?xs) ?n = (if ?n < length ?xs then ?xs ! ?n else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Recs.eq_lemma",
     "rec_eval rec_eq [?x, ?y] = (if ?x = ?y then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Recs.inside_lemma",
     "rec_eval rec_inside [?z, ?n] = (if inside ?z ?n then 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("Recs.le_lemma",
     "rec_eval rec_le [?x, ?y] = (if ?x <= ?y then 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("Recs.less_lemma",
     "rec_eval rec_less [?x, ?y] = (if ?x < ?y then 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("Recs.Quo4", "0 < ?x ==> ?y < ?x + ?x * Quo ?x ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Recs.nth", "(?x # ?y # ?z # ?u # ?xs) ! 3 = ?u",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_var 1)),
    ("Recs.BMax_rec_eq3",
     "BMax_rec ?R ?x = Max (Set.filter ?R {..?x} Un {0})",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("Recs.ldec_iter", "ldec ?z ?n = pdec1 (Iter pdec2 ?n ?z) - 1",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, t_empty), template_var 0),
                 template_var 1)))),
         template_hole 0))),
    ("Recs.max_triangle_lemma",
     "rec_eval rec_max_triangle [?x] = Max_triangle ?x",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("Recs.noteq_lemma",
     "rec_eval rec_noteq [?x, ?y] = (if ?x ~= ?y then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Recs.nat_mult_le_one", "[| ?m <= 1; ?n <= 1 |] ==> ?m * ?n <= 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Recs.fst_prod_decode", "pdec1 ?z = ?z - triangle (Max_triangle ?z)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0))))))),
    ("Recs.BMax_rec_eq1",
     "BMax_rec ?R ?x = (GREATEST z. ?R z & z <= ?x | z = 0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Recs.swap_lemma",
     "rec_eval (rec_swap ?f) [?x, ?y] = rec_eval ?f [?y, ?x]",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Recs.if_lemma",
     "rec_eval rec_if [?z, ?x, ?y] = (if 0 < ?z then ?x else ?y)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Recs.ifz_lemma",
     "rec_eval rec_ifz [?z, ?x, ?y] = (if ?z = 0 then ?x else ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_hole 0)),
               template_var 1),
             template_var 0)
           ))),
    ("Recs.setprod_lessThan_Suc",
     "prod ?f {..<Suc ?n} = prod ?f {..<?n} * ?f ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 2, template_var 0))),
         template_app (template_var 1, template_var 0)))),
    ("Recs.snd_prod_decode", "pdec2 ?z = Max_triangle ?z - pdec1 ?z",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 5, template_var 0))))),
    ("Recs.BMax_rec_eq2",
     "BMax_rec ?R ?x = Max ({z. z <= ?x & ?R z} Un {0})",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("Recs.setprod_atMost_Suc",
     "prod ?f {..Suc ?n} = prod ?f {..?n} * ?f (Suc ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_var 1,
           template_app (template_hole 1, template_var 0))))),
    ("Recs.conj_lemma",
     "rec_eval rec_conj [?x, ?y] = (if ?x = 0 | ?y = 0 then 0 else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_hole 1)),
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_hole 1))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Recs.disj_lemma",
     "rec_eval rec_disj [?x, ?y] = (if ?x = 0 & ?y = 0 then 0 else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_hole 1)),
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_hole 1))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Recs.imp_lemma",
     "rec_eval rec_imp [?x, ?y] = (if 0 < ?x & ?y = 0 then 0 else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 9, template_var 0),
                     template_hole 1))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Recs.iter_lemma",
     "rec_eval (rec_iter ?f) [?n, ?x] = Iter (%x. rec_eval ?f [x]) ?n ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0))),
    ("Recs.setsum_eq_zero", "(sum ?f {..?n} = 0) = (ALL i<=?n. ?f i = 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 4, template_var 0))),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("Recs.setsum_eq_zero", "(sum ?f {..<?n} = 0) = (ALL i<?n. ?f i = 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 4, template_var 0))),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("Recs.setprod_eq_zero", "(prod ?f {..?n} = 0) = (EX i<=?n. ?f i = 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 4, template_var 0))),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("Recs.setprod_eq_zero", "(prod ?f {..<?n} = 0) = (EX i<?n. ?f i = 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 4, template_var 0))),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("Recs.accum1_lemma",
     "rec_eval (rec_accum1 ?f) [?x, ?y] =
      (PROD z<=?x. rec_eval ?f [z, ?y])",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("Recs.sigma1_lemma",
     "rec_eval (rec_sigma1 ?f) [?x, ?y] = (SUM z<=?x. rec_eval ?f [z, ?y])",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("Recs.setsum_add_nat_ivl2",
     "?n <= ?p ==> sum ?f {..<?n} + sum ?f {?n..?p} = sum ?f {..?p}",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Recs.setsum_one_less", "ALL i<?n. ?f i <= 1 ==> sum ?f {..<?n} <= ?n",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 1)),
         template_var 1))),
    ("Recs.setprod_greater_zero",
     "ALL i<=?n. 0 <= ?f i ==> 0 <= prod ?f {..?n}",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Recs.setprod_one_le", "ALL i<=?n. ?f i <= 1 ==> prod ?f {..?n} <= 1",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 1)),
         template_hole 2))),
    ("Recs.max1_lemma",
     "rec_eval (rec_max1 ?f) [?x, ?y] =
      BMax_rec (%u. rec_eval ?f [u, ?y] = 0) ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Recs.setsum_eq_one_le",
     "ALL i<=?n. ?f i = 1 ==> sum ?f {..?n} = Suc ?n",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Recs.setsum_one_le",
     "ALL i<=?n. ?f i <= 1 ==> sum ?f {..?n} <= Suc ?n",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Recs.setprod_eq_one",
     "ALL i<=?n. ?f i = Suc 0 ==> prod ?f {..?n} = Suc 0",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_hole 2)))),
    ("Recs.Max_triangle_greatest",
     "Max_triangle ?z = (GREATEST k. triangle k <= ?z & k <= ?z | k = 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 0))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("Recs.accum2_lemma",
     "rec_eval (rec_accum2 ?f) [?x, ?y1.0, ?y2.0] =
      (PROD z<=?x. rec_eval ?f [z, ?y1.0, ?y2.0])",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 3)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)))),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 0, template_var 2)))),
    ("Recs.sigma2_lemma",
     "rec_eval (rec_sigma2 ?f) [?x, ?y1.0, ?y2.0] =
      (SUM z<=?x. rec_eval ?f [z, ?y1.0, ?y2.0])",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 3)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)))),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 0, template_var 2)))),
    ("Recs.max2_lemma",
     "rec_eval (rec_max2 ?f) [?x, ?y1.0, ?y2.0] =
      BMax_rec (%u. rec_eval ?f [u, ?y1.0, ?y2.0] = 0) ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 3)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)))),
       template_app
        (template_app (template_hole 1, t_empty), template_var 2))),
    ("Recs.w_aux",
     "Max_triangle (triangle ?k + ?m) = Max_triangle_aux ?k ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0)))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Recs.all1_lemma",
     "rec_eval (rec_all1 ?f) [?x, ?y] =
      (if ALL z<=?x. 0 < rec_eval ?f [z, ?y] then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_hole 7))),
       template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_hole 0),
         template_hole 1))),
    ("Recs.all1_less_lemma",
     "rec_eval (rec_all1_less ?f) [?x, ?y] =
      (if ALL z<?x. 0 < rec_eval ?f [z, ?y] then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 7, template_var 0),
             template_hole 6))),
       template_app
        (template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_hole 0),
         template_hole 1))),
    ("Recs.ex1_lemma",
     "rec_eval (rec_ex1 ?f) [?x, ?y] =
      (if EX z<=?x. 0 < rec_eval ?f [z, ?y] then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 2)),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_hole 7))),
       template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_hole 0),
         template_hole 1))),
    ("Recs.accum3_lemma",
     "rec_eval (rec_accum3 ?f) [?x, ?y1.0, ?y2.0, ?y3.0] =
      (PROD z<=?x. rec_eval ?f [z, ?y1.0, ?y2.0, ?y3.0])",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 4)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2))))),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 0, template_var 3)))),
    ("Recs.setsum_cut_off_le",
     "[| ?m <= ?n; ALL i:{?m..?n}. ?f i = 0 |]
      ==> sum ?f {..?n} = sum ?f {..<?m}",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Recs.setsum_cut_off_less",
     "[| ?m <= ?n; ALL i:{?m..<?n}. ?f i = 0 |]
      ==> sum ?f {..<?n} = sum ?f {..<?m}",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Recs.all2_lemma",
     "rec_eval (rec_all2 ?f) [?x, ?y1.0, ?y2.0] =
      (if ALL z<=?x. 0 < rec_eval ?f [z, ?y1.0, ?y2.0] then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 3)),
         template_app
          (template_app (template_hole 8, template_var 2),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 8, template_var 0),
               template_hole 7)))),
       template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_hole 0),
         template_hole 1))),
    ("Recs.all2_less_lemma",
     "rec_eval (rec_all2_less ?f) [?x, ?y1.0, ?y2.0] =
      (if ALL z<?x. 0 < rec_eval ?f [z, ?y1.0, ?y2.0] then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 3)),
         template_app
          (template_app (template_hole 7, template_var 2),
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_hole 6)))),
       template_app
        (template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_hole 0),
         template_hole 1))),
    ("Recs.ex2_lemma",
     "rec_eval (rec_ex2 ?f) [?x, ?y1.0, ?y2.0] =
      (if EX z<=?x. 0 < rec_eval ?f [z, ?y1.0, ?y2.0] then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 3)),
         template_app
          (template_app (template_hole 8, template_var 2),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 8, template_var 0),
               template_hole 7)))),
       template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_hole 0),
         template_hole 1))),
    ("Recs.setsum_least_eq",
     "[| ?p <= ?n; ALL i:{..<?p}. ?f i = 1; ALL i:{?p..?n}. ?f i = 0 |]
      ==> sum ?f {..?n} = ?p",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 1)),
         template_var 2))),
    ("Recs.all3_lemma",
     "rec_eval (rec_all3 ?f) [?x, ?y1.0, ?y2.0, ?y3.0] =
      (if ALL z<=?x. 0 < rec_eval ?f [z, ?y1.0, ?y2.0, ?y3.0] then 1
       else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 4)),
         template_app
          (template_app (template_hole 8, template_var 3),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 8, template_var 1),
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_hole 7))))),
       template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_hole 0),
         template_hole 1)))]:
   (string * thm * template) list
### theory "Draft.RecsMoreTemplates"
### 0.319s elapsed time, 0.462s cpu time, 0.057s GC time
val it = (): unit
