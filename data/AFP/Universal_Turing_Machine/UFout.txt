Loading theory "Draft.Rec_Def" (required by "Draft.UFMoreTemplates" via "Draft.UF")
Loading theory "Draft.Turing" (required by "Draft.UFMoreTemplates" via "Draft.UF" via "Draft.Abacus" via "Draft.Turing_Hoare")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.506s cpu time, 0.042s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UFMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.344s cpu time, 0.123s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UFMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.855s cpu time, 0.081s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.UFMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "terminate"
  Proving monotonicity ...
### theory "Draft.Rec_Def"
### 0.706s elapsed time, 2.811s cpu time, 0.283s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UFMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.148s elapsed time, 4.363s cpu time, 0.849s GC time
class tape = type +
  fixes tape_of :: "'a => cell list"
Found termination order: "size <*mlex*> {}"
instantiation
  nat :: tape
  tape_of_nat == tape_of :: nat => cell list
instantiation
  list :: (tape) tape
  tape_of_list == tape_of :: 'a list => cell list
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
instantiation
  prod :: (tape, tape) tape
  tape_of_prod == tape_of :: 'a * 'b => cell list
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.BigO"
### 1.047s elapsed time, 3.743s cpu time, 0.777s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Turing"
### 1.833s elapsed time, 6.717s cpu time, 1.060s GC time
Loading theory "Draft.Turing_Hoare" (required by "Draft.UFMoreTemplates" via "Draft.UF" via "Draft.Abacus")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 41 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q))))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>Hoare_halt" ("_position" P) ("_position" p) ("_position" Q))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" Q))
###     ("_cargs" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" Q) ("_position" B)
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing.tm_comp"
###     ("_applC" ("_Finset" ("_position" P)) ("_position" A))
###     ("_applC" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###     ("\<^const>Turing.tm_comp" ("_position" A) ("_position" B))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 154 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 155 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P'))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P') ("_position" p)
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Turing_Hoare"
### 0.141s elapsed time, 0.327s cpu time, 0.075s GC time
Loading theory "Draft.Uncomputable" (required by "Draft.UFMoreTemplates" via "Draft.UF" via "Draft.Abacus" via "Draft.Abacus_Mopup")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 117 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_begin1) ("_position" n))
###       ("_position" tcopy_begin)
###       ("_applC" ("_position" inv_begin0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_begin)
###         ("_Finset" ("_applC" ("_position" inv_begin0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.057s elapsed time, 6.576s cpu time, 1.107s GC time
Loading theory "Draft.Templates" (required by "Draft.UFMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
### Ambiguous input (line 181 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_begin1) ("_position" n))
###       ("_position" tcopy_begin)
###       ("_applC" ("_position" inv_begin0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_begin)
###         ("_Finset" ("_applC" ("_position" inv_begin0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UFMoreTemplates")
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.830s elapsed time, 2.202s cpu time, 0.939s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 548 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" inv_loop1) ("_position" n))
###     ("_position" tcopy_loop)
###     ("_applC" ("_position" inv_loop0) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" inv_loop1) ("_position" n)))
###     ("_cargs" ("_position" tcopy_loop)
###       ("_Finset" ("_applC" ("_position" inv_loop0) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 784 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_end1) ("_position" n))
###       ("_position" tcopy_end)
###       ("_applC" ("_position" inv_end0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_Finset" ("_applC" ("_position" inv_end1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_end)
###         ("_Finset" ("_applC" ("_position" inv_end0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 815 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" inv_begin1) ("_position" x)) ("_position" tcopy)
###     ("_applC" ("_position" inv_end0) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" x)))
###     ("_cargs" ("_position" tcopy)
###       ("_Finset" ("_applC" ("_position" inv_end0) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 852 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_tcopy) ("_position" n)) ("_position" tcopy)
###     ("_applC" ("_position" post_tcopy) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" pre_tcopy) ("_position" n)))
###     ("_cargs" ("_position" tcopy)
###       ("_Finset" ("_applC" ("_position" post_tcopy) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" dither_halt_inv))
###     ("_cargs" ("_position" dither)
###       ("_Finset" ("_position" dither_halt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" dither_halt_inv)
###     ("_position" dither) ("_position" dither_halt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 923 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" halts) ("_cargs" ("_position" p) ("_position" ns)))
###   ("_applC"
###     ("_Finset"
###       ("_lambda" ("_position" tp)
###         ("\<^const>HOL.eq" ("_position" tp)
###           ("_tuple" ("\<^const>List.list.Nil")
###             ("_tuple_arg"
###               ("\<^const>Turing.tape_class.tape_of" ("_position" ns)))))))
###     ("_cargs" ("_position" p)
###       ("_Finset"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" k)
###               ("_idts" ("_position" n) ("_position" l)))
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>List.append"
###                     ("\<^const>Turing.tape_class.tape_of"
###                       ("_constrain" ("_position" n) ("_type_name" nat)))
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" l))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" halts) ("_cargs" ("_position" p) ("_position" ns)))
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_lambda" ("_position" tp)
###       ("\<^const>HOL.eq" ("_position" tp)
###         ("_tuple" ("\<^const>List.list.Nil")
###           ("_tuple_arg"
###             ("\<^const>Turing.tape_class.tape_of" ("_position" ns))))))
###     ("_position" p)
###     ("_lambda" ("_position" tp)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" k) ("_idts" ("_position" n) ("_position" l)))
###         ("\<^const>HOL.eq" ("_position" tp)
###           ("_tuple"
###             ("\<^const>Turing.exponent" ("_position" Bk) ("_position" k))
###             ("_tuple_arg"
###               ("\<^const>List.append"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_constrain" ("_position" n) ("_type_name" nat)))
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" l))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 951 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" halts)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_position" tp)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple" ("_list" ("_position" Bk))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                       ("_tuple_arg" ("_position" ns)))))))))
###         ("_cargs" ("_position" H)
###           ("_Finset"
###             ("_lambda" ("_position" tp)
###               ("\<^const>HOL.Ex_binder" ("_position" k)
###                 ("\<^const>HOL.eq" ("_position" tp)
###                   ("_tuple"
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" k))
###                     ("_tuple_arg"
###                       ("\<^const>Turing.tape_class.tape_of"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat))))))))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" halts)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_halt"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.eq" ("_position" tp)
###             ("_tuple" ("_list" ("_position" Bk))
###               ("_tuple_arg"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                     ("_tuple_arg" ("_position" ns))))))))
###         ("_position" H)
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder" ("_position" k)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_constrain" ("\<^const>Groups.zero_class.zero")
###                       ("_type_name" nat))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 953 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" halts)
###           ("_cargs" ("_position" M) ("_position" ns)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_position" tp)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple" ("_list" ("_position" Bk))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                       ("_tuple_arg" ("_position" ns)))))))))
###         ("_cargs" ("_position" H)
###           ("_Finset"
###             ("_lambda" ("_position" tp)
###               ("\<^const>HOL.Ex_binder" ("_position" k)
###                 ("\<^const>HOL.eq" ("_position" tp)
###                   ("_tuple"
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" k))
###                     ("_tuple_arg"
###                       ("\<^const>Turing.tape_class.tape_of"
###                         ("_constrain" ("\<^const>Groups.one_class.one")
###                           ("_type_name" nat))))))))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" halts)
###           ("_cargs" ("_position" M) ("_position" ns)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_halt"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.eq" ("_position" tp)
###             ("_tuple" ("_list" ("_position" Bk))
###               ("_tuple_arg"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                     ("_tuple_arg" ("_position" ns))))))))
###         ("_position" H)
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder" ("_position" k)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_constrain" ("\<^const>Groups.one_class.one")
###                       ("_type_name" nat))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale uncomputable
  fixes code :: "(action * nat) list => nat"
    and H :: "(action * nat) list"
  assumes "uncomputable code H"
### Ambiguous input (line 969 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("_Finset"
###       ("_applC" ("_position" pre_H_inv)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("_cargs" ("_position" H) ("_Finset" ("_position" post_H_halt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_H_inv)
###       ("_cargs" ("_position" M) ("_position" ns)))
###     ("_position" H) ("_position" post_H_halt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 974 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("_Finset"
###       ("_applC" ("_position" pre_H_inv)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("_cargs" ("_position" H) ("_Finset" ("_position" post_H_unhalt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_H_inv)
###       ("_cargs" ("_position" M) ("_position" ns)))
###     ("_position" H) ("_position" post_H_unhalt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Uncomputable"
### 2.542s elapsed time, 4.598s cpu time, 1.206s GC time
Loading theory "Draft.Abacus_Mopup" (required by "Draft.UFMoreTemplates" via "Draft.UF" via "Draft.Abacus")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### mopup_inv (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1 ==
### if ?s1 = 0 then mopup_stop (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
### else if ?s1 <= 2 * ?n1
###      then if ?s1 mod 2 = 1
###           then mopup_bef_erase_a (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###           else mopup_bef_erase_b (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###      else if ?s1 = 2 * ?n1 + 1
###           then mopup_jump_over1 (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###           else if ?s1 = 2 * ?n1 + 2
###                then mopup_aft_erase_a (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###                else if ?s1 = 2 * ?n1 + 3
###                     then mopup_aft_erase_b (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###                     else if ?s1 = 2 * ?n1 + 4
###                          then mopup_aft_erase_c (?s1, ?l1, ?r1) ?lm1 ?n1
###                                ?ires1
###                          else if ?s1 = 2 * ?n1 + 5
###                               then mopup_left_moving (?s1, ?l1, ?r1) ?lm1
###                                     ?n1 ?ires1
###                               else if ?s1 = 2 * ?n1 + 6
###                                    then mopup_jump_over2 (?s1, ?l1, ?r1)
###    ?lm1 ?n1 ?ires1
###                                    else False
### theory "Draft.Abacus_Mopup"
### 1.453s elapsed time, 2.079s cpu time, 0.890s GC time
Loading theory "Draft.Abacus" (required by "Draft.UFMoreTemplates" via "Draft.UF")
### Ignoring duplicate rewrite rule:
### ?x1 \<up> Suc ?n1 == ?x1 # ?x1 \<up> ?n1
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### layout_of ?ap1 == map length_of ?ap1
### Rewrite rule not in simpset:
### step (?s1, ?l1, ?r1) (?p1, ?off1) ==
### let (a, s') = fetch ?p1 (?s1 - ?off1) (read ?r1)
### in (s', update a (?l1, ?r1))
### Rewrite rule not in simpset:
### steps ?y ?p1 0 == ?y
### Rewrite rule not in simpset:
### steps ?c1 ?p1 (Suc ?n1) == steps (step ?c1 ?p1) ?p1 ?n1
### Rewrite rule not in simpset:
### shift ?p1 ?n1 == map (%(a, s). (a, if s = 0 then 0 else s + ?n1)) ?p1
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### ci ?ly1 ?ss1 (Inc ?n1) == tinc ?ss1 ?n1
### Rewrite rule not in simpset:
### ci ?ly1 ?ss1 (Dec ?n1 ?e1) == tdec ?ss1 ?n1 (start_of ?ly1 ?e1)
### Rewrite rule not in simpset:
### ci ?ly1 ?ss1 (Goto ?n1) == tgoto (start_of ?ly1 ?n1)
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### dec_inv_1 ?ly1 ?n1 ?e1 (?as1, ?am1) (?s1, ?l1, ?r1) ?ires1 ==
### let ss = start_of ?ly1 ?as1;
###     am' = abc_lm_s ?am1 ?n1 (abc_lm_v ?am1 ?n1 - Suc 0);
###     am'' = abc_lm_s ?am1 ?n1 (abc_lm_v ?am1 ?n1)
### in if ?s1 = start_of ?ly1 ?e1
###    then inv_stop (?as1, am'') (?s1, ?l1, ?r1) ?ires1
###    else if ?s1 = ss then False
###         else if ?s1 = ss + 2 * ?n1 + 1
###              then inv_locate_b (?as1, ?am1) (?n1, ?l1, ?r1) ?ires1
###              else if ?s1 = ss + 2 * ?n1 + 13
###                   then inv_on_left_moving (?as1, am'') (?s1, ?l1, ?r1)
###                         ?ires1
###                   else if ?s1 = ss + 2 * ?n1 + 14
###                        then inv_check_left_moving (?as1, am'')
###                              (?s1, ?l1, ?r1) ?ires1
###                        else if ?s1 = ss + 2 * ?n1 + 15
###                             then inv_after_left_moving (?as1, am'')
###                                   (?s1, ?l1, ?r1) ?ires1
###                             else False
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Abacus"
### 5.379s elapsed time, 5.736s cpu time, 0.479s GC time
Loading theory "Draft.UF" (required by "Draft.UFMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "primerec"
  Proving monotonicity ...
### Rewrite rule not in simpset:
### rec_exec z ?xs1 == 0
### Rewrite rule not in simpset:
### rec_exec s ?xs1 == Suc (?xs1 ! 0)
### Rewrite rule not in simpset:
### rec_exec (recf.id ?m1 ?n1) ?xs1 == ?xs1 ! ?n1
### Rewrite rule not in simpset:
### rec_exec (Cn ?n1 ?f1 ?gs1) ?xs1 ==
### rec_exec ?f1 (map (%a. rec_exec a ?xs1) ?gs1)
### Rewrite rule not in simpset:
### rec_exec (Pr ?n1 ?f1 ?g1) ?xs1 ==
### if last ?xs1 = 0 then rec_exec ?f1 (butlast ?xs1)
### else rec_exec ?g1
###       (butlast ?xs1 @
###        [last ?xs1 - 1,
###         rec_exec (Pr ?n1 ?f1 ?g1) (butlast ?xs1 @ [last ?xs1 - 1])])
### Rewrite rule not in simpset:
### rec_exec (Mn ?n1 ?f1) ?xs1 == LEAST x. rec_exec ?f1 (?xs1 @ [x]) = 0
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### quo [] = undefined
### !!v. quo [v] = undefined
### !!v vb vd ve. quo (v # vb # vd # ve) = undefined
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### rec_embranch [] = undefined
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### loR [] = undefined
### !!v. loR [v] = undefined
### !!v vb. loR [v, vb] = undefined
### (1 more)
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### lgR [] = undefined
### !!v. lgR [v] = undefined
### !!v vb. lgR [v, vb] = undefined
### (1 more)
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### newleft0 [] = undefined
### !!v. newleft0 [v] = undefined
### !!v vb vd ve. newleft0 (v # vb # vd # ve) = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### newrgt0 [] = undefined
### !!v. newrgt0 [v] = undefined
### !!v vb vd ve. newrgt0 (v # vb # vd # ve) = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### newleft1 [] = undefined
### !!v. newleft1 [v] = undefined
### !!v vb vd ve. newleft1 (v # vb # vd # ve) = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### newrgt1 [] = undefined
### !!v. newrgt1 [v] = undefined
### !!v vb vd ve. newrgt1 (v # vb # vd # ve) = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### newleft2 [] = undefined
### !!v. newleft2 [v] = undefined
### !!v vb vd ve. newleft2 (v # vb # vd # ve) = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### newrgt2 [] = undefined
### !!v. newrgt2 [v] = undefined
### !!v vb vd ve. newrgt2 (v # vb # vd # ve) = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### newleft3 [] = undefined
### !!v. newleft3 [v] = undefined
### !!v vb vd ve. newleft3 (v # vb # vd # ve) = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### newrgt3 [] = undefined
### !!v. newrgt3 [v] = undefined
### !!v vb vd ve. newrgt3 (v # vb # vd # ve) = undefined
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### fetch ?p1 0 ?b1 == (Nop, 0)
### Rewrite rule not in simpset:
### fetch ?p1 (Suc ?s1) Bk ==
### case nth_of ?p1 (2 * ?s1) of None => (Nop, 0) | Some i => i
### Rewrite rule not in simpset:
### fetch ?p1 (Suc ?s1) Oc ==
### case nth_of ?p1 (2 * ?s1 + 1) of None => (Nop, 0) | Some i => i
### Rewrite rule not in simpset:
### tm_wf (?p1, ?off1) ==
### 2 <= length ?p1 &
### is_even (length ?p1) &
### (ALL (a, s):set ?p1. s <= length ?p1 div 2 + ?off1 & ?off1 <= s)
### theory "Draft.UF"
### 3.777s elapsed time, 4.140s cpu time, 0.377s GC time
Loading theory "Draft.UFMoreTemplates"
val templateLemmas =
   [("UF.Prime_Pi", "Prime (Pi ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("UF.Pi_not_0", "0 < Pi ?n",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("UF.fact_pos", "0 < ?n!",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("UF.godel_code_great", "0 < godel_code ?nl",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("UF.godel_code'_nonzero", "0 < godel_code' ?nl ?n",
     template_inequation
      (less_than, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.n_le_fact", "?n < Suc (?n!)",
     template_inequation
      (less_than, template_var 0,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("UF.Pi_gr_1", "Suc 0 < Pi ?n",
     template_inequation
      (less_than, template_app (template_hole 2, template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("UF.primerec_constn_1", "primerec (constn ?n) (Suc 0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_hole 0))
         )),
    ("UF.godel_code'_not0", "godel_code' ?xs ?n ~= 0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("UF.length_getpren_params", "length (get_fstn_args ?m ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("UF.bl2wc_Bk_0", "bl2wc (Bk \<up> ?m) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("UF.newstat_0_0", "newstat ?m 0 ?r = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_hole 0)),
    ("UF.Pi_inc", "Pi ?i < Pi (Suc ?i)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("UF.bl2nat_simps", "bl2nat (Bk \<up> ?x) ?n = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("UF.left_trpl_fst", "UF.left (trpl ?l ?st ?r) = ?l",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 2)),
    ("UF.rght_trpl_trd", "rght (trpl ?l ?st ?r) = ?r",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 0)),
    ("UF.stat_trpl_snd", "stat (trpl ?l ?st ?r) = ?st",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 1)),
    ("UF.Pi_nonzeroE", "Pi ?n = 0 ==> ?RR",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1), template_hole 0)],
       template_predicate (template_var 0))),
    ("UF.nstd_lemma", "rec_exec rec_NSTD [?c] = nstd ?c",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("UF.fac_lemma", "rec_exec rec_fac [?x] = ?x!",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("UF.left_lemma", "rec_exec rec_left [?c] = UF.left ?c",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("UF.np_lemma", "rec_exec rec_np [?x] = Np ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("UF.pi_lemma", "rec_exec rec_pi [?x] = Pi ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("UF.right_lemma", "rec_exec rec_right [?c] = rght ?c",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("UF.stat_lemma", "rec_exec rec_stat [?c] = stat ?c",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("UF.value_lemma", "rec_exec rec_valu [?r] = valu ?r",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("UF.constn_lemma", "rec_exec (constn ?n) [?x] = ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 1)),
    ("UF.quo_zero", "quo [?x, 0] = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))),
       template_hole 1)),
    ("UF.godel_code_eq_1", "(godel_code ?nl = 1) = (?nl = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("UF.Pi_not_oneE", "Pi ?n = Suc 0 ==> ?RR",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_hole 0))],
       template_predicate (template_var 0))),
    ("UF.prime_mn_reverse", "primerec (Mn ?n ?f) ?m ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("UF.fac_Suc", "Suc ?n! = Suc ?n * ?n!",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("UF.actn_0_is_4", "actn ?m 0 ?r = 4",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_hole 3),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 1, template_hole 0))))),
    ("UF.pred_lemma", "rec_exec UF.rec_pred [?x] = ?x - 1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("UF.mod_dvd_simp", "(?x mod ?y = 0) = (?y dvd ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("UF.arity_primerec", "primerec ?f ?n ==> arity ?f = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.primerec_accum", "primerec (rec_accum ?rf) ?n ==> primerec ?rf ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("UF.length_modify", "length (modify_tprog ?tp) = 2 * length ?tp",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)))),
    ("UF.quo_div", "quo [?x, ?y] = ?x div ?y",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.pi_dummy_lemma", "rec_exec rec_dummy_pi [?x, ?y] = Pi ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app (template_hole 0, template_var 0))),
    ("UF.fac_dummy", "rec_exec rec_dummyfac [?x, ?y] = ?y!",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app (template_hole 0, template_var 0))),
    ("UF.Pi_inc_gr", "?i < ?j ==> Pi ?i < Pi ?j",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("UF.primerec_all1",
     "primerec (rec_all ?rt ?rf) ?n ==> primerec ?rt ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("UF.append_access_1", "(?xs @ ?ys) ! Suc (length ?xs) = ?ys ! 1",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 1))),
       template_app
        (template_app (template_hole 4, template_var 0), template_hole 0))),
    ("UF.bl2wc_simps", "bl2wc (Bk # ?c) = 2 * bl2wc ?c",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app (template_hole 6, template_var 0)))),
    ("UF.prime_lemma",
     "rec_exec rec_prime [?x] = (if Prime ?x then 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("UF.scan_lemma", "rec_exec rec_scan [?r] = ?r mod 2",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 4)),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("UF.add_lemma", "rec_exec rec_add [?x, ?y] = ?x + ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.entry_lemma", "rec_exec rec_entry [?str, ?i] = Entry ?str ?i",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.lg_lemma", "rec_exec rec_lg [?x, ?y] = lg ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.lo_lemma", "rec_exec rec_lo [?x, ?y] = lo ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.minus_lemma", "rec_exec rec_minus [?x, ?y] = ?x - ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.mod_lemma", "rec_exec rec_mod [?x, ?y] = ?x mod ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.mult_lemma", "rec_exec rec_mult [?x, ?y] = ?x * ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.newconf_lemma", "rec_exec rec_newconf [?m, ?c] = newconf ?m ?c",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.power_lemma", "rec_exec rec_power [?x, ?y] = ?x ^ ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.quo_lemma2", "rec_exec rec_quo [?x, ?y] = ?x div ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("UF.bl2nat_cons_bk", "bl2nat (?ks @ [Bk]) 0 = bl2nat ?ks 0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1))),
         template_hole 0),
       template_app
        (template_app (template_hole 5, template_var 0), template_hole 0))),
    ("UF.bl2wc_simps", "bl2wc (Oc # ?list) mod 2 = Suc 0",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2))),
       template_app (template_hole 1, template_hole 0))),
    ("UF.lo_rgt", "lo (trpl 0 0 ?r) (Pi 2) = ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 4),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))),
       template_var 0)),
    ("UF.NSTD_lemma2", "(rec_exec rec_NSTD [?c] = Suc 0) = NSTD ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("UF.Pi_coprime_suf",
     "?i < ?j ==> coprime (Pi ?i) (godel_code' ?ps ?j)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("UF.Pi_coprime", "?i ~= ?j ==> coprime (Pi ?i) (Pi ?j)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("UF.x_less_exp", "Suc 0 < ?y ==> ?x < ?y ^ ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 2, template_hole 1),
          template_var 1)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("UF.primerec_all2",
     "primerec (rec_all ?rt ?rf) ?n ==> primerec ?rf (Suc ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("UF.bl2nat_double", "bl2nat ?xs (Suc ?n) = 2 * bl2nat ?xs ?n",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("UF.not_lemma", "rec_exec rec_not [?x] = (if ?x = 0 then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_hole 1)
           ))),
    ("UF.sg_lemma", "rec_exec rec_sg [?x] = (if ?x = 0 then 0 else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 1)),
               template_hole 1),
             template_hole 0)
           ))),
    ("UF.NSTD_lemma2''", "NSTD ?c ==> rec_exec rec_NSTD [?c] = Suc 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("UF.Pi_notEq", "?i ~= ?j ==> Pi ?i ~= Pi ?j",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("UF.NSTD_lemma2'", "rec_exec rec_NSTD [?c] = Suc 0 ==> NSTD ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)),
          template_app (template_hole 2, template_hole 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("UF.godel_finite",
     "finite {u. Pi (Suc ?i) ^ u dvd godel_code' ?nl (Suc 0)}",
     template_predicate
      (
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))
         )),
    ("UF.bl2wc_Oc_then_Bk",
     "bl2wc (Oc \<up> ?rs @ Bk \<up> ?n) = bl2wc (Oc \<up> ?rs)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_hole 1)))),
    ("UF.strt_lemma",
     "length ?xs = ?vl ==> rec_exec (rec_strt ?vl) ?xs = strt ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("UF.lg_power", "Suc 0 < ?x ==> lg (?x ^ ?rs) ?x = ?rs",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("UF.lo_power", "Suc 0 < ?x ==> lo (?x ^ ?r) ?x = ?r",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_var 0))),
    ("UF.fetch_zero_zero", "fetch ?tp 0 ?b = (?nact, ?ns) ==> ?ns = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_hole 2),
            template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation (template_var 0, template_hole 2))),
    ("UF.prime_ex", "EX p>?n. p <= Suc (?n!) & Prime p",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("UF.Minr_range", "Minr ?Rr ?xs ?w <= ?w | Minr ?Rr ?xs ?w = Suc ?w",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("UF.bl2nat_append",
     "bl2nat (?xs @ ?ys) 0 = bl2nat ?xs 0 + bl2nat ?ys (length ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 2)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("UF.bl2nat_exp_zero", "bl2nat (Oc \<up> ?y) 0 = 2 ^ ?y - Suc 0",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 0),
             template_hole 7)),
         template_hole 6),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_app (template_hole 0, template_hole 6)))),
    ("UF.eq_lemma", "rec_exec rec_eq [?x, ?y] = (if ?x = ?y then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("UF.le_lemma",
     "rec_exec rec_le [?x, ?y] = (if ?x <= ?y then 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("UF.less_lemma",
     "rec_exec rec_less [?x, ?y] = (if ?x < ?y then 1 else 0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("UF.quo_lemma1", "rec_exec rec_quo [?x, ?y] = quo [?x, ?y]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))))),
    ("UF.Sigma_0_simp_rewrite", "UF.Sigma ?f (?xs @ [0]) = ?f (?xs @ [0])",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))),
       template_app
        (template_var 1,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("UF.actn_lemma", "rec_exec rec_actn [?m, ?q, ?r] = actn ?m ?q ?r",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("UF.conf_lemma", "rec_exec rec_conf [?m, ?r, ?t] = conf ?m ?r ?t",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("UF.newleft_lemma",
     "rec_exec rec_newleft [?p, ?r, ?a] = newleft ?p ?r ?a",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("UF.newrght_lemma",
     "rec_exec rec_newrght [?p, ?r, ?a] = newrght ?p ?r ?a",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("UF.newstat_lemma",
     "rec_exec rec_newstat [?m, ?q, ?r] = newstat ?m ?q ?r",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("UF.nonstop_lemma",
     "rec_exec rec_nonstop [?m, ?r, ?t] = nonstop ?m ?r ?t",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("UF.trpl_lemma", "rec_exec rec_trpl [?p, ?q, ?r] = trpl ?p ?q ?r",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("UF.godel_decode",
     "?i < length ?nl ==> Entry (godel_code ?nl) ?i = ?nl ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("UF.Pi_coprime_pre",
     "length ?ps <= ?i ==> coprime (Pi (Suc ?i)) (godel_code' ?ps (Suc 0))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 2, template_hole 0)))
           ))),
    ("UF.fac_dvd", "[| 0 < ?q; ?q <= ?n |] ==> ?q dvd ?n!",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("UF.primerec_terminate",
     "[| primerec ?f ?x; length ?xs = ?x |] ==> terminate ?f ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 1, template_var 0), template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("UF.primerec_rec_maxr",
     "[| primerec ?rf ?n; 0 < ?n |] ==> primerec (rec_maxr ?rf) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("UF.noteq_lemma",
     "rec_exec rec_noteq [?x, ?y] = (if ?x ~= ?y then 1 else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0))),
               template_hole 1),
             template_hole 0)
           ))),
    ("UF.quo_is_div", "0 < ?y ==> quo [?x, ?y] = ?x div ?y",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("UF.Pi_power_coprime",
     "?i ~= ?j ==> coprime (Pi ?i ^ ?m) (Pi ?j ^ ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))
           ))),
    ("UF.primerec_all",
     "primerec (rec_all ?rt ?rf) ?n ==>
      primerec ?rt ?n & primerec ?rf (Suc ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("UF.coprime_dvd_mult_nat2",
     "[| coprime ?k ?n; ?k dvd ?n * ?m |] ==> ?k dvd ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("UF.prime_s_reverse", "[| primerec s ?n; ?n = Suc 0 ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_hole 0))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("UF.prime_z_reverse", "[| primerec z ?n; ?n = Suc 0 ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_hole 0))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("UF.primerec_sigma",
     "[| Suc 0 < ?n; primerec ?rf ?n |] ==> primerec (rec_sigma ?rf) ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_hole 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("UF.NSTD_lemma1",
     "rec_exec rec_NSTD [?c] = Suc 0 | rec_exec rec_NSTD [?c] = 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_app (template_hole 1, template_hole 0))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2))),
             template_hole 0))
         )),
    ("UF.bl2wc_simps",
     "bl2wc (Oc # tl ?c) = Suc (bl2wc ?c) - bl2wc ?c mod 2",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_hole 7),
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 9, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 9, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("UF.bl2wc_simps", "?c ~= [] ==> bl2wc (tl ?c) = bl2wc ?c div 2",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("UF.terminate_F_lemma",
     "terminate rec_halt [?m, ?r] ==> terminate rec_F [?m, ?r]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))
           ))),
    ("UF.primerec_ge_2_elim",
     "[| primerec ?rf ?n; Suc (Suc 0) <= ?n |]
      ==> primerec (rec_accum ?rf) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 2, template_hole 1)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("UF.conf_trpl_ex",
     "EX p q r. conf ?m (bl2wc (<?lm>)) ?stp = trpl p q r",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("UF.bl2wc_simps", "2 * bl2wc (tl ?c) = bl2wc ?c - bl2wc ?c mod 2",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4)))))),
    ("UF.inpt_lemma",
     "Suc (length ?xs) = ?vl ==>
      rec_exec (rec_inpt ?vl) (?m # ?xs) = inpt ?m ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 2)),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("UF.fetch_action_map_4",
     "fetch ?tp 0 ?b = (?nact, ?ns) ==> action_map ?nact = 4",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 3),
              template_hole 6),
            template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_hole 0)))))),
    ("UF.primerec_getpren",
     "[| ?i < ?n; ?n <= ?m |] ==> primerec (get_fstn_args ?m ?n ! ?i) ?m",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_var 2)),
             template_var 0)
           ))),
    ("UF.prime_coprime",
     "[| Prime ?x; Prime ?y; ?x ~= ?y |] ==> coprime ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("UF.conj_lemma",
     "rec_exec rec_conj [?x, ?y] = (if ?x = 0 | ?y = 0 then 0 else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_hole 1)),
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_hole 1))),
               template_hole 1),
             template_hole 0)
           ))),
    ("UF.disj_lemma",
     "rec_exec rec_disj [?x, ?y] = (if ?x = 0 & ?y = 0 then 0 else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_hole 1)),
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_hole 1))),
               template_hole 1),
             template_hole 0)
           ))),
    ("UF.bl2nat_cons_oc",
     "bl2nat (?ks @ [Oc]) 0 = bl2nat ?ks 0 + 2 ^ length ?ks",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 0),
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_hole 7))),
         template_hole 6),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 11, template_var 0),
             template_hole 6)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("UF.bl2wc_simps", "?c ~= [] ==> bl2wc [hd ?c] = bl2wc ?c mod 2",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_hole 8)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("UF.max_divisors", "Suc 0 < ?x ==> Max {u. ?x ^ u dvd ?x ^ ?r} = ?r",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_hole 5),
          template_var 1)],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_var 0))),
    ("UF.lg_lemma''",
     "~ Suc 0 < ?x ==> rec_exec rec_lg [?x, ?y] = lg ?x ?y",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_app (template_hole 7, template_hole 6),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("UF.lo_lemma''",
     "~ Suc 0 < ?x ==> rec_exec rec_lo [?x, ?y] = lo ?x ?y",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_app (template_hole 7, template_hole 6),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("UF.lg_lemma'''",
     "~ Suc 0 < ?y ==> rec_exec rec_lg [?x, ?y] = lg ?x ?y",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_app (template_hole 7, template_hole 6),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("UF.lo_lemma'''",
     "~ Suc 0 < ?y ==> rec_exec rec_lo [?x, ?y] = lo ?x ?y",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_app (template_hole 7, template_hole 6),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("UF.Minr_strip_Suc",
     "Minr ?Rr ?xs ?w <= ?w ==> Minr ?Rr ?xs (Suc ?w) = Minr ?Rr ?xs ?w",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1),
            template_var 0),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("UF.dvd_power_le",
     "[| Suc 0 < ?a; ?a ^ ?y dvd ?a ^ ?l |] ==> ?y <= ?l",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("UF.divsor_prime_ex",
     "[| ~ Prime ?x; Suc 0 < ?x |] ==> EX p. Prime p & p dvd ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 0))
            ),
        template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 0)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("UF.godel_code_1_iff",
     "[| ?i < length ?nl; ~ Suc 0 < godel_code ?nl |] ==> ?nl ! ?i = 0",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 0)),
        template_negation
         (
            template_inequation
             (less_than, template_app (template_hole 4, template_hole 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_hole 3))),
    ("UF.lgR_ok", "[| Suc 0 < ?y; lgR [?x, ?y, ?xa] |] ==> ?xa <= ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 2),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_hole 1))))
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("UF.bl2nat_simps", "bl2nat (Oc # Oc \<up> ?x) 0 = 2 * 2 ^ ?x - Suc 0",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app (template_hole 8, template_var 0),
               template_hole 9))),
         template_hole 7),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 0))),
         template_app (template_hole 0, template_hole 7)))),
    ("UF.bl2wc_simps", "2 * (bl2wc ?c div 2) = bl2wc ?c - bl2wc ?c mod 2",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4)))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4)))))),
    ("UF.list_map_eq",
     "?vl = length ?xs ==> map (%i. ?xs ! (i - 1)) [Suc 0..<Suc ?vl] = ?xs",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_app (template_hole 1, template_var 1))),
         template_var 0))),
    ("UF.listsum2_lemma",
     "[| length ?xs = ?vl; ?n <= ?vl |]
      ==> rec_exec (rec_listsum2 ?vl ?n) ?xs = listsum2 ?xs ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2), template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("UF.strt'_lemma",
     "[| length ?xs = ?vl; ?n <= ?vl |]
      ==> rec_exec (rec_strt' ?vl ?n) ?xs = strt' ?xs ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2), template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("UF.finite_power_dvd",
     "[| Suc 0 < ?a; ?y ~= 0 |] ==> finite {u. ?a ^ u dvd ?y}",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_predicate
        (
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))
           ))),
    ("UF.godel_code_get_nth",
     "?i < length ?nl ==>
      Max {u. Pi (Suc ?i) ^ u dvd godel_code ?nl} = ?nl ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("UF.prime_id_reverse",
     "[| primerec (recf.id ?m ?n) ?k; [| ?k = ?m; ?n < ?m |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 3)],
          template_implication
           ([template_inequation
              (less_than, template_var 2, template_var 3)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("UF.primerec_all_iff",
     "[| primerec ?rt ?n; primerec ?rf (Suc ?n); 0 < ?n |]
      ==> primerec (rec_all ?rt ?rf) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            ),
        template_inequation (less_than, template_hole 1, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("UF.godel_code'_butlast_last_id'",
     "godel_code' (?ys @ [?y]) (Suc ?j) =
      godel_code' ?ys (Suc ?j) * Pi (Suc (length ?ys + ?j)) ^ ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_hole 6))),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_var 0)))),
           template_var 1)))),
    ("UF.godel_code_in",
     "?i < length ?nl ==>
      ?nl ! ?i : {u. Pi (Suc ?i) ^ u dvd godel_code' ?nl (Suc 0)}",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_var 1)),
             template_app (template_hole 6, t_empty))
           ))),
    ("UF.conf_keep",
     "conf ?m ?lm ?stp = trpl 0 0 ?r ==>
      conf ?m ?lm (?stp + ?n) = trpl 0 0 ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app (template_hole 2, template_hole 1),
              template_hole 1),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           template_var 1)))),
    ("UF.godel_code'_get_nth",
     "?i < length ?nl ==>
      Max {u. Pi (Suc ?i) ^ u dvd godel_code' ?nl (Suc 0)} = ?nl ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("UF.nonstop_rgt_ex",
     "nonstop ?m (bl2wc (<?lm>)) ?stpa = 0 ==>
      EX r. conf ?m (bl2wc (<?lm>)) ?stpa = trpl 0 0 r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1))),
            template_var 0),
          template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("UF.get_fstn_args_take",
     "[| length ?xs = ?m; ?n <= ?m |]
      ==> map (%f. rec_exec f ?xs) (get_fstn_args ?m ?n) = take ?n ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2), template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("UF.lg_lemma'",
     "[| Suc 0 < ?x; Suc 0 < ?y |] ==> rec_exec rec_lg [?x, ?y] = lg ?x ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("UF.lo_lemma'",
     "[| Suc 0 < ?x; Suc 0 < ?y |] ==> rec_exec rec_lo [?x, ?y] = lo ?x ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("UF.zip_null_gr",
     "[| length ?xs = ?k; length ?ys = ?k; zip ?xs ?ys ~= [] |] ==> 0 < ?k",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2), template_var 1),
        template_equation
         (template_app (template_hole 6, template_var 0), template_var 1),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0),
              template_hole 2)
            )],
       template_inequation (less_than, template_hole 0, template_var 1))),
    ("UF.fac_dvd2",
     "[| Suc 0 < ?q; ?q dvd ?n!; ?q <= ?n |] ==> ~ ?q dvd Suc (?n!)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 2, template_var 0)))
               )
           ))),
    ("UF.Sigma_Suc_simp_rewrite",
     "UF.Sigma ?f (?xs @ [Suc ?x]) =
      UF.Sigma ?f (?xs @ [?x]) + ?f (?xs @ [Suc ?x])",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 1)))),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1)))))),
    ("UF.max_lor",
     "?i < length ?nl ==>
      Max {u. loR [godel_code ?nl, Pi (Suc ?i), u]} = ?nl ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("UF.accum_lemma",
     "primerec ?rg (Suc (length ?xs)) ==>
      rec_exec (rec_accum ?rg) (?xs @ [?x]) =
      Accum (rec_exec ?rg) (?xs @ [?x])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))))),
    ("UF.sigma_lemma",
     "primerec ?rg (Suc (length ?xs)) ==>
      rec_exec (rec_sigma ?rg) (?xs @ [?x]) =
      UF.Sigma (rec_exec ?rg) (?xs @ [?x])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))))),
    ("UF.maxr_lg",
     "[| Suc 0 < ?x; Suc 0 < ?y |] ==> Maxr lgR [?x, ?y] ?x = lg ?x ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("UF.Maxr_lo",
     "[| Suc 0 < ?x; Suc 0 < ?y |] ==> Maxr loR [?x, ?y] ?x = lo ?x ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("UF.tpl_eqI",
     "[| ?a = ?a'; ?b = ?b'; ?c = ?c' |]
      ==> trpl ?a ?b ?c = trpl ?a' ?b' ?c'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("UF.godel_code'_butlast_last_id",
     "?xs ~= [] ==>
      godel_code' ?xs (Suc ?j) =
      godel_code' (butlast ?xs) (Suc ?j) * Pi (length ?xs + ?j) ^ last ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 10))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1),
           template_app (template_hole 7, template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 5, template_var 1)),
               template_app (template_hole 7, template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1)),
                   template_var 0))),
             template_app (template_hole 0, template_var 1)))))),
    ("UF.bl2wc_simps",
     "?c ~= [] ==> bl2wc (hd ?c # ?d) = 2 * bl2wc ?d + bl2wc ?c mod 2",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 10))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app (template_hole 8, template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 8, template_var 1)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("UF.Minr_lemma",
     "primerec ?rf (Suc (length ?xs)) ==>
      rec_exec (rec_Minr ?rf) (?xs @ [?w]) =
      Minr (%args. 0 < rec_exec ?rf args) ?xs ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("UF.Maxr_lemma",
     "primerec ?rf (Suc (length ?xs)) ==>
      rec_exec (rec_maxr ?rf) (?xs @ [?w]) =
      Maxr (%args. 0 < rec_exec ?rf args) ?xs ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("UF.halt_state_keep_steps_add",
     "nonstop ?m (bl2wc (<?lm>)) ?stpa = 0 ==>
      conf ?m (bl2wc (<?lm>)) ?stpa = conf ?m (bl2wc (<?lm>)) (?stpa + ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2))),
            template_var 1),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("UF.F_lemma",
     "rec_exec rec_halt [?m, ?r] = ?t ==>
      rec_exec rec_F [?m, ?r] = valu (rght (conf ?m ?r ?t))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 7, template_hole 3),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 4))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))))),
    ("UF.Sigma_0",
     "ALL i<=?n. ?f (?xs @ [i]) = 0 ==> UF.Sigma ?f (?xs @ [?n]) = 0",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_hole 2))),
         template_hole 1))),
    ("UF.uplimit_loR",
     "[| Suc 0 < ?x; Suc 0 < ?y; loR [?x, ?y, ?xa] |] ==> ?xa <= ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 2),
        template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 1),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_hole 1))))
            )],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("UF.conf_step",
     "rec_exec rec_conf [?m, ?r, Suc ?t] =
      rec_exec rec_newconf [?m, rec_exec rec_conf [?m, ?r, ?t]]",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1)))),
       template_app
        (template_app (template_hole 5, template_hole 0),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 1))))),
             template_hole 1))))),
    ("UF.Minr_is_Suc",
     "[| Minr ?Rr ?xs ?w = Suc ?w; ?Rr (?xs @ [Suc ?w]) |]
      ==> Minr ?Rr ?xs (Suc ?w) = Suc ?w",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1),
            template_var 0),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 3, template_var 0)),
                  template_hole 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_app (template_hole 3, template_var 0)),
         template_app (template_hole 3, template_var 0)))),
    ("UF.zip_null_iff",
     "[| length ?xs = ?k; length ?ys = ?k; zip ?xs ?ys = [] |]
      ==> ?xs = [] & ?ys = []",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2), template_var 1),
        template_equation
         (template_app (template_hole 8, template_var 0), template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("UF.Suc_Suc_induct",
     "[| ?i < Suc (Suc 0); primerec (?ys ! 0) ?n; primerec (?ys ! 1) ?n |]
      ==> primerec (?ys ! ?i) ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 4,
            template_app (template_hole 4, template_hole 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_hole 3)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_hole 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("UF.trpl_code_simp",
     "trpl_code (steps0 (Suc 0, Bk \<up> ?l, <?lm>) ?tp 0) =
      rec_exec rec_conf [code ?tp, bl2wc (<?lm>), 0]",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_hole 11)),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_hole 8)),
                   template_app (template_hole 7, template_var 1)))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 11)),
           template_hole 11)),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 1,
                 template_app (template_hole 7, template_var 1))),
             template_app
              (template_app (template_hole 3, template_hole 11),
               template_hole 0)))))),
    ("UF.map_s_lemma",
     "length ?xs = ?vl ==>
      map ((%a. rec_exec a ?xs) o (%i. Cn ?vl s [recf.id ?vl i]))
       [0..<?vl] =
      map Suc ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, t_empty), t_empty)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_app
          (template_app (template_hole 10, template_hole 0),
           template_var 1)))),
    ("UF.Sigma_Suc",
     "ALL k<Suc ?w. ?f (?xs @ [k]) = Suc 0 ==>
      UF.Sigma ?f (?xs @ [?w]) = Suc ?w",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_hole 2))),
         template_app (template_hole 6, template_var 2)))),
    ("UF.lg_maxr",
     "[| Suc 0 < ?x; Suc 0 < ?y |]
      ==> rec_exec rec_lg [?x, ?y] = Maxr lgR [?x, ?y] ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2))),
           template_var 1)))),
    ("UF.rec_lo_Maxr_lor",
     "[| Suc 0 < ?x; Suc 0 < ?y |]
      ==> rec_exec rec_lo [?x, ?y] = Maxr loR [?x, ?y] ?x",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2))),
           template_var 1)))),
    ("UF.Minr_is_Suc_Suc",
     "[| Minr ?Rr ?xs ?w = Suc ?w; ~ ?Rr (?xs @ [Suc ?w]) |]
      ==> Minr ?Rr ?xs (Suc ?w) = Suc (Suc ?w)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1),
            template_var 0),
          template_app (template_hole 4, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_var 2,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_app
                     (template_app
                       (template_hole 1,
                        template_app (template_hole 4, template_var 0)),
                      template_hole 0)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app (template_hole 4, template_var 0))))),
    ("UF.x_empty_set",
     "ALL x<=?w. ~ ?Rr (?xs @ [x]) ==> {x. x <= ?w & ?Rr (?xs @ [x])} = {}",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("UF.Minr_Suc_simp",
     "Minr ?Rr ?xs (Suc ?w) =
      (if Minr ?Rr ?xs ?w <= ?w then Minr ?Rr ?xs ?w
       else if ?Rr (?xs @ [Suc ?w]) then Suc ?w else Suc (Suc ?w))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_var 2,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 5, template_var 0)),
                     template_hole 0)))),
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 5, template_var 0)))))),
    ("UF.divsor_ex",
     "[| ~ Prime ?x; Suc 0 < ?x |] ==> EX u>Suc 0. EX v>Suc 0. u * v = ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            ),
        template_inequation
         (less_than, template_app (template_hole 5, template_hole 4),
          template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("UF.prime_pr_reverse",
     "[| primerec (Pr ?n ?f ?g) ?m;
         [| ?m = Suc ?n; primerec ?f ?n; primerec ?g (Suc (Suc ?n)) |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 0, template_var 4))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 4)
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_hole 0,
                       template_app (template_hole 0, template_var 4)))
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("UF.state_in_range",
     "[| steps0 (Suc 0, ?tp) ?A ?stp = (?st, ?l, ?r); tm_wf0 ?A |]
      ==> ?st <= length ?A div 2",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9)),
                  template_var 5)),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_hole 9)),
            template_var 3),
          template_app
           (template_app (template_hole 11, template_var 2),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 8, template_var 4),
                template_hole 9))
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 4)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("UF.rec_pr_Suc_simp_rewrite",
     "rec_exec (Pr ?n ?f ?g) (?xs @ [Suc ?x]) =
      rec_exec ?g (?xs @ [?x] @ [rec_exec (Pr ?n ?f ?g) (?xs @ [?x])])",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))),
       template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 4),
                         template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 0)))),
               template_hole 0)))))),
    ("UF.godel_code'_set",
     "{u. Pi (Suc ?i) ^ u dvd
          Suc (Suc 0) ^ length ?nl * godel_code' ?nl (Suc 0)} =
      {u. Pi (Suc ?i) ^ u dvd godel_code' ?nl (Suc 0)}",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app (template_hole 8, t_empty))),
    ("UF.rec_t_eq_step",
     "case ?c of (s, l, r) => s <= length ?tp div 2 ==>
      trpl_code (step0 ?c ?tp) =
      rec_exec rec_newconf [code ?tp, trpl_code ?c]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_hole 5))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 8, template_var 0)),
               template_hole 0)))))),
    ("UF.prime_cn_reverse'",
     "[| primerec (Cn ?n ?f ?gs) ?n;
         [| primerec ?f (length ?gs);
            ALL i<length ?gs. primerec (?gs ! i) ?n |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app (template_hole 4, template_var 1))
               )],
          template_implication
           ([template_predicate (template_app (template_hole 3, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("UF.godel_code_append_cons",
     "length ?xs = ?i ==>
      godel_code' (?xs @ ?y # ?ys) (Suc 0) =
      godel_code' ?xs (Suc 0) * Pi (Suc ?i) ^ ?y *
      godel_code' ?ys (?i + 2)",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3), template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 3),
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_var 0))),
           template_app (template_hole 8, template_hole 7)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 11, template_var 3),
                   template_app (template_hole 8, template_hole 7))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 8, template_var 2))),
                 template_var 1))),
           template_app
            (template_app (template_hole 11, template_var 0),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("UF.rec_accum_ex",
     "primerec ?rf (Suc (length ?xs)) ==>
      (rec_exec (rec_accum ?rf) (?xs @ [?x]) = 0) =
      (EX t<=?x. rec_exec ?rf (?xs @ [t]) = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)))),
           template_hole 3),
         template_app (template_hole 2, t_empty)))),
    ("UF.rec_sigma_ex",
     "primerec ?rf (Suc (length ?xs)) ==>
      (rec_exec (rec_sigma ?rf) (?xs @ [?x]) = 0) =
      (ALL t<=?x. rec_exec ?rf (?xs @ [t]) = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)))),
           template_hole 3),
         template_app (template_hole 2, t_empty)))),
    ("UF.halt_state_keep",
     "[| nonstop ?m (bl2wc (<?lm>)) ?stpa = 0;
         nonstop ?m (bl2wc (<?lm>)) ?stpb = 0 |]
      ==> conf ?m (bl2wc (<?lm>)) ?stpa = conf ?m (bl2wc (<?lm>)) ?stpb",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2))),
            template_var 1),
          template_hole 1),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2))),
            template_var 0),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2))),
           template_var 0)))),
    ("UF.map_cons_eq",
     "map ((%a. rec_exec a (?m # ?xs)) o recf.id (Suc (length ?xs)))
       [Suc 0..<Suc (length ?xs)] =
      map (%i. ?xs ! (i - 1)) [Suc 0..<Suc (length ?xs)]",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty), t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 6, template_hole 3)),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)))),
       template_app
        (template_app (template_hole 11, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 6, template_hole 3)),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)))))),
    ("UF.rec_t_eq_steps",
     "tm_wf0 ?tp ==>
      trpl_code (steps0 (Suc 0, Bk \<up> ?l, <?lm>) ?tp ?stp) =
      rec_exec rec_conf [code ?tp, bl2wc (<?lm>), ?stp]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 3),
                template_hole 15))
            )],
       template_equation
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_hole 15)),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_var 2),
                         template_hole 7)),
                     template_app (template_hole 6, template_var 1)))),
               template_app
                (template_app (template_hole 16, template_var 3),
                 template_hole 15)),
             template_var 0)),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 3)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 6, template_var 1))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 0))))))),
    ("UF.rec_accum_Suc_simp_rewrite",
     "primerec ?f (Suc (length ?xs)) ==>
      rec_exec (rec_accum ?f) (?xs @ [Suc ?x]) =
      rec_exec (rec_accum ?f) (?xs @ [?x]) * rec_exec ?f (?xs @ [Suc ?x])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 8, template_var 0)),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 8, template_var 0)),
                 template_hole 1))))))),
    ("UF.rec_sigma_Suc_simp_rewrite",
     "primerec ?f (Suc (length ?xs)) ==>
      rec_exec (rec_sigma ?f) (?xs @ [Suc ?x]) =
      rec_exec (rec_sigma ?f) (?xs @ [?x]) + rec_exec ?f (?xs @ [Suc ?x])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 8, template_var 0)),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 8, template_var 0)),
                 template_hole 1))))))),
    ("UF.fetch_state_eq",
     "[| block_map ?b = scan ?r; fetch ?tp ?st ?b = (?nact, ?ns);
         ?st <= length ?tp div 2 |]
      ==> newstat (code ?tp) ?st ?r = ?ns",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 5),
          template_app (template_hole 11, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2),
            template_var 5),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3)),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 2),
           template_var 4),
         template_var 0))),
    ("UF.fetch_action_eq",
     "[| block_map ?b = scan ?r; fetch ?tp ?st ?b = (?nact, ?ns);
         ?st <= length ?tp div 2 |]
      ==> actn (code ?tp) ?st ?r = action_map ?nact",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 5),
          template_app (template_hole 12, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2),
            template_var 5),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 3)),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 4),
         template_app (template_hole 0, template_var 1)))),
    ("UF.Suc_Suc_Suc_induct",
     "[| ?i < Suc (Suc (Suc 0)); primerec (?ys ! 0) ?n;
         primerec (?ys ! 1) ?n; primerec (?ys ! 2) ?n |]
      ==> primerec (?ys ! ?i) ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 7,
            template_app
             (template_hole 7,
              template_app (template_hole 7, template_hole 6)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 6)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_hole 0)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("UF.nonempty_listE",
     "Suc 0 <= length ?xs ==>
      map ((%a. rec_exec a (?m # ?xs)) o recf.id (Suc (length ?xs)))
       [Suc 0..<length ?xs] @
      [(?m # ?xs) ! length ?xs] =
      ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 12, template_hole 11),
          template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, t_empty), t_empty)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 12, template_hole 11)),
                 template_app (template_hole 10, template_var 1)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 1)),
                 template_app (template_hole 10, template_var 1))),
             template_hole 0)),
         template_var 1))),
    ("UF.prime_cn_reverse",
     "[| primerec (Cn ?n ?f ?gs) ?m;
         [| ?m = ?n; primerec ?f (length ?gs);
            ALL i<length ?gs. primerec (?gs ! i) ?n |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 4)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_app (template_hole 4, template_var 2))
                 )],
            template_implication
             ([template_predicate
                (template_app (template_hole 3, t_empty))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("UF.Min_false1",
     "[| ~ Min {uu. uu <= ?w & 0 < rec_exec ?rf (?xs @ [uu])} <= ?w;
         ?x <= ?w; 0 < rec_exec ?rf (?xs @ [?x]) |]
      ==> False",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_hole 9, template_app (template_hole 8, t_empty)),
              template_var 3)
            ),
        template_inequation (less_equals, template_var 0, template_var 3),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))))],
       template_predicate (template_hole 0))),
    ("UF.length_app",
     "length
       (get_fstn_args (arity ?rf - Suc 0) (arity ?rf - Suc 0) @
        [Cn (arity ?rf - Suc 0) (constn 0)
          [recf.id (arity ?rf - Suc 0) 0]]) =
      Suc (arity ?rf - Suc 0)",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 0)),
                   template_app (template_hole 6, template_hole 5))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 0)),
                 template_app (template_hole 6, template_hole 5)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_var 0)),
                       template_app (template_hole 6, template_hole 5))),
                   template_app (template_hole 2, template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_var 0)),
                           template_app
                            (template_hole 6, template_hole 5))),
                       template_hole 5)),
                   template_hole 0))),
             template_hole 0))),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)),
           template_app (template_hole 6, template_hole 5))))),
    ("UF.all_lemma",
     "[| primerec ?rf (Suc (length ?xs)); primerec ?rt (length ?xs) |]
      ==> rec_exec (rec_all ?rt ?rf) ?xs =
          (if ALL x<=rec_exec ?rt ?xs. 0 < rec_exec ?rf (?xs @ [x]) then 1
           else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app (template_hole 13, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_hole 0),
           template_hole 4)))),
    ("UF.ex_lemma",
     "[| primerec ?rf (Suc (length ?xs)); primerec ?rt (length ?xs) |]
      ==> rec_exec (rec_ex ?rt ?rf) ?xs =
          (if EX x<=rec_exec ?rt ?xs. 0 < rec_exec ?rf (?xs @ [x]) then 1
           else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app (template_hole 13, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_hole 0),
           template_hole 4)))),
    ("UF.modify_tprog_fetch_even",
     "[| ?st <= length ?tp div 2; 0 < ?st |]
      ==> modify_tprog ?tp ! (4 * (?st - Suc 0)) =
          action_map (fst (?tp ! (2 * (?st - Suc 0))))",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 0)),
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_hole 11)))),
        template_inequation (less_than, template_hole 9, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 12, template_hole 11)))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 3, template_hole 9)))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_hole 11))),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app (template_hole 3, template_hole 9))))))))),
    ("UF.state_in_range_step",
     "[| ?a <= length ?A div 2; step0 (?a, ?b, ?c) ?A = (?st, ?l, ?r);
         tm_wf0 ?A |]
      ==> ?st <= length ?A div 2",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 5)),
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_hole 7)))),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 6),
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3))),
            template_app
             (template_app (template_hole 2, template_var 5),
              template_hole 1)),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 2, template_var 5),
                template_hole 1))
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 5)),
           template_app
            (template_hole 9,
             template_app (template_hole 8, template_hole 7)))))),
    ("UF.conf_decode1",
     "[| ?m ~= ?n; ?m ~= ?k; ?k ~= ?n |]
      ==> Max {u. Pi ?m ^ u dvd Pi ?m ^ ?l * Pi ?n ^ ?st * Pi ?k ^ ?r} =
          ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4)),
        template_negation
         (template_equation (template_var 5, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_var 4))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_var 2))),
    ("UF.modify_tprog_fetch_odd",
     "[| ?st <= length ?tp div 2; 0 < ?st |]
      ==> modify_tprog ?tp ! Suc (Suc (4 * (?st - Suc 0))) =
          action_map (fst (?tp ! Suc (2 * (?st - Suc 0))))",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 0)),
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_hole 11)))),
        template_inequation (less_than, template_hole 9, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_hole 5,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 13,
                     template_app
                      (template_hole 12,
                       template_app (template_hole 12, template_hole 11)))),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 5, template_hole 9)))))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 13,
                       template_app (template_hole 12, template_hole 11))),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_hole 5, template_hole 9)))))))))),
    ("UF.terminate_halt_lemma",
     "[| rec_exec rec_nonstop ([?m, ?r] @ [?t]) = 0;
         ALL i<?t. 0 < rec_exec rec_nonstop ([?m, ?r] @ [i]) |]
      ==> terminate rec_halt [?m, ?r]",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_hole 9),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_hole 6))),
              template_app
               (template_app (template_hole 7, template_var 0),
                template_hole 6))),
          template_hole 5),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 6)))
           ))),
    ("UF.Sigma_max_point",
     "[| ALL k<?ma. ?f (?xs @ [k]) = 1; ALL k>=?ma. ?f (?xs @ [k]) = 0;
         ?ma <= ?w |]
      ==> UF.Sigma ?f (?xs @ [?w]) = ?ma",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 4))),
         template_var 3))),
    ("UF.lgR_set_strengthen",
     "[| Suc 0 < ?x; Suc 0 < ?y; lgR [?x, ?y, ?xa] |]
      ==> {u. lgR [?x, ?y, u]} = {ya. ya <= ?x & lgR [?x, ?y, ya]}",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_var 2),
        template_inequation
         (less_than, template_app (template_hole 8, template_hole 7),
          template_var 1),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_app (template_hole 5, template_var 0),
                    template_hole 4))))
            )],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, t_empty)))),
    ("UF.embranch_all0",
     "[| ALL j<length ?rcs. rec_exec (?rcs ! j) ?xs = 0;
         length ?rgs = length ?rcs; ?rcs ~= [];
         list_all (%rf. primerec rf (length ?xs)) (?rgs @ ?rcs) |]
      ==> rec_exec (rec_embranch (zip ?rgs ?rcs)) ?xs = 0",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_equation
         (template_app (template_hole 13, template_var 0),
          template_app (template_hole 13, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 1),
         template_hole 9))),
    ("UF.expand_conj_in_set",
     "{x. x <= Suc ?w & ?Rr (?xs @ [x])} =
      (if ?Rr (?xs @ [Suc ?w])
       then insert (Suc ?w) {x. x <= ?w & ?Rr (?xs @ [x])}
       else {x. x <= ?w & ?Rr (?xs @ [x])})",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_var 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 5, template_var 2)),
                   template_hole 2)))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 5, template_var 2)),
             template_app (template_hole 8, t_empty))),
         template_app (template_hole 8, t_empty)))),
    ("UF.embranch_exec_0",
     "[| rec_exec ?aa ?xs = 0; zip ?rgs ?list ~= [];
         list_all (%rf. primerec rf (length ?xs))
          ([?a, ?aa] @ ?rgs @ ?list) |]
      ==> rec_exec (rec_embranch ((?a, ?aa) # zip ?rgs ?list)) ?xs =
          rec_exec (rec_embranch (zip ?rgs ?list)) ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_var 4),
            template_var 3),
          template_hole 13),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_app
                     (template_app (template_hole 4, template_var 4),
                      template_hole 3))),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_var 1)))),
           template_var 3),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_var 1))),
           template_var 3)))),
    ("UF.Embranch_0",
     "[| length ?rgs = ?k; length ?rcs = ?k; 0 < ?k;
         ALL j<?k. rec_exec (?rcs ! j) ?xs = 0 |]
      ==> Embranch
           (zip (map rec_exec ?rgs)
             (map (%r args. 0 < rec_exec r args) ?rcs))
           ?xs =
          0",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 10, template_var 1), template_var 2),
        template_inequation (less_than, template_hole 8, template_var 2),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 5),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, t_empty), template_var 1))),
           template_var 0),
         template_hole 8))),
    ("UF.terminate_F",
     "[| steps0 (Suc 0, Bk \<up> ?l, <?lm>) ?tp ?stp =
         (0, Bk \<up> ?m, Oc \<up> ?rs @ Bk \<up> ?n);
         tm_wf0 ?tp; 0 < ?rs |]
      ==> terminate rec_F [code ?tp, bl2wc (<?lm>)]",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_hole 15)),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app (template_hole 13, template_var 6),
                        template_hole 12)),
                    template_app (template_hole 11, template_var 5)))),
              template_app
               (template_app (template_hole 10, template_var 4),
                template_hole 15)),
            template_var 3),
          template_app
           (template_app (template_hole 17, template_hole 15),
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_hole 12)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_hole 8)),
                template_app
                 (template_app (template_hole 13, template_var 0),
                  template_hole 12))))),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 10, template_var 4),
                template_hole 15))
            ),
        template_inequation (less_than, template_hole 15, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 4)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 11, template_var 5))),
                 template_hole 0)))
           ))),
    ("UF.terminate_halt",
     "[| steps0 (Suc 0, Bk \<up> ?l, <?lm>) ?tp ?stp =
         (0, Bk \<up> ?m, Oc \<up> ?rs @ Bk \<up> ?n);
         tm_wf0 ?tp; 0 < ?rs |]
      ==> terminate rec_halt [code ?tp, bl2wc (<?lm>)]",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_hole 15)),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app (template_hole 13, template_var 6),
                        template_hole 12)),
                    template_app (template_hole 11, template_var 5)))),
              template_app
               (template_app (template_hole 10, template_var 4),
                template_hole 15)),
            template_var 3),
          template_app
           (template_app (template_hole 17, template_hole 15),
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_hole 12)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_hole 8)),
                template_app
                 (template_app (template_hole 13, template_var 0),
                  template_hole 12))))),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 10, template_var 4),
                template_hole 15))
            ),
        template_inequation (less_than, template_hole 15, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 4)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 11, template_var 5))),
                 template_hole 0)))
           ))),
    ("UF.Suc_Suc_Suc_Suc_induct",
     "[| ?i < Suc (Suc (Suc (Suc 0))); ?i = 0 ==> ?P ?i; ?i = 1 ==> ?P ?i;
         ?i = 2 ==> ?P ?i; ?i = 3 ==> ?P ?i |]
      ==> ?P ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 7,
            template_app
             (template_hole 7,
              template_app
               (template_hole 7,
                template_app (template_hole 7, template_hole 6))))),
        template_implication
         ([template_equation (template_var 1, template_hole 6)],
          template_predicate
           (template_app (template_var 0, template_var 1))),
        template_implication
         ([template_equation (template_var 1, template_hole 4)],
          template_predicate
           (template_app (template_var 0, template_var 1))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))],
          template_predicate
           (template_app (template_var 0, template_var 1))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_hole 1)))],
          template_predicate
           (template_app (template_var 0, template_var 1)))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("UF.loR_set_strengthen",
     "[| ?xa <= ?x; loR [?x, ?y, ?xa]; Suc 0 < ?x; Suc 0 < ?y |]
      ==> {u. loR [?x, ?y, u]} = {ya. ya <= ?x & loR [?x, ?y, ya]}",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_hole 6))))
            ),
        template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_var 0)],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 1, t_empty)))),
    ("UF.nonstop_t_eq",
     "[| steps0 (Suc 0, Bk \<up> ?l, <?lm>) ?tp ?stp =
         (0, Bk \<up> ?m, Oc \<up> ?rs @ Bk \<up> ?n);
         tm_wf0 ?tp; 0 < ?rs |]
      ==> rec_exec rec_nonstop [code ?tp, bl2wc (<?lm>), ?stp] = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app
                   (template_hole 18,
                    template_app (template_hole 17, template_hole 16)),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app (template_hole 14, template_var 6),
                        template_hole 13)),
                    template_app (template_hole 12, template_var 5)))),
              template_app
               (template_app (template_hole 11, template_var 4),
                template_hole 16)),
            template_var 3),
          template_app
           (template_app (template_hole 18, template_hole 16),
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_hole 13)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 14, template_var 1),
                    template_hole 9)),
                template_app
                 (template_app (template_hole 14, template_var 0),
                  template_hole 13))))),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 11, template_var 4),
                template_hole 16))
            ),
        template_inequation (less_than, template_hole 16, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 4)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 12, template_var 5))),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_hole 0)))),
         template_hole 16))),
    ("UF.F_correct",
     "[| steps0 (Suc 0, Bk \<up> ?l, <?lm>) ?tp ?stp =
         (0, Bk \<up> ?m, Oc \<up> ?rs @ Bk \<up> ?n);
         tm_wf0 ?tp; 0 < ?rs |]
      ==> rec_exec rec_F [code ?tp, bl2wc (<?lm>)] = ?rs - Suc 0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app
                   (template_hole 19,
                    template_app (template_hole 18, template_hole 17)),
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_app (template_hole 15, template_var 6),
                        template_hole 14)),
                    template_app (template_hole 13, template_var 5)))),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_hole 17)),
            template_var 3),
          template_app
           (template_app (template_hole 19, template_hole 17),
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_hole 14)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 15, template_var 1),
                    template_hole 10)),
                template_app
                 (template_app (template_hole 15, template_var 0),
                  template_hole 14))))),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 12, template_var 4),
                template_hole 17))
            ),
        template_inequation (less_than, template_hole 17, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 4)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 13, template_var 5))),
               template_hole 1))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 18, template_hole 17))))),
    ("UF.modify_tprog_fetch_action",
     "[| ?st <= length ?tp div 2; 0 < ?st; ?b = 1 | ?b = 0 |]
      ==> modify_tprog ?tp ! (4 * (?st - Suc 0) + 2 * ?b) =
          action_map (fst (?tp ! (2 * (?st - Suc 0) + ?b)))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 1)),
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_hole 14)))),
        template_inequation (less_than, template_hole 12, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_hole 9)),
              template_app
               (template_app (template_hole 10, template_var 0),
                template_hole 12))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 1)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 16,
                     template_app
                      (template_hole 15,
                       template_app (template_hole 15, template_hole 14)))),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app (template_hole 3, template_hole 12)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 16,
                   template_app (template_hole 15, template_hole 14))),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 16,
                         template_app
                          (template_hole 15, template_hole 14))),
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app (template_hole 3, template_hole 12)))),
                 template_var 0))))))),
    ("UF.modify_tprog_fetch_state",
     "[| ?st <= length ?tp div 2; 0 < ?st; ?b = 1 | ?b = 0 |]
      ==> modify_tprog ?tp ! Suc (4 * (?st - Suc 0) + 2 * ?b) =
          snd (?tp ! (2 * (?st - Suc 0) + ?b))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 1)),
            template_app
             (template_hole 15,
              template_app (template_hole 14, template_hole 13)))),
        template_inequation (less_than, template_hole 11, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_hole 8)),
              template_app
               (template_app (template_hole 9, template_var 0),
                template_hole 11))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 15,
                       template_app
                        (template_hole 14,
                         template_app
                          (template_hole 14, template_hole 13)))),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app (template_hole 5, template_hole 11)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 15,
                     template_app (template_hole 14, template_hole 13))),
                 template_var 0)))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 15,
                       template_app (template_hole 14, template_hole 13))),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app (template_hole 5, template_hole 11)))),
               template_var 0)))))),
    ("UF.sigma_minr_lemma",
     "primerec ?rf (Suc (length ?xs)) ==>
      UF.Sigma
       (rec_exec
         (rec_all (recf.id (Suc (length ?xs)) (length ?xs))
           (Cn (Suc (Suc (length ?xs))) rec_not
             [Cn (Suc (Suc (length ?xs))) ?rf
               (get_fstn_args (Suc (Suc (length ?xs))) (length ?xs) @
                [recf.id (Suc (Suc (length ?xs))) (Suc (length ?xs))])])))
       (?xs @ [?w]) =
      Minr (%args. 0 < rec_exec ?rf args) ?xs ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 2),
              template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_hole 18,
                         template_app (template_hole 17, template_var 1))),
                     template_app (template_hole 17, template_var 1))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_hole 18,
                         template_app
                          (template_hole 18,
                           template_app
                            (template_hole 17, template_var 1)))),
                     template_hole 10),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_hole 18,
                               template_app
                                (template_hole 18,
                                 template_app
                                  (template_hole 17, template_var 1)))),
                           template_var 2),
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_hole 18,
                                   template_app
                                    (template_hole 18,
                                     template_app
(template_hole 17, template_var 1)))),
                               template_app
                                (template_hole 17, template_var 1))),
                           template_app
                            (template_app
                              (template_hole 9,
                               template_app
                                (template_app
                                  (template_hole 12,
                                   template_app
                                    (template_hole 18,
                                     template_app
(template_hole 18, template_app (template_hole 17, template_var 1)))),
                                 template_app
                                  (template_hole 18,
                                   template_app
                                    (template_hole 17, template_var 1)))),
                             template_hole 6)))),
                     template_hole 6))))),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("UF.halt_least_step",
     "[| steps0 (Suc 0, Bk \<up> ?l, <?lm>) ?tp ?stp =
         (0, Bk \<up> ?m, Oc \<up> ?rs @ Bk \<up> ?n);
         tm_wf0 ?tp; 0 < ?rs |]
      ==> EX stp.
             nonstop (code ?tp) (bl2wc (<?lm>)) stp = 0 &
             (ALL stp'.
                 nonstop (code ?tp) (bl2wc (<?lm>)) stp' = 0 -->
                 stp <= stp')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app
                   (template_hole 20,
                    template_app (template_hole 19, template_hole 18)),
                  template_app
                   (template_app
                     (template_hole 17,
                      template_app
                       (template_app (template_hole 16, template_var 6),
                        template_hole 15)),
                    template_app (template_hole 14, template_var 5)))),
              template_app
               (template_app (template_hole 13, template_var 4),
                template_hole 18)),
            template_var 3),
          template_app
           (template_app (template_hole 20, template_hole 18),
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 2),
                  template_hole 15)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 16, template_var 1),
                    template_hole 11)),
                template_app
                 (template_app (template_hole 16, template_var 0),
                  template_hole 15))))),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 13, template_var 4),
                template_hole 18))
            ),
        template_inequation (less_than, template_hole 18, template_var 1)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("UF.Suc_5_induct",
     "[| ?i < Suc (Suc (Suc (Suc (Suc 0)))); ?i = 0 ==> ?P 0;
         ?i = 1 ==> ?P 1; ?i = 2 ==> ?P 2; ?i = 3 ==> ?P 3;
         ?i = 4 ==> ?P 4 |]
      ==> ?P ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 7,
            template_app
             (template_hole 7,
              template_app
               (template_hole 7,
                template_app
                 (template_hole 7,
                  template_app (template_hole 7, template_hole 6)))))),
        template_implication
         ([template_equation (template_var 1, template_hole 6)],
          template_predicate
           (template_app (template_var 0, template_hole 6))),
        template_implication
         ([template_equation (template_var 1, template_hole 4)],
          template_predicate
           (template_app (template_var 0, template_hole 4))),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))],
          template_predicate
           (
              template_app
               (template_var 0,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_hole 1)))
              )),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_hole 1)))],
          template_predicate
           (
              template_app
               (template_var 0,
                template_app
                 (template_hole 3,
                  template_app (template_hole 0, template_hole 1)))
              )),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 2, template_hole 1))))],
          template_predicate
           (
              template_app
               (template_var 0,
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 2, template_hole 1))))
              ))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("UF.embranch_lemma",
     "[| length ?rgs = ?n; length ?rcs = ?n; 0 < ?n;
         EX i<?n.
            rec_exec (?rcs ! i) ?xs = 1 &
            (ALL j<?n. j ~= i --> rec_exec (?rcs ! j) ?xs = 0);
         list_all (%rf. primerec rf (length ?xs)) (?rgs @ ?rcs) |]
      ==> rec_exec (rec_embranch (zip ?rgs ?rcs)) ?xs =
          Embranch
           (zip (map rec_exec ?rgs)
             (map (%r args. 0 < rec_exec r args) ?rcs))
           ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 20, template_var 3), template_var 2),
        template_equation
         (template_app (template_hole 20, template_var 1), template_var 2),
        template_inequation (less_than, template_hole 18, template_var 2),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 15),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, t_empty), template_var 1))),
           template_var 0)))),
    ("UF.Sigma_Max_lemma",
     "primerec ?rf (Suc (length ?xs)) ==>
      UF.Sigma
       (rec_exec
         (Cn (Suc (Suc (length ?xs))) rec_not
           [rec_all (recf.id (Suc (Suc (length ?xs))) (length ?xs))
             (Cn (Suc (Suc (Suc (length ?xs)))) rec_disj
               [Cn (Suc (Suc (Suc (length ?xs)))) rec_le
                 [recf.id (Suc (Suc (Suc (length ?xs))))
                   (Suc (Suc (length ?xs))),
                  recf.id (Suc (Suc (Suc (length ?xs))))
                   (Suc (length ?xs))],
                Cn (Suc (Suc (Suc (length ?xs)))) rec_not
                 [Cn (Suc (Suc (Suc (length ?xs)))) ?rf
                   (get_fstn_args (Suc (Suc (Suc (length ?xs))))
                     (length ?xs) @
                    [recf.id (Suc (Suc (Suc (length ?xs))))
                      (Suc (Suc (length ?xs)))])]])]))
       ((?xs @ [?w]) @ [?w]) =
      Maxr (%args. 0 < rec_exec ?rf args) ?xs ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 2),
              template_app
               (template_hole 20,
                template_app (template_hole 19, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 17,
             template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_hole 20,
                       template_app
                        (template_hole 20,
                         template_app (template_hole 19, template_var 1)))),
                   template_hole 14),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_hole 20,
                               template_app
                                (template_hole 20,
                                 template_app
                                  (template_hole 19, template_var 1)))),
                           template_app
                            (template_hole 19, template_var 1))),
                       template_app
                        (template_app
                          (template_app
                            (template_hole 15,
                             template_app
                              (template_hole 20,
                               template_app
                                (template_hole 20,
                                 template_app
                                  (template_hole 20,
                                   template_app
                                    (template_hole 19, template_var 1))))),
                           template_hole 10),
                         template_app
                          (template_app
                            (template_hole 13,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 15,
                                   template_app
                                    (template_hole 20,
                                     template_app
(template_hole 20,
 template_app
  (template_hole 20, template_app (template_hole 19, template_var 1))))),
                                 template_hole 9),
                               template_app
                                (template_app
                                  (template_hole 13,
                                   template_app
                                    (template_app
(template_hole 11,
 template_app
  (template_hole 20,
   template_app
    (template_hole 20,
     template_app
      (template_hole 20,
       template_app (template_hole 19, template_var 1))))),
                                     template_app
(template_hole 20,
 template_app
  (template_hole 20, template_app (template_hole 19, template_var 1))))),
                                 template_app
                                  (template_app
                                    (template_hole 13,
                                     template_app
(template_app
  (template_hole 11,
   template_app
    (template_hole 20,
     template_app
      (template_hole 20,
       template_app
        (template_hole 20,
         template_app (template_hole 19, template_var 1))))),
 template_app
  (template_hole 20, template_app (template_hole 19, template_var 1)))),
                                   template_hole 8)))),
                           template_app
                            (template_app
                              (template_hole 13,
                               template_app
                                (template_app
                                  (template_app
                                    (template_hole 15,
                                     template_app
(template_hole 20,
 template_app
  (template_hole 20,
   template_app
    (template_hole 20, template_app (template_hole 19, template_var 1))))),
                                   template_hole 14),
                                 template_app
                                  (template_app
                                    (template_hole 13,
                                     template_app
(template_app
  (template_app
    (template_hole 15,
     template_app
      (template_hole 20,
       template_app
        (template_hole 20,
         template_app
          (template_hole 20,
           template_app (template_hole 19, template_var 1))))),
   template_var 2),
 template_app
  (template_app
    (template_hole 7,
     template_app
      (template_app
        (template_hole 6,
         template_app
          (template_hole 20,
           template_app
            (template_hole 20,
             template_app
              (template_hole 20,
               template_app (template_hole 19, template_var 1))))),
       template_app (template_hole 19, template_var 1))),
   template_app
    (template_app
      (template_hole 13,
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 20,
             template_app
              (template_hole 20,
               template_app
                (template_hole 20,
                 template_app (template_hole 19, template_var 1))))),
         template_app
          (template_hole 20,
           template_app
            (template_hole 20,
             template_app (template_hole 19, template_var 1))))),
     template_hole 8)))),
                                   template_hole 8))),
                             template_hole 8))))),
                   template_hole 8)))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("UF.exec_tmp",
     "rec_exec
       (rec_all
         (Cn 2 rec_minus [recf.id 2 0, Cn 2 (constn (Suc 0)) [recf.id 2 0]])
         (Cn 3 rec_noteq
           [Cn 3 rec_mult [recf.id 3 (Suc 0), recf.id 3 2], recf.id 3 0]))
       [?x, ?k] =
      (if ALL w<=rec_exec
                  (Cn 2 rec_minus
                    [recf.id 2 0, Cn 2 (constn (Suc 0)) [recf.id 2 0]])
                  [?x, ?k].
             0 < rec_exec
                  (Cn 3 rec_noteq
                    [Cn 3 rec_mult [recf.id 3 (Suc 0), recf.id 3 2],
                     recf.id 3 0])
                  ([?x, ?k] @ [w])
       then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 24,
           template_app
            (template_app
              (template_hole 23,
               template_app
                (template_app
                  (template_app
                    (template_hole 22,
                     template_app
                      (template_hole 21,
                       template_app (template_hole 20, template_hole 19))),
                   template_hole 18),
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app
                        (template_hole 16,
                         template_app
                          (template_hole 21,
                           template_app
                            (template_hole 20, template_hole 19))),
                       template_hole 15)),
                   template_app
                    (template_app
                      (template_hole 17,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 22,
                             template_app
                              (template_hole 21,
                               template_app
                                (template_hole 20, template_hole 19))),
                           template_app
                            (template_hole 14,
                             template_app
                              (template_hole 13, template_hole 15))),
                         template_app
                          (template_app
                            (template_hole 17,
                             template_app
                              (template_app
                                (template_hole 16,
                                 template_app
                                  (template_hole 21,
                                   template_app
                                    (template_hole 20, template_hole 19))),
                               template_hole 15)),
                           template_hole 12))),
                     template_hole 12)))),
             template_app
              (template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_hole 21,
                     template_app (template_hole 11, template_hole 19))),
                 template_hole 10),
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 22,
                         template_app
                          (template_hole 21,
                           template_app
                            (template_hole 11, template_hole 19))),
                       template_hole 9),
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app
                          (template_app
                            (template_hole 16,
                             template_app
                              (template_hole 21,
                               template_app
                                (template_hole 11, template_hole 19))),
                           template_app
                            (template_hole 13, template_hole 15))),
                       template_app
                        (template_app
                          (template_hole 17,
                           template_app
                            (template_app
                              (template_hole 16,
                               template_app
                                (template_hole 21,
                                 template_app
                                  (template_hole 11, template_hole 19))),
                             template_app
                              (template_hole 21,
                               template_app
                                (template_hole 20, template_hole 19)))),
                         template_hole 12)))),
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app
                        (template_hole 16,
                         template_app
                          (template_hole 21,
                           template_app
                            (template_hole 11, template_hole 19))),
                       template_hole 15)),
                   template_hole 12))))),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_hole 7))),
       template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_hole 0),
         template_hole 15)))]:
   (string * thm * template) list
### theory "Draft.UFMoreTemplates"
### 0.505s elapsed time, 0.751s cpu time, 0.128s GC time
val it = (): unit
