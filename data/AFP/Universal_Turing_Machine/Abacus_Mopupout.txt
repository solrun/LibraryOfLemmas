Loading theory "Draft.Turing" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.Abacus_Mopup" via "Draft.Uncomputable" via "Draft.Turing_Hoare")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.526s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.229s elapsed time, 0.933s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.303s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.018s elapsed time, 3.847s cpu time, 0.841s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.082s elapsed time, 3.968s cpu time, 0.764s GC time
Found termination order: "size <*mlex*> {}"
class tape = type +
  fixes tape_of :: "'a => cell list"
instantiation
  nat :: tape
  tape_of_nat == tape_of :: nat => cell list
instantiation
  list :: (tape) tape
  tape_of_list == tape_of :: 'a list => cell list
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
instantiation
  prod :: (tape, tape) tape
  tape_of_prod == tape_of :: 'a * 'b => cell list
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Turing"
### 1.786s elapsed time, 6.114s cpu time, 1.020s GC time
Loading theory "Draft.Turing_Hoare" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.Abacus_Mopup" via "Draft.Uncomputable")
Found termination order: "{}"
### Ambiguous input (line 41 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q))))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>Hoare_halt" ("_position" P) ("_position" p) ("_position" Q))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" Q))
###     ("_cargs" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" Q) ("_position" B)
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing.tm_comp"
###     ("_applC" ("_Finset" ("_position" P)) ("_position" A))
###     ("_applC" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###     ("\<^const>Turing.tm_comp" ("_position" A) ("_position" B))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 155 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P'))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P') ("_position" p)
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Turing_Hoare"
### 0.112s elapsed time, 0.232s cpu time, 0.000s GC time
Loading theory "Draft.Uncomputable" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.Abacus_Mopup")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.993s elapsed time, 6.300s cpu time, 1.030s GC time
Loading theory "Draft.Templates" (required by "Draft.Abacus_MopupMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.156s cpu time, 0.048s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Abacus_MopupMoreTemplates")
Found termination order: "{}"
### Ambiguous input (line 117 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_begin1) ("_position" n))
###       ("_position" tcopy_begin)
###       ("_applC" ("_position" inv_begin0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_begin)
###         ("_Finset" ("_applC" ("_position" inv_begin0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 181 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_begin1) ("_position" n))
###       ("_position" tcopy_begin)
###       ("_applC" ("_position" inv_begin0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_begin)
###         ("_Finset" ("_applC" ("_position" inv_begin0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.164s cpu time, 0.090s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 548 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" inv_loop1) ("_position" n))
###     ("_position" tcopy_loop)
###     ("_applC" ("_position" inv_loop0) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" inv_loop1) ("_position" n)))
###     ("_cargs" ("_position" tcopy_loop)
###       ("_Finset" ("_applC" ("_position" inv_loop0) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 784 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_end1) ("_position" n))
###       ("_position" tcopy_end)
###       ("_applC" ("_position" inv_end0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_Finset" ("_applC" ("_position" inv_end1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_end)
###         ("_Finset" ("_applC" ("_position" inv_end0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 815 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" inv_begin1) ("_position" x)) ("_position" tcopy)
###     ("_applC" ("_position" inv_end0) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" x)))
###     ("_cargs" ("_position" tcopy)
###       ("_Finset" ("_applC" ("_position" inv_end0) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 852 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_tcopy) ("_position" n)) ("_position" tcopy)
###     ("_applC" ("_position" post_tcopy) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" pre_tcopy) ("_position" n)))
###     ("_cargs" ("_position" tcopy)
###       ("_Finset" ("_applC" ("_position" post_tcopy) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" dither_halt_inv))
###     ("_cargs" ("_position" dither)
###       ("_Finset" ("_position" dither_halt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" dither_halt_inv)
###     ("_position" dither) ("_position" dither_halt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 923 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" halts) ("_cargs" ("_position" p) ("_position" ns)))
###   ("_applC"
###     ("_Finset"
###       ("_lambda" ("_position" tp)
###         ("\<^const>HOL.eq" ("_position" tp)
###           ("_tuple" ("\<^const>List.list.Nil")
###             ("_tuple_arg"
###               ("\<^const>Turing.tape_class.tape_of" ("_position" ns)))))))
###     ("_cargs" ("_position" p)
###       ("_Finset"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" k)
###               ("_idts" ("_position" n) ("_position" l)))
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>List.append"
###                     ("\<^const>Turing.tape_class.tape_of"
###                       ("_constrain" ("_position" n) ("_type_name" nat)))
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" l))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" halts) ("_cargs" ("_position" p) ("_position" ns)))
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_lambda" ("_position" tp)
###       ("\<^const>HOL.eq" ("_position" tp)
###         ("_tuple" ("\<^const>List.list.Nil")
###           ("_tuple_arg"
###             ("\<^const>Turing.tape_class.tape_of" ("_position" ns))))))
###     ("_position" p)
###     ("_lambda" ("_position" tp)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" k) ("_idts" ("_position" n) ("_position" l)))
###         ("\<^const>HOL.eq" ("_position" tp)
###           ("_tuple"
###             ("\<^const>Turing.exponent" ("_position" Bk) ("_position" k))
###             ("_tuple_arg"
###               ("\<^const>List.append"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_constrain" ("_position" n) ("_type_name" nat)))
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" l))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 951 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" halts)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_position" tp)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple" ("_list" ("_position" Bk))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                       ("_tuple_arg" ("_position" ns)))))))))
###         ("_cargs" ("_position" H)
###           ("_Finset"
###             ("_lambda" ("_position" tp)
###               ("\<^const>HOL.Ex_binder" ("_position" k)
###                 ("\<^const>HOL.eq" ("_position" tp)
###                   ("_tuple"
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" k))
###                     ("_tuple_arg"
###                       ("\<^const>Turing.tape_class.tape_of"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat))))))))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" halts)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_halt"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.eq" ("_position" tp)
###             ("_tuple" ("_list" ("_position" Bk))
###               ("_tuple_arg"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                     ("_tuple_arg" ("_position" ns))))))))
###         ("_position" H)
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder" ("_position" k)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_constrain" ("\<^const>Groups.zero_class.zero")
###                       ("_type_name" nat))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 953 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" halts)
###           ("_cargs" ("_position" M) ("_position" ns)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_position" tp)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple" ("_list" ("_position" Bk))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                       ("_tuple_arg" ("_position" ns)))))))))
###         ("_cargs" ("_position" H)
###           ("_Finset"
###             ("_lambda" ("_position" tp)
###               ("\<^const>HOL.Ex_binder" ("_position" k)
###                 ("\<^const>HOL.eq" ("_position" tp)
###                   ("_tuple"
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" k))
###                     ("_tuple_arg"
###                       ("\<^const>Turing.tape_class.tape_of"
###                         ("_constrain" ("\<^const>Groups.one_class.one")
###                           ("_type_name" nat))))))))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" halts)
###           ("_cargs" ("_position" M) ("_position" ns)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_halt"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.eq" ("_position" tp)
###             ("_tuple" ("_list" ("_position" Bk))
###               ("_tuple_arg"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                     ("_tuple_arg" ("_position" ns))))))))
###         ("_position" H)
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder" ("_position" k)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_constrain" ("\<^const>Groups.one_class.one")
###                       ("_type_name" nat))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale uncomputable
  fixes code :: "(action * nat) list => nat"
    and H :: "(action * nat) list"
  assumes "uncomputable code H"
### Ambiguous input (line 969 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("_Finset"
###       ("_applC" ("_position" pre_H_inv)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("_cargs" ("_position" H) ("_Finset" ("_position" post_H_halt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_H_inv)
###       ("_cargs" ("_position" M) ("_position" ns)))
###     ("_position" H) ("_position" post_H_halt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 974 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("_Finset"
###       ("_applC" ("_position" pre_H_inv)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("_cargs" ("_position" H) ("_Finset" ("_position" post_H_unhalt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_H_inv)
###       ("_cargs" ("_position" M) ("_position" ns)))
###     ("_position" H) ("_position" post_H_unhalt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Uncomputable"
### 2.887s elapsed time, 5.533s cpu time, 2.350s GC time
Loading theory "Draft.Abacus_Mopup" (required by "Draft.Abacus_MopupMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### mopup_inv (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1 ==
### if ?s1 = 0 then mopup_stop (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
### else if ?s1 <= 2 * ?n1
###      then if ?s1 mod 2 = 1
###           then mopup_bef_erase_a (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###           else mopup_bef_erase_b (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###      else if ?s1 = 2 * ?n1 + 1
###           then mopup_jump_over1 (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###           else if ?s1 = 2 * ?n1 + 2
###                then mopup_aft_erase_a (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###                else if ?s1 = 2 * ?n1 + 3
###                     then mopup_aft_erase_b (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###                     else if ?s1 = 2 * ?n1 + 4
###                          then mopup_aft_erase_c (?s1, ?l1, ?r1) ?lm1 ?n1
###                                ?ires1
###                          else if ?s1 = 2 * ?n1 + 5
###                               then mopup_left_moving (?s1, ?l1, ?r1) ?lm1
###                                     ?n1 ?ires1
###                               else if ?s1 = 2 * ?n1 + 6
###                                    then mopup_jump_over2 (?s1, ?l1, ?r1)
###    ?lm1 ?n1 ?ires1
###                                    else False
### theory "Draft.Abacus_Mopup"
### 1.099s elapsed time, 1.172s cpu time, 0.100s GC time
Loading theory "Draft.Abacus_MopupMoreTemplates"
val templateLemmas =
   [("Abacus_Mopup.wf_mopup", "tm_wf0 (mopup ?n)",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))
         )),
    ("Abacus_Mopup.mop_bef_length", "length (mopup_a ?n) = 4 * ?n",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 1, template_hole 0)))),
         template_var 0))),
    ("Abacus_Mopup.take_suc", "EX lna. Bk # Bk \<up> ?ln = Bk \<up> lna",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Abacus_Mopup.mopup_erase_nonempty",
     "mopup_bef_erase_a (?a, ?aa, []) ?lm ?n ?ires = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_hole 1))),
             template_var 2),
           template_var 1),
         template_var 0),
       template_hole 0)),
    ("Abacus_Mopup.mopup_erase_nonempty",
     "mopup_bef_erase_b (?a, ?aa, []) ?lm ?n ?ires = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_hole 1))),
             template_var 2),
           template_var 1),
         template_var 0),
       template_hole 0)),
    ("Abacus_Mopup.exp_ind", "?a \<up> Suc ?x = ?a \<up> ?x @ [?a]",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Abacus_Mopup.mod_2", "is_even ?x | ?x mod 2 = Suc 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app (template_hole 0, template_hole 1)))
         )),
    ("Abacus_Mopup.mod_ex2", "is_even ?a = (EX q. ?a = 2 * q)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_hole 2),
       template_app (template_hole 1, t_empty))),
    ("Abacus_Mopup.mopup_bef_erase",
     "mopup_bef_erase_b (?s, ?l, Oc # ?xs) ?lm ?n ?ires ==> ?l ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_app
                         (template_app (template_hole 4, template_hole 3),
                          template_var 3)))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 4, template_hole 0)))),
    ("Abacus_Mopup.mod_ex1",
     "(?a mod 2 = Suc 0) = (EX q. ?a = Suc (2 * q))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)))),
         template_app (template_hole 3, template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("Abacus_Mopup.mopup_erase_nonempty",
     "mopup_aft_erase_b (2 * ?n + 3, ?aa, []) ?lm ?n ?ires = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5, template_hole 4))),
                         template_var 3)),
                     template_app
                      (template_hole 6,
                       template_app (template_hole 3, template_hole 4)))),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1))),
             template_var 1),
           template_var 3),
         template_var 0),
       template_hole 0)),
    ("Abacus_Mopup.mopup_jump_over2_nonempty",
     "mopup_jump_over2 (2 * ?n + 6, ?l, []) ?lm ?n ?ires = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5, template_hole 4))),
                         template_var 3)),
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 3, template_hole 4))))),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1))),
             template_var 1),
           template_var 3),
         template_var 0),
       template_hole 0)),
    ("Abacus_Mopup.mopup_aft_erase_b_no_Oc",
     "mopup_aft_erase_b (2 * ?n + 3, ?l, Oc # ?xs) ?lm ?n ?ires = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_hole 5))),
                         template_var 4)),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 4, template_hole 5)))),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 2)))),
             template_var 1),
           template_var 4),
         template_var 0),
       template_hole 0)),
    ("Abacus_Mopup.mopup_aft_erase_a_nonempty",
     "mopup_aft_erase_a (Suc (Suc (2 * ?n)), ?l, ?xs) ?lm ?n ?ires ==>
      ?l ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 8,
                            template_app
                             (template_app
                               (template_hole 7,
                                template_app
                                 (template_hole 6,
                                  template_app
                                   (template_hole 5, template_hole 4))),
                              template_var 4)))),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 3, template_hole 0)))),
    ("Abacus_Mopup.tape_of_nl_cons",
     "<?m # ?lm> =
      (if ?lm = [] then Oc \<up> Suc ?m else Oc \<up> Suc ?m @ Bk # <?lm>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_hole 3)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app (template_hole 10, template_var 0))))
           ))),
    ("Abacus_Mopup.mopup_bef_erase",
     "mopup_bef_erase_a (?s, ?l, []) ?lm ?n ?ires ==>
      mopup_bef_erase_a (?s, ?l, [Bk]) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 4),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_hole 2))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_hole 2)))),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Abacus_Mopup.abc_mopup_measure_induct",
     "(!!n. ~ ?P (?f n) ==> (?f (Suc n), ?f n) : abc_mopup_measure) ==>
      EX n. ?P (?f n)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Abacus_Mopup.mopup_left_moving_nonempty_snd",
     "mopup_left_moving (2 * ?n + 5, ?l, ?xs) ?lm ?n ?ires ==> ?l ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_hole 9,
                            template_app
                             (template_app
                               (template_hole 8,
                                template_app
                                 (template_hole 7,
                                  template_app
                                   (template_hole 6, template_hole 5))),
                              template_var 4)),
                          template_app
                           (template_hole 7,
                            template_app
                             (template_hole 4,
                              template_app
                               (template_hole 6, template_hole 5))))),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 3, template_hole 0)))),
    ("Abacus_Mopup.mopup_inv_start",
     "?n < length ?am ==>
      mopup_inv (Suc 0, Bk # Bk # ?ires, <?am> @ Bk \<up> ?k) ?am ?n ?ires",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 10, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_hole 3),
                           template_app
                            (template_app
                              (template_hole 4, template_hole 3),
                             template_var 1))),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 2)),
                         template_app
                          (template_app (template_hole 0, template_var 0),
                           template_hole 3))))),
                 template_var 2),
               template_var 3),
             template_var 1)
           ))),
    ("Abacus_Mopup.mopup_bef_erase",
     "mopup_bef_erase_b (?s, ?l, []) ?lm ?n ?ires ==>
      mopup_bef_erase_a (?s - Suc 0, Bk # ?l, []) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 4),
                      template_app
                       (template_app (template_hole 7, template_var 3),
                        template_hole 6))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_app (template_hole 3, template_hole 2))),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_var 3)),
                       template_hole 6))),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_bef_erase_b_Bk_via_a_Oc",
     "mopup_bef_erase_a (?s, ?l, Oc # ?xs) ?lm ?n ?ires ==>
      mopup_bef_erase_b (Suc ?s, ?l, Bk # ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_app
                         (template_app (template_hole 4, template_hole 3),
                          template_var 3)))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 1, template_var 5)),
                     template_app
                      (template_app (template_hole 5, template_var 4),
                       template_app
                        (template_app (template_hole 4, template_hole 0),
                         template_var 3)))),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Abacus_Mopup.fetch_jump_over2_b",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (2 * ?n + 6) Bk =
      (R, 0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app (template_hole 12, template_var 0)),
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6))),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6))),
                 template_var 0)),
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app (template_hole 4, template_hole 6))))),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("Abacus_Mopup.mopup_jump_over2_Oc_nonempty",
     "mopup_jump_over2 (2 * ?n + 6, ?l, Oc # ?xs) ?lm ?n ?ires ==>
      ?l ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_hole 11,
                            template_app
                             (template_app
                               (template_hole 10,
                                template_app
                                 (template_hole 9,
                                  template_app
                                   (template_hole 8, template_hole 7))),
                              template_var 4)),
                          template_app
                           (template_hole 9,
                            template_app
                             (template_hole 8,
                              template_app
                               (template_hole 6, template_hole 7))))),
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_app
                         (template_app (template_hole 4, template_hole 3),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 3, template_hole 0)))),
    ("Abacus_Mopup.mopup_left_moving_nonempty",
     "mopup_left_moving (2 * ?n + 5, ?l, Oc # ?xs) ?lm ?n ?ires ==>
      ?l ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_hole 11,
                            template_app
                             (template_app
                               (template_hole 10,
                                template_app
                                 (template_hole 9,
                                  template_app
                                   (template_hole 8, template_hole 7))),
                              template_var 4)),
                          template_app
                           (template_hole 9,
                            template_app
                             (template_hole 6,
                              template_app
                               (template_hole 8, template_hole 7))))),
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_app
                         (template_app (template_hole 4, template_hole 3),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 3, template_hole 0)))),
    ("Abacus_Mopup.fetch_jump_over1_o",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (Suc (2 * ?n)) Oc =
      (R, Suc (2 * ?n))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 0)),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_var 0)))),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_var 0))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 0))))),
    ("Abacus_Mopup.fetch_jump_over1_b",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (Suc (2 * ?n)) Bk =
      (R, Suc (Suc (2 * ?n)))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 0)),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_var 0)))),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_var 0))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_hole 3,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_var 0)))))),
    ("Abacus_Mopup.ariths",
     "[| 0 < ?s; ?s <= 2 * ?n; ?s mod 2 ~= Suc 0 |] ==> ~ ?s <= Suc 0",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4))),
              template_app (template_hole 0, template_hole 9))
            )],
       template_negation
        (
           template_inequation
            (less_equals, template_var 1,
             template_app (template_hole 0, template_hole 9))
           ))),
    ("Abacus_Mopup.fetch_aft_erase_a_o",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n))
       (Suc (Suc (2 * ?n))) Oc =
      (W0, Suc (2 * ?n + 2))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 0)),
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 0)))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)))),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))))))),
    ("Abacus_Mopup.drop_tape_of_cons",
     "[| Suc ?q < length ?lm; ?x = ?lm ! ?q |]
      ==> <drop ?q ?lm> = Oc # Oc \<up> ?x @ Bk # <drop (Suc ?q) ?lm>",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 11, template_var 2),
          template_app (template_hole 10, template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 2))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 11, template_var 2)),
                   template_var 1)))))))),
    ("Abacus_Mopup.fetch_aft_erase_a_b",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n))
       (Suc (Suc (2 * ?n))) Bk =
      (L, Suc (2 * ?n + 4))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 0)),
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 0)))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)))),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 6, template_hole 5)))))))),
    ("Abacus_Mopup.fetch_aft_erase_c_b",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (2 * ?n + 4) Bk =
      (R, Suc (2 * ?n + 1))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app (template_hole 12, template_var 0)),
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6))),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6))),
                 template_var 0)),
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app (template_hole 7, template_hole 6))))),
         template_hole 4),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6))),
                 template_var 0)),
             template_hole 0))))),
    ("Abacus_Mopup.mopup_aft_erase_a_via_jump_over1",
     "mopup_jump_over1 (Suc (2 * ?n), ?l, []) ?lm ?n ?ires ==>
      mopup_aft_erase_a (Suc (Suc (2 * ?n)), Bk # ?l, []) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_hole 9,
                          template_app
                           (template_app
                             (template_hole 8,
                              template_app
                               (template_hole 7,
                                template_app
                                 (template_hole 6, template_hole 5))),
                            template_var 3))),
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_hole 3))),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_hole 7,
                                 template_app
                                  (template_hole 6, template_hole 5))),
                             template_var 3)))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_var 2)),
                       template_hole 3))),
                 template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_stop_via_jump_over2",
     "mopup_jump_over2 (2 * ?n + 6, ?l, Bk # ?xs) ?lm ?n ?ires ==>
      mopup_stop (0, Bk # ?l, ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9,
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 7, template_hole 6))),
                              template_var 4)),
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 7,
                              template_app
                               (template_hole 5, template_hole 6))))),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_app
                         (template_app (template_hole 3, template_hole 2),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 11, template_hole 0),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 3)),
                       template_var 2))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.fetch_aft_erase_b_b",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (2 * ?n + 3) Bk =
      (R, Suc (2 * ?n + 3))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app (template_hole 12, template_var 0)),
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6))),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6))),
                 template_var 0)),
             template_app
              (template_hole 8,
               template_app (template_hole 4, template_hole 6)))),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6))),
                 template_var 0)),
             template_app
              (template_hole 8,
               template_app (template_hole 4, template_hole 6))))))),
    ("Abacus_Mopup.mopup_jump_over1_in_ctx",
     "mopup_jump_over1 (Suc (2 * ?n), ?l, Oc # ?xs) ?lm ?n ?ires ==>
      mopup_jump_over1 (Suc (2 * ?n), Oc # ?l, ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7,
                          template_app
                           (template_app
                             (template_hole 6,
                              template_app
                               (template_hole 5,
                                template_app
                                 (template_hole 4, template_hole 3))),
                            template_var 4))),
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_app
                         (template_app (template_hole 1, template_hole 0),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4, template_hole 3))),
                           template_var 4))),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_var 3)),
                       template_var 2))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.tape_of_ex1",
     "EX rna ml.
         Oc \<up> ?a @ Bk \<up> ?rn = <ml> @ Bk \<up> rna |
         Oc \<up> ?a @ Bk \<up> ?rn = Bk # <ml> @ Bk \<up> rna",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Abacus_Mopup.fetch_aft_erase_c_o",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (2 * ?n + 4) Oc =
      (W0, Suc (2 * ?n + 2))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 0)),
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 6, template_hole 5))))),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))))))),
    ("Abacus_Mopup.fetch_jump_over2_o",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (2 * ?n + 6) Oc =
      (L, 2 * ?n + 6)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 0)),
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 3, template_hole 5))))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5))),
               template_var 0)),
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 3, template_hole 5))))))),
    ("Abacus_Mopup.fetch_left_moving_b",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (2 * ?n + 5) Bk =
      (L, 2 * ?n + 5)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 0)),
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app
                (template_hole 3,
                 template_app (template_hole 6, template_hole 5))))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5))),
               template_var 0)),
           template_app
            (template_hole 7,
             template_app
              (template_hole 3,
               template_app (template_hole 6, template_hole 5))))))),
    ("Abacus_Mopup.fetch_left_moving_o",
     "fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (2 * ?n + 5) Oc =
      (L, 2 * ?n + 6)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 0)),
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app
                (template_hole 3,
                 template_app (template_hole 6, template_hole 5))))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5))),
               template_var 0)),
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 3, template_hole 5))))))),
    ("Abacus_Mopup.mopup_jump_over1_2_aft_erase_a",
     "mopup_jump_over1 (Suc (2 * ?n), ?l, Bk # ?xs) ?lm ?n ?ires ==>
      mopup_aft_erase_a (Suc (Suc (2 * ?n)), Bk # ?l, ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_app
                             (template_hole 7,
                              template_app
                               (template_hole 6,
                                template_app
                                 (template_hole 5, template_hole 4))),
                            template_var 4))),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_app
                         (template_app (template_hole 2, template_hole 1),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 8,
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 5, template_hole 4))),
                             template_var 4)))),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_hole 1),
                           template_var 3)),
                       template_var 2))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.ariths",
     "[| 0 < ?s; ?s <= 2 * ?n; ?s mod 2 ~= Suc 0 |]
      ==> ?s - Suc 0 <= 2 * ?n",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              template_app (template_hole 1, template_hole 10))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 1, template_hole 10)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5))),
           template_var 0)))),
    ("Abacus_Mopup.Suc_Suc_div",
     "[| 0 < ?s; ?s mod 2 = Suc 0; Suc (Suc ?s) <= 2 * ?n |]
      ==> Suc (Suc (?s div 2)) <= ?n",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 1),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4))),
          template_app (template_hole 3, template_hole 9)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))))),
         template_var 0))),
    ("Abacus_Mopup.ariths",
     "[| 0 < ?s; ?s <= 2 * ?n; ?s mod 2 ~= Suc 0 |]
      ==> (?s - Suc 0) mod 2 = Suc 0",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              template_app (template_hole 1, template_hole 10))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 1, template_hole 10))),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 5))),
         template_app (template_hole 1, template_hole 10)))),
    ("Abacus_Mopup.mopup_false1",
     "[| 0 < ?s; ?s <= 2 * ?n; ?s mod 2 = Suc 0; ~ Suc ?s <= 2 * ?n |]
      ==> ?RR",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4))),
          template_app (template_hole 1, template_hole 9)),
        template_negation
         (
            template_inequation
             (less_equals, template_app (template_hole 1, template_var 2),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_var 1))
            )],
       template_predicate (template_var 0))),
    ("Abacus_Mopup.mopup_aft_erase_b_via_a",
     "mopup_aft_erase_a (Suc (Suc (2 * ?n)), ?l, Oc # ?xs) ?lm ?n ?ires ==>
      mopup_aft_erase_b (Suc (Suc (Suc (2 * ?n))), ?l, Bk # ?xs) ?lm ?n
       ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_hole 9,
                          template_app
                           (template_hole 9,
                            template_app
                             (template_app
                               (template_hole 8,
                                template_app
                                 (template_hole 7,
                                  template_app
                                   (template_hole 6, template_hole 5))),
                              template_var 4)))),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_app
                         (template_app (template_hole 3, template_hole 2),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 7,
                                   template_app
                                    (template_hole 6, template_hole 5))),
                               template_var 4))))),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_app
                        (template_app (template_hole 3, template_hole 0),
                         template_var 2)))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_aft_erase_a_via_c",
     "mopup_aft_erase_c (2 * ?n + 4, ?l, []) ?lm ?n ?ires ==>
      mopup_aft_erase_a (Suc (Suc (2 * ?n)), Bk # ?l, []) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9,
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 7, template_hole 6))),
                              template_var 3)),
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 7,
                              template_app
                               (template_hole 7, template_hole 6))))),
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_hole 4))),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 7, template_hole 6))),
                             template_var 3)))),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_var 2)),
                       template_hole 4))),
                 template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("Abacus_Mopup.fetch_mopup_a_shift",
     "[| 0 < ?q; ?q <= ?n |]
      ==> fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) (2 * ?q) Bk =
          (R, 2 * ?q - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 16, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 0)),
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5))),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5))),
               template_var 1)),
           template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 1)),
             template_hole 0))))),
    ("Abacus_Mopup.mopup_a_nth",
     "[| ?q < ?n; ?x < 4 |]
      ==> mopup_a ?n ! (4 * ?q + ?x) = mopup_a (Suc ?q) ! (4 * ?q + ?x)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 8,
            template_app
             (template_hole 7,
              template_app (template_hole 7, template_hole 6))))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 7, template_hole 6)))),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 7, template_hole 6)))),
                 template_var 2)),
             template_var 0))))),
    ("Abacus_Mopup.mopup_left_moving_via_aft_erase_a_emptylst",
     "mopup_aft_erase_a (Suc (Suc (2 * ?n)), ?l, []) ?lm ?n ?ires ==>
      mopup_left_moving (5 + 2 * ?n, tl ?l, [hd ?l]) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_hole 12,
                          template_app
                           (template_hole 12,
                            template_app
                             (template_app
                               (template_hole 11,
                                template_app
                                 (template_hole 10,
                                  template_app
                                   (template_hole 9, template_hole 8))),
                              template_var 3)))),
                      template_app
                       (template_app (template_hole 7, template_var 2),
                        template_hole 6))),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_hole 10,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 9, template_hole 8)))),
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10,
                               template_app
                                (template_hole 9, template_hole 8))),
                           template_var 3))),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 2, template_var 2)),
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 0, template_var 2)),
                         template_hole 6)))),
                 template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_aft_erase_c_via_b",
     "mopup_aft_erase_b (2 * ?n + 3, ?l, []) ?lm ?n ?ires ==>
      mopup_aft_erase_c (4 + 2 * ?n, Bk # ?l, []) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9,
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 7, template_hole 6))),
                              template_var 3)),
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 5, template_hole 6)))),
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_hole 3))),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7,
                               template_app
                                (template_hole 7, template_hole 6)))),
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_hole 8,
                               template_app
                                (template_hole 7, template_hole 6))),
                           template_var 3))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_var 2)),
                       template_hole 3))),
                 template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_aft_erase_c_aft_erase_a",
     "mopup_aft_erase_c (2 * ?n + 4, ?l, Bk # ?xs) ?lm ?n ?ires ==>
      mopup_aft_erase_a (Suc (Suc (2 * ?n)), Bk # ?l, ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_hole 9,
                            template_app
                             (template_app
                               (template_hole 8,
                                template_app
                                 (template_hole 7,
                                  template_app
                                   (template_hole 6, template_hole 5))),
                              template_var 4)),
                          template_app
                           (template_hole 7,
                            template_app
                             (template_hole 6,
                              template_app
                               (template_hole 6, template_hole 5))))),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_app
                         (template_app (template_hole 3, template_hole 2),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_hole 0,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_hole 7,
                                 template_app
                                  (template_hole 6, template_hole 5))),
                             template_var 4)))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 3)),
                       template_var 2))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_inv_step",
     "[| ?n < length ?lm; mopup_inv (?s, ?l, ?r) ?lm ?n ?ires |]
      ==> mopup_inv
           (step0 (?s, ?l, ?r) (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)))
           ?lm ?n ?ires",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 14, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 3),
                      template_app
                       (template_app (template_hole 11, template_var 2),
                        template_var 1))),
                  template_var 4),
                template_var 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 12, template_var 3),
                         template_app
                          (template_app (template_hole 11, template_var 2),
                           template_var 1))),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_var 5)),
                           template_app
                            (template_app
                              (template_hole 6, template_hole 5),
                             template_app
                              (template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2, template_hole 1))),
                               template_var 5)))),
                       template_hole 0))),
                 template_var 4),
               template_var 5),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_aft_erase_b_via_c",
     "mopup_aft_erase_c (2 * ?n + 4, ?l, Oc # ?xs) ?lm ?n ?ires ==>
      mopup_aft_erase_b (Suc (Suc (Suc (2 * ?n))), ?l, Bk # ?xs) ?lm ?n
       ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9,
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 7, template_hole 6))),
                              template_var 4)),
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 7,
                              template_app
                               (template_hole 7, template_hole 6))))),
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_app
                         (template_app (template_hole 4, template_hole 3),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 9,
                                 template_app
                                  (template_hole 8,
                                   template_app
                                    (template_hole 7, template_hole 6))),
                               template_var 4))))),
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_app
                        (template_app (template_hole 4, template_hole 0),
                         template_var 2)))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_inv_steps",
     "[| ?n < length ?lm; mopup_inv (?s, ?l, ?r) ?lm ?n ?ires |]
      ==> mopup_inv
           (steps0 (?s, ?l, ?r) (mopup_a ?n @ Turing.shift mopup_b (2 * ?n))
             ?stp)
           ?lm ?n ?ires",
     template_implication
      ([template_inequation
         (less_than, template_var 6,
          template_app (template_hole 14, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 4),
                      template_app
                       (template_app (template_hole 11, template_var 3),
                        template_var 2))),
                  template_var 5),
                template_var 6),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 12, template_var 4),
                           template_app
                            (template_app
                              (template_hole 11, template_var 3),
                             template_var 2))),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_hole 7, template_var 6)),
                             template_app
                              (template_app
                                (template_hole 6, template_hole 5),
                               template_app
                                (template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 2, template_hole 1))),
                                 template_var 6)))),
                         template_hole 0)),
                     template_var 0)),
                 template_var 5),
               template_var 6),
             template_var 1)
           ))),
    ("Abacus_Mopup.mopup_aft_erase_b_2_aft_erase_c",
     "mopup_aft_erase_b (2 * ?n + 3, ?l, Bk # ?xs) ?lm ?n ?ires ==>
      mopup_aft_erase_c (4 + 2 * ?n, Bk # ?l, ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app
                           (template_hole 9,
                            template_app
                             (template_app
                               (template_hole 8,
                                template_app
                                 (template_hole 7,
                                  template_app
                                   (template_hole 6, template_hole 5))),
                              template_var 4)),
                          template_app
                           (template_hole 7,
                            template_app
                             (template_hole 4, template_hole 5)))),
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_app
                         (template_app (template_hole 2, template_hole 1),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6,
                               template_app
                                (template_hole 6, template_hole 5)))),
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7,
                               template_app
                                (template_hole 6, template_hole 5))),
                           template_var 4))),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_hole 1),
                           template_var 3)),
                       template_var 2))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_left_moving_emptylist",
     "mopup_left_moving (2 * ?n + 5, ?l, []) ?lm ?n ?ires ==>
      mopup_left_moving (2 * ?n + 5, tl ?l, [hd ?l]) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9,
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 7, template_hole 6))),
                              template_var 3)),
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 5,
                              template_app
                               (template_hole 7, template_hole 6))))),
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_hole 3))),
                  template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 7, template_hole 6))),
                             template_var 3)),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 7, template_hole 6))))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 2, template_var 2)),
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 0, template_var 2)),
                         template_hole 3)))),
                 template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("Abacus_Mopup.erase2jumpover2",
     "[| ?q < length ?list;
         ALL rn.
            <drop ?q ?list> @ Bk # Bk \<up> ?n ~=
            Oc #
            Oc \<up> ?list ! ?q @
            Bk # <drop (Suc ?q) ?list> @ Bk \<up> rn |]
      ==> ?RR",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 12, template_var 2)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Abacus_Mopup.mopup_left_moving_via_aft_erase_a",
     "mopup_aft_erase_a (Suc (Suc (2 * ?n)), ?l, Bk # ?xs) ?lm ?n ?ires ==>
      mopup_left_moving (5 + 2 * ?n, tl ?l, hd ?l # Bk # ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_hole 12,
                          template_app
                           (template_hole 12,
                            template_app
                             (template_app
                               (template_hole 11,
                                template_app
                                 (template_hole 10,
                                  template_app
                                   (template_hole 9, template_hole 8))),
                              template_var 4)))),
                      template_app
                       (template_app (template_hole 7, template_var 3),
                        template_app
                         (template_app (template_hole 6, template_hole 5),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 10,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 9, template_hole 8)))),
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10,
                               template_app
                                (template_hole 9, template_hole 8))),
                           template_var 4))),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 1, template_var 3)),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 0, template_var 3)),
                         template_app
                          (template_app (template_hole 6, template_hole 5),
                           template_var 2))))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.fetch_bef_erase_a_o",
     "[| 0 < ?s; ?s <= 2 * ?n; ?s mod 2 = Suc 0 |]
      ==> fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) ?s Oc =
          (W0, ?s + 1)",
     template_implication
      ([template_inequation (less_than, template_hole 19, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 17,
              template_app
               (template_hole 16,
                template_app (template_hole 15, template_hole 14))),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 1),
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_hole 14))),
          template_app (template_hole 11, template_hole 19))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 0)),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app
                      (template_hole 17,
                       template_app
                        (template_hole 16,
                         template_app
                          (template_hole 15, template_hole 14))),
                     template_var 0)))),
             template_var 1),
           template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Abacus_Mopup.mopup_aft_erase_b_via_c_helper",
     "EX rna ml.
         Oc \<up> ?a @ Bk # <?list> @ Bk \<up> ?rn = <ml> @ Bk \<up> rna |
         Oc \<up> ?a @ Bk # <?list> @ Bk \<up> ?rn =
         Bk # <ml> @ Bk \<up> rna",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Abacus_Mopup.fetch_bef_erase_a_b",
     "[| 0 < ?s; ?s <= 2 * ?n; ?s mod 2 = Suc 0 |]
      ==> fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) ?s Bk =
          (R, ?s + 2)",
     template_implication
      ([template_inequation (less_than, template_hole 18, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_hole 15,
                template_app (template_hole 14, template_hole 13))),
            template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 1),
            template_app
             (template_hole 15,
              template_app (template_hole 14, template_hole 13))),
          template_app (template_hole 10, template_hole 18))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0)),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_hole 15,
                         template_app
                          (template_hole 14, template_hole 13))),
                     template_var 0)))),
             template_var 1),
           template_hole 3),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_hole 15,
               template_app (template_hole 14, template_hole 13))))))),
    ("Abacus_Mopup.mopup_jump_over2_context",
     "mopup_jump_over2 (2 * ?n + 6, ?l, Oc # ?xs) ?lm ?n ?ires ==>
      mopup_jump_over2 (2 * ?n + 6, tl ?l, hd ?l # Oc # ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9,
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 7, template_hole 6))),
                              template_var 4)),
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 7,
                              template_app
                               (template_hole 5, template_hole 6))))),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_app
                         (template_app (template_hole 3, template_hole 2),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 7, template_hole 6))),
                             template_var 4)),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 5, template_hole 6))))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 1, template_var 3)),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 0, template_var 3)),
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 2))))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_left_moving_hd_Bk",
     "mopup_left_moving (2 * ?n + 5, ?l, Bk # ?xs) ?lm ?n ?ires ==>
      mopup_left_moving (2 * ?n + 5, tl ?l, hd ?l # Bk # ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_hole 10,
                            template_app
                             (template_app
                               (template_hole 9,
                                template_app
                                 (template_hole 8,
                                  template_app
                                   (template_hole 7, template_hole 6))),
                              template_var 4)),
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 5,
                              template_app
                               (template_hole 7, template_hole 6))))),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_app
                         (template_app (template_hole 3, template_hole 2),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 7, template_hole 6))),
                             template_var 4)),
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 7, template_hole 6))))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 1, template_var 3)),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 0, template_var 3)),
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 2))))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_jump_over2_via_left_moving",
     "mopup_left_moving (2 * ?n + 5, ?l, Oc # ?xs) ?lm ?n ?ires ==>
      mopup_jump_over2 (2 * ?n + 6, tl ?l, hd ?l # Oc # ?xs) ?lm ?n ?ires",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_hole 11,
                            template_app
                             (template_app
                               (template_hole 10,
                                template_app
                                 (template_hole 9,
                                  template_app
                                   (template_hole 8, template_hole 7))),
                              template_var 4)),
                          template_app
                           (template_hole 9,
                            template_app
                             (template_hole 6,
                              template_app
                               (template_hole 8, template_hole 7))))),
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_app
                         (template_app (template_hole 4, template_hole 3),
                          template_var 2)))),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_hole 9,
                                 template_app
                                  (template_hole 8, template_hole 7))),
                             template_var 4)),
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 6, template_hole 7))))),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 1, template_var 3)),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 0, template_var 3)),
                         template_app
                          (template_app (template_hole 4, template_hole 3),
                           template_var 2))))),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("Abacus_Mopup.erase2jumpover1",
     "[| ?q < length ?list;
         ALL rn.
            <drop ?q ?list> ~=
            Oc #
            Oc \<up> ?list ! ?q @
            Bk # <drop (Suc ?q) ?list> @ Bk \<up> rn |]
      ==> <drop ?q ?list> = Oc # Oc \<up> ?list ! ?q",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 12, template_var 0)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_hole 5))))),
    ("Abacus_Mopup.fetch_bef_erase_b_b",
     "[| ?n < length ?lm; 0 < ?s; ?s <= 2 * ?n; is_even ?s |]
      ==> fetch (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) ?s Bk =
          (R, ?s - 1)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 19, template_var 1)),
        template_inequation (less_than, template_hole 18, template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_hole 15,
                template_app (template_hole 14, template_hole 13))),
            template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 0),
            template_app
             (template_hole 15,
              template_app (template_hole 14, template_hole 13))),
          template_hole 18)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 2)),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_hole 15,
                         template_app
                          (template_hole 14, template_hole 13))),
                     template_var 2)))),
             template_var 0),
           template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Abacus_Mopup.mopup_false2",
     "[| 0 < ?s; ?s <= 2 * ?n; ?s mod 2 = Suc 0; Suc ?s ~= 2 * ?n;
         ~ Suc (Suc ?s) <= 2 * ?n |]
      ==> ?RR",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4))),
          template_app (template_hole 1, template_hole 9)),
        template_negation
         (
            template_equation
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_var 1))
            ),
        template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_hole 1,
                template_app (template_hole 1, template_var 2)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_var 1))
            )],
       template_predicate (template_var 0))),
    ("Abacus_Mopup.mopup_bef_erase_a_2_a",
     "[| ?n < length ?lm; 0 < ?s; ?s mod 2 = Suc 0;
         mopup_bef_erase_a (?s, ?l, Bk # ?xs) ?lm ?n ?ires;
         Suc (Suc ?s) <= 2 * ?n |]
      ==> mopup_bef_erase_a (Suc (Suc ?s), Bk # ?l, ?xs) ?lm ?n ?ires",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 14, template_var 4)),
        template_inequation (less_than, template_hole 13, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_hole 8))),
          template_app (template_hole 7, template_hole 13)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_app
                         (template_app (template_hole 3, template_hole 2),
                          template_var 1)))),
                  template_var 4),
                template_var 5),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 7, template_var 3)),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_hole 8))),
            template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 7, template_var 3))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 2)),
                       template_var 1))),
                 template_var 4),
               template_var 5),
             template_var 0)
           ))),
    ("Abacus_Mopup.mopup_halt",
     "[| ?n < length ?lm; mopup_inv (Suc 0, ?l, ?r) ?lm ?n ?ires;
         ?f =
         (%stp. (steps0 (Suc 0, ?l, ?r)
                  (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) stp,
                 ?n));
         ?P = (%(c, n). is_final c) |]
      ==> EX stp. ?P (?f stp)",
     template_implication
      ([template_inequation
         (less_than, template_var 6,
          template_app (template_hole 21, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 20,
                    template_app
                     (template_app
                       (template_hole 19,
                        template_app (template_hole 18, template_hole 17)),
                      template_app
                       (template_app (template_hole 16, template_var 4),
                        template_var 3))),
                  template_var 5),
                template_var 6),
              template_var 2)
            ),
        template_equation (template_var 1, t_empty),
        template_equation
         (template_var 0, template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Abacus_Mopup.mopup_bef_erase",
     "[| ?n < length ?lm; 0 < ?s; ?s <= 2 * ?n; ?s mod 2 = Suc 0;
         ~ Suc (Suc ?s) <= 2 * ?n;
         mopup_bef_erase_a (?s, ?l, []) ?lm ?n ?ires |]
      ==> mopup_jump_over1 (?s', Bk # ?l, []) ?lm ?n ?ires",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 17, template_var 4)),
        template_inequation (less_than, template_hole 16, template_var 3),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11))),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_hole 11))),
          template_app (template_hole 8, template_hole 16)),
        template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_hole 8,
                template_app (template_hole 8, template_var 3)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_hole 11))),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_hole 3))),
                  template_var 4),
                template_var 5),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_var 2)),
                       template_hole 3))),
                 template_var 4),
               template_var 5),
             template_var 1)
           ))),
    ("Abacus_Mopup.mopup_bef_erase",
     "[| ?n < length ?lm; 0 < ?s; ?s <= 2 * ?n; ?s mod 2 ~= Suc 0;
         mopup_bef_erase_b (?s, ?l, Bk # ?xs) ?lm ?n ?ires; ?r = Bk # ?xs |]
      ==> mopup_bef_erase_a (?s - Suc 0, Bk # ?l, ?xs) ?lm ?n ?ires",
     template_implication
      ([template_inequation
         (less_than, template_var 6,
          template_app (template_hole 18, template_var 5)),
        template_inequation (less_than, template_hole 17, template_var 4),
        template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))),
            template_var 6)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12))),
              template_app (template_hole 8, template_hole 17))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_app
                         (template_app (template_hole 4, template_hole 3),
                          template_var 2)))),
                  template_var 5),
                template_var 6),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_app (template_hole 8, template_hole 17))),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_hole 3),
                           template_var 3)),
                       template_var 2))),
                 template_var 5),
               template_var 6),
             template_var 1)
           ))),
    ("Abacus_Mopup.mopup_bef_erase_a_2_jump_over",
     "[| ?n < length ?lm; 0 < ?s; ?s mod 2 = Suc 0; ?s <= 2 * ?n;
         mopup_bef_erase_a (?s, ?l, Bk # ?xs) ?lm ?n ?ires;
         ~ Suc (Suc ?s) <= 2 * ?n |]
      ==> mopup_jump_over1 (?s', Bk # ?l, ?xs) ?lm ?n ?ires",
     template_implication
      ([template_inequation
         (less_than, template_var 6,
          template_app (template_hole 16, template_var 5)),
        template_inequation (less_than, template_hole 15, template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 4),
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10))),
          template_app (template_hole 9, template_hole 15)),
        template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10))),
            template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_app
                         (template_app (template_hole 3, template_hole 2),
                          template_var 2)))),
                  template_var 5),
                template_var 6),
              template_var 1)
            ),
        template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_hole 9,
                template_app (template_hole 9, template_var 4)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_hole 10))),
                template_var 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 3)),
                       template_var 2))),
                 template_var 5),
               template_var 6),
             template_var 1)
           ))),
    ("Abacus_Mopup.mopup_correct",
     "[| ?n < length ?am; ?am ! ?n = ?rs |]
      ==> EX stp i j.
             steps0 (Suc 0, Bk # Bk # ?ires, <?am> @ Bk \<up> ?k)
              (mopup_a ?n @ Turing.shift mopup_b (2 * ?n)) stp =
             (0, Bk \<up> i @ Bk # Bk # ?ires,
              Oc # Oc \<up> ?rs @ Bk \<up> j)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 24, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 22, template_var 3),
            template_var 4),
          template_var 2)],
       template_predicate (template_app (template_hole 21, t_empty)))),
    ("Abacus_Mopup.mopup_bef_erase_a_implies_two",
     "[| ?n < length ?lm; 0 < ?s; ?s <= 2 * ?n; ?s mod 2 = Suc 0;
         mopup_bef_erase_a (?s, ?l, Oc # ?xs) ?lm ?n ?ires; ?r = Oc # ?xs |]
      ==> (Suc ?s <= 2 * ?n -->
           mopup_bef_erase_b (Suc ?s, ?l, Bk # ?xs) ?lm ?n ?ires) &
          (~ Suc ?s <= 2 * ?n -->
           mopup_jump_over1 (Suc ?s, ?l, Bk # ?xs) ?lm ?n ?ires)",
     template_implication
      ([template_inequation
         (less_than, template_var 6,
          template_app (template_hole 21, template_var 5)),
        template_inequation (less_than, template_hole 20, template_var 4),
        template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app
             (template_hole 18,
              template_app
               (template_hole 17,
                template_app (template_hole 16, template_hole 15))),
            template_var 6)),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 4),
            template_app
             (template_hole 17,
              template_app (template_hole 16, template_hole 15))),
          template_app (template_hole 12, template_hole 20)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 4),
                      template_app
                       (template_app (template_hole 9, template_var 3),
                        template_app
                         (template_app (template_hole 8, template_hole 7),
                          template_var 2)))),
                  template_var 5),
                template_var 6),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 19,
                       template_app (template_hole 12, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 18,
                         template_app
                          (template_hole 17,
                           template_app
                            (template_hole 16, template_hole 15))),
                       template_var 6))),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 10,
                             template_app
                              (template_hole 12, template_var 4)),
                           template_app
                            (template_app (template_hole 9, template_var 3),
                             template_app
                              (template_app
                                (template_hole 8, template_hole 2),
                               template_var 2)))),
                       template_var 5),
                     template_var 6),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 19,
                       template_app (template_hole 12, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 18,
                         template_app
                          (template_hole 17,
                           template_app
                            (template_hole 16, template_hole 15))),
                       template_var 6)))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app (template_hole 12, template_var 4)),
                         template_app
                          (template_app (template_hole 9, template_var 3),
                           template_app
                            (template_app
                              (template_hole 8, template_hole 2),
                             template_var 2)))),
                     template_var 5),
                   template_var 6),
                 template_var 1)))
           )))]:
   (string * thm * template) list
### theory "Draft.Abacus_MopupMoreTemplates"
### 0.389s elapsed time, 0.575s cpu time, 0.063s GC time
val it = (): unit
