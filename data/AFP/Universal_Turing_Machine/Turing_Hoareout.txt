Loading theory "Draft.Turing" (required by "Draft.Turing_HoareMoreTemplates" via "Draft.Turing_Hoare")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Turing_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Turing_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Turing_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.575s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Turing_HoareMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.863s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Turing_HoareMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.303s cpu time, 0.117s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Turing_HoareMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.691s cpu time, 0.837s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.036s elapsed time, 3.773s cpu time, 0.760s GC time
Found termination order: "size <*mlex*> {}"
class tape = type +
  fixes tape_of :: "'a => cell list"
instantiation
  nat :: tape
  tape_of_nat == tape_of :: nat => cell list
instantiation
  list :: (tape) tape
  tape_of_list == tape_of :: 'a list => cell list
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
instantiation
  prod :: (tape, tape) tape
  tape_of_prod == tape_of :: 'a * 'b => cell list
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Turing"
### 1.756s elapsed time, 5.984s cpu time, 1.081s GC time
Loading theory "Draft.Turing_Hoare" (required by "Draft.Turing_HoareMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 41 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q))))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>Hoare_halt" ("_position" P) ("_position" p) ("_position" Q))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" Q))
###     ("_cargs" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" Q) ("_position" B)
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing.tm_comp"
###     ("_applC" ("_Finset" ("_position" P)) ("_position" A))
###     ("_applC" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###     ("\<^const>Turing.tm_comp" ("_position" A) ("_position" B))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 155 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P'))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P') ("_position" p)
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Turing_Hoare"
### 0.112s elapsed time, 0.228s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.970s elapsed time, 5.950s cpu time, 1.115s GC time
Loading theory "Draft.Templates" (required by "Draft.Turing_HoareMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Turing_HoareMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.479s elapsed time, 0.548s cpu time, 0.087s GC time
Loading theory "Draft.Turing_HoareMoreTemplates"
val templateLemmas =
   [("Turing_Hoare.refl_assert", "?P \<mapsto> ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Turing_Hoare.is_final_holds",
     "is_final ?c ==> ?Q holds_for steps ?c ?p ?n = ?Q holds_for ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 3)))),
    ("Turing_Hoare.Hoare_consequence",
     "[| ?P' \<mapsto> ?P; {?P} ?p {?Q}; ?Q \<mapsto> ?Q' |]
      ==> {?P'} ?p {?Q'}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 0)
           ))),
    ("Turing_Hoare.Hoare_plus_unhalt",
     "[| {?P} ?A {?Q}; {?Q} ?B \<up>; tm_wf0 ?A |]
      ==> {?P} ?A |+| ?B \<up>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Turing_Hoare.Hoare_plus_halt",
     "[| {?P} ?A {?Q}; {?Q} ?B {?S}; tm_wf0 ?A |] ==> {?P} ?A |+| ?B {?S}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Turing_Hoare.Hoare_unhaltI",
     "(!!l r n. ?P (l, r) ==> ~ is_final (steps0 (1, l, r) ?p n)) ==>
      {?P} ?p \<up>",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Turing_Hoare.Hoare_haltI",
     "(!!l r.
          ?P (l, r) ==>
          EX n. is_final (steps0 (1, l, r) ?p n) &
                ?Q holds_for steps0 (1, l, r) ?p n) ==>
      {?P} ?p {?Q}",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Turing_HoareMoreTemplates"
### 0.319s elapsed time, 0.410s cpu time, 0.000s GC time
val it = (): unit
