   [("Abacus_Hoare.abc_comp_null_right", "?A [+] [] = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Abacus_Hoare.abc_comp_null_left", "[] [+] ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Abacus_Hoare.abc_exec_null", "abc_steps_l ?sam [] ?n = ?sam",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 1)),
    ("Abacus_Hoare.length_abc_comp",
     "length (?A [+] ?B) = length ?A + length ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abacus_Hoare.abc_Hoare_plus_unhalt1",
     "{?P} ?A \<up> ==> {?P} ?A [+] ?B \<up>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Abacus_Hoare.halt_steps",
     "abc_steps_l (length ?A, ?lm) ?A ?n = (length ?A, ?lm)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 2),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_var 1))),
    ("Abacus_Hoare.halt_steps2",
     "length ?A <= ?st ==> abc_steps_l (?st, ?lm) ?A ?stp = (?st, ?lm)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Abacus_Hoare.abc_Hoare_plus_unhalt2",
     "[| {?Q} ?B \<up>; {?P} ?A {?Q} |] ==> {?P} ?A [+] ?B \<up>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Abacus_Hoare.abc_steps_add",
     "abc_steps_l (?as, ?lm) ?ap (?m + ?n) =
      abc_steps_l (abc_steps_l (?as, ?lm) ?ap ?m) ?ap ?n",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3)),
                 template_var 2),
               template_var 1)),
           template_var 2),
         template_var 0))),
    ("Abacus_Hoare.abc_Hoare_plus_halt",
     "[| {?P} ?A {?Q}; {?Q} ?B {?S} |] ==> {?P} ?A [+] ?B {?S}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Abacus_Hoare.notfinal_Suc",
     "abc_notfinal (abc_steps_l (0, ?lm) ?A (Suc ?n)) ?A ==>
      abc_notfinal (abc_steps_l (0, ?lm) ?A ?n) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_hole 1),
                        template_var 2)),
                    template_var 1),
                  template_app (template_hole 0, template_var 0))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Abacus_Hoare.abc_Hoare_unhaltI",
     "(!!args n.
          ?P args ==> abc_notfinal (abc_steps_l (0, args) ?p n) ?p) ==>
      {?P} ?p \<up>",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Abacus_Hoare.abc_comp_first_step_eq_pre",
     "?s < length ?A ==>
      abc_step_l (?s, ?lm) (abc_fetch ?s (?A [+] ?B)) =
      abc_step_l (?s, ?lm) (abc_fetch ?s ?A)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2))))),
    ("Abacus_Hoare.notfinal_all_before",
     "[| abc_notfinal (abc_steps_l (0, ?args) ?A ?x) ?A; ?y <= ?x |]
      ==> abc_notfinal (abc_steps_l (0, ?args) ?A ?y) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_hole 1),
                        template_var 3)),
                    template_var 2),
                  template_var 1)),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 3)),
                   template_var 2),
                 template_var 0)),
             template_var 2)
           ))),
    ("Abacus_Hoare.abc_unhalt_append_eq",
     "[| {?P} ?A \<up>; ?P ?args |]
      ==> abc_steps_l (0, ?args) (?A [+] ?B) ?stp =
          abc_steps_l (0, ?args) ?A ?stp",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 3),
           template_var 0)))),
    ("Abacus_Hoare.abc_comp_second_steps_eq",
     "abc_steps_l (0, ?lm) ?B ?n = (?sa, ?lm') ==>
      abc_steps_l (length ?A, ?lm) (?A [+] ?B) ?n =
      (?sa + length ?A, ?lm')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 5)),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 2, template_var 0)),
                 template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 4)),
           template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 2, template_var 0))),
           template_var 1)))),
    ("Abacus_Hoare.abc_comp_frist_steps_halt_eq",
     "abc_steps_l (0, ?lm) ?A ?n = (length ?A, ?lm') ==>
      EX n'. abc_steps_l (0, ?lm) (?A [+] ?B) n' = (length ?A, ?lm')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 4)),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 2, template_var 3)),
            template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Abacus_Hoare.equal_when_halt",
     "[| abc_steps_l (?s, ?lm) ?A ?na = (length ?A, ?lma);
         abc_steps_l (?s, ?lm) ?A ?nb = (length ?A, ?lmb) |]
      ==> ?lma = ?lmb",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5)),
              template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 4)),
            template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5)),
              template_var 4),
            template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 4)),
            template_var 0))],
       template_equation (template_var 2, template_var 0))),
    ("Abacus_Hoare.abc_Hoare_haltI",
     "(!!lm. ?P lm ==>
             EX n. abc_final (abc_steps_l (0, lm) ?p n) ?p &
                   ?Q abc_holds_for abc_steps_l (0, lm) ?p n) ==>
      {?P} ?p {?Q}",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Abacus_Hoare.abc_comp_frist_steps_eq_pre",
     "[| abc_notfinal (abc_steps_l (0, ?lm) ?A ?n) ?A; ?A ~= [] |]
      ==> abc_steps_l (0, ?lm) (?A [+] ?B) ?n = abc_steps_l (0, ?lm) ?A ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_hole 5),
                        template_var 3)),
                    template_var 2),
                  template_var 1)),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 3)),
             template_var 2),
           template_var 1)))),
    ("Abacus_Hoare.abc_Hoare_plus_unhalt2'",
     "[| {?Q} ?B \<up>; {?P} ?A {?Q}; ?A ~= []; ?P ?args |]
      ==> abc_notfinal (abc_steps_l (0, ?args) (?A [+] ?B) ?n) (?A [+] ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 5)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate (template_app (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 4)),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4))
           ))),
    ("Abacus_Hoare.abc_comp_frist_steps_halt_eq'",
     "[| abc_steps_l (0, ?lm) ?A ?n = (length ?A, ?lm'); ?A ~= [] |]
      ==> EX n'. abc_steps_l (0, ?lm) (?A [+] ?B) n' = (length ?A, ?lm')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 4)),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 5, template_var 3)),
            template_var 1)),
        template_negation
         (template_equation (template_var 3, template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Abacus_Hoare.abc_comp_second_step_eq",
     "abc_step_l (?s, ?lm) (abc_fetch ?s ?B) = (?sa, ?lma) ==>
      abc_step_l (?s + length ?A, ?lm)
       (abc_fetch (?s + length ?A) (?A [+] ?B)) =
      (?sa + length ?A, ?lma)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4)),
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 3)),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app (template_hole 1, template_var 0))),
               template_var 4)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 0))),
           template_var 1)))),
    ("Abacus_Hoare.abc_before_final",
     "[| abc_final (abc_steps_l (0, ?lm) ?p ?n) ?p; ?p ~= [] |]
      ==> EX n'.
             abc_notfinal (abc_steps_l (0, ?lm) ?p n') ?p &
             abc_final (abc_steps_l (0, ?lm) ?p (Suc n')) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_hole 7),
                        template_var 2)),
                    template_var 1),
                  template_var 0)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty))))]
