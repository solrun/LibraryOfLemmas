Loading theory "Draft.Turing" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.Abacus_Hoare" via "Draft.Abacus" via "Draft.Turing_Hoare")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.505s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.844s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.311s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.008s elapsed time, 3.813s cpu time, 0.858s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.078s elapsed time, 3.925s cpu time, 0.784s GC time
Found termination order: "size <*mlex*> {}"
class tape = type +
  fixes tape_of :: "'a => cell list"
instantiation
  nat :: tape
  tape_of_nat == tape_of :: nat => cell list
instantiation
  list :: (tape) tape
  tape_of_list == tape_of :: 'a list => cell list
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
instantiation
  prod :: (tape, tape) tape
  tape_of_prod == tape_of :: 'a * 'b => cell list
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Turing"
### 1.774s elapsed time, 6.049s cpu time, 1.033s GC time
Loading theory "Draft.Turing_Hoare" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.Abacus_Hoare" via "Draft.Abacus")
Found termination order: "{}"
### Ambiguous input (line 41 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q))))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>Hoare_halt" ("_position" P) ("_position" p) ("_position" Q))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" Q))
###     ("_cargs" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" Q) ("_position" B)
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing.tm_comp"
###     ("_applC" ("_Finset" ("_position" P)) ("_position" A))
###     ("_applC" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###     ("\<^const>Turing.tm_comp" ("_position" A) ("_position" B))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 155 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P'))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P') ("_position" p)
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Turing_Hoare"
### 0.114s elapsed time, 0.239s cpu time, 0.000s GC time
Loading theory "Draft.Uncomputable" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.Abacus_Hoare" via "Draft.Abacus" via "Draft.Abacus_Mopup")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.005s elapsed time, 6.310s cpu time, 1.057s GC time
Loading theory "Draft.Templates" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.168s cpu time, 0.058s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Abacus_HoareMoreTemplates")
Found termination order: "{}"
### Ambiguous input (line 117 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_begin1) ("_position" n))
###       ("_position" tcopy_begin)
###       ("_applC" ("_position" inv_begin0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_begin)
###         ("_Finset" ("_applC" ("_position" inv_begin0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 181 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_begin1) ("_position" n))
###       ("_position" tcopy_begin)
###       ("_applC" ("_position" inv_begin0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_begin)
###         ("_Finset" ("_applC" ("_position" inv_begin0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.548s elapsed time, 1.184s cpu time, 0.105s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 548 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" inv_loop1) ("_position" n))
###     ("_position" tcopy_loop)
###     ("_applC" ("_position" inv_loop0) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" inv_loop1) ("_position" n)))
###     ("_cargs" ("_position" tcopy_loop)
###       ("_Finset" ("_applC" ("_position" inv_loop0) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 784 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_end1) ("_position" n))
###       ("_position" tcopy_end)
###       ("_applC" ("_position" inv_end0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_Finset" ("_applC" ("_position" inv_end1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_end)
###         ("_Finset" ("_applC" ("_position" inv_end0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 815 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" inv_begin1) ("_position" x)) ("_position" tcopy)
###     ("_applC" ("_position" inv_end0) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" x)))
###     ("_cargs" ("_position" tcopy)
###       ("_Finset" ("_applC" ("_position" inv_end0) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 852 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_tcopy) ("_position" n)) ("_position" tcopy)
###     ("_applC" ("_position" post_tcopy) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" pre_tcopy) ("_position" n)))
###     ("_cargs" ("_position" tcopy)
###       ("_Finset" ("_applC" ("_position" post_tcopy) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" dither_halt_inv))
###     ("_cargs" ("_position" dither)
###       ("_Finset" ("_position" dither_halt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" dither_halt_inv)
###     ("_position" dither) ("_position" dither_halt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 923 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" halts) ("_cargs" ("_position" p) ("_position" ns)))
###   ("_applC"
###     ("_Finset"
###       ("_lambda" ("_position" tp)
###         ("\<^const>HOL.eq" ("_position" tp)
###           ("_tuple" ("\<^const>List.list.Nil")
###             ("_tuple_arg"
###               ("\<^const>Turing.tape_class.tape_of" ("_position" ns)))))))
###     ("_cargs" ("_position" p)
###       ("_Finset"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" k)
###               ("_idts" ("_position" n) ("_position" l)))
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>List.append"
###                     ("\<^const>Turing.tape_class.tape_of"
###                       ("_constrain" ("_position" n) ("_type_name" nat)))
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" l))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" halts) ("_cargs" ("_position" p) ("_position" ns)))
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_lambda" ("_position" tp)
###       ("\<^const>HOL.eq" ("_position" tp)
###         ("_tuple" ("\<^const>List.list.Nil")
###           ("_tuple_arg"
###             ("\<^const>Turing.tape_class.tape_of" ("_position" ns))))))
###     ("_position" p)
###     ("_lambda" ("_position" tp)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" k) ("_idts" ("_position" n) ("_position" l)))
###         ("\<^const>HOL.eq" ("_position" tp)
###           ("_tuple"
###             ("\<^const>Turing.exponent" ("_position" Bk) ("_position" k))
###             ("_tuple_arg"
###               ("\<^const>List.append"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_constrain" ("_position" n) ("_type_name" nat)))
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" l))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 951 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" halts)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_position" tp)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple" ("_list" ("_position" Bk))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                       ("_tuple_arg" ("_position" ns)))))))))
###         ("_cargs" ("_position" H)
###           ("_Finset"
###             ("_lambda" ("_position" tp)
###               ("\<^const>HOL.Ex_binder" ("_position" k)
###                 ("\<^const>HOL.eq" ("_position" tp)
###                   ("_tuple"
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" k))
###                     ("_tuple_arg"
###                       ("\<^const>Turing.tape_class.tape_of"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat))))))))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" halts)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_halt"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.eq" ("_position" tp)
###             ("_tuple" ("_list" ("_position" Bk))
###               ("_tuple_arg"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                     ("_tuple_arg" ("_position" ns))))))))
###         ("_position" H)
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder" ("_position" k)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_constrain" ("\<^const>Groups.zero_class.zero")
###                       ("_type_name" nat))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 953 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" halts)
###           ("_cargs" ("_position" M) ("_position" ns)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_position" tp)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple" ("_list" ("_position" Bk))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                       ("_tuple_arg" ("_position" ns)))))))))
###         ("_cargs" ("_position" H)
###           ("_Finset"
###             ("_lambda" ("_position" tp)
###               ("\<^const>HOL.Ex_binder" ("_position" k)
###                 ("\<^const>HOL.eq" ("_position" tp)
###                   ("_tuple"
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" k))
###                     ("_tuple_arg"
###                       ("\<^const>Turing.tape_class.tape_of"
###                         ("_constrain" ("\<^const>Groups.one_class.one")
###                           ("_type_name" nat))))))))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" halts)
###           ("_cargs" ("_position" M) ("_position" ns)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_halt"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.eq" ("_position" tp)
###             ("_tuple" ("_list" ("_position" Bk))
###               ("_tuple_arg"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                     ("_tuple_arg" ("_position" ns))))))))
###         ("_position" H)
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder" ("_position" k)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_constrain" ("\<^const>Groups.one_class.one")
###                       ("_type_name" nat))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale uncomputable
  fixes code :: "(action * nat) list => nat"
    and H :: "(action * nat) list"
  assumes "uncomputable code H"
### Ambiguous input (line 969 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("_Finset"
###       ("_applC" ("_position" pre_H_inv)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("_cargs" ("_position" H) ("_Finset" ("_position" post_H_halt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_H_inv)
###       ("_cargs" ("_position" M) ("_position" ns)))
###     ("_position" H) ("_position" post_H_halt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 974 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("_Finset"
###       ("_applC" ("_position" pre_H_inv)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("_cargs" ("_position" H) ("_Finset" ("_position" post_H_unhalt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_H_inv)
###       ("_cargs" ("_position" M) ("_position" ns)))
###     ("_position" H) ("_position" post_H_unhalt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Uncomputable"
### 2.897s elapsed time, 5.544s cpu time, 2.356s GC time
Loading theory "Draft.Abacus_Mopup" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.Abacus_Hoare" via "Draft.Abacus")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### mopup_inv (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1 ==
### if ?s1 = 0 then mopup_stop (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
### else if ?s1 <= 2 * ?n1
###      then if ?s1 mod 2 = 1
###           then mopup_bef_erase_a (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###           else mopup_bef_erase_b (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###      else if ?s1 = 2 * ?n1 + 1
###           then mopup_jump_over1 (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###           else if ?s1 = 2 * ?n1 + 2
###                then mopup_aft_erase_a (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###                else if ?s1 = 2 * ?n1 + 3
###                     then mopup_aft_erase_b (?s1, ?l1, ?r1) ?lm1 ?n1 ?ires1
###                     else if ?s1 = 2 * ?n1 + 4
###                          then mopup_aft_erase_c (?s1, ?l1, ?r1) ?lm1 ?n1
###                                ?ires1
###                          else if ?s1 = 2 * ?n1 + 5
###                               then mopup_left_moving (?s1, ?l1, ?r1) ?lm1
###                                     ?n1 ?ires1
###                               else if ?s1 = 2 * ?n1 + 6
###                                    then mopup_jump_over2 (?s1, ?l1, ?r1)
###    ?lm1 ?n1 ?ires1
###                                    else False
### theory "Draft.Abacus_Mopup"
### 1.102s elapsed time, 1.175s cpu time, 0.099s GC time
Loading theory "Draft.Abacus" (required by "Draft.Abacus_HoareMoreTemplates" via "Draft.Abacus_Hoare")
### Ignoring duplicate rewrite rule:
### ?x1 \<up> Suc ?n1 == ?x1 # ?x1 \<up> ?n1
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### layout_of ?ap1 == map length_of ?ap1
### Rewrite rule not in simpset:
### step (?s1, ?l1, ?r1) (?p1, ?off1) ==
### let (a, s') = fetch ?p1 (?s1 - ?off1) (read ?r1)
### in (s', update a (?l1, ?r1))
### Rewrite rule not in simpset:
### steps ?y ?p1 0 == ?y
### Rewrite rule not in simpset:
### steps ?c1 ?p1 (Suc ?n1) == steps (step ?c1 ?p1) ?p1 ?n1
### Rewrite rule not in simpset:
### shift ?p1 ?n1 == map (%(a, s). (a, if s = 0 then 0 else s + ?n1)) ?p1
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### ci ?ly1 ?ss1 (Inc ?n1) == tinc ?ss1 ?n1
### Rewrite rule not in simpset:
### ci ?ly1 ?ss1 (Dec ?n1 ?e1) == tdec ?ss1 ?n1 (start_of ?ly1 ?e1)
### Rewrite rule not in simpset:
### ci ?ly1 ?ss1 (Goto ?n1) == tgoto (start_of ?ly1 ?n1)
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Rewrite rule not in simpset:
### dec_inv_1 ?ly1 ?n1 ?e1 (?as1, ?am1) (?s1, ?l1, ?r1) ?ires1 ==
### let ss = start_of ?ly1 ?as1;
###     am' = abc_lm_s ?am1 ?n1 (abc_lm_v ?am1 ?n1 - Suc 0);
###     am'' = abc_lm_s ?am1 ?n1 (abc_lm_v ?am1 ?n1)
### in if ?s1 = start_of ?ly1 ?e1
###    then inv_stop (?as1, am'') (?s1, ?l1, ?r1) ?ires1
###    else if ?s1 = ss then False
###         else if ?s1 = ss + 2 * ?n1 + 1
###              then inv_locate_b (?as1, ?am1) (?n1, ?l1, ?r1) ?ires1
###              else if ?s1 = ss + 2 * ?n1 + 13
###                   then inv_on_left_moving (?as1, am'') (?s1, ?l1, ?r1)
###                         ?ires1
###                   else if ?s1 = ss + 2 * ?n1 + 14
###                        then inv_check_left_moving (?as1, am'')
###                              (?s1, ?l1, ?r1) ?ires1
###                        else if ?s1 = ss + 2 * ?n1 + 15
###                             then inv_after_left_moving (?as1, am'')
###                                   (?s1, ?l1, ?r1) ?ires1
###                             else False
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Abacus"
### 5.424s elapsed time, 5.879s cpu time, 0.610s GC time
Loading theory "Draft.Abacus_Hoare" (required by "Draft.Abacus_HoareMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 40 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_constrain" ("_position" p) ("_type_name" abc_prog))
###       ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###     ("_constrain" ("_position" p) ("_type_name" abc_prog)) ("_position" Q)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Abacus_Hoare.abc_Hoare_halt" ("_position" P)
###     ("_constrain" ("_position" p) ("_type_name" abc_prog)) ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###     ("_constrain" ("_position" p) ("_type_name" abc_prog))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###     ("_constrain" ("_position" p) ("_type_name" abc_prog))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 287 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_constrain" ("_position" A) ("_type_name" abc_prog))
###       ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###     ("_constrain" ("_position" A) ("_type_name" abc_prog)) ("_position" Q)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Abacus_Hoare.abc_Hoare_halt" ("_position" P)
###     ("_constrain" ("_position" A) ("_type_name" abc_prog)) ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 288 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" Q))
###     ("_cargs" ("_constrain" ("_position" B) ("_type_name" abc_prog))
###       ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" Q)
###     ("_constrain" ("_position" B) ("_type_name" abc_prog)) ("_position" S)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Abacus_Hoare.abc_Hoare_halt" ("_position" Q)
###     ("_constrain" ("_position" B) ("_type_name" abc_prog)) ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs"
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B))
###       ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###     ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B))
###     ("_position" S)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Abacus_Hoare.abc_Hoare_halt" ("_position" P)
###     ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###     ("_constrain" ("_position" A) ("_type_name" abc_prog))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###     ("_constrain" ("_position" A) ("_type_name" abc_prog))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 345 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("_constrain" ("_position" A) ("_type_name" abc_prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###       ("_constrain" ("_position" A) ("_type_name" abc_prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("_constrain" ("_position" A) ("_type_name" abc_prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###       ("_constrain" ("_position" A) ("_type_name" abc_prog))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" Q)
###     ("_constrain" ("_position" B) ("_type_name" abc_prog))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" Q)
###     ("_constrain" ("_position" B) ("_type_name" abc_prog))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 361 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_constrain" ("_position" A) ("_type_name" abc_prog))
###       ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###     ("_constrain" ("_position" A) ("_type_name" abc_prog)) ("_position" Q)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Abacus_Hoare.abc_Hoare_halt" ("_position" P)
###     ("_constrain" ("_position" A) ("_type_name" abc_prog)) ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 436 of "$AFP/Universal_Turing_Machine/Abacus_Hoare.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Abacus_Hoare.abc_Hoare_halt" ("_position" P)
###           ("_constrain" ("_position" A) ("_type_name" abc_prog))
###           ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Abacus_Hoare.abc_Hoare_halt" ("_position" P)
###           ("_constrain" ("_position" A) ("_type_name" abc_prog))
###           ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###           ("_constrain" ("_position" A) ("_type_name" abc_prog))
###           ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###           ("_constrain" ("_position" A) ("_type_name" abc_prog))
###           ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_Finset" ("_position" P))
###           ("_cargs" ("_constrain" ("_position" A) ("_type_name" abc_prog))
###             ("_Finset" ("_position" Q)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_Finset" ("_position" P))
###           ("_cargs" ("_constrain" ("_position" A) ("_type_name" abc_prog))
###             ("_Finset" ("_position" Q)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Abacus_Hoare.abc_Hoare_halt" ("_position" P)
###           ("_constrain" ("_position" A) ("_type_name" abc_prog))
###           ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Abacus_Hoare.abc_Hoare_halt" ("_position" P)
###           ("_constrain" ("_position" A) ("_type_name" abc_prog))
###           ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###           ("_constrain" ("_position" A) ("_type_name" abc_prog))
###           ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_unhalt" ("_position" Q)
###         ("_constrain" ("_position" B) ("_type_name" abc_prog))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###           ("_constrain" ("_position" A) ("_type_name" abc_prog))
###           ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Abacus_Hoare.abc_Hoare_unhalt" ("_position" P)
###       ("\<^const>Abacus_Hoare.abc_comp" ("_position" A) ("_position" B)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Abacus_Hoare"
### 0.293s elapsed time, 0.319s cpu time, 0.000s GC time
Loading theory "Draft.Abacus_HoareMoreTemplates"
val templateLemmas =
   [("Abacus_Hoare.abc_comp_null_right", "?A [+] [] = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Abacus_Hoare.abc_comp_null_left", "[] [+] ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Abacus_Hoare.abc_exec_null", "abc_steps_l ?sam [] ?n = ?sam",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 1)),
    ("Abacus_Hoare.length_abc_comp",
     "length (?A [+] ?B) = length ?A + length ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abacus_Hoare.abc_Hoare_plus_unhalt1",
     "{?P} ?A \<up> ==> {?P} ?A [+] ?B \<up>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Abacus_Hoare.halt_steps",
     "abc_steps_l (length ?A, ?lm) ?A ?n = (length ?A, ?lm)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 2),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_var 1))),
    ("Abacus_Hoare.halt_steps2",
     "length ?A <= ?st ==> abc_steps_l (?st, ?lm) ?A ?stp = (?st, ?lm)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Abacus_Hoare.abc_Hoare_plus_unhalt2",
     "[| {?Q} ?B \<up>; {?P} ?A {?Q} |] ==> {?P} ?A [+] ?B \<up>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Abacus_Hoare.abc_steps_add",
     "abc_steps_l (?as, ?lm) ?ap (?m + ?n) =
      abc_steps_l (abc_steps_l (?as, ?lm) ?ap ?m) ?ap ?n",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3)),
                 template_var 2),
               template_var 1)),
           template_var 2),
         template_var 0))),
    ("Abacus_Hoare.abc_Hoare_plus_halt",
     "[| {?P} ?A {?Q}; {?Q} ?B {?S} |] ==> {?P} ?A [+] ?B {?S}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Abacus_Hoare.notfinal_Suc",
     "abc_notfinal (abc_steps_l (0, ?lm) ?A (Suc ?n)) ?A ==>
      abc_notfinal (abc_steps_l (0, ?lm) ?A ?n) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_hole 1),
                        template_var 2)),
                    template_var 1),
                  template_app (template_hole 0, template_var 0))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Abacus_Hoare.abc_Hoare_unhaltI",
     "(!!args n.
          ?P args ==> abc_notfinal (abc_steps_l (0, args) ?p n) ?p) ==>
      {?P} ?p \<up>",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Abacus_Hoare.abc_comp_first_step_eq_pre",
     "?s < length ?A ==>
      abc_step_l (?s, ?lm) (abc_fetch ?s (?A [+] ?B)) =
      abc_step_l (?s, ?lm) (abc_fetch ?s ?A)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2))))),
    ("Abacus_Hoare.notfinal_all_before",
     "[| abc_notfinal (abc_steps_l (0, ?args) ?A ?x) ?A; ?y <= ?x |]
      ==> abc_notfinal (abc_steps_l (0, ?args) ?A ?y) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_hole 1),
                        template_var 3)),
                    template_var 2),
                  template_var 1)),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 3)),
                   template_var 2),
                 template_var 0)),
             template_var 2)
           ))),
    ("Abacus_Hoare.abc_unhalt_append_eq",
     "[| {?P} ?A \<up>; ?P ?args |]
      ==> abc_steps_l (0, ?args) (?A [+] ?B) ?stp =
          abc_steps_l (0, ?args) ?A ?stp",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 3),
           template_var 0)))),
    ("Abacus_Hoare.abc_comp_second_steps_eq",
     "abc_steps_l (0, ?lm) ?B ?n = (?sa, ?lm') ==>
      abc_steps_l (length ?A, ?lm) (?A [+] ?B) ?n =
      (?sa + length ?A, ?lm')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 5)),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 2, template_var 0)),
                 template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 4)),
           template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 2, template_var 0))),
           template_var 1)))),
    ("Abacus_Hoare.abc_comp_frist_steps_halt_eq",
     "abc_steps_l (0, ?lm) ?A ?n = (length ?A, ?lm') ==>
      EX n'. abc_steps_l (0, ?lm) (?A [+] ?B) n' = (length ?A, ?lm')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 4)),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 2, template_var 3)),
            template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Abacus_Hoare.equal_when_halt",
     "[| abc_steps_l (?s, ?lm) ?A ?na = (length ?A, ?lma);
         abc_steps_l (?s, ?lm) ?A ?nb = (length ?A, ?lmb) |]
      ==> ?lma = ?lmb",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5)),
              template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 4)),
            template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5)),
              template_var 4),
            template_var 1),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 4)),
            template_var 0))],
       template_equation (template_var 2, template_var 0))),
    ("Abacus_Hoare.abc_Hoare_haltI",
     "(!!lm. ?P lm ==>
             EX n. abc_final (abc_steps_l (0, lm) ?p n) ?p &
                   ?Q abc_holds_for abc_steps_l (0, lm) ?p n) ==>
      {?P} ?p {?Q}",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Abacus_Hoare.abc_comp_frist_steps_eq_pre",
     "[| abc_notfinal (abc_steps_l (0, ?lm) ?A ?n) ?A; ?A ~= [] |]
      ==> abc_steps_l (0, ?lm) (?A [+] ?B) ?n = abc_steps_l (0, ?lm) ?A ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_hole 5),
                        template_var 3)),
                    template_var 2),
                  template_var 1)),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 3)),
             template_var 2),
           template_var 1)))),
    ("Abacus_Hoare.abc_Hoare_plus_unhalt2'",
     "[| {?Q} ?B \<up>; {?P} ?A {?Q}; ?A ~= []; ?P ?args |]
      ==> abc_notfinal (abc_steps_l (0, ?args) (?A [+] ?B) ?n) (?A [+] ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 5)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate (template_app (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 4)),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4))
           ))),
    ("Abacus_Hoare.abc_comp_frist_steps_halt_eq'",
     "[| abc_steps_l (0, ?lm) ?A ?n = (length ?A, ?lm'); ?A ~= [] |]
      ==> EX n'. abc_steps_l (0, ?lm) (?A [+] ?B) n' = (length ?A, ?lm')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 4)),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 5, template_var 3)),
            template_var 1)),
        template_negation
         (template_equation (template_var 3, template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Abacus_Hoare.abc_comp_second_step_eq",
     "abc_step_l (?s, ?lm) (abc_fetch ?s ?B) = (?sa, ?lma) ==>
      abc_step_l (?s + length ?A, ?lm)
       (abc_fetch (?s + length ?A) (?A [+] ?B)) =
      (?sa + length ?A, ?lma)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4)),
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 3)),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app (template_hole 1, template_var 0))),
               template_var 4)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 1, template_var 0))),
           template_var 1)))),
    ("Abacus_Hoare.abc_before_final",
     "[| abc_final (abc_steps_l (0, ?lm) ?p ?n) ?p; ?p ~= [] |]
      ==> EX n'.
             abc_notfinal (abc_steps_l (0, ?lm) ?p n') ?p &
             abc_final (abc_steps_l (0, ?lm) ?p (Suc n')) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_hole 7),
                        template_var 2)),
                    template_var 1),
                  template_var 0)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Abacus_HoareMoreTemplates"
### 0.389s elapsed time, 0.573s cpu time, 0.092s GC time
val it = (): unit
