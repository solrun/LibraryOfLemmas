Loading theory "Draft.Turing" (required by "Draft.UncomputableMoreTemplates" via "Draft.Uncomputable" via "Draft.Turing_Hoare")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UncomputableMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UncomputableMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UncomputableMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.553s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.UncomputableMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.877s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UncomputableMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.334s cpu time, 0.139s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UncomputableMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
Found termination order: "{}"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.903s elapsed time, 3.418s cpu time, 0.833s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 0.959s elapsed time, 3.495s cpu time, 0.742s GC time
Found termination order: "size <*mlex*> {}"
class tape = type +
  fixes tape_of :: "'a => cell list"
instantiation
  nat :: tape
  tape_of_nat == tape_of :: nat => cell list
instantiation
  list :: (tape) tape
  tape_of_list == tape_of :: 'a list => cell list
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
instantiation
  prod :: (tape, tape) tape
  tape_of_prod == tape_of :: 'a * 'b => cell list
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Turing"
### 1.659s elapsed time, 5.632s cpu time, 1.013s GC time
Loading theory "Draft.Turing_Hoare" (required by "Draft.UncomputableMoreTemplates" via "Draft.Uncomputable")
Found termination order: "{}"
### Ambiguous input (line 41 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q))))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>Hoare_halt" ("_position" P) ("_position" p) ("_position" Q))
###   ("\<^const>HOL.All_binder" ("_position" tp)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" tp))
###       ("\<^const>HOL.Ex_binder" ("_position" n)
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n)))))
###           ("\<^const>Turing_Hoare.holds_for" ("_position" Q)
###             ("_applC" ("_position" steps0)
###               ("_cargs"
###                 ("_tuple" ("\<^const>Groups.one_class.one")
###                   ("_tuple_arg" ("_position" tp)))
###                 ("_cargs" ("_position" p) ("_position" n))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" Q))
###     ("_cargs" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" Q) ("_position" B)
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing.tm_comp"
###     ("_applC" ("_Finset" ("_position" P)) ("_position" A))
###     ("_applC" ("_position" B) ("_Finset" ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P)
###     ("\<^const>Turing.tm_comp" ("_position" A) ("_position" B))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" A) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" A)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P) ("_position" p)
###     ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 155 of "$AFP/Universal_Turing_Machine/Turing_Hoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" P'))
###     ("_cargs" ("_position" p) ("_Finset" ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" P') ("_position" p)
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Turing_Hoare"
### 0.114s elapsed time, 0.236s cpu time, 0.000s GC time
Loading theory "Draft.Uncomputable" (required by "Draft.UncomputableMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.883s elapsed time, 5.844s cpu time, 1.021s GC time
Loading theory "Draft.Templates" (required by "Draft.UncomputableMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.158s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UncomputableMoreTemplates")
Found termination order: "{}"
### Ambiguous input (line 117 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_begin1) ("_position" n))
###       ("_position" tcopy_begin)
###       ("_applC" ("_position" inv_begin0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_begin)
###         ("_Finset" ("_applC" ("_position" inv_begin0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 181 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_begin1) ("_position" n))
###       ("_position" tcopy_begin)
###       ("_applC" ("_position" inv_begin0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_position" n)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_begin)
###         ("_Finset" ("_applC" ("_position" inv_begin0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.172s cpu time, 0.093s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 548 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" inv_loop1) ("_position" n))
###     ("_position" tcopy_loop)
###     ("_applC" ("_position" inv_loop0) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" inv_loop1) ("_position" n)))
###     ("_cargs" ("_position" tcopy_loop)
###       ("_Finset" ("_applC" ("_position" inv_loop0) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 784 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Turing_Hoare.Hoare_halt"
###       ("_applC" ("_position" inv_end1) ("_position" n))
###       ("_position" tcopy_end)
###       ("_applC" ("_position" inv_end0) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater" ("_position" n)
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_Finset" ("_applC" ("_position" inv_end1) ("_position" n)))
###       ("_cargs" ("_position" tcopy_end)
###         ("_Finset" ("_applC" ("_position" inv_end0) ("_position" n)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 815 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" inv_begin1) ("_position" x)) ("_position" tcopy)
###     ("_applC" ("_position" inv_end0) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" inv_begin1) ("_position" x)))
###     ("_cargs" ("_position" tcopy)
###       ("_Finset" ("_applC" ("_position" inv_end0) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 852 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_tcopy) ("_position" n)) ("_position" tcopy)
###     ("_applC" ("_position" post_tcopy) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_applC" ("_position" pre_tcopy) ("_position" n)))
###     ("_cargs" ("_position" tcopy)
###       ("_Finset" ("_applC" ("_position" post_tcopy) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_Finset" ("_position" dither_halt_inv))
###     ("_cargs" ("_position" dither)
###       ("_Finset" ("_position" dither_halt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt" ("_position" dither_halt_inv)
###     ("_position" dither) ("_position" dither_halt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 923 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" halts) ("_cargs" ("_position" p) ("_position" ns)))
###   ("_applC"
###     ("_Finset"
###       ("_lambda" ("_position" tp)
###         ("\<^const>HOL.eq" ("_position" tp)
###           ("_tuple" ("\<^const>List.list.Nil")
###             ("_tuple_arg"
###               ("\<^const>Turing.tape_class.tape_of" ("_position" ns)))))))
###     ("_cargs" ("_position" p)
###       ("_Finset"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" k)
###               ("_idts" ("_position" n) ("_position" l)))
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>List.append"
###                     ("\<^const>Turing.tape_class.tape_of"
###                       ("_constrain" ("_position" n) ("_type_name" nat)))
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" l))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" halts) ("_cargs" ("_position" p) ("_position" ns)))
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_lambda" ("_position" tp)
###       ("\<^const>HOL.eq" ("_position" tp)
###         ("_tuple" ("\<^const>List.list.Nil")
###           ("_tuple_arg"
###             ("\<^const>Turing.tape_class.tape_of" ("_position" ns))))))
###     ("_position" p)
###     ("_lambda" ("_position" tp)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" k) ("_idts" ("_position" n) ("_position" l)))
###         ("\<^const>HOL.eq" ("_position" tp)
###           ("_tuple"
###             ("\<^const>Turing.exponent" ("_position" Bk) ("_position" k))
###             ("_tuple_arg"
###               ("\<^const>List.append"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_constrain" ("_position" n) ("_type_name" nat)))
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" l))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 951 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" halts)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_position" tp)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple" ("_list" ("_position" Bk))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                       ("_tuple_arg" ("_position" ns)))))))))
###         ("_cargs" ("_position" H)
###           ("_Finset"
###             ("_lambda" ("_position" tp)
###               ("\<^const>HOL.Ex_binder" ("_position" k)
###                 ("\<^const>HOL.eq" ("_position" tp)
###                   ("_tuple"
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" k))
###                     ("_tuple_arg"
###                       ("\<^const>Turing.tape_class.tape_of"
###                         ("_constrain" ("\<^const>Groups.zero_class.zero")
###                           ("_type_name" nat))))))))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" halts)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_halt"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.eq" ("_position" tp)
###             ("_tuple" ("_list" ("_position" Bk))
###               ("_tuple_arg"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                     ("_tuple_arg" ("_position" ns))))))))
###         ("_position" H)
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder" ("_position" k)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_constrain" ("\<^const>Groups.zero_class.zero")
###                       ("_type_name" nat))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 953 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" halts)
###           ("_cargs" ("_position" M) ("_position" ns)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_position" tp)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple" ("_list" ("_position" Bk))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                       ("_tuple_arg" ("_position" ns)))))))))
###         ("_cargs" ("_position" H)
###           ("_Finset"
###             ("_lambda" ("_position" tp)
###               ("\<^const>HOL.Ex_binder" ("_position" k)
###                 ("\<^const>HOL.eq" ("_position" tp)
###                   ("_tuple"
###                     ("\<^const>Turing.exponent" ("_position" Bk)
###                       ("_position" k))
###                     ("_tuple_arg"
###                       ("\<^const>Turing.tape_class.tape_of"
###                         ("_constrain" ("\<^const>Groups.one_class.one")
###                           ("_type_name" nat))))))))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" M) ("_position" ns))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" halts)
###           ("_cargs" ("_position" M) ("_position" ns)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Turing_Hoare.Hoare_halt"
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.eq" ("_position" tp)
###             ("_tuple" ("_list" ("_position" Bk))
###               ("_tuple_arg"
###                 ("\<^const>Turing.tape_class.tape_of"
###                   ("_tuple" ("_applC" ("_position" code) ("_position" M))
###                     ("_tuple_arg" ("_position" ns))))))))
###         ("_position" H)
###         ("_lambda" ("_position" tp)
###           ("\<^const>HOL.Ex_binder" ("_position" k)
###             ("\<^const>HOL.eq" ("_position" tp)
###               ("_tuple"
###                 ("\<^const>Turing.exponent" ("_position" Bk)
###                   ("_position" k))
###                 ("_tuple_arg"
###                   ("\<^const>Turing.tape_class.tape_of"
###                     ("_constrain" ("\<^const>Groups.one_class.one")
###                       ("_type_name" nat))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale uncomputable
  fixes code :: "(action * nat) list => nat"
    and H :: "(action * nat) list"
  assumes "uncomputable code H"
### Ambiguous input (line 969 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("_Finset"
###       ("_applC" ("_position" pre_H_inv)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("_cargs" ("_position" H) ("_Finset" ("_position" post_H_halt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_H_inv)
###       ("_cargs" ("_position" M) ("_position" ns)))
###     ("_position" H) ("_position" post_H_halt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 974 of "$AFP/Universal_Turing_Machine/Uncomputable.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("_Finset"
###       ("_applC" ("_position" pre_H_inv)
###         ("_cargs" ("_position" M) ("_position" ns))))
###     ("_cargs" ("_position" H) ("_Finset" ("_position" post_H_unhalt_inv)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Turing_Hoare.Hoare_halt"
###     ("_applC" ("_position" pre_H_inv)
###       ("_cargs" ("_position" M) ("_position" ns)))
###     ("_position" H) ("_position" post_H_unhalt_inv)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Uncomputable"
### 2.949s elapsed time, 5.711s cpu time, 2.502s GC time
Loading theory "Draft.UncomputableMoreTemplates"
val templateLemmas =
   [("Uncomputable.inv_end_nonempty", "inv_end1 ?x ([], ?list) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Uncomputable.inv_end_nonempty", "inv_end1 ?x (?b, []) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Uncomputable.inv_end_nonempty", "inv_end2 ?x (?b, []) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Uncomputable.inv_end_nonempty", "inv_end3 ?x (?b, []) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Uncomputable.inv_end_nonempty", "inv_end4 ?x (?b, []) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Uncomputable.inv_end_nonempty", "inv_end5 ?x (?b, []) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Uncomputable.inv_loop_nonempty", "inv_loop1 ?x (?b, []) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Uncomputable.inv_loop_nonempty", "inv_loop2 ?x ([], ?b) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Uncomputable.inv_loop_nonempty", "inv_loop2 ?x (?l', []) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Uncomputable.inv_loop_nonempty", "inv_loop3 ?x (?b, []) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Uncomputable.inv_loop_nonempty", "inv_loop4 ?x ([], ?b) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Uncomputable.inv_loop_nonempty", "inv_loop5 ?x ([], ?list) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Uncomputable.inv_loop_nonemptyE", "inv_loop5 ?x (?b, []) ==> ?RR",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0))
            )],
       template_predicate (template_var 0))),
    ("Uncomputable.inv_loop_nonemptyE", "inv_loop6 ?x (?b, []) ==> ?RR",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0))
            )],
       template_predicate (template_var 0))),
    ("Uncomputable.inv_end_nonempty",
     "inv_end5 ?x ([], Oc # ?list) = False",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_hole 0)),
    ("Uncomputable.inv_end5_exit_no_Oc",
     "inv_end5_exit ?x (?b, Oc # ?list) = False",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_hole 0)),
    ("Uncomputable.inv_loop5_exit_no_Oc",
     "inv_loop5_exit ?x (?b, Oc # ?list) = False",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_hole 0)),
    ("Uncomputable.inv_loop5_loop_no_Bk",
     "inv_loop5_loop ?x (?b, Bk # ?list) = False",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_hole 0)),
    ("Uncomputable.inv_loop_nonempty",
     "inv_loop6 ?x ([], Bk # ?xs) = False",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_hole 0)),
    ("Uncomputable.inv_loop6_exit_no_Bk",
     "inv_loop6_exit ?x (?b, Bk # ?list) = False",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_hole 0)),
    ("Uncomputable.Bk_no_Oc_repeatE", "Bk # ?list = Oc \<up> ?t ==> ?RR",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_hole 0))],
       template_predicate (template_var 0))),
    ("Uncomputable.inv_loop6_loop_no_Oc_Bk",
     "inv_loop6_loop ?x (?b, Oc # Bk # ?list) = False",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_var 0)))),
       template_hole 0)),
    ("Uncomputable.begin_correct",
     "0 < ?n ==> {inv_begin1 ?n} tcopy_begin {inv_begin0 ?n}",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Uncomputable.end_correct",
     "0 < ?n ==> {inv_end1 ?n} tcopy_end {inv_end0 ?n}",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Uncomputable.loop_correct",
     "0 < ?n ==> {inv_loop1 ?n} tcopy_loop {inv_loop0 ?n}",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Uncomputable.tcopy_correct1",
     "0 < ?x ==> {inv_begin1 ?x} tcopy {inv_end0 ?x}",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Uncomputable.gr1_conv_Suc",
     "(Suc 0 < ?mr) = (EX nat. ?mr = Suc (Suc nat))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Uncomputable.inv_end5_loop_no_Bk_Oc",
     "inv_end5_loop ?x (tl ?b, Bk # Oc # ?list) = False",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_var 0)))),
       template_hole 0)),
    ("Uncomputable.inv_loop_nonemptyE",
     "inv_loop1 ?x (?b, Bk # ?list) ==> ?b = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("Uncomputable.takeWhile_replicate",
     "?P ?a ==> takeWhile ?P (?a \<up> ?x) = ?a \<up> ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Uncomputable.inv_loop1_hd_Oc",
     "inv_loop1 ?x (?l', Oc # ?list) ==> hd ?list = Oc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("Uncomputable.inv_end_step",
     "[| 0 < ?x; inv_end ?x ?cf |] ==> inv_end ?x (step0 ?cf tcopy_end)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 4)))
           ))),
    ("Uncomputable.inv_begin_step",
     "[| inv_begin ?n ?cf; 0 < ?n |]
      ==> inv_begin ?n (step0 ?cf tcopy_begin)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 3)))
           ))),
    ("Uncomputable.inv_loop_step",
     "[| inv_loop ?x ?cf; 0 < ?x |] ==> inv_loop ?x (step0 ?cf tcopy_loop)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 3)))
           ))),
    ("Uncomputable.inv_loop6_Bk_Bk_drop",
     "inv_loop6 ?x ([], Bk # ?list) ==> inv_loop6 ?x ([], Bk # Bk # ?list)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_app
                 (template_app (template_hole 1, template_hole 0),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_end_steps",
     "[| 0 < ?x; inv_end ?x ?cf |]
      ==> inv_end ?x (steps0 ?cf tcopy_end ?stp)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_hole 4)),
               template_var 0))
           ))),
    ("Uncomputable.inv_begin_steps",
     "[| inv_begin ?n ?cf; 0 < ?n |]
      ==> inv_begin ?n (steps0 ?cf tcopy_begin ?stp)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_hole 3)),
               template_var 0))
           ))),
    ("Uncomputable.inv_loop_steps",
     "[| inv_loop ?x ?cf; 0 < ?x |]
      ==> inv_loop ?x (steps0 ?cf tcopy_loop ?stp)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_hole 3)),
               template_var 0))
           ))),
    ("Uncomputable.split_head_repeat",
     "(Bk # ?list1.0 = Oc \<up> ?j @ ?list2.0) =
      (?j = 0 & Bk # ?list1.0 = ?list2.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6), template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 0))
           ))),
    ("Uncomputable.split_head_repeat",
     "(Oc # ?list1.0 = Bk \<up> ?j @ ?list2.0) =
      (?j = 0 & Oc # ?list1.0 = ?list2.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6), template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 0))
           ))),
    ("Uncomputable.split_head_repeat",
     "(Bk \<up> ?j @ ?list2.0 = Oc # ?list1.0) =
      (?j = 0 & Oc # ?list1.0 = ?list2.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_hole 5)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0)),
               template_var 1))
           ))),
    ("Uncomputable.split_head_repeat",
     "(Oc \<up> ?j @ ?list2.0 = Bk # ?list1.0) =
      (?j = 0 & Bk # ?list1.0 = ?list2.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_hole 5)),
           template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0)),
               template_var 1))
           ))),
    ("Uncomputable.takeWhile_replicate_append",
     "?P ?a ==>
      takeWhile ?P (?a \<up> ?x @ ?ys) = ?a \<up> ?x @ takeWhile ?P ?ys",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0))))),
    ("Uncomputable.inv_loop3_Bk_empty_via_2",
     "[| 0 < ?x; inv_loop2 ?x (?b, []) |] ==> inv_loop3 ?x (Bk # ?b, [])",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               template_hole 3))
           ))),
    ("Uncomputable.inv_loop3_Bk_empty",
     "[| 0 < ?x; inv_loop3 ?x (?b, []) |] ==> inv_loop3 ?x (Bk # ?b, [])",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               template_hole 2))
           ))),
    ("Uncomputable.inv_loop5_Oc_empty_via_4",
     "[| 0 < ?x; inv_loop4 ?x (?b, []) |] ==> inv_loop5 ?x (?b, [Oc])",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 3)))
           ))),
    ("Uncomputable.begin_halts",
     "0 < ?x ==>
      EX stp. is_final (steps0 (1, [], Oc \<up> ?x) tcopy_begin stp)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 0)],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Uncomputable.inv_end2_Oc_via_1",
     "[| 0 < ?x; inv_end1 ?x (?b, Oc # ?list) |]
      ==> inv_end2 ?x (Oc # ?b, ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_var 0))
           ))),
    ("Uncomputable.inv_end3_Oc_via_2",
     "[| 0 < ?x; inv_end2 ?x (?b, Bk # ?list) |]
      ==> inv_end3 ?x (?b, Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_hole 0),
                 template_var 0)))
           ))),
    ("Uncomputable.inv_end2_Bk_via_3",
     "[| 0 < ?x; inv_end3 ?x (?b, Bk # ?list) |]
      ==> inv_end2 ?x (Bk # ?b, ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_var 0))
           ))),
    ("Uncomputable.inv_end2_Oc_via_3",
     "[| 0 < ?x; inv_end3 ?x (?b, Oc # ?list) |]
      ==> inv_end2 ?x (Oc # ?b, ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_var 0))
           ))),
    ("Uncomputable.inv_end4_Bk_via_Oc",
     "[| 0 < ?x; inv_end4 ?x (?b, Oc # ?list) |]
      ==> inv_end4 ?x (?b, Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_hole 0),
                 template_var 0)))
           ))),
    ("Uncomputable.inv_end0_Bk_via_5",
     "[| 0 < ?x; inv_end5 ?x (?b, Bk # ?list) |]
      ==> inv_end0 ?x (Bk # ?b, ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_var 0))
           ))),
    ("Uncomputable.inv_loop2_Oc_via_1",
     "[| 0 < ?x; inv_loop1 ?x (?b, Oc # ?list) |]
      ==> inv_loop2 ?x (Oc # ?b, ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_var 0))
           ))),
    ("Uncomputable.inv_loop3_Bk_via_2",
     "[| 0 < ?x; inv_loop2 ?x (?b, Bk # ?list) |]
      ==> inv_loop3 ?x (Bk # ?b, ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_var 0))
           ))),
    ("Uncomputable.inv_loop2_Bk_via_Oc",
     "[| 0 < ?x; inv_loop2 ?x (?b, Oc # ?list) |]
      ==> inv_loop2 ?x (?b, Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_hole 0),
                 template_var 0)))
           ))),
    ("Uncomputable.inv_loop3_Bk_move",
     "[| 0 < ?x; inv_loop3 ?x (?b, Bk # ?list) |]
      ==> inv_loop3 ?x (Bk # ?b, ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_hole 0),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 0))
           ))),
    ("Uncomputable.inv_loop4_Oc_via_3",
     "[| 0 < ?x; inv_loop3 ?x (?b, Oc # ?list) |]
      ==> inv_loop4 ?x (Oc # ?b, ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_var 0))
           ))),
    ("Uncomputable.inv_loop5_Oc_via_4_Bk",
     "[| 0 < ?x; inv_loop4 ?x (?b, Bk # ?list) |]
      ==> inv_loop5 ?x (?b, Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_hole 0),
                 template_var 0)))
           ))),
    ("Uncomputable.inv_loop4_Oc_move",
     "[| 0 < ?x; inv_loop4 ?x (?b, Oc # ?list) |]
      ==> inv_loop4 ?x (Oc # ?b, ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_hole 0),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 0))
           ))),
    ("Uncomputable.tcopy_correct",
     "{%tp. tp = ([], Oc \<up> Suc ?n)} tcopy
      {%tp. tp = ([Bk], <(?n, ?n)>)}",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 11, t_empty), template_hole 4),
           t_empty)
         )),
    ("Uncomputable.measure_begin_induct",
     "(!!n. ~ ?P (?f n) ==> (?f (Suc n), ?f n) : measure_begin) ==>
      EX n. ?P (?f n)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Uncomputable.measure_loop_induct",
     "(!!n. ~ ?P (?f n) ==> (?f (Suc n), ?f n) : measure_loop) ==>
      EX n. ?P (?f n)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Uncomputable.inv_end4_Bk_Oc_via_2",
     "[| 0 < ?x; inv_end2 ?x ([], Oc # ?list) |]
      ==> inv_end4 ?x ([], Bk # Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_hole 0),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_end5_Bk_via_4",
     "[| 0 < ?x; inv_end4 ?x ([], Bk # ?list) |]
      ==> inv_end5 ?x ([], Bk # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_end5_Bk_drop_Oc",
     "[| 0 < ?x; inv_end5 ?x ([], Oc # ?list) |]
      ==> inv_end5 ?x ([], Bk # Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_hole 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop6_Bk_via_5",
     "[| 0 < ?x; inv_loop5 ?x ([], Bk # ?list) |]
      ==> inv_loop6 ?x ([], Bk # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop1_Bk_Oc_via_6",
     "[| 0 < ?x; inv_loop6 ?x ([], Oc # ?list) |]
      ==> inv_loop1 ?x ([], Bk # Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_hole 0),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop6_not_just_Bk",
     "length (takeWhile ?P (rev (tl ?l') @ hd ?l' # ?list)) ~=
      length (takeWhile ?P (rev ?l' @ ?list)) ==>
      ?l' = []",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 1))),
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_var 1)),
                      template_var 0)))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 1)),
                    template_var 0))))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("Uncomputable.inv_loop1_Bk",
     "[| 0 < ?x; inv_loop1 ?x (?b, Bk # ?list) |]
      ==> ?list = Oc # Bk \<up> ?x @ Oc \<up> ?x",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 0)))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 5, template_hole 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_hole 4)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_hole 2)))))),
    ("Uncomputable.halt_lemma",
     "[| wf ?LE; ALL n. ~ ?P (?f n) --> (?f (Suc n), ?f n) : ?LE |]
      ==> EX n. ?P (?f n)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Uncomputable.inv_loop5_Oc_tl",
     "[| inv_loop5 ?x (?b, Oc # ?list); ?b ~= [] |]
      ==> inv_loop5 ?x (tl ?b, hd ?b # Oc # ?list)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 0))))
           ))),
    ("Uncomputable.begin_partial_correctness",
     "[| is_final (steps0 (1, [], Oc \<up> ?n) tcopy_begin ?stp); 0 < ?n |]
      ==> {inv_begin1 ?n} tcopy_begin {inv_begin0 ?n}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_hole 11),
                      template_app
                       (template_app (template_hole 10, template_hole 9),
                        template_app
                         (template_app (template_hole 8, template_var 1),
                          template_hole 7)))),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4)),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_hole 5),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Uncomputable.loop_halts",
     "[| 0 < ?n; inv_loop ?n (1, ?l, ?r) |]
      ==> EX stp. is_final (steps0 (1, ?l, ?r) tcopy_loop stp)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Uncomputable.end_halt",
     "[| 0 < ?x; inv_end ?x (Suc 0, ?l, ?r) |]
      ==> EX stp. is_final (steps0 (Suc 0, ?l, ?r) tcopy_end stp)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 9)),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Uncomputable.dither_halts_aux",
     "steps0 (1, Bk \<up> ?m, [Oc, Oc]) dither 2 =
      (0, Bk \<up> ?m, [Oc, Oc])",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_hole 12),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 0),
                     template_hole 9)),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_hole 6))))),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app (template_hole 13, template_hole 3),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 0),
               template_hole 9)),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_hole 6)))))),
    ("Uncomputable.inv_end0_Bk_via_1",
     "[| 0 < ?x; inv_end1 ?x (?b, Bk # ?list); ?b ~= [] |]
      ==> inv_end0 ?x (tl ?b, hd ?b # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 0, template_var 1)),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_end4_Oc_via_2",
     "[| 0 < ?x; inv_end2 ?x (?b, Oc # ?list); ?b ~= [] |]
      ==> inv_end4 ?x (tl ?b, hd ?b # Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 0, template_var 1)),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_end5_Bk_tail_via_4",
     "[| 0 < ?x; inv_end4 ?x (?b, Bk # ?list); ?b ~= [] |]
      ==> inv_end5 ?x (tl ?b, hd ?b # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 0, template_var 1)),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_end5_Oc_tail",
     "[| 0 < ?x; inv_end5 ?x (?b, Oc # ?list); ?b ~= [] |]
      ==> inv_end5 ?x (tl ?b, hd ?b # Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop6_Bk_tail_via_5",
     "[| 0 < ?x; inv_loop5 ?x (?b, Bk # ?list); ?b ~= [] |]
      ==> inv_loop6 ?x (tl ?b, hd ?b # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 0, template_var 1)),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop6_Bk_tail",
     "[| 0 < ?x; inv_loop6 ?x (?b, Bk # ?list); ?b ~= [] |]
      ==> inv_loop6 ?x (tl ?b, hd ?b # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop1_Oc_via_6",
     "[| 0 < ?x; inv_loop6 ?x (?b, Oc # ?list); ?b ~= [] |]
      ==> inv_loop1 ?x (tl ?b, hd ?b # Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 0, template_var 1)),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop5_exit_Bk_Oc_via_loop",
     "[| inv_loop5_loop ?x (?b, Oc # ?list); ?b ~= []; hd ?b = Bk |]
      ==> inv_loop5_exit ?x (tl ?b, Bk # Oc # ?list)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app (template_hole 9, template_hole 2),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop5_loop_Oc_Oc_drop",
     "[| inv_loop5_loop ?x (?b, Oc # ?list); ?b ~= []; hd ?b = Oc |]
      ==> inv_loop5_loop ?x (tl ?b, Oc # Oc # ?list)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_equation
         (template_app (template_hole 1, template_var 1), template_hole 6)],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop4_not_just_Oc",
     "[| inv_loop4 ?x (?l', []);
         length (takeWhile (%a. a = Oc) (rev ?l' @ [Oc])) ~=
         length (takeWhile (%a. a = Oc) (rev ?l')) |]
      ==> ?RR",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_hole 9))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, t_empty),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 1)),
                    template_app
                     (template_app (template_hole 0, template_hole 3),
                      template_hole 9)))),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, t_empty),
                  template_app (template_hole 1, template_var 1))))
            )],
       template_predicate (template_var 0))),
    ("Uncomputable.inv_begin_step_E",
     "[| 0 < ?i; 0 < ?j |]
      ==> EX ia>0.
             ia + ?j - Suc 0 = ?i + ?j & Oc # Oc \<up> ?i = Oc \<up> ia",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Uncomputable.inv_end5_exit_Bk_Oc_via_loop",
     "[| 0 < ?x; inv_end5_loop ?x (?b, Oc # ?list); ?b ~= []; hd ?b = Bk |]
      ==> inv_end5_exit ?x (tl ?b, Bk # Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app (template_hole 9, template_hole 2),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_end5_loop_Oc_Oc_drop",
     "[| 0 < ?x; inv_end5_loop ?x (?b, Oc # ?list); ?b ~= []; hd ?b = Oc |]
      ==> inv_end5_loop ?x (tl ?b, Oc # Oc # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_equation
         (template_app (template_hole 1, template_var 1), template_hole 6)],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop6_loopBk_via_5",
     "[| 0 < ?x; inv_loop5_exit ?x (?b, Bk # ?list); ?b ~= []; hd ?b = Bk |]
      ==> inv_loop6_loop ?x (tl ?b, Bk # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_equation
         (template_app (template_hole 2, template_var 1), template_hole 7)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop6_exit_Oc_Bk_via_5",
     "[| 0 < ?x; inv_loop5_exit ?x (?b, Bk # ?list); ?b ~= []; hd ?b = Oc |]
      ==> inv_loop6_exit ?x (tl ?b, Oc # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app (template_hole 9, template_hole 2),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop6_loop_Bk_Bk_drop",
     "[| 0 < ?x; inv_loop6_loop ?x (?b, Bk # ?list); ?b ~= []; hd ?b = Bk |]
      ==> inv_loop6_loop ?x (tl ?b, Bk # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_equation
         (template_app (template_hole 1, template_var 1), template_hole 6)],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop6_exit_Oc_Bk_via_loop6",
     "[| 0 < ?x; inv_loop6_loop ?x (?b, Bk # ?list); ?b ~= []; hd ?b = Oc |]
      ==> inv_loop6_exit ?x (tl ?b, Oc # Bk # ?list)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app (template_hole 9, template_hole 2),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_var 0))))
           ))),
    ("Uncomputable.inv_loop4_not_just_Oc",
     "[| inv_loop4 ?x (?l', Bk # ?list);
         length (takeWhile (%a. a = Oc) (rev ?l' @ Oc # ?list)) ~=
         length (takeWhile (%a. a = Oc) (rev ?l' @ Bk # ?list)) |]
      ==> ?RR",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty),
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_app
                     (template_app (template_hole 9, template_hole 2),
                      template_var 1)))),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty),
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_var 1)))))
            )],
       template_predicate (template_var 0))),
    ("Uncomputable.inv_loop2_OcE",
     "[| inv_loop2 ?x (?l', Oc # ?list); ?l' ~= [] |]
      ==> length (takeWhile (%a. a = Oc) (rev ?l' @ Bk # ?list))
          < length (takeWhile (%a. a = Oc) (rev ?l' @ Oc # ?list))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app (template_hole 11, template_hole 0),
                 template_var 0)))),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_var 0))))))),
    ("Uncomputable.inv_loop5_Bk_E",
     "[| inv_loop5 ?x (?l', Bk # ?list); ?l' ~= [];
         length
          (takeWhile (%a. a = Oc) (rev (tl ?l') @ hd ?l' # Bk # ?list)) ~=
         length (takeWhile (%a. a = Oc) (rev ?l' @ Bk # ?list)) |]
      ==> ?RR",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_app
               (template_app (template_hole 14, template_var 2),
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_var 1)))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_hole 2,
                        template_app (template_hole 1, template_var 2))),
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app (template_hole 0, template_var 2)),
                      template_app
                       (template_app (template_hole 13, template_hole 12),
                        template_var 1))))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 2)),
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_var 1)))))
            )],
       template_predicate (template_var 0))),
    ("Uncomputable.dither_loops_aux",
     "steps0 (1, Bk \<up> ?m, [Oc]) dither ?stp = (1, Bk \<up> ?m, [Oc]) |
      steps0 (1, Bk \<up> ?m, [Oc]) dither ?stp =
      (2, Oc # Bk \<up> ?m, [])",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app (template_hole 13, template_hole 12),
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_app
                                (template_hole 10, template_var 1),
                               template_hole 9)),
                           template_app
                            (template_app
                              (template_hole 8, template_hole 7),
                             template_hole 6)))),
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_hole 3)),
                   template_var 0)),
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_hole 9)),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_hole 6))))),
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 13, template_hole 12),
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10, template_var 1),
                             template_hole 9)),
                         template_app
                          (template_app (template_hole 8, template_hole 7),
                           template_hole 6)))),
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_hole 3)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_hole 9))),
                 template_hole 6))))
         ))]:
   (string * thm * template) list
### theory "Draft.UncomputableMoreTemplates"
### 0.383s elapsed time, 0.582s cpu time, 0.063s GC time
val it = (): unit
