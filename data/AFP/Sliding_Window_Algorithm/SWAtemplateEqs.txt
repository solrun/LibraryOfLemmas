   [("SWA.l_discharge", "l (discharge ?a) = l ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("SWA.r_discharge", "r (discharge ?a) = r ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("SWA.l_map_tree_eq_l", "l (SWA.tree.map_tree ?f ?t) = l ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("SWA.l_update_rightmost_eq_l", "l (update_rightmost ?f ?t) = l ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("SWA.r_map_tree_eq_r", "r (SWA.tree.map_tree ?f ?t) = r ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("SWA.r_update_rightmost_eq_r", "r (update_rightmost ?f ?t) = r ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("SWA.valid_Nil_iff", "valid [] ?t = (?t = SWA.tree.Leaf)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("SWA.discharge_is_Leaf",
     "(discharge ?a = SWA.tree.Leaf) = (?a = SWA.tree.Leaf)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("SWA.map_tree_eq_Leaf_iff",
     "(SWA.tree.map_tree ?f ?t = SWA.tree.Leaf) = (?t = SWA.tree.Leaf)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("SWA.update_rightmost_eq_Leaf_iff",
     "(update_rightmost ?f ?t = SWA.tree.Leaf) = (?t = SWA.tree.Leaf)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("SWA.append_Cons_eq_append_append",
     "?xs @ ?y # ?ys = ?xs @ [?y] @ ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)))),
    ("SWA.adjacent_Cons",
     "adjacent ?w (?t # ?ts) =
      (?t ~= SWA.tree.Leaf &
       r ?t = snd ?w &
       (case ?ts of [] => l ?t = fst ?w
        | u # us => adjacent (fst ?w, r u) ?ts & l ?t = Suc (r u)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0))
            )],
       template_dunno))]
