Loading theory "Draft.SWA" (required by "Draft.SWAMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SWAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SWAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SWAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.522s cpu time, 0.058s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SWAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.268s elapsed time, 1.083s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SWAMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.390s elapsed time, 1.552s cpu time, 0.152s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SWAMoreTemplates" via "Draft.ExtrEqs")
consts
  discharge :: "'a tree => 'a tree"
instantiation
  option :: (semigroup_add) semigroup_add
  plus_option == plus :: 'a option => 'a option => 'a option
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  well_shaped :: "'a tree => bool"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  iterate :: "'a tree => (nat * nat) list => 'a list"
consts
  well_valued0 :: "'a tree => bool"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.992s elapsed time, 3.750s cpu time, 0.756s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.103s elapsed time, 4.062s cpu time, 0.820s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"[11, 13, 11]"
  :: "nat list"
### theory "Draft.SWA"
### 1.661s elapsed time, 6.272s cpu time, 1.023s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"Node 1 3 (Some 11) (Node 1 1 None Leaf Leaf)
  (Node 2 3 (Some 9) (Node 2 2 None Leaf Leaf)
    (Node 3 3 (Some 5) Leaf Leaf))"
  :: "nat tree"
Found termination order: "size <*mlex*> {}"
"Node 1 3 (Some 11) (Node 1 1 None Leaf Leaf)
  (Node 2 3 (Some 9) (Node 2 2 None Leaf Leaf)
    (Node 3 3 (Some 5) Leaf Leaf))"
  :: "nat tree"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"Node 1 4 (Some 13) (Node 1 1 None Leaf Leaf)
  (Node 2 4 (Some 11) (Node 2 2 None Leaf Leaf)
    (Node 3 4 (Some 7) (Node 3 3 None Leaf Leaf)
      (Node 4 4 (Some 2) Leaf Leaf)))"
  :: "nat tree"
"Node 2 4 (Some 11) (Node 2 2 None Leaf Leaf)
  (Node 3 4 (Some 7) (Node 3 3 None Leaf Leaf)
    (Node 4 4 (Some 2) Leaf Leaf))"
  :: "nat tree"
"Node 2 4 (Some 11)
  (Node 2 3 None (Node 2 2 None Leaf Leaf) (Node 3 3 (Some 5) Leaf Leaf))
  (Node 4 4 (Some 2) Leaf Leaf)"
  :: "nat tree"
"Node 1 4 (Some 13)
  (Node 1 3 None (Node 1 1 None Leaf Leaf)
    (Node 2 3 (Some 9) (Node 2 2 None Leaf Leaf)
      (Node 3 3 (Some 5) Leaf Leaf)))
  (Node 4 4 (Some 2) Leaf Leaf)"
  :: "nat tree"
"Node 1 3 (Some 11) (Node 1 1 None Leaf Leaf)
  (Node 2 3 (Some 9) (Node 2 2 None Leaf Leaf)
    (Node 3 3 (Some 5) Leaf Leaf))"
  :: "nat tree"
"Node 2 4 (Some 11)
  (Node 2 3 None (Node 2 2 None Leaf Leaf) (Node 3 3 (Some 5) Leaf Leaf))
  (Node 4 4 (Some 2) Leaf Leaf)"
  :: "nat tree"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.103s elapsed time, 7.138s cpu time, 1.093s GC time
Loading theory "Draft.Templates" (required by "Draft.SWAMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.077s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SWAMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.460s elapsed time, 0.467s cpu time, 0.000s GC time
Loading theory "Draft.SWAMoreTemplates"
val templateLemmas =
   [("SWA.adjacent_Nil", "adjacent ?w []",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("SWA.valid_Leaf", "valid ?as SWA.tree.Leaf",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("SWA.l_discharge", "l (discharge ?a) = l ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("SWA.r_discharge", "r (discharge ?a) = r ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("SWA.l_map_tree_eq_l", "l (SWA.tree.map_tree ?f ?t) = l ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("SWA.l_update_rightmost_eq_l", "l (update_rightmost ?f ?t) = l ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("SWA.r_map_tree_eq_r", "r (SWA.tree.map_tree ?f ?t) = r ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("SWA.r_update_rightmost_eq_r", "r (update_rightmost ?f ?t) = r ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("SWA.valid_Nil_iff", "valid [] ?t = (?t = SWA.tree.Leaf)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("SWA.well_shaped_lchild", "well_shaped ?t ==> well_shaped (lchild ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SWA.well_shaped_rchild", "well_shaped ?t ==> well_shaped (rchild ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SWA.well_shaped_discharge",
     "well_shaped ?a ==> well_shaped (discharge ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SWA.discharge_is_Leaf",
     "(discharge ?a = SWA.tree.Leaf) = (?a = SWA.tree.Leaf)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("SWA.adjacent_atomics", "adjacent (?i, ?j) (atomics ?as ?i ?j)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1))
         )),
    ("SWA.well_shaped_update_rightmost",
     "well_shaped ?t ==> well_shaped (update_rightmost ?f ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("SWA.well_shaped_map_tree",
     "well_shaped ?t ==> well_shaped (SWA.tree.map_tree ?f ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("SWA.map_tree_eq_Leaf_iff",
     "(SWA.tree.map_tree ?f ?t = SWA.tree.Leaf) = (?t = SWA.tree.Leaf)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("SWA.update_rightmost_eq_Leaf_iff",
     "(update_rightmost ?f ?t = SWA.tree.Leaf) = (?t = SWA.tree.Leaf)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("SWA.well_shaped_lr", "well_shaped ?a ==> l ?a <= r ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("SWA.valid_rchild_if_valid", "valid ?as ?t ==> valid ?as (rchild ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SWA.well_valued0_discharge",
     "well_valued0 ?as ?a ==> well_valued0 ?as (discharge ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SWA.well_valued0_lchild_if_well_valued0",
     "well_valued0 ?as ?t ==> well_valued0 ?as (lchild ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SWA.well_valued0_rchild_if_well_valued0",
     "well_valued0 ?as ?t ==> well_valued0 ?as (rchild ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SWA.r_lchild_le_r", "well_shaped ?t ==> r (lchild ?t) <= r ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("SWA.valid_append", "valid ?as ?t ==> valid (?as @ ?as') ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("SWA.neq_Leaf_if_l_gt0", "0 < l ?t ==> ?t ~= SWA.tree.Leaf",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("SWA.valid_take_r", "valid ?as ?t ==> valid (take (r ?t) ?as) ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)),
             template_var 0)
           ))),
    ("SWA.reusables_Leaf", "0 < fst ?w ==> reusables SWA.tree.Leaf ?w = []",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("SWA.append_Cons_eq_append_append",
     "?xs @ ?y # ?ys = ?xs @ [?y] @ ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)))),
    ("SWA.valid_rchild_if_well_valued0",
     "[| well_shaped ?t; well_valued0 ?as ?t |] ==> valid ?as (rchild ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SWA.val_update_rightmost_neq_None",
     "val ?t ~= None ==> val (update_rightmost ?f ?t) ~= None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("SWA.val_map_tree_neq_None",
     "val ?t ~= None ==> val (SWA.tree.map_tree ?f ?t) ~= None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_hole 0)
           ))),
    ("SWA.well_valued0_append",
     "[| well_shaped ?t; well_valued0 ?as ?t |]
      ==> well_valued0 (?as @ ?as') ?t",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("SWA.adjacent_singleton",
     "?t ~= SWA.tree.Leaf ==> adjacent (l ?t, r ?t) [?t]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("SWA.well_valued0_take_r",
     "[| well_shaped ?t; well_valued0 ?as ?t |]
      ==> well_valued0 (take (r ?t) ?as) ?t",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)),
             template_var 1)
           ))),
    ("SWA.well_valued0_r",
     "[| well_valued0 ?as ?a; ?a ~= SWA.tree.Leaf |]
      ==> r ?a <= length ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("SWA.l_lchild_eq_l_if_well_shaped",
     "[| well_shaped ?t; l ?t < r ?t |] ==> l (lchild ?t) = l ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 3, template_var 0)))),
    ("SWA.r_rchild_eq_r_if_well_shaped",
     "[| well_shaped ?t; l ?t < r ?t |] ==> r (rchild ?t) = r ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("SWA.adjacent_Cons_implies_adjacent",
     "adjacent (?a, ?b) (?t # ?ts) ==> adjacent (?a, l ?t - Suc 0) ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_app (template_hole 1, template_hole 0)))),
             template_var 0)
           ))),
    ("SWA.adjacent_Cons_r",
     "adjacent (?a, r ?t) (?x # ?xs) ==> adjacent (?a, r ?x) (?x # ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2))),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("SWA.combine_neq_Leaf_if_both_non_Leaf",
     "[| ?a ~= SWA.tree.Leaf; ?z ~= SWA.tree.Leaf |]
      ==> combine ?a ?z ~= SWA.tree.Leaf",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("SWA.r_combine_non_Leaves",
     "[| ?t ~= SWA.tree.Leaf; ?u ~= SWA.tree.Leaf |]
      ==> r (combine ?t ?u) = r ?u",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("SWA.take_eq_append_take_take_drop",
     "?m <= ?n ==>
      take ?n ?xs = take ?m ?xs @ take (?n - ?m) (drop ?m ?xs)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("SWA.r_lchild_eq_l_rchild_if_well_shaped",
     "[| well_shaped ?t; l ?t < r ?t |]
      ==> r (lchild ?t) = l (rchild ?t) - 1",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 6,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("SWA.well_valued0_butlast",
     "[| well_shaped ?t; well_valued0 ?as ?t; r ?t < length ?as |]
      ==> well_valued0 (butlast ?as) ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("SWA.well_valued0_append_butlast_lchild",
     "[| well_shaped ?t; well_valued0 ?as ?t |]
      ==> well_valued0 (butlast ?as @ [last ?as + ?x]) (lchild ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1)),
                       template_var 0)),
                   template_hole 1))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("SWA.list_all2_append_singletonI",
     "[| list_all2 ?P ?xs ?ys; ?P ?x ?y |]
      ==> list_all2 ?P (?xs @ [?x]) (?ys @ [?y])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("SWA.valid_atomics",
     "[| ?t : set (atomics ?as ?i ?j); 0 < ?i; ?j <= length ?as |]
      ==> valid ?as ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1),
                  template_var 0)))
            ),
        template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 3)
           ))),
    ("SWA.map_rev_map_nth_eq",
     "ALL x:set ?xs. x < length ?as ==>
      map ?f (rev (map ((!) ?as) ?xs)) = rev (map ((!) (map ?f ?as)) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_var 2))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 1))),
             template_var 2))))),
    ("SWA.valid_update_rightmost",
     "[| valid ?as ?t; length ?as = r ?t |]
      ==> valid (butlast ?as @ [last ?as + ?x])
           (update_rightmost (%a. a + ?x) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 2)),
                       template_var 0)),
                   template_hole 1))),
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           ))),
    ("SWA.f_nth_eq_map_f_nth",
     "[| ?as ~= []; ?n <= length ?as |]
      ==> ?f (?as ! (?n - Suc 0)) = map ?f ?as ! (?n - Suc 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_var 0,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 3, template_hole 2)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, template_hole 2)))))),
    ("SWA.valid_prepend",
     "[| length ?xs <= l ?t - 1; length ?ys = length ?xs;
         valid (?xs @ ?as) ?t |]
      ==> valid (?ys @ ?as) ?t",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_hole 3)),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("SWA.fold_distr",
     "ALL x y. ?f (x + y) = ?f x + ?f y ==>
      ?f (fold (+) ?list ?e) = fold (+) (map ?f ?list) (?f ?e)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("SWA.combine_non_Leaves",
     "[| ?t ~= SWA.tree.Leaf; ?u ~= SWA.tree.Leaf |]
      ==> combine ?t ?u =
          SWA.tree.Node (l ?t) (r ?u) (val ?t + val ?u) (discharge ?t) ?u",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("SWA.list_all2_Cons_append_singletonI",
     "[| ?xs ~= []; list_all2 ?P (?x # butlast ?xs) ?ys; ?P (last ?xs) ?y |]
      ==> list_all2 ?P (?x # ?xs) (?ys @ [?y])",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 4))),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 3, template_var 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 4)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("SWA.reusables_neq_Nil_if_well_shaped_and_overlapping",
     "[| well_shaped ?t; l ?t <= fst ?w; r ?t <= snd ?w; fst ?w <= r ?t |]
      ==> reusables ?t ?w ~= []",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("SWA.well_valued0_update_rightmost",
     "[| well_shaped ?t; well_valued0 ?as ?t; length ?as = r ?t |]
      ==> well_valued0 (butlast ?as @ [last ?as + ?x])
           (update_rightmost (%a. a + ?x) ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1)),
                       template_var 0)),
                   template_hole 1))),
             template_app
              (template_app (template_hole 0, t_empty), template_var 2))
           ))),
    ("SWA.well_valued0_prepend",
     "[| length ?xs <= l ?t - 1; length ?ys = length ?xs; well_shaped ?t;
         well_valued0 (?xs @ ?as) ?t |]
      ==> well_valued0 (?ys @ ?as) ?t",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 3),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_hole 4)),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("SWA.correctness",
     "windows ?as ?ws ==>
      sliding_window ?as ?ws = map (%w. SWA.sum ?as (fst w) (snd w)) ?ws",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 11, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 10, t_empty), template_var 0)))),
    ("SWA.adjacent_reusables",
     "[| 0 < fst ?w; well_shaped ?t; l ?t <= fst ?w; r ?t <= snd ?w |]
      ==> adjacent (fst ?w, r ?t) (reusables ?t ?w)",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 8, template_var 1)),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("SWA.valid_reusables",
     "[| 0 < fst ?w; valid ?as ?t; l ?t <= fst ?w; r ?t <= snd ?w |]
      ==> ALL t':set (reusables ?t ?w). valid ?as t'",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_app (template_hole 8, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             t_empty)
           ))),
    ("SWA.valid_map_map_tree",
     "[| ALL x y. ?f (x + y) = ?f x + ?f y; valid ?as ?t;
         r ?t <= length ?as |]
      ==> valid (map ?f ?as) (SWA.tree.map_tree ?f ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SWA.val_eq_Some_sum_if_valid_neq_Leaf",
     "[| valid ?as ?t; ?t ~= SWA.tree.Leaf |]
      ==> val ?t = Some (SWA.sum ?as (l ?t) (r ?t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 13))],
       template_equation
        (template_app (template_hole 11, template_var 0),
         template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 0)),
                         template_hole 1)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 0, template_var 0)),
                       template_hole 1))))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 0)),
                 template_hole 1))))))),
    ("SWA.valid_reusables_under_some_conditions",
     "[| 0 < fst ?w; well_valued0 ?as ?t; well_shaped ?t; l ?t < fst ?w;
         r ?t <= snd ?w |]
      ==> ALL t':set (reusables ?t ?w). valid ?as t'",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_app (template_hole 10, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             t_empty)
           ))),
    ("SWA.adjacent_Cons",
     "adjacent ?w (?t # ?ts) =
      (?t ~= SWA.tree.Leaf &
       r ?t = snd ?w &
       (case ?ts of [] => l ?t = fst ?w
        | u # us => adjacent (fst ?w, r u) ?ts & l ?t = Suc (r u)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_hole 8))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 1)),
                   template_app (template_hole 5, template_var 2))),
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 3, template_var 1)),
                       template_app (template_hole 2, template_var 2))),
                   t_empty),
                 template_var 0)))
           ))),
    ("SWA.valid_combine_if_valid",
     "[| 0 < l ?a; valid ?as ?a; valid ?as ?z; ?a ~= SWA.tree.Leaf;
         ?z ~= SWA.tree.Leaf; l ?z = Suc (r ?a) |]
      ==> valid ?as (combine ?a ?z)",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_equation
         (template_app (template_hole 8, template_var 0),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 2)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SWA.adjacent_ConsI",
     "[| ?t ~= SWA.tree.Leaf; r ?t = snd ?w;
         case ?ts of [] => l ?t = fst ?w
         | u # us => adjacent (fst ?w, r u) ?ts & l ?t = Suc (r u) |]
      ==> adjacent ?w (?t # ?ts)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 11)),
        template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app (template_hole 6, template_var 2)),
                    template_app (template_hole 5, template_var 1))),
                t_empty),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SWA.adjacent_append_atomics_reusables",
     "[| 0 < fst ?w; fst ?w <= snd ?w; valid ?as ?t; l ?t <= fst ?w;
         r ?t <= snd ?w |]
      ==> adjacent ?w
           (atomics ?as (max (fst ?w) (Suc (r ?t))) (snd ?w) @
            reusables ?t ?w)",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 2),
          template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 0),
          template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app (template_hole 9, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 11, template_var 2)),
                       template_app
                        (template_hole 1,
                         template_app (template_hole 6, template_var 0)))),
                   template_app (template_hole 9, template_var 2))),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("SWA.reusables_lchild_neq_Nil_under_some_conditions",
     "[| well_shaped ?t; l ?t <= fst ?w; r ?t <= snd ?w; fst ?w ~= l ?t;
         fst ?w <= r ?t; fst ?w < l (rchild ?t) |]
      ==> reusables (lchild ?t) ?w ~= []",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_app (template_hole 10, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 11, template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 0),
          template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 10, template_var 0),
          template_app
           (template_hole 11,
            template_app (template_hole 4, template_var 1)))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0),
             template_hole 0)
           ))),
    ("SWA.append_atomics_reusables_neq_Nil",
     "[| 0 < fst ?w; fst ?w <= snd ?w; valid ?as ?t; l ?t <= fst ?w;
         r ?t <= snd ?w |]
      ==> atomics ?as (max (fst ?w) (Suc (r ?t))) (snd ?w) @
          reusables ?t ?w ~=
          []",
     template_implication
      ([template_inequation
         (less_than, template_hole 14,
          template_app (template_hole 13, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 13, template_var 2),
          template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app (template_hole 13, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 0),
          template_app (template_hole 11, template_var 2))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 13, template_var 2)),
                       template_app
                        (template_hole 2,
                         template_app (template_hole 8, template_var 0)))),
                   template_app (template_hole 11, template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_hole 0)
           ))),
    ("SWA.adjacent_Cons_r2",
     "[| adjacent (fst ?w, r ?t) (?x # ?xs); 0 < fst ?w; fst ?w <= snd ?w;
         r ?t <= snd ?w;
         atomics ?as (max (fst ?w) (Suc (r ?t))) (snd ?w) = [] |]
      ==> adjacent ?w (?x # ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 4)),
                  template_app (template_hole 10, template_var 3))),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 11, template_var 4)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 4),
          template_app (template_hole 5, template_var 4)),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 3),
          template_app (template_hole 5, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 11, template_var 4)),
                template_app
                 (template_hole 1,
                  template_app (template_hole 10, template_var 3)))),
            template_app (template_hole 5, template_var 4)),
          template_hole 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 13, template_var 4),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_var 1))
           ))),
    ("SWA.well_valued0_map_map_tree",
     "[| ALL x y. ?f (x + y) = ?f x + ?f y; well_shaped ?t;
         well_valued0 ?as ?t; r ?t <= length ?as; ?as ~= [] |]
      ==> well_shaped (SWA.tree.map_tree ?f ?t) &
          well_valued0 (map ?f ?as) (SWA.tree.map_tree ?f ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)))
           ))),
    ("SWA.adjacent_appendI",
     "[| 0 < fst ?w; fst ?w <= snd ?w;
         case ?us of [] => adjacent ?w ?ts
         | u # us' =>
             adjacent (Suc (r u), snd ?w) ?ts &
             adjacent (fst ?w, case ?ts of [] => snd ?w | a # list => r u)
              (u # us') |]
      ==> adjacent ?w (?ts @ ?us)",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 2),
          template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1)),
                t_empty),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SWA.valid_fold_combine_Leaf",
     "[| 0 < fst ?w; ?ts = ?h # ?ts'; ALL t:set ?ts. valid ?as t;
         adjacent ?w ?ts |]
      ==> valid ?as (fold combine ?ts SWA.tree.Leaf) &
          l (fold combine ?ts SWA.tree.Leaf) = fst ?w &
          r (fold combine ?ts SWA.tree.Leaf) = snd ?w",
     template_implication
      ([template_inequation
         (less_than, template_hole 15,
          template_app (template_hole 14, template_var 4)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 12, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_var 3),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 6, template_hole 5),
                           template_var 3),
                         template_hole 4))),
                   template_app (template_hole 14, template_var 4))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 6, template_hole 5),
                         template_var 3),
                       template_hole 4))),
                 template_app (template_hole 0, template_var 4))))
           ))),
    ("SWA.adjacent_atomics_nonempty_reusables",
     "[| 0 < fst ?w; l ?t <= fst ?w; r ?t <= snd ?w; valid ?as ?t;
         reusables ?t ?w = ?x # ?xs |]
      ==> adjacent (Suc (r ?x), snd ?w)
           (atomics ?as (max (fst ?w) (Suc (r ?t))) (snd ?w))",
     template_implication
      ([template_inequation
         (less_than, template_hole 14,
          template_app (template_hole 13, template_var 4)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 3),
          template_app (template_hole 13, template_var 4)),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 4),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 10, template_var 1))),
                 template_app (template_hole 9, template_var 4))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 13, template_var 4)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 10, template_var 3)))),
               template_app (template_hole 9, template_var 4)))
           ))),
    ("SWA.valid_append_atomics_reusables",
     "[| 0 < fst ?w; valid ?as ?t; l ?t <= fst ?w; r ?t <= snd ?w;
         snd ?w <= length ?as |]
      ==> ALL t:set (atomics ?as (max (fst ?w) (Suc (r ?t))) (snd ?w) @
                     reusables ?t ?w).
             valid ?as t",
     template_implication
      ([template_inequation
         (less_than, template_hole 14,
          template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 0),
          template_app (template_hole 13, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app (template_hole 8, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 13, template_var 2)),
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 9, template_var 0)))),
                       template_app (template_hole 8, template_var 2))),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)))),
             t_empty)
           ))),
    ("SWA.sum_eq_sum_append",
     "[| 0 < ?i; ?i <= ?j; ?j <= length ?as |]
      ==> SWA.sum ?as ?i ?j = SWA.sum (?as @ ?as') ?i ?j",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_hole 1)),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1))))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1))),
         template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_hole 1)),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1))))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1)))))),
    ("SWA.iterate_eq_map_sum",
     "[| valid ?as ?t; windows ?as ?xs;
         case ?xs of [] => True
         | x # xs' => l ?t <= fst x & r ?t <= snd x |]
      ==> iterate ?as ?t ?xs = map (%w. SWA.sum ?as (fst w) (snd w)) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_hole 17), t_empty),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 8, t_empty), template_var 0)))),
    ("SWA.slide_eq_slide'",
     "[| 0 < fst ?w; fst ?w <= snd ?w; valid ?as ?t; r ?t = length ?as;
         l ?t <= fst ?w; r ?t <= snd ?w; snd ?w <= length (?as @ ?as') |]
      ==> slide (?as @ ?as') ?t ?w = slide' ?as' ?t ?w",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 3),
          template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 11, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 9, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 3),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3)))),
    ("SWA.valid_slide",
     "[| 0 < fst ?w; fst ?w <= snd ?w; valid ?as ?t; l ?t <= fst ?w;
         r ?t <= snd ?w; snd ?w <= length ?as |]
      ==> valid ?as (slide ?as ?t ?w) &
          l (slide ?as ?t ?w) = fst ?w & r (slide ?as ?t ?w) = snd ?w",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 1),
                           template_var 0),
                         template_var 2))),
                   template_app (template_hole 9, template_var 2))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 0),
                       template_var 2))),
                 template_app (template_hole 7, template_var 2))))
           ))),
    ("SWA.sum_eq_sum_prepend",
     "[| 0 < ?i; ?i <= ?j; length ?xs < ?i; length ?ys = length ?xs |]
      ==> SWA.sum (?xs @ ?as) ?i ?j = SWA.sum (?ys @ ?as) ?i ?j",
     template_implication
      ([template_inequation (less_than, template_hole 13, template_var 4),
        template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation
         (less_than, template_app (template_hole 11, template_var 2),
          template_var 4),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_app (template_hole 11, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_hole 0)),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_hole 0))))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0))),
         template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_hole 0)),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_hole 0))))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0)))))),
    ("SWA.sum_update_rightmost",
     "[| 0 < ?i; ?i <= ?j; length ?as = ?j |]
      ==> SWA.sum ?as ?i ?j + ?x =
          SWA.sum (butlast ?as @ [last ?as + ?x]) ?i ?j",
     template_implication
      ([template_inequation (less_than, template_hole 17, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_equation
         (template_app (template_hole 14, template_var 1), template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_app (template_hole 11, template_hole 12),
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_var 1)),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 3),
                           template_hole 5)),
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_hole 5))))),
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_hole 5)))),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 11, template_hole 12),
             template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 1)),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_hole 1, template_var 1)),
                             template_var 0)),
                         template_hole 0)))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 3),
                       template_hole 5)),
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_hole 5))))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app (template_hole 1, template_var 1)),
                       template_var 0)),
                   template_hole 0))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_hole 5)))))),
    ("SWA.add_sum",
     "[| 0 < ?i; ?i <= ?j; ?j < ?k |]
      ==> SWA.sum ?as ?i ?j + SWA.sum ?as (Suc ?j) ?k = SWA.sum ?as ?i ?k",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_hole 8),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 0)),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 3),
                           template_hole 1)),
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_hole 1))))),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)))),
           template_app
            (template_app
              (template_app (template_hole 7, template_hole 8),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 0, template_var 2)),
                         template_hole 1)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_hole 1))))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)))),
         template_app
          (template_app
            (template_app (template_hole 7, template_hole 8),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_hole 1)),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1))))),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)))))),
    ("SWA.valid_slide_append",
     "[| 0 < fst ?w; fst ?w <= snd ?w; valid ?as ?t; l ?t <= fst ?w;
         r ?t <= snd ?w; snd ?w <= length ?as + length ?as' |]
      ==> valid (?as @ ?as') (slide (?as @ ?as') ?t ?w) &
          l (slide (?as @ ?as') ?t ?w) = fst ?w &
          r (slide (?as @ ?as') ?t ?w) = snd ?w",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 3),
          template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 11, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 9, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_app (template_hole 4, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 0)),
                     template_var 1),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 2, template_var 2),
                               template_var 0)),
                           template_var 1),
                         template_var 3))),
                   template_app (template_hole 11, template_var 3))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 2, template_var 2),
                             template_var 0)),
                         template_var 1),
                       template_var 3))),
                 template_app (template_hole 9, template_var 3))))
           ))),
    ("SWA.valid_slide'",
     "[| 0 < fst ?w; fst ?w <= snd ?w; valid ?as ?t; length ?as = r ?t;
         snd ?w - r ?t <= length ?as'; l ?t <= fst ?w; r ?t <= snd ?w |]
      ==> valid (?as @ ?as') (slide' ?as' ?t ?w) &
          l (slide' ?as' ?t ?w) = fst ?w & r (slide' ?as' ?t ?w) = snd ?w",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 3),
          template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 9, template_var 3)),
            template_app (template_hole 5, template_var 1)),
          template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 11, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app (template_hole 9, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 1),
                         template_var 3))),
                   template_app (template_hole 11, template_var 3))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 1),
                       template_var 3))),
                 template_app (template_hole 9, template_var 3))))
           ))),
    ("SWA.combine_valid_Nodes_aux",
     "[| 0 < l ?a; ?a ~= SWA.tree.Leaf; ?z ~= SWA.tree.Leaf;
         l ?z = Suc (r ?a); well_shaped ?a; well_shaped ?z;
         well_valued0 ?as ?a; val ?a = Some ?va; well_valued0 ?as ?z;
         val ?z = Some ?vz |]
      ==> ?va + ?vz =
          fold (+) (rev (map ((!) ?as) [l ?a - Suc 0..<r ?z - Suc 0]))
           (?as ! (r ?z - Suc 0))",
     template_implication
      ([template_inequation
         (less_than, template_hole 20,
          template_app (template_hole 19, template_var 4)),
        template_negation
         (template_equation (template_var 4, template_hole 16)),
        template_negation
         (template_equation (template_var 3, template_hole 16)),
        template_equation
         (template_app (template_hole 19, template_var 3),
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_var 4))),
        template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 4)
            ),
        template_equation
         (template_app (template_hole 9, template_var 4),
          template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 3)
            ),
        template_equation
         (template_app (template_hole 9, template_var 3),
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 6),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 19, template_var 4)),
                       template_app (template_hole 14, template_hole 20))),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 13, template_var 3)),
                     template_app (template_hole 14, template_hole 20)))))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 13, template_var 3)),
               template_app (template_hole 14, template_hole 20))))))),
    ("SWA.valid_fold_combine",
     "[| 0 < fst ?w; ?ts = ?h # ?ts'; ALL t:set ?ts. valid ?as t;
         adjacent (fst ?w, l ?h - 1) ?ts'; valid ?as ?z;
         ?z ~= SWA.tree.Leaf;
         l ?z =
         (case ?ts' of [] => fst ?w
          | t\<^sub>1 # ts'' => Suc (r t\<^sub>1));
         r ?z = snd ?w |]
      ==> valid ?as (fold combine ?ts' ?z) &
          l (fold combine ?ts' ?z) = fst ?w &
          r (fold combine ?ts' ?z) = snd ?w",
     template_implication
      ([template_inequation
         (less_than, template_hole 22,
          template_app (template_hole 21, template_var 5)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 19, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 4)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 21, template_var 5)),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app (template_hole 12, template_var 3)),
                    template_hole 11))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 8)),
        template_equation
         (template_app (template_hole 12, template_var 0),
          template_app
           (template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 21, template_var 5)),
              t_empty),
            template_var 2)),
        template_equation
         (template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 16, template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_var 2),
                         template_var 0))),
                   template_app (template_hole 21, template_var 5))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_var 2),
                       template_var 0))),
                 template_app (template_hole 3, template_var 5))))
           )))]:
   (string * thm * template) list
### theory "Draft.SWAMoreTemplates"
### 0.331s elapsed time, 0.444s cpu time, 0.053s GC time
val it = (): unit
