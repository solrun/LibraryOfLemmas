Loading theory "HOL-Library.LaTeXsugar" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.OperationalCorrespondence" via "Draft.SourceTargetRelation" via "Draft.Encodings" via "Draft.ProcessCalculi" via "Draft.Relations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.LaTeXsugar"
### 0.069s elapsed time, 0.309s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.520s cpu time, 0.041s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Loading theory "HOL-Library.OptionalSugar" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.OperationalCorrespondence" via "Draft.SourceTargetRelation" via "Draft.Encodings" via "Draft.ProcessCalculi" via "Draft.Relations")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.241s elapsed time, 0.987s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.355s elapsed time, 1.428s cpu time, 0.113s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.OptionalSugar"
### 0.249s elapsed time, 0.980s cpu time, 0.071s GC time
Loading theory "Draft.Relations" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.OperationalCorrespondence" via "Draft.SourceTargetRelation" via "Draft.Encodings" via "Draft.ProcessCalculi")
### theory "Draft.Relations"
### 0.158s elapsed time, 0.628s cpu time, 0.070s GC time
Loading theory "Draft.ProcessCalculi" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.OperationalCorrespondence" via "Draft.SourceTargetRelation" via "Draft.Encodings")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  nSteps :: "'proc => 'proc processCalculus => nat => 'proc => bool"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.874s elapsed time, 3.317s cpu time, 0.709s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.927s elapsed time, 3.397s cpu time, 0.691s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.ProcessCalculi"
### 0.913s elapsed time, 3.038s cpu time, 0.622s GC time
Loading theory "Draft.Encodings" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.OperationalCorrespondence" via "Draft.SourceTargetRelation")
Loading theory "Draft.SimulationRelations" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.OperationalCorrespondence" via "Draft.SourceTargetRelation")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "cSim_csp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.773s elapsed time, 6.062s cpu time, 0.964s GC time
Loading theory "Draft.Templates" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.266s cpu time, 0.068s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OperationalCorrespondenceMoreTemplates")
locale encoding
  fixes Source :: "'procS processCalculus"
    and Target :: "'procT processCalculus"
    and Enc :: "'procS => 'procT"
Proofs for inductive predicate(s) "stepsClosurep"
  Proving monotonicity ...
locale encoding_wrt_barbs
  fixes Source :: "'procS processCalculus"
    and Target :: "'procT processCalculus"
    and Enc :: "'procS => 'procT"
    and SWB :: "('procS, 'barbs) calculusWithBarbs"
    and TWB :: "('procT, 'barbs) calculusWithBarbs"
  assumes "encoding_wrt_barbs Source Target SWB TWB"
### theory "Draft.SimulationRelations"
### 0.953s elapsed time, 2.975s cpu time, 0.928s GC time
### theory "Draft.Encodings"
### 0.991s elapsed time, 3.091s cpu time, 0.988s GC time
Loading theory "Draft.SourceTargetRelation" (required by "Draft.OperationalCorrespondenceMoreTemplates" via "Draft.OperationalCorrespondence")
Proofs for inductive predicate(s) "indRelRp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelRPOp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.860s elapsed time, 2.348s cpu time, 0.849s GC time
Proofs for inductive predicate(s) "indRelLp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelLPOp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelEQp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelRTp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelRTPOp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelLTp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelLTPOp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelTp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelTEQp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelRSTp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelRSTPOp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelLSTp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelLSTPOp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelSTp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "indRelSTEQp"
  Proving monotonicity ...
### theory "Draft.SourceTargetRelation"
### 11.802s elapsed time, 12.652s cpu time, 0.852s GC time
Loading theory "Draft.OperationalCorrespondence" (required by "Draft.OperationalCorrespondenceMoreTemplates")
### theory "Draft.OperationalCorrespondence"
### 3.205s elapsed time, 3.419s cpu time, 0.305s GC time
Loading theory "Draft.OperationalCorrespondenceMoreTemplates"
val templateLemmas =
   [("OperationalCorrespondence.rel_includes_TRel_modulo_preorder",
     "trans ?TRel ==>
      ((ALL T1 T2.
           (T1, T2) : ?TRel --> (TargetTerm T1, TargetTerm T2) : ?Rel) &
       (ALL T1 T2.
           (TargetTerm T1, TargetTerm T2) : ?Rel --> (T1, T2) : ?TRel^+)) =
      (?TRel = _Collect (T1, T2) ((TargetTerm T1, TargetTerm T2) : ?Rel))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, t_empty)),
                template_app (template_hole 10, t_empty))
              )],
         template_equation
          (template_var 1,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("OperationalCorrespondence.all_relation_is_weak_reduction_bisimulation",
     "weak_reduction_bisimulation (_Collect (a, b) True) ?Cal",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app (template_hole 8, t_empty))
         ))]:
   (string * thm * template) list
### theory "Draft.OperationalCorrespondenceMoreTemplates"
### 0.383s elapsed time, 0.517s cpu time, 0.050s GC time
val it = (): unit
