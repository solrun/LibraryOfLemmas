Loading theory "Draft.Eigenspace" (required by "Draft.EigenspaceTemplates")
Loading theory "Draft.Templates" (required by "Draft.EigenspaceTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.EigenspaceTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.261s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.655s elapsed time, 1.435s cpu time, 0.106s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EigenspaceTemplates")
### theory "Draft.Eigenspace"
### 0.897s elapsed time, 1.959s cpu time, 0.184s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.474s elapsed time, 0.735s cpu time, 0.079s GC time
Loading theory "Draft.EigenspaceTemplates"
val templateLemmas =
   [("Eigenspace.dim_gen_eigenspace_order_char_poly",
     "jordan_nf ?A ?n_as ==>
      dim_gen_eigenspace ?A ?lam ?k <= order ?lam (char_poly ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 3))))),
    ("Eigenspace.eigenvector_mat_kernel_char_matrix",
     "[| ?A : carrier_mat ?n ?n; eigenvector ?A ?v ?lam |]
      ==> ?v : mat_kernel (char_matrix ?A ?lam)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("Eigenspace.unique_eigen_vector_real",
     "[| order ?lam (charpoly ?A) = 1; eigen_vector ?A ?v ?lam;
         eigen_vector ?A ?w ?lam |]
      ==> EX a. ?v = a *s ?w",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_app (template_hole 5, template_var 2)),
          template_hole 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0),
              template_var 3)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Eigenspace.unique_eigenvector_jnf",
     "[| jordan_nf ?A ?n_as; order ?lam (char_poly ?A) = 1;
         eigenvector ?A ?v ?lam; eigenvector ?A ?w ?lam |]
      ==> EX a. ?v = a \<cdot>\<^sub>v ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app (template_hole 5, template_var 4)),
          template_hole 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Eigenspace.unique_eigenvector_real",
     "[| ?A : carrier_mat ?n ?n; order ?lam (char_poly ?A) = 1;
         eigenvector ?A ?v ?lam; eigenvector ?A ?w ?lam |]
      ==> EX a. ?v = a \<cdot>\<^sub>v ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app (template_hole 5, template_var 4)),
          template_hole 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Eigenspace.unique_eigenvector_complex",
     "[| ?A : carrier_mat ?n ?n; order ?lam (char_poly ?A) = 1;
         eigenvector ?A ?v ?lam; eigenvector ?A ?w ?lam |]
      ==> EX a. ?v = a \<cdot>\<^sub>v ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app (template_hole 5, template_var 4)),
          template_hole 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.EigenspaceTemplates"
### 1.123s elapsed time, 1.386s cpu time, 0.150s GC time
val it = (): unit
