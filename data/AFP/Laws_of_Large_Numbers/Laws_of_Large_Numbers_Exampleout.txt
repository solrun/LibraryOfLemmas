Loading theory "Draft.Laws_of_Large_Numbers" (required by "Draft.Laws_of_Large_Numbers_ExampleTemplates" via "Draft.Laws_of_Large_Numbers_Example")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Laws_of_Large_Numbers_ExampleTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Laws_of_Large_Numbers_ExampleTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.088s elapsed time, 0.298s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.108s elapsed time, 0.335s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Laws_of_Large_Numbers_ExampleTemplates" via "Draft.ExtrEqs")
### theory "Draft.Laws_of_Large_Numbers"
### 0.146s elapsed time, 0.435s cpu time, 0.052s GC time
Loading theory "Draft.Laws_of_Large_Numbers_Example" (required by "Draft.Laws_of_Large_Numbers_ExampleTemplates")
locale experiment7533644
  fixes p :: "real"
  assumes "experiment7533644 p"
### theory "Draft.Laws_of_Large_Numbers_Example"
### 0.154s elapsed time, 0.307s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.645s elapsed time, 0.854s cpu time, 0.055s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Laws_of_Large_Numbers_ExampleTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.469s elapsed time, 0.469s cpu time, 0.000s GC time
Loading theory "Draft.Laws_of_Large_Numbers_ExampleTemplates"
val templateLemmas =
   [("Laws_of_Large_Numbers_Example.integrable_bernoulli_pmf",
     "integrable (measure_pmf (bernoulli_pmf ?p)) ?f",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0)
         )),
    ("Laws_of_Large_Numbers_Example.indep_vars_PiM_components",
     "(!!i. i : ?A ==> prob_space (?M i)) ==>
      prob_space.indep_vars (Pi\<^sub>M ?A ?M) ?M (%i f. f i) ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 0),
               t_empty),
             template_var 1)
           ))),
    ("Laws_of_Large_Numbers_Example.expectation_bernoulli_pmf",
     "?p : {0..1} ==>
      measure_pmf.expectation (bernoulli_pmf ?p) ?f =
      ?p *\<^sub>R ?f True + (1 - ?p) *\<^sub>R ?f False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_hole 9))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_var 0, template_hole 2))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_hole 9),
                 template_var 1)),
             template_app (template_var 0, template_hole 0)))))),
    ("Laws_of_Large_Numbers_Example.indep_vars_PiM_components'",
     "[| !!i. i : ?A ==> prob_space (?M i);
         !!i. i : ?A ==> ?g i : ?M i \<rightarrow>\<^sub>M ?N i |]
      ==> prob_space.indep_vars (Pi\<^sub>M ?A ?M) ?N (%i f. ?g i (f i))
           ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_var 0),
               t_empty),
             template_var 3)
           )))]:
   (string * thm * template) list
### theory "Draft.Laws_of_Large_Numbers_ExampleTemplates"
### 1.274s elapsed time, 1.610s cpu time, 0.223s GC time
val it = (): unit
