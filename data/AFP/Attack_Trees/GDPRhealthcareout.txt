Loading theory "Draft.MC" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.GDPRhealthcare" via "Draft.Infrastructure" via "Draft.AT")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.517s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class state = type +
  fixes state_transition :: "'a => 'a => bool"
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.819s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.350s elapsed time, 1.397s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.ExtrEqs")
consts
  states :: "'a kripke => 'a set"
consts
  init :: "'a kripke => 'a set"
### theory "Draft.MC"
### 0.587s elapsed time, 2.339s cpu time, 0.218s GC time
Loading theory "Draft.AT" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.GDPRhealthcare" via "Draft.Infrastructure")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  attack :: "'s attree => 's set * 's set"
Proofs for inductive predicate(s) "refines_to"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.046s elapsed time, 3.946s cpu time, 0.877s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.106s elapsed time, 4.006s cpu time, 0.821s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
See theory exports
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  nodup :: "'a => 'a list => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AT"
### 1.315s elapsed time, 4.007s cpu time, 0.859s GC time
Loading theory "Draft.Infrastructure" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.GDPRhealthcare")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.083s elapsed time, 6.530s cpu time, 1.168s GC time
Loading theory "Draft.Templates" (required by "Draft.GDPRhealthcareMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GDPRhealthcareMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.755s elapsed time, 1.799s cpu time, 0.752s GC time
consts
  loc :: "location => nat"
consts
  gra :: "igraph => (location * location) set"
consts
  agra :: "igraph => location => char list set"
consts
  cgra :: "igraph => actor => char list set * char list set"
consts
  lgra ::
    "igraph => location => char list * ((actor * actor set) * nat) set"
consts
  graphI :: "infrastructure => igraph"
consts
  delta ::
    "infrastructure
     => igraph => location => ((actor => bool) * action set) set"
consts
  tspace :: "infrastructure => actor => char list set * char list set"
consts
  lspace ::
    "infrastructure
     => location => char list * ((actor * actor set) * nat) set"
consts
  jonce :: "'a => 'a list => bool"
Proofs for inductive predicate(s) "state_transition_in"
  Proving monotonicity ...
instantiation
  infrastructure :: state
  state_transition_infrastructure == state_transition ::
    infrastructure => infrastructure => bool
### theory "Draft.Infrastructure"
### 1.512s elapsed time, 3.007s cpu time, 0.946s GC time
Loading theory "Draft.GDPRhealthcare" (required by "Draft.GDPRhealthcareMoreTemplates")
locale scenarioGDPR
  fixes gdpr_actors :: "char list set"
    and gdpr_locations :: "location set"
    and sphone :: "location"
    and home :: "location"
    and hospital :: "location"
    and cloud :: "location"
    and global_policy :: "infrastructure => char list => bool"
    and global_policy' :: "infrastructure => char list => bool"
    and ex_creds :: "actor => char list set * char list set"
    and ex_locs :: "location => char list * ((actor * actor set) * nat) set"
    and ex_loc_ass :: "location => char list set"
    and ex_graph :: "igraph"
    and ex_graph' :: "igraph"
    and ex_graph'' :: "igraph"
    and
    local_policies ::
      "igraph => location => ((actor => bool) * action set) set"
    and gdpr_scenario :: "infrastructure"
    and Igdpr :: "infrastructure set"
    and gdpr_scenario' :: "infrastructure"
    and GDPR' :: "infrastructure set"
    and gdpr_scenario'' :: "infrastructure"
    and GDPR'' :: "infrastructure set"
    and gdpr_states :: "infrastructure set"
    and gdpr_Kripke :: "infrastructure kripke"
    and sgdpr :: "infrastructure set"
  defines "gdpr_actors == {''Patient'', ''Doctor''}"
    and "gdpr_locations == {Location 0, Location 1, Location 2, Location 3}"
    and "sphone == Location 0"
    and "home == Location 1"
    and "hospital == Location 2"
    and "cloud == Location 3"
    and
    "!!I a.
        global_policy I a ==
        a ~= ''Doctor'' --> ~ enables I hospital (Actor a) eval"
    and
    "!!I a.
        global_policy' I a ==
        a ~: gdpr_actors --> ~ enables I cloud (Actor a) get"
    and
    "ex_creds ==
     %x. if x = Actor ''Patient'' then ({''PIN'', ''skey''}, {})
         else if x = Actor ''Doctor'' then ({''PIN''}, {}) else ({}, {})"
    and
    "ex_locs ==
     %x. if x = cloud
         then (''free'', {((Actor ''Patient'', {Actor ''Doctor''}), 42)})
         else ([], {})"
    and
    "ex_loc_ass ==
     %x. if x = home then {''Patient''}
         else if x = hospital then {''Doctor'', ''Eve''} else {}"
    and
    "ex_graph ==
     Lgraph {(home, cloud), (sphone, cloud), (cloud, hospital)} ex_loc_ass
      ex_creds ex_locs"
    and
    "ex_graph' ==
     Lgraph {(home, cloud), (sphone, cloud), (cloud, hospital)}
      (%x. if x = cloud then {''Patient''}
           else if x = hospital then {''Doctor'', ''Eve''} else {})
      ex_creds ex_locs"
    and
    "ex_graph'' ==
     Lgraph {(home, cloud), (sphone, cloud), (cloud, hospital)}
      (%x. if x = cloud then {''Patient'', ''Eve''}
           else if x = hospital then {''Doctor''} else {})
      ex_creds ex_locs"
    and
    "!!G. local_policies G ==
          %x. if x = home then {(%y. True, {put, get, move, eval})}
              else if x = sphone
                   then {(%y. has G (y, ''PIN''), {put, get, move, eval})}
                   else if x = cloud
                        then {(%y. True, {put, get, move, eval})}
                        else if x = hospital
                             then {(%y.
 EX n. n @\<^bsub>G\<^esub> hospital & Actor n = y & has G (y, ''skey''),
                                    {put, get, move, eval})}
                             else {}"
    and "gdpr_scenario == Infrastructure ex_graph local_policies"
    and "Igdpr == {gdpr_scenario}"
    and "gdpr_scenario' == Infrastructure ex_graph' local_policies"
    and "GDPR' == {gdpr_scenario'}"
    and "gdpr_scenario'' == Infrastructure ex_graph'' local_policies"
    and "GDPR'' == {gdpr_scenario''}"
    and "gdpr_states == {I. gdpr_scenario \<rightarrow>\<^sub>i* I}"
    and "gdpr_Kripke == Kripke gdpr_states {gdpr_scenario}"
    and "sgdpr == {x. ~ global_policy' x ''Eve''}"
### theory "Draft.GDPRhealthcare"
### 0.570s elapsed time, 0.594s cpu time, 0.033s GC time
Loading theory "Draft.GDPRhealthcareMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.GDPRhealthcareMoreTemplates"
### 0.376s elapsed time, 0.558s cpu time, 0.061s GC time
val it = (): unit
