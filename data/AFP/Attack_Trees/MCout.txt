Loading theory "Draft.MC" (required by "Draft.MCMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MCMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.513s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MCMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class state = type +
  fixes state_transition :: "'a => 'a => bool"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.852s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MCMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.349s elapsed time, 1.390s cpu time, 0.138s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MCMoreTemplates" via "Draft.ExtrEqs")
consts
  states :: "'a kripke => 'a set"
consts
  init :: "'a kripke => 'a set"
### theory "Draft.MC"
### 0.577s elapsed time, 2.291s cpu time, 0.240s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.822s elapsed time, 2.830s cpu time, 0.356s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.040s elapsed time, 3.220s cpu time, 0.819s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.920s elapsed time, 4.848s cpu time, 1.019s GC time
Loading theory "Draft.Templates" (required by "Draft.MCMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.046s elapsed time, 0.060s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MCMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.446s elapsed time, 0.493s cpu time, 0.055s GC time
Loading theory "Draft.MCMoreTemplates"
val templateLemmas =
   [("MC.AG_lem3", "AG ?s = ?s Int AX (AG ?s)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("MC.EF_lem000", "EF ?f = ?f Un EX' (EF ?f)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("MC.EF_lem2a", "?x : ?f ==> ?x : EF ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.AG_in_lem", "?x : AG ?s ==> ?x : ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("MC.ex_card", "finite ?S ==> EX n. card ?S = n",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MC.EF_lem2c", "?x ~: ?f ==> ?x : EF (- ?f)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("MC.EF_lem2d", "?x ~: EF ?f ==> ?x ~: ?f",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_app (template_hole 0, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)
               )
           ))),
    ("MC.EF_lem2b", "?x : EX' (EF ?f) ==> ?x : EF ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.less_not_le", "[| ?x < ?y; ?y <= ?x |] ==> False",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate (template_hole 0))),
    ("MC.EF_lem00", "EF ?f = ?f Un EX' (lfp (%Z. ?f Un EX' Z))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("MC.EF_step_star_rev",
     "?x : EF ?s ==> EX y:?s. ?x \<rightarrow>\<^sub>i* y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)
           ))),
    ("MC.EX_lem0l", "?x : EX' ?f ==> ?x : EX' (?f Un ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("MC.EX_lem0r", "?x : EX' ?g ==> ?x : EX' (?f Un ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("MC.AG_lem2", "?x : AG ?s ==> ?x : ?s Int AX (AG ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0))))
           ))),
    ("MC.EF_E", "?x : EF ?f ==> ?x : ?f Un EX' (EF ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0))))
           ))),
    ("MC.Suc_less_le", "?x < ?y - ?n ==> ?x <= ?y - Suc ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("MC.finite_card_zero_empty",
     "[| finite ?S; card ?S <= 0 |] ==> ?S = {}",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_hole 2)],
       template_equation (template_var 0, template_hole 0))),
    ("MC.EF_lem3b", "?x : EX' (?f Un EX' (EF ?f)) ==> ?x : EF ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 0, template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.EF_step",
     "[| ?x \<rightarrow>\<^sub>i ?y; ?y : ?f |] ==> ?x : EF ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.EX_step",
     "[| ?x \<rightarrow>\<^sub>i ?y; ?y : ?f |] ==> ?x : EX' ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.EF_step_star",
     "[| ?x \<rightarrow>\<^sub>i* ?y; ?y : ?f |] ==> ?x : EF ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.AG_lem1", "?x : ?s & ?x : AX (AG ?s) ==> ?x : AG ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.EF_lem1", "?x : ?f | ?x : EX' (EF ?f) ==> ?x : EF ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.EF_step_step",
     "[| ?x \<rightarrow>\<^sub>i ?y; ?y : EF ?f |] ==> ?x : EF ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.AG_step",
     "[| ?y \<rightarrow>\<^sub>i ?z; ?y : AG ?s |] ==> ?z : AG ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.AG_all_s",
     "[| ?x \<rightarrow>\<^sub>i* ?y; ?x : AG ?s |] ==> ?y : AG ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MC.EF_lem0",
     "(?x : EF ?f) = (?x : ?f Un EX' (lfp (%Z. ?f Un EX' Z)))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty)))))),
    ("MC.Kleene_iter_gpfp",
     "[| mono ?f; ?p <= ?f ?p |] ==> ?p <= (?f ^^ ?k) top",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_var 2, template_var 1))],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_hole 0)))),
    ("MC.valEF_E",
     "[| ?M \<turnstile> EF ?f; ?x : init ?M |] ==> ?x : EF ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 2, template_var 1))
           ))),
    ("MC.predtrans_empty",
     "mono ?\<tau> ==> ALL i. (?\<tau> ^^ i) {} <= (?\<tau> ^^ (i + 1)) {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("MC.predtrans_UNIV",
     "mono ?\<tau> ==>
      ALL i. (?\<tau> ^^ (i + 1)) UNIV <= (?\<tau> ^^ i) UNIV",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("MC.gfp_loop",
     "[| finite UNIV; mono ?\<tau> |]
      ==> EX n. gfp ?\<tau> = (?\<tau> ^^ n) UNIV",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("MC.lfp_loop",
     "[| finite UNIV; mono ?\<tau> |]
      ==> EX n. lfp ?\<tau> = (?\<tau> ^^ n) {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_hole 6)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("MC.finite_fixp",
     "[| finite UNIV; mono ?\<tau> |]
      ==> EX i. (?\<tau> ^^ i) {} = (?\<tau> ^^ (i + 1)) {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_hole 7)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("MC.finite_fixp2",
     "[| finite UNIV; mono ?\<tau> |]
      ==> EX i. (?\<tau> ^^ i) UNIV = (?\<tau> ^^ (i + 1)) UNIV",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_hole 6)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("MC.no_infinite_subset_chain",
     "[| finite UNIV; mono ?\<tau>;
         ALL i. (?\<tau> ^^ i) {} < (?\<tau> ^^ (i + 1)) {} |]
      ==> False",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_hole 8)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_hole 0))),
    ("MC.no_infinite_subset_chain2",
     "[| finite UNIV; mono ?\<tau>;
         ALL i. (?\<tau> ^^ (i + 1)) UNIV < (?\<tau> ^^ i) UNIV |]
      ==> False",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_hole 7)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_hole 0))),
    ("MC.EF_step_inv",
     "?I <= {sa. (EX i:?I. i \<rightarrow>\<^sub>i* sa) & sa : EF ?s} ==>
      ALL x:?I. EX y:?s. x \<rightarrow>\<^sub>i* y",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), t_empty)
           ))),
    ("MC.infchain_outruns_all",
     "[| finite UNIV; ALL i. (?\<tau> ^^ i) {} < (?\<tau> ^^ (i + 1)) {} |]
      ==> ALL j. EX i. j < card ((?\<tau> ^^ i) {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("MC.UNIV_tau_i_is_empty",
     "[| finite UNIV; mono ?\<tau>;
         ALL i. (?\<tau> ^^ (i + 1)) UNIV < (?\<tau> ^^ i) UNIV |]
      ==> (?\<tau> ^^ card UNIV) UNIV = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_hole 9)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 1, template_hole 9)),
             template_var 0),
           template_hole 9),
         template_hole 0))),
    ("MC.down_chain_reaches_empty",
     "[| finite UNIV; mono ?\<tau>;
         ALL i. (?\<tau> ^^ (i + 1)) UNIV < (?\<tau> ^^ i) UNIV |]
      ==> EX j. (?\<tau> ^^ j) UNIV = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_hole 9)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MC.card_UNIV_tau_i_below_zero",
     "[| finite UNIV; mono ?\<tau>;
         ALL i. (?\<tau> ^^ (i + 1)) UNIV < (?\<tau> ^^ i) UNIV |]
      ==> card ((?\<tau> ^^ card UNIV) UNIV) <= 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_hole 9)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 1, template_hole 9)),
               template_var 0),
             template_hole 9)),
         template_hole 0))),
    ("MC.card_univ_subtract",
     "[| finite UNIV; mono ?\<tau>;
         ALL i. (?\<tau> ^^ (i + 1)) UNIV < (?\<tau> ^^ i) UNIV |]
      ==> ALL i. card ((?\<tau> ^^ i) UNIV) <= card UNIV - i",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_hole 9)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("MC.AG_imp_notnotEF",
     "[| ?I ~= {};
         Kripke {s. EX i:?I. i \<rightarrow>\<^sub>i* s}
          ?I \<turnstile> AG ?s |]
      ==> ~ Kripke {s. EX i:?I. i \<rightarrow>\<^sub>i* s}
             ?I \<turnstile> EF (- ?s)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, t_empty)),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, t_empty)),
                     template_var 1)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("MC.EF_induct",
     "[| ?a : EF ?f; mono (%Z. ?f Un EX' Z);
         !!x. x : ?f Un EX' (EF ?f Int {x. ?P x}) ==> ?P x |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_var 0, template_var 2))))]:
   (string * thm * template) list
### theory "Draft.MCMoreTemplates"
### 0.328s elapsed time, 0.481s cpu time, 0.066s GC time
val it = (): unit
