Loading theory "Draft.MC" (required by "Draft.ATMoreTemplates" via "Draft.AT")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ATMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ATMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ATMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.529s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ATMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class state = type +
  fixes state_transition :: "'a => 'a => bool"
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.847s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ATMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.329s cpu time, 0.129s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ATMoreTemplates" via "Draft.ExtrEqs")
consts
  states :: "'a kripke => 'a set"
consts
  init :: "'a kripke => 'a set"
### theory "Draft.MC"
### 0.536s elapsed time, 2.129s cpu time, 0.225s GC time
Loading theory "Draft.AT" (required by "Draft.ATMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  attack :: "'s attree => 's set * 's set"
Proofs for inductive predicate(s) "refines_to"
  Proving monotonicity ...
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.031s elapsed time, 3.837s cpu time, 0.986s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.134s elapsed time, 4.061s cpu time, 0.968s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
See theory exports
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  nodup :: "'a => 'a list => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AT"
### 1.321s elapsed time, 4.060s cpu time, 0.928s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.987s elapsed time, 6.010s cpu time, 1.162s GC time
Loading theory "Draft.Templates" (required by "Draft.ATMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ATMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.454s elapsed time, 0.493s cpu time, 0.045s GC time
Loading theory "Draft.ATMoreTemplates"
val templateLemmas =
   [("AT.att_and_empty2",
     "\<turnstile>[] \<oplus>\<^sub>\<and>\<^bsup>(?s, ?s)\<^esup>",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0)))
         )),
    ("AT.or_empty",
     "\<turnstile>[] \<oplus>\<^sub>\<or>\<^bsup>({}, ?s)\<^esup>",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))
         )),
    ("AT.att_or_empty2",
     "\<turnstile>[] \<oplus>\<^sub>\<or>\<^bsup>(?s, ?s)\<^esup>",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0)))
         )),
    ("HOL.NO_MATCH_cong", "NO_MATCH ?pat ?val = NO_MATCH ?pat ?val",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("AT.nodup_all_tl", "nodup_all (?x # ?l) ==> nodup_all ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("AT.ref_pres_att", "?A \<sqsubseteq> ?A' ==> attack ?A = attack ?A'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("AT.att_andD1",
     "\<turnstile>?x1.0 # ?x2.0 \<oplus>\<^sub>\<and>\<^bsup>?s\<^esup> ==>
      \<turnstile>?x1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 2, template_var 2)))),
    ("AT.att_orD1",
     "\<turnstile>?x1.0 # ?x2.0 \<oplus>\<^sub>\<or>\<^bsup>?x\<^esup> ==>
      \<turnstile>?x1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 2, template_var 2)))),
    ("AT.att_or_empty_back",
     "?s' <= ?s'' ==>
      \<turnstile>[] \<oplus>\<^sub>\<or>\<^bsup>(?s', ?s'')\<^esup>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("AT.not_empty_ex", "?A ~= {} ==> EX x. x : ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("AT.list_one_tl_empty", "length ?l = Suc 0 ==> tl ?l = []",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("AT.att_and_empty",
     "\<turnstile>[] \<oplus>\<^sub>\<and>\<^bsup>(?s', ?s'')\<^esup> ==>
      ?s' <= ?s''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("AT.att_or_empty",
     "\<turnstile>[] \<oplus>\<^sub>\<or>\<^bsup>(?s', ?s'')\<^esup> ==>
      ?s' <= ?s''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("AT.ref_valI",
     "[| ?A \<sqsubseteq> ?A'; \<turnstile>?A' |]
      ==> \<turnstile>\<^sub>V ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("AT.fst_att_eq",
     "(fst ?x # ?sl) ! 0 =
      fst (attack (?al \<oplus>\<^sub>\<and>\<^bsup>?x\<^esup>))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_var 1)),
         template_hole 2),
       template_app
        (template_hole 3,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("AT.fst_lem1", "(?a, ?c) = (?b, ?d) ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation (template_var 3, template_var 1))),
    ("AT.att_base",
     "(\<turnstile>\<N>\<^bsub>?s\<^esub>) =
      (ALL x:fst ?s. Bex (snd ?s) ((\<rightarrow>\<^sub>i) x))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         t_empty))),
    ("AT.finite_nodup", "finite ?I ==> EX l. set l = ?I & nodup_all l",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("AT.tl_nempty_lngth", "tl ?sl ~= [] ==> 2 <= length ?sl",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("AT.tl_hd_empty", "tl (?l @ [?a]) = [] ==> ?l = []",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_hole 0))),
          template_hole 0)],
       template_equation (template_var 1, template_hole 0))),
    ("AT.tl_ne_ex", "?l ~= [] ==> EX x. ?l = x # tl ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("AT.singleton_or_lem",
     "\<turnstile>[?x1.0] \<oplus>\<^sub>\<or>\<^bsup>?x\<^esup> ==>
      fst ?x <= fst (attack ?x1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 3)),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("AT.list_two_tl_not_empty",
     "length ?l = Suc (Suc (length ?list)) ==> tl ?l ~= []",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app
           (template_hole 5,
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0))))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("AT.tl_eq1", "?sl ~= [] ==> tl ?sl ! 0 = ?sl ! Suc 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 0, template_hole 1))))),
    ("AT.list_app_one_length", "length ?l = ?n ==> (?l @ [?s]) ! ?n = ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2), template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))),
           template_var 1),
         template_var 0))),
    ("AT.nth_app_eq1_rev",
     "?i < length ?sla ==> ?sla ! ?i = (?sla @ ?sl) ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("AT.nth_app_eq1", "?i < length ?sla ==> (?sla @ ?sl) ! ?i = ?sla ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("AT.att_or_snd_hd",
     "\<turnstile>?a #
                  ?list \<oplus>\<^sub>\<or>\<^bsup>(?aa, ?b)\<^esup> ==>
      snd (attack ?a) <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2)),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 3)),
         template_var 0))),
    ("AT.tl_hd_not_empty", "tl (?l @ [?a]) ~= [] ==> ?l ~= []",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_hole 0))),
              template_hole 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("AT.length_last", "(?l @ [?x]) ! (length (?l @ [?x]) - 1) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)))),
           template_hole 0)),
       template_var 0)),
    ("AT.not_empty_hd_fst", "?l ~= [] ==> hd (?l @ [?a]) = ?l ! 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 6))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("AT.tl_eq2", "tl ?sl = [] ==> ?sl ! 0 = ?sl ! (length ?sl - 1)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0), template_hole 6)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_hole 3),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))))),
    ("AT.att_and_one",
     "[| \<turnstile>?a; attack ?a = ?s |]
      ==> \<turnstile>[?a] \<oplus>\<^sub>\<and>\<^bsup>?s\<^esup>",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0))
           ))),
    ("AT.tl_lem1", "[| ?l ~= []; tl ?l = [] |] ==> length ?l = 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_equation
         (template_app (template_hole 3, template_var 0), template_hole 4)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("AT.nth_tl_length1", "tl ?sl ~= [] ==> tl ?sl ! ?n = ?sl ! (?n + 1)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("AT.att_andD2",
     "\<turnstile>?x1.0 # ?x2.0 \<oplus>\<^sub>\<and>\<^bsup>?s\<^esup> ==>
      \<turnstile>?x2.0 \<oplus>\<^sub>\<and>\<^bsup>(snd (attack ?x1.0),
                snd ?s)\<^esup>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2))),
                 template_app (template_hole 1, template_var 0))))
           ))),
    ("AT.fst_eq1",
     "(?sla ! 0, ?y) = attack ?x1.0 ==> ?sla ! 0 = fst (attack ?x1.0)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_hole 3),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("AT.base_subset",
     "[| ?xa <= ?xc; \<turnstile>\<N>\<^bsub>(?x, ?xa)\<^esub> |]
      ==> \<turnstile>\<N>\<^bsub>(?x, ?xc)\<^esub>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("AT.base_att_lem1",
     "[| ?y0.0 <= ?y1.0; \<turnstile>\<N>\<^bsub>(?y1.0, ?y)\<^esub> |]
      ==> \<turnstile>\<N>\<^bsub>(?y0.0, ?y)\<^esub>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("AT.ineq1",
     "[| ?i < length ?sla - ?n; 0 <= ?n |] ==> ?i < length ?sla",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_var 0)),
        template_inequation (less_equals, template_hole 0, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 2, template_var 1)))),
    ("AT.attack_eq1",
     "snd (attack (?x1.0 # ?x2a \<oplus>\<^sub>\<and>\<^bsup>?x\<^esup>)) =
      snd (attack
            (?x2a \<oplus>\<^sub>\<and>\<^bsup>(snd (attack ?x1.0),
          snd ?x)\<^esup>))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2))),
               template_app (template_hole 4, template_var 0))))))),
    ("AT.app_tl_empty_hd", "tl (?l @ [?a]) = [] ==> hd (?l @ [?a]) = ?a",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2))),
          template_hole 2)],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_var 0))),
    ("AT.app_tl_empty_length",
     "tl (map ?f [0..<length ?l] @ [?a]) = [] ==> ?l = []",
     template_implication
      ([template_equation
         (template_app
           (template_hole 9,
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app (template_hole 4, template_var 1)))),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2))),
          template_hole 2)],
       template_equation (template_var 1, template_hole 0))),
    ("AT.att_or_snd_att",
     "[| \<turnstile>?x2.0 \<oplus>\<^sub>\<or>\<^bsup>?x\<^esup>;
         ?a : set ?x2.0 |]
      ==> snd (attack ?a) <= snd ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("AT.tl_nempty_length2",
     "[| ?s ~= []; tl ?s ~= [] |] ==> Suc 0 < length ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 5)
            )],
       template_inequation
        (less_than, template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("AT.att_or_empty_rev",
     "[| \<turnstile>?l \<oplus>\<^sub>\<or>\<^bsup>(?s, ?s')\<^esup>;
         ~ ?s <= ?s' |]
      ==> ?l ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (
            template_inequation
             (less_equals, template_var 1, template_var 0)
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("AT.map_fst", "0 < ?n ==> map ?f [0..<?n] = ?f 0 # map ?f [1..<?n]",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 5),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 0, template_hole 5)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 0),
               template_var 1)))))),
    ("AT.map_hd_lem", "0 < ?n ==> ?f 0 # map ?f [1..<?n] = map ?f [0..<?n]",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_var 0, template_hole 5)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 5),
             template_var 1))))),
    ("AT.ineq2",
     "length ?sla <= ?i ==> ?i + 1 - length ?sla = ?i - length ?sla + 1",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_app (template_hole 4, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 4, template_var 1))),
           template_hole 0)))),
    ("AT.tl_nempty_length",
     "[| ?s ~= []; tl ?s ~= [] |] ==> 0 < length ?s - 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 6)
            )],
       template_inequation
        (less_than, template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("AT.att_elem_seq0",
     "\<turnstile>?x1.0 ==>
      ALL x:fst (attack ?x1.0).
         EX y. y : snd (attack ?x1.0) & x \<rightarrow>\<^sub>i* y",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0))),
             t_empty)
           ))),
    ("AT.att_or_singleton",
     "\<turnstile>[?x1.0] \<oplus>\<^sub>\<or>\<^bsup>?x\<^esup> ==>
      \<turnstile>[] \<oplus>\<^sub>\<or>\<^bsup>(fst ?x -
            fst (attack ?x1.0),
            snd ?x)\<^esup>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_hole 5)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)))),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("AT.att_orD2",
     "\<turnstile>?x1.0 # ?x2.0 \<oplus>\<^sub>\<or>\<^bsup>?x\<^esup> ==>
      \<turnstile>?x2.0 \<oplus>\<^sub>\<or>\<^bsup>(fst ?x -
               fst (attack ?x1.0),
               snd ?x)\<^esup>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 2)))),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("AT.map_Suc_lem",
     "0 < ?n ==> map ?f [1..<?n] = map (%i. ?f (Suc i)) [0..<?n - 1]",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 6),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 2)))))),
    ("AT.or_att_fst_sup",
     "\<turnstile>?x1.0 # ?x2.0 \<oplus>\<^sub>\<or>\<^bsup>?x\<^esup> ==>
      fst ?x <= (UN y:set (?x1.0 # ?x2.0). fst (attack y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1))))))),
    ("AT.forall_ex_fun",
     "finite ?S ==>
      (ALL x:?S. EX y. ?P y x) --> (EX f. ALL x:?S. ?P (f x) x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1), t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("AT.att_elem_seq",
     "[| \<turnstile>?x1.0; ?x : fst (attack ?x1.0) |]
      ==> EX y. y : snd (attack ?x1.0) & ?x \<rightarrow>\<^sub>i* y",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("AT.nodup_all_lem",
     "nodup_all (?x1.0 # ?a # ?l) ==>
      insert ?x1.0 (insert ?a (set ?l)) - {?x1.0} = insert ?a (set ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 0)))),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("AT.att_and_nonemptyD2",
     "[| ?x2.0 ~= [];
         \<turnstile>?x1.0 #
                     ?x2.0 \<oplus>\<^sub>\<and>\<^bsup>?s\<^esup> |]
      ==> \<turnstile>?x2.0 \<oplus>\<^sub>\<and>\<^bsup>(snd
                     (attack ?x1.0),
                    snd ?s)\<^esup>",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 2)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1))),
                 template_app (template_hole 1, template_var 0))))
           ))),
    ("AT.or_att_fst_sup0",
     "[| ?x2.0 ~= [];
         \<turnstile>?x2.0 \<oplus>\<^sub>\<or>\<^bsup>?x\<^esup> |]
      ==> fst ?x <= (UN y:set ?x2.0. fst (attack y))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("AT.tl_eq3",
     "tl ?sl ~= [] ==>
      tl ?sl ! (length ?sl - Suc (Suc 0)) = ?sl ! (length ?sl - Suc 0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 7, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 1, template_hole 0)))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_hole 0)))))),
    ("AT.nth_tl_length",
     "tl ?sl ~= [] ==>
      tl ?sl ! (length (tl ?sl) - Suc 0) = ?sl ! (length ?sl - Suc 0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 7, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 7, template_var 0))),
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_hole 0)))))),
    ("AT.Compl_step1",
     "Kripke {s. EX i:?I. i \<rightarrow>\<^sub>i* s}
       ?I \<turnstile> EF ?s ==>
      ALL x:?I. EX y:?s. x \<rightarrow>\<^sub>i* y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, t_empty)),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), t_empty)
           ))),
    ("AT.att_and_fst_lem",
     "[| \<turnstile>?x1.0 # ?x2a \<oplus>\<^sub>\<and>\<^bsup>?x\<^esup>;
         ?xa
         : fst (attack
                 (?x1.0 # ?x2a \<oplus>\<^sub>\<and>\<^bsup>?x\<^esup>)) |]
      ==> ?xa : fst (attack ?x1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app
                 (template_hole 0,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 2)),
                    template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)))
           ))),
    ("AT.list_eq1",
     "?sl ~= [] ==>
      (fst ?x # ?sl) ! (length (fst ?x # ?sl) - 1) =
      ?sl ! (length ?sl - 1)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_var 1))),
             template_hole 0)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0))))),
    ("AT.nth_app_eq2",
     "length ?sla <= ?i & ?i < length (?sla @ ?sl) ==>
      (?sla @ ?sl) ! ?i = ?sl ! (?i - length ?sla)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 0))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 5, template_var 2)))))),
    ("AT.AT_EF",
     "[| \<turnstile>?A; attack ?A = (?I, ?s) |]
      ==> Kripke {s. EX i:?I. i \<rightarrow>\<^sub>i* s}
           ?I \<turnstile> EF ?s",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app (template_hole 7, template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("AT.ATV_EF",
     "[| \<turnstile>\<^sub>V ?A; (?I, ?s) = attack ?A |]
      ==> Kripke {s. EX i:?I. i \<rightarrow>\<^sub>i* s}
           ?I \<turnstile> EF ?s",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("AT.nth_app_eq3",
     "tl ?sl ~= [] ==>
      (?sla @ tl ?sl) ! (length (?sla @ tl ?sl) - 1) =
      ?sl ! (length ?sl - 1)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 7, template_var 1))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 7, template_var 1)))),
             template_hole 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0))))),
    ("AT.contrapos_corr",
     "[| ~ Kripke {s. EX i:?I. i \<rightarrow>\<^sub>i* s}
            ?I \<turnstile> EF ?s;
         attack ?A = (?I, ?s) |]
      ==> ~ \<turnstile>?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 7, t_empty)),
                      template_var 2)),
                  template_app (template_hole 4, template_var 1))
                )
            ),
        template_equation
         (template_app (template_hole 2, template_var 0),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Topological_Spaces.tendsto_within_open_NO_MATCH",
     "[| ?a : ?S; NO_MATCH UNIV ?S; open ?S |]
      ==> (?f \<longlongrightarrow> ?l) (at ?a within ?S) =
          ?f \<midarrow>?a\<rightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0))))),
    ("AT.tl_app_in",
     "?l ~= [] ==>
      map ?f [0..<length ?l - Suc 0] @ [?f (length ?l - Suc 0)] =
      map ?f [0..<length ?l]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_hole 5))))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_var 0,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 2, template_hole 5)))),
             template_hole 0)),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 3, template_var 1)))))),
    ("AT.nth_app_eq",
     "[| ?sl ~= []; ?sl ! (length ?sl - Suc 0) = ?x |]
      ==> (?l @ ?sl) ! (length ?l + length ?sl - Suc 0) = ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_app (template_hole 3, template_hole 2))),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 0)),
                 template_app (template_hole 4, template_var 2))),
             template_app (template_hole 3, template_hole 2))),
         template_var 1))),
    ("Deriv.CARAT_DERIV",
     "(?f has_field_derivative ?l) (at ?x) =
      (EX g. (ALL z. ?f z - ?f ?x = g z * (z - ?x)) &
             isCont g ?x & g ?x = ?l)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_hole 7)),
       template_app (template_hole 6, t_empty))),
    ("AT.ineq3",
     "[| tl ?sl ~= []; length ?sla <= ?i; ?i < length (?sla @ tl ?sl) - 1 |]
      ==> ?i - length ?sla + 1 < length ?sl - 1",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 8, template_var 2)))),
            template_hole 1))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 5, template_var 1))),
           template_hole 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 2)),
           template_hole 1)))),
    ("AT.app_tl_hd_list",
     "tl (map ?f [0..<length ?l] @ [?a]) ~= [] ==>
      hd (map ?f [0..<length ?l] @ [?a]) = map ?f [0..<length ?l] ! 0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_app
                       (template_app (template_hole 7, template_hole 6),
                        template_app (template_hole 5, template_var 1)))),
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_hole 3))),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 1)))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 8, template_var 2),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app (template_hole 5, template_var 1)))),
           template_hole 6)))),
    ("AT.Completeness",
     "[| ?I ~= {}; finite ?I;
         Kripke {s. EX i:?I. i \<rightarrow>\<^sub>i* s}
          ?I \<turnstile> EF ?s |]
      ==> EX A. \<turnstile>A & attack A = (?I, ?s)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 13)),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, t_empty)),
                  template_var 1)),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("AT.contrapos_compl",
     "[| ?I ~= {}; finite ?I;
         \<nexists>A. \<turnstile>A & attack A = (?I, - ?s) |]
      ==> ~ Kripke {s. EX i:?I. i \<rightarrow>\<^sub>i* s}
             ?I \<turnstile> EF (- ?s)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 14)),
        template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_negation
         (template_predicate (template_app (template_hole 12, t_empty)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, t_empty)),
                     template_var 1)),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 6, template_var 0)))
               )
           ))),
    ("AT.att_and",
     "(\<turnstile>?As \<oplus>\<^sub>\<and>\<^bsup>?s\<^esup>) =
      (case ?As of [] => fst ?s <= snd ?s
       | [a] => \<turnstile>a & attack a = ?s
       | a # ab # list =>
           \<turnstile>a &
           fst (attack a) = fst ?s &
           \<turnstile>ab #
                       list \<oplus>\<^sub>\<and>\<^bsup>(snd (attack a),
                    snd ?s)\<^esup>)",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 0)),
               template_app (template_hole 6, template_var 0))),
           t_empty),
         template_var 1))),
    ("AT.step_lem",
     "?l ~= [] ==>
      tl (map (%i. ?f ((?x1.0 # ?a # ?l) ! i) ((?a # ?l) ! i))
           [0..<length ?l]) =
      map (%i. ?f ((?a # ?l) ! i) (?l ! i)) [0..<length ?l - 1]",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 10))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 3)))),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 3)),
               template_hole 0)))))),
    ("AT.step_lem2",
     "map (%i. \<N>\<^bsub>((?x1.0 # ?a # ?list) ! i,
                            (?a # ?list) ! i)\<^esub>)
       [0..<length ?list] @
      [\<N>\<^bsub>((?x1.0 # ?a # ?list) ! length ?list,
                    (?a # ?list) ! length ?list)\<^esub>] =
      ?aa # ?listb ==>
      \<N>\<^bsub>(?x1.0, ?a)\<^esub> = ?aa",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, t_empty),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 2)))),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app
                           (template_app (template_hole 6, template_var 4),
                            template_app
                             (template_app
                               (template_hole 6, template_var 3),
                              template_var 2))),
                        template_app (template_hole 3, template_var 2))),
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app
                         (template_app (template_hole 6, template_var 3),
                          template_var 2)),
                      template_app (template_hole 3, template_var 2))))),
              template_hole 1)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 4),
             template_var 3)),
         template_var 1))),
    ("AT.list_or_upt",
     "[| ?lI ~= []; length ?l = length ?lI; nodup_all ?lI;
         !!i. i < length ?lI ==>
              \<turnstile>?l ! i & attack (?l ! i) = ({?lI ! i}, ?s) |]
      ==> \<turnstile>?l \<oplus>\<^sub>\<or>\<^bsup>(set ?lI, ?s)\<^esup>",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 17)),
        template_equation
         (template_app (template_hole 15, template_var 1),
          template_app (template_hole 14, template_var 2)),
        template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 0, template_var 2)),
                 template_var 0)))
           ))),
    ("AT.rtrancl_imp_singleton_seq2",
     "?x \<rightarrow>\<^sub>i* ?y ==>
      ?x = ?y |
      (EX s. s ~= [] &
             tl s ~= [] &
             s ! 0 = ?x &
             s ! (length s - 1) = ?y &
             (ALL i<length s - 1. s ! i \<rightarrow>\<^sub>i s ! Suc i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_var 1),
                 template_var 0)),
             template_app (template_hole 15, t_empty))
           ))),
    ("AT.step_lem2b",
     "[| 0 = length ?list;
         map (%i. \<N>\<^bsub>((?x1.0 # ?a # ?list) ! i,
                               (?a # ?list) ! i)\<^esub>)
          [0..<length ?list] @
         [\<N>\<^bsub>((?x1.0 # ?a # ?list) ! length ?list,
                       (?a # ?list) ! length ?list)\<^esub>] =
         ?aa # ?listb |]
      ==> \<N>\<^bsub>(?x1.0, ?a)\<^esub> = ?aa",
     template_implication
      ([template_equation
         (template_hole 12,
          template_app (template_hole 11, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, t_empty),
                template_app
                 (template_app (template_hole 3, template_hole 12),
                  template_app (template_hole 11, template_var 4)))),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 3),
                            template_app
                             (template_app
                               (template_hole 4, template_var 2),
                              template_var 4))),
                        template_app (template_hole 11, template_var 4))),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_var 4)),
                      template_app (template_hole 11, template_var 4))))),
              template_hole 1)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_var 1))),
    ("AT.step_lem2a",
     "[| 0 < length ?list;
         map (%i. \<N>\<^bsub>((?x1.0 # ?a # ?list) ! i,
                               (?a # ?list) ! i)\<^esub>)
          [0..<length ?list] @
         [\<N>\<^bsub>((?x1.0 # ?a # ?list) ! length ?list,
                       (?a # ?list) ! length ?list)\<^esub>] =
         ?aa # ?listb |]
      ==> \<N>\<^bsub>(?x1.0, ?a)\<^esub> = ?aa",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, t_empty),
                template_app
                 (template_app (template_hole 3, template_hole 12),
                  template_app (template_hole 11, template_var 4)))),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 3),
                            template_app
                             (template_app
                               (template_hole 4, template_var 2),
                              template_var 4))),
                        template_app (template_hole 11, template_var 4))),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_var 4)),
                      template_app (template_hole 11, template_var 4))))),
              template_hole 1)),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_var 1))),
    ("AT.att_or",
     "(\<turnstile>?As \<oplus>\<^sub>\<or>\<^bsup>?s\<^esup>) =
      (case ?As of [] => fst ?s <= snd ?s
       | [a] =>
           \<turnstile>a &
           fst ?s <= fst (attack a) & snd (attack a) <= snd ?s
       | a # ab # list =>
           \<turnstile>a &
           fst (attack a) <= fst ?s &
           snd (attack a) <= snd ?s &
           \<turnstile>ab #
                       list \<oplus>\<^sub>\<or>\<^bsup>(fst ?s -
                   fst (attack a),
                   snd ?s)\<^esup>)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0)),
               template_app (template_hole 5, template_var 0))),
           t_empty),
         template_var 1))),
    ("AT.Compl_step2",
     "ALL x:?I. EX y:?s. x \<rightarrow>\<^sub>i* y ==>
      ALL x:?I.
         x : ?s |
         (EX sl.
             sl ~= [] &
             tl sl ~= [] &
             (sl ! 0, sl ! (length sl - 1)) = ({x}, ?s) &
             (ALL i<length sl - 1.
                 \<turnstile>\<N>\<^bsub>(sl ! i, sl ! (i + 1))\<^esub>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 25, template_var 1), t_empty)
           ))),
    ("AT.base_list_and",
     "[| ?Sji ~= []; tl ?Sji ~= []; ?Sji ! 0 = ?li;
         ?Sji ! (length ?Sji - 1) = ?s;
         !!i. i < length ?Sji - 1 ==>
              \<turnstile>\<N>\<^bsub>(?Sji ! i, ?Sji ! Suc i)\<^esub> |]
      ==> \<turnstile>map (%i. \<N>\<^bsub>(?Sji ! i, ?Sji ! Suc i)\<^esub>)
                       [0..<
                        length ?Sji -
                        Suc 0] \<oplus>\<^sub>\<and>\<^bsup>(?li,
                       ?s)\<^esup>",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 16)),
        template_negation
         (
            template_equation
             (template_app (template_hole 15, template_var 2),
              template_hole 16)
            ),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 2),
            template_hole 12),
          template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 2),
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 2)),
              template_hole 9)),
          template_var 0),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_app
                    (template_app (template_hole 0, template_hole 12),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app (template_hole 10, template_var 2)),
                       template_app (template_hole 3, template_hole 12))))),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ))),
    ("AT.Compl_step4",
     "[| ?I ~= {}; finite ?I; ~ ?I <= ?s;
         EX lI.
            set lI = {x: ?I. x ~: ?s} &
            (EX Sj.
                length Sj = length lI &
                nodup_all lI &
                (ALL j<length Sj.
                    Sj ! j ~= [] &
                    tl (Sj ! j) ~= [] &
                    (Sj ! j ! 0, Sj ! j ! (length (Sj ! j) - 1)) =
                    ({lI ! j}, ?s) &
                    (ALL i<length (Sj ! j) - 1.
                        \<turnstile>\<N>\<^bsub>(Sj ! j ! i,
           Sj ! j ! (i + 1))\<^esub>))) |]
      ==> EX A. \<turnstile>A & attack A = (?I, ?s)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 33)),
        template_predicate
         (template_app (template_hole 32, template_var 1)),
        template_negation
         (
            template_inequation
             (less_equals, template_var 1, template_var 0)
            ),
        template_predicate (template_app (template_hole 30, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("AT.Compl_step3",
     "[| ?I ~= {}; finite ?I;
         ALL x:?I.
            x : ?s |
            (EX sl.
                sl ~= [] &
                tl sl ~= [] &
                (sl ! 0, sl ! (length sl - 1)) = ({x}, ?s) &
                (ALL i<length sl - 1.
                    \<turnstile>\<N>\<^bsub>(sl ! i,
       sl ! (i + 1))\<^esub>)) |]
      ==> EX lI.
             set lI = {x: ?I. x ~: ?s} &
             (EX Sj.
                 length Sj = length lI &
                 nodup_all lI &
                 (ALL j<length Sj.
                     Sj ! j ~= [] &
                     tl (Sj ! j) ~= [] &
                     (Sj ! j ! 0, Sj ! j ! (length (Sj ! j) - 1)) =
                     ({lI ! j}, ?s) &
                     (ALL i<length (Sj ! j) - 1.
                         \<turnstile>\<N>\<^bsub>(Sj ! j ! i,
            Sj ! j ! (i + 1))\<^esub>)))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 33)),
        template_predicate
         (template_app (template_hole 32, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 31, template_var 1), t_empty)
            )],
       template_predicate (template_app (template_hole 9, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ATMoreTemplates"
### 0.357s elapsed time, 0.496s cpu time, 0.057s GC time
val it = (): unit
