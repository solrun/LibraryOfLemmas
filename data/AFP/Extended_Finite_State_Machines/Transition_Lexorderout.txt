Loading theory "Draft.Trilean" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "Draft.Value_Lexorder" via "Draft.Value")
Loading theory "Draft.VName" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
Loading theory "HOL-Library.List_Lexorder" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.GExp_Lexorder")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  list :: (linorder) distrib_lattice
  inf_list == inf :: 'a list => 'a list => 'a list
  sup_list == sup :: 'a list => 'a list => 'a list
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  list :: (order) order_bot
  bot_list == bot :: 'a list
### theory "HOL-Library.List_Lexorder"
### 0.122s elapsed time, 0.512s cpu time, 0.060s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.536s cpu time, 0.060s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
Found termination order: "size_list size <*mlex*> {}"
instantiation
  vname :: linorder
  less_eq_vname == less_eq :: vname => vname => bool
  less_vname == less :: vname => vname => bool
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
Found termination order: "{}"
### theory "HOL-Library.Option_ord"
### 0.285s elapsed time, 1.128s cpu time, 0.095s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "FinFun.FinFun" via "HOL-Library.Cardinality")
### theory "Draft.VName"
### 0.429s elapsed time, 1.720s cpu time, 0.155s GC time
Loading theory "HOL-Library.Product_Lexorder" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder")
Found termination order: "{}"
### theory "HOL-Library.Nat_Bijection"
### 0.341s elapsed time, 1.339s cpu time, 0.161s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.ExtrEqs")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (linorder, linorder) distrib_lattice
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
Found termination order: "{}"
### theory "HOL-Library.Product_Lexorder"
### 0.128s elapsed time, 0.509s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "{}"
### theory "Draft.Trilean"
### 0.724s elapsed time, 2.882s cpu time, 0.327s GC time
Loading theory "Draft.Value" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "Draft.Value_Lexorder")
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.885s cpu time, 0.105s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Phantom_Type"
### 0.570s elapsed time, 2.253s cpu time, 0.266s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "FinFun.FinFun")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "{}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Additional type variable(s) in locale specification "card2": 'a
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Value"
### 0.872s elapsed time, 3.284s cpu time, 0.704s GC time
Loading theory "Draft.Value_Lexorder" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
### theory "HOL-Library.Stream"
### 1.145s elapsed time, 4.360s cpu time, 0.810s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.ExtrEqs")
instantiation
  value :: linorder
  less_eq_value == less_eq :: value => value => bool
  less_value == less :: value => value => bool
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
Found termination order: "{}"
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
### theory "Draft.Value_Lexorder"
### 0.135s elapsed time, 0.531s cpu time, 0.070s GC time
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Cardinality"
### 0.762s elapsed time, 2.851s cpu time, 0.177s GC time
Loading theory "FinFun.FinFun" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
bundle finfun
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
### theory "HOL-Library.BigO"
### 0.812s elapsed time, 2.612s cpu time, 0.303s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
Found termination order: "size <*mlex*> {}"
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
### theory "HOL-Library.Tree"
### 2.116s elapsed time, 6.733s cpu time, 1.190s GC time
Loading theory "Draft.Templates" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Transition_LexorderMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.791s elapsed time, 1.958s cpu time, 0.899s GC time
### theory "FinFun.FinFun"
### 1.928s elapsed time, 4.758s cpu time, 1.334s GC time
Loading theory "Draft.AExp" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition" via "Draft.GExp")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  input2state_prim :: "value list => nat => nat \<Rightarrow>f value option"
consts
  repeat :: "nat => 'a => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AExp"
### 2.749s elapsed time, 3.772s cpu time, 1.084s GC time
Loading theory "Draft.AExp_Lexorder" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.GExp_Lexorder")
Loading theory "Draft.GExp" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder" via "Draft.Transition")
Found termination order: "size <*mlex*> {}"
instantiation
  aexp :: (linorder) linorder
  less_eq_aexp == less_eq :: 'a aexp => 'a aexp => bool
  less_aexp == less :: 'a aexp => 'a aexp => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AExp_Lexorder"
### 0.772s elapsed time, 1.765s cpu time, 0.175s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  padding :: "nat => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.GExp"
### 2.427s elapsed time, 3.849s cpu time, 0.406s GC time
Loading theory "Draft.GExp_Lexorder" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder")
Loading theory "Draft.Transition" (required by "Draft.Transition_LexorderMoreTemplates" via "Draft.Transition_Lexorder")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "eq_upto_rename"
instantiation
  gexp :: (linorder) linorder
  less_eq_gexp == less_eq :: 'a gexp => 'a gexp => bool
  less_gexp == less :: 'a gexp => 'a gexp => bool
  Proving monotonicity ...
### theory "Draft.Transition"
### 0.332s elapsed time, 0.721s cpu time, 0.059s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.GExp_Lexorder"
### 0.912s elapsed time, 1.560s cpu time, 0.120s GC time
Loading theory "Draft.Transition_Lexorder" (required by "Draft.Transition_LexorderMoreTemplates")
instantiation
  transition_ext :: (linorder) linorder
  less_eq_transition_ext == less_eq ::
    'a transition_scheme => 'a transition_scheme => bool
  less_transition_ext == less ::
    'a transition_scheme => 'a transition_scheme => bool
### theory "Draft.Transition_Lexorder"
### 0.256s elapsed time, 0.262s cpu time, 0.000s GC time
Loading theory "Draft.Transition_LexorderMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Transition_LexorderMoreTemplates"
### 0.448s elapsed time, 0.611s cpu time, 0.060s GC time
val it = (): unit
