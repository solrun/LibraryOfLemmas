Loading theory "Draft.VName" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EFSMMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EFSMMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Trilean" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "Draft.Value_Lexorder" via "Draft.Value")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.509s cpu time, 0.043s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "HOL-Library.FSet" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  vname :: linorder
  less_eq_vname == less_eq :: vname => vname => bool
  less_vname == less :: vname => vname => bool
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.266s cpu time, 0.102s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EFSMMoreTemplates" via "Draft.ExtrEqs")
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.VName"
### 0.388s elapsed time, 1.551s cpu time, 0.102s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
Found termination order: "{}"
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.391s elapsed time, 1.534s cpu time, 0.130s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "FinFun.FinFun" via "HOL-Library.Cardinality")
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
Found termination order: "{}"
### theory "Draft.Trilean"
### 0.618s elapsed time, 2.452s cpu time, 0.246s GC time
Loading theory "Draft.Value" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "Draft.Value_Lexorder")
### theory "HOL-Library.Option_ord"
### 0.315s elapsed time, 1.229s cpu time, 0.144s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EFSMMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.409s elapsed time, 1.438s cpu time, 0.590s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EFSMMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
### theory "HOL-Library.Phantom_Type"
### 0.771s elapsed time, 2.861s cpu time, 0.703s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "FinFun.FinFun")
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.136s elapsed time, 4.295s cpu time, 0.850s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "HOL-Library.FSet")
Found termination order: "{}"
### theory "Draft.Value"
### 0.892s elapsed time, 3.343s cpu time, 0.706s GC time
Loading theory "Draft.Value_Lexorder" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
instantiation
  value :: linorder
  less_eq_value == less_eq :: value => value => bool
  less_value == less :: value => value => bool
### Additional type variable(s) in locale specification "card2": 'a
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
Found termination order: "{}"
### theory "Draft.Value_Lexorder"
### 0.136s elapsed time, 0.533s cpu time, 0.090s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EFSMMoreTemplates" via "Draft.ExtrEqs")
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.762s elapsed time, 3.020s cpu time, 0.239s GC time
Loading theory "FinFun.FinFun" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
bundle finfun
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.173s elapsed time, 4.406s cpu time, 1.192s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.488s elapsed time, 5.562s cpu time, 1.316s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
### theory "HOL-Library.Tree"
### 2.309s elapsed time, 8.360s cpu time, 1.609s GC time
Loading theory "Draft.Templates" (required by "Draft.EFSMMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.258s cpu time, 0.069s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EFSMMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.916s elapsed time, 2.864s cpu time, 1.103s GC time
### theory "FinFun.FinFun"
### 2.440s elapsed time, 7.852s cpu time, 2.410s GC time
Loading theory "Draft.AExp" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition" via "Draft.GExp")
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.FSet"
### 2.685s elapsed time, 7.090s cpu time, 1.563s GC time
Loading theory "Draft.FSet_Utils" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  input2state_prim :: "value list => nat => nat \<Rightarrow>f value option"
consts
  repeat :: "nat => 'a => 'a list"
### theory "Draft.FSet_Utils"
### 0.239s elapsed time, 0.512s cpu time, 0.063s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AExp"
### 2.613s elapsed time, 4.395s cpu time, 0.445s GC time
Loading theory "Draft.GExp" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM" via "Draft.Transition")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  padding :: "nat => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.GExp"
### 2.402s elapsed time, 2.900s cpu time, 0.310s GC time
Loading theory "Draft.Transition" (required by "Draft.EFSMMoreTemplates" via "Draft.EFSM")
Proofs for inductive predicate(s) "eq_upto_rename"
  Proving monotonicity ...
### theory "Draft.Transition"
### 0.308s elapsed time, 0.323s cpu time, 0.000s GC time
Loading theory "Draft.EFSM" (required by "Draft.EFSMMoreTemplates")
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "recognises_execution"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
Proofs for inductive predicate(s) "accepts_trace"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p)))
         (snd (snd (snd p)))) <*mlex*>
   {}"
Proofs for inductive predicate(s) "trace_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "execution_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "executionally_equivalent"
  Proving monotonicity ...
Proofs for inductive predicate(s) "visits"
  Proving monotonicity ...
Proofs for inductive predicate(s) "obtains"
  Proving monotonicity ...
### theory "Draft.EFSM"
### 1.545s elapsed time, 1.756s cpu time, 0.241s GC time
Loading theory "Draft.EFSMMoreTemplates"
val templateLemmas =
   [("EFSM.reachable_initial", "reachable 0 ?e",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("EFSM.trace_equivalent_reflexive", "trace_equivalent ?e1.0 ?e1.0",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("EFSM.finite_all_regs", "finite (all_regs ?e)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("EFSM.str_not_num", "EFSM.Str ?s ~= Num ?x1.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("EFSM.choice_alt", "choice ?t ?t' = choice_alt ?t ?t'",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("EFSM.choice_symmetry", "choice ?x ?y = choice ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("EFSM.trace_equivalent_symmetric",
     "trace_equivalent ?e1.0 ?e2.0 = trace_equivalent ?e2.0 ?e1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("EFSM.random_member_singleton", "random_member {|?a|} = Some ?a",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("EFSM.random_member_None", "(random_member ?ss = None) = (?ss = {||})",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("EFSM.execution_simulates_trace_simulates",
     "execution_simulates ?e1.0 ?e2.0 ==> trace_simulates ?e1.0 ?e2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("EFSM.random_member_nonempty",
     "(?s ~= {||}) = (random_member ?s ~= None)",
     template_bimplication
      (template_negation
        (template_equation (template_var 0, template_hole 3)),
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("EFSM.visits_empty", "visits ?s ?e ?s' ?r [] = (?s = ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 3, template_var 1))),
    ("EFSM.visits_base", "visits ?target ?e ?s ?r [] = (?s = ?target)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 1, template_var 3))),
    ("EFSM.simulates_trace_subset",
     "trace_simulates ?e1.0 ?e2.0 ==> T ?e1.0 <= T ?e2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("EFSM.random_member_is_member",
     "random_member ?ss = Some ?s ==> ?s |\<in>| ?ss",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("EFSM.accepts_trace_prim",
     "accepts_trace ?e ?s ?r ?l = accepts_trace_prim ?e ?s ?r ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("EFSM.recognises_prim",
     "recognises_execution ?e ?s ?r ?t = recognises_prim ?e ?s ?r ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("EFSM.ffilter_fBall", "fBall ?xs ?P = (ffilter ?P ?xs = ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("EFSM.obtainable_if_unreachable",
     "~ reachable ?s ?e ==> ~ obtainable ?s ?r ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 1)
               )
           ))),
    ("EFSM.obtainable_empty_efsm",
     "obtainable ?s ?c {||} = (?s = 0 & ?c = <>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("EFSM.empty_ffilter", "(ffilter ?P ?xs = {||}) = (ALL x:?xs. ~ ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("EFSM.no_further_steps", "?s ~= ?s' ==> ~ visits ?s ?e ?s' ?r []",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 1),
                     template_var 2),
                   template_var 0),
                 template_hole 0)
               )
           ))),
    ("EFSM.ffilter_empty_if", "ALL x:?xs. ~ ?P x ==> ffilter ?P ?xs = {||}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("EFSM.obtains_obtainable",
     "obtains ?s ?r ?e 0 <> ?t ==> obtainable ?s ?r ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_hole 2),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("EFSM.trace_equivalent_transitive",
     "[| trace_equivalent ?e1.0 ?e2.0; trace_equivalent ?e2.0 ?e3.0 |]
      ==> trace_equivalent ?e1.0 ?e3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("EFSM.simulation_implies_trace_equivalent",
     "[| trace_simulates ?e1.0 ?e2.0; trace_simulates ?e2.0 ?e1.0 |]
      ==> trace_equivalent ?e1.0 ?e2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("EFSM.reachable_finsert",
     "reachable ?s ?e ==> reachable ?s (finsert ((?aa, ?ba), ?b) ?e)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_var 3))
           ))),
    ("EFSM.prefix_closure",
     "accepts_trace ?e ?s ?r (?t @ ?t') ==> accepts_trace ?e ?s ?r ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("EFSM.obtains_recognises",
     "obtains ?s ?c ?e ?s' ?r ?t ==> recognises_execution ?e ?s' ?r ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("EFSM.recognition_prefix_closure",
     "recognises_execution ?e ?s ?r (?t @ ?t') ==>
      recognises_execution ?e ?s ?r ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("EFSM.fsubset_if",
     "ALL x. x |\<in>| ?f1.0 --> x |\<in>| ?f2.0 ==>
      ?f1.0 |\<subseteq>| ?f2.0",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("EFSM.obtains_base",
     "obtains ?s ?r ?e ?s' ?r' [] = (?s = ?s' & ?r = ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("EFSM.obtains_visits",
     "obtains ?s ?r ?e ?s' ?r' ?t ==> visits ?s ?e ?s' ?r' ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("EFSM.executionally_equivalent_trace_equivalent",
     "ALL x. executionally_equivalent ?e1.0 0 <> ?e2.0 0 <> x ==>
      trace_equivalent ?e1.0 ?e2.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("EFSM.size_le_1", "(size ?f <= 1) = (?f = {||} | (EX e. ?f = {|e|}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app (template_hole 1, t_empty))
           ))),
    ("EFSM.S_ffUnion",
     "S ?e = ffUnion ((%((s, s'), uu_). {|s, s'|}) |`| ?e)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3, template_app (template_hole 2, t_empty))),
           template_var 0)))),
    ("EFSM.executionally_equivalent_remove_unreachable_state",
     "~ reachable ?s' ?e ==>
      executionally_equivalent ?e 0 <> (remove_state ?s' ?e) 0 <> ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 1),
                       template_hole 2),
                     template_hole 1),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_hole 2),
               template_hole 1),
             template_var 0)
           ))),
    ("EFSM.rejects_prefix",
     "~ recognises_execution ?e ?s ?r ?t ==>
      ~ recognises_execution ?e ?s ?r (?t @ ?t')",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("EFSM.recognises_head",
     "recognises_execution ?e ?s ?r (?h # ?t) ==>
      recognises_execution ?e ?s ?r [?h]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("EFSM.possible_steps_can_take_transition",
     "(?s2.0, ?t1.0) |\<in>| possible_steps ?e1.0 ?s1.0 ?r ?l ?i ==>
      can_take_transition ?t1.0 ?i ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 0),
             template_var 2)
           ))),
    ("EFSM.reachable_finsert_contra",
     "~ reachable ?s (finsert ((?aa, ?ba), ?b) ?e) ==> ~ reachable ?s ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app
                         (template_hole 1,
                          template_app
                           (template_app (template_hole 0, template_var 3),
                            template_var 2)),
                        template_var 1)),
                    template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 0)
               )
           ))),
    ("EFSM.step_None",
     "(step ?e ?s ?r ?l ?i = None) =
      (possible_steps ?e ?s ?r ?l ?i = {||})",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_hole 3),
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("EFSM.unobtainable_if",
     "~ visits ?s ?e ?s' ?r' ?t ==> ~ obtains ?s ?r ?e ?s' ?r' ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 5),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 0),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )
           ))),
    ("EFSM.recognises_execution_obtains",
     "recognises_execution ?e ?s' ?r ?t ==>
      EX c1 s. obtains s c1 ?e ?s' ?r ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("EFSM.executionally_equivalent_symmetry",
     "executionally_equivalent ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0 ?x ==>
      executionally_equivalent ?e2.0 ?s2.0 ?r2.0 ?e1.0 ?s1.0 ?r1.0 ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 0, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 0)
           ))),
    ("EFSM.no_possible_steps_1",
     "possible_steps ?e ?s ?r ?l ?i = {||} ==> step ?e ?s ?r ?l ?i = None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1),
            template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("EFSM.trace_equivalent",
     "ALL t. accepts_trace ?e1.0 0 <> t = accepts_trace ?e2.0 0 <> t ==>
      trace_equivalent ?e1.0 ?e2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("EFSM.visits_finsert",
     "visits ?s ?e ?s' ?r ?t ==>
      visits ?s (finsert ((?aa, ?ba), ?b) ?e) ?s' ?r ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 7),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 2),
                             template_var 1)),
                         template_var 0)),
                     template_var 6)),
                 template_var 5),
               template_var 4),
             template_var 3)
           ))),
    ("EFSM.recognises_possible_steps_not_empty",
     "recognises_execution ?e ?s ?r (?h # ?t) ==>
      possible_steps ?e ?s ?r (fst ?h) (snd ?h) ~= {||}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 1)),
             template_hole 0)
           ))),
    ("EFSM.recognises_cons_step",
     "recognises_execution ?e ?s ?r (?h # ?t) ==>
      step ?e ?s ?r (fst ?h) (snd ?h) ~= None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 1)),
             template_hole 0)
           ))),
    ("EFSM.no_possible_steps_rejects",
     "possible_steps ?e ?s ?r ?l ?i = {||} ==>
      ~ recognises_execution ?e ?s ?r ((?l, ?i) # ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_hole 4)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)),
                   template_var 0))
               )
           ))),
    ("EFSM.no_step_none",
     "step ?e ?s ?r ?aa ?ba = None ==>
      ~ recognises_execution ?e ?s ?r ((?aa, ?ba) # ?p)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_hole 4)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)),
                   template_var 0))
               )
           ))),
    ("EFSM.trace_reject_no_possible_steps_atomic",
     "possible_steps ?e ?s ?r (fst ?a) (snd ?a) = {||} ==>
      ~ recognises_execution ?e ?s ?r (?a # ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 4, template_var 1)),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("EFSM.step_none_rejects",
     "step ?e ?s ?r (fst ?h) (snd ?h) = None ==>
      ~ recognises_execution ?e ?s ?r (?h # ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 4, template_var 1)),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("EFSM.possible_steps_apply_guards",
     "possible_steps ?e ?s ?r ?l ?i = {|(?s', ?t)|} ==>
      apply_guards (Guards ?t) (join_ir ?i ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0)),
            template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4))
           ))),
    ("EFSM.in_outgoing",
     "(((?s1.0, ?s2.0), ?t) |\<in>| outgoing_transitions ?e ?s) =
      (((?s1.0, ?s2.0), ?t) |\<in>| ?e & ?s1.0 = ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_var 3)),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("EFSM.observe_execution_no_possible_step",
     "possible_steps ?e ?s ?r (fst ?h) (snd ?h) = {||} ==>
      observe_execution ?e ?s ?r (?h # ?es) = []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 6, template_var 1)),
            template_app (template_hole 5, template_var 1)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("EFSM.no_outgoing_transitions",
     "ffilter (%((s', uu_), uu_). ?s = s') ?e = {||} ==>
      possible_steps ?e ?s ?r ?l ?i = {||}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6, template_app (template_hole 5, t_empty))),
            template_var 3),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 4),
               template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("EFSM.executionally_equivalent_remove_unreachable_state_arbitrary",
     "[| obtainable ?s ?r ?e; ~ reachable ?s' ?e |]
      ==> executionally_equivalent ?e ?s ?r (remove_state ?s' ?e) ?s ?r ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 2)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 4),
                     template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2)),
                 template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("EFSM.accepts_trace_simulation",
     "[| accepts_trace ?e1.0 ?s1.0 ?r1.0 ?t;
         trace_simulation ?f ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0 ?t |]
      ==> accepts_trace ?e2.0 ?s2.0 ?r2.0 ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 0, template_var 3),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 4)
           ))),
    ("EFSM.one_outgoing_transition",
     "size (ffilter (%((origin, dest), t). origin = ?s) ?e) = 1 ==>
      size (possible_steps ?e ?s ?r ?l ?i) <= 1",
     template_implication
      ([template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, t_empty))),
              template_var 3)),
          template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 3))),
    ("EFSM.executionally_equivalent_acceptance",
     "[| ALL x.
            executionally_equivalent ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0 x;
         accepts_trace ?e1.0 ?s1.0 ?r1.0 ?t |]
      ==> accepts_trace ?e2.0 ?s2.0 ?r2.0 ?t",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("EFSM.recognises_must_be_possible_step",
     "recognises_execution ?e ?s ?r (?h # ?t) ==>
      EX aa ba. (aa, ba) |\<in>| possible_steps ?e ?s ?r (fst ?h) (snd ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("EFSM.possible_steps_not_empty_iff",
     "step ?e ?s ?r ?a ?b ~= None ==>
      EX aa ba. (aa, ba) |\<in>| possible_steps ?e ?s ?r ?a ?b",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("EFSM.step_outputs",
     "step ?e ?s ?r ?l ?i = Some (?t, ?s', ?p, ?r') ==>
      evaluate_outputs ?t ?i ?r = ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 6)),
         template_var 1))),
    ("EFSM.rejects_trace_simulation",
     "[| rejects_trace ?e2.0 ?s2.0 ?r2.0 ?t;
         accepts_trace ?e1.0 ?s1.0 ?r1.0 ?t |]
      ==> ~ trace_simulation ?f ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0 ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 0),
                             template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4)
               )
           ))),
    ("EFSM.step_member",
     "step ?e ?s ?r ?l ?i = Some (?t, ?s', ?p, ?r') ==>
      (?s', ?t) |\<in>| possible_steps ?e ?s ?r ?l ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4))
           ))),
    ("EFSM.possible_steps_remove_unreachable",
     "[| obtainable ?s ?r ?e; ~ reachable ?s' ?e |]
      ==> possible_steps (remove_state ?s' ?e) ?s ?r ?l ?i =
          possible_steps ?e ?s ?r ?l ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3)),
                 template_var 5),
               template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 5),
               template_var 4),
             template_var 1),
           template_var 0)))),
    ("EFSM.reachable_if_obtainable_step",
     "[| obtainable ?s ?r ?e;
         EX l i t. (?s', t) |\<in>| possible_steps ?e ?s ?r l i |]
      ==> reachable ?s' ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("EFSM.in_possible_steps",
     "(((?s, ?s'), ?t) |\<in>| ?e &
       Label ?t = ?l & can_take_transition ?t ?i ?r) =
      ((?s', ?t) |\<in>| possible_steps ?e ?s ?r ?l ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 6),
                     template_var 5)),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 4)),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 6),
               template_var 0),
             template_var 2),
           template_var 1)))),
    ("EFSM.executionally_equivalent_transitivity",
     "[| executionally_equivalent ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0 ?x;
         executionally_equivalent ?e2.0 ?s2.0 ?r2.0 ?e3.0 ?s3.0 ?r3.0 ?x |]
      ==> executionally_equivalent ?e1.0 ?s1.0 ?r1.0 ?e3.0 ?s3.0 ?r3.0 ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 0, template_var 9),
                        template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 0, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("EFSM.execution_simulation_trace_simulation",
     "execution_simulation ?f ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0
       (map (%(l, i, o). (l, i)) ?t) ==>
      trace_simulation ?f ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0 ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 5, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 4, template_app (template_hole 3, t_empty)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("EFSM.singleton_dest",
     "[| fis_singleton (possible_steps ?e ?s ?r ?aa ?b);
         fthe_elem (possible_steps ?e ?s ?r ?aa ?b) = (?baa, ?aba) |]
      ==> ((?s, ?baa), ?aba) |\<in>| ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1)),
                 template_var 0)),
             template_var 6)
           ))),
    ("EFSM.executionally_equivalent_acceptance_map",
     "executionally_equivalent ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0
       (map (%(l, i, o). (l, i)) ?t) ==>
      accepts_trace ?e2.0 ?s2.0 ?r2.0 ?t =
      accepts_trace ?e1.0 ?s1.0 ?r1.0 ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 6, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 5, template_app (template_hole 4, t_empty)),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 6),
               template_var 5),
             template_var 4),
           template_var 0)))),
    ("EFSM.recognises_step_equiv",
     "recognises_execution ?e ?s ?r ((?l, ?i) # ?t) =
      (EX (s', T):possible_steps ?e ?s ?r ?l ?i.
          recognises_execution ?e s' (evaluate_updates T ?i ?r) ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 3, t_empty)))),
    ("EFSM.possible_steps_empty_guards_false",
     "ALL ((s1, s2), t):ffilter (%((origin, dest), t). Label t = ?l) ?e.
         ~ can_take_transition t ?i ?r ==>
      possible_steps ?e ?s ?r ?l ?i = {||}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, t_empty))),
                  template_var 3)),
              template_app
               (template_hole 8, template_app (template_hole 7, t_empty)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 1),
             template_var 4),
           template_var 2),
         template_hole 0))),
    ("EFSM.execution_end",
     "[| possible_steps ?e1.0 ?s1.0 ?r1.0 ?l ?i = {||};
         possible_steps ?e2.0 ?s2.0 ?r2.0 ?l ?i = {||} |]
      ==> executionally_equivalent ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0
           ((?l, ?i) # ?es)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_hole 3),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 5),
            template_var 4),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 8),
                       template_var 7),
                     template_var 6),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4)),
               template_var 0))
           ))),
    ("EFSM.possible_steps_empty",
     "(possible_steps ?e ?s ?r ?l ?i = {||}) =
      (ALL ((origin, dest), t):fset ?e.
          origin ~= ?s | Label t ~= ?l | ~ can_take_transition t ?i ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 11, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 10),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 4)),
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))))),
    ("EFSM.accepts_trace_exists_possible_step",
     "accepts_trace ?e1.0 ?s1.0 ?r1.0 ((?aa, ?b, ?c) # ?t) ==>
      EX (s1', t1):possible_steps ?e1.0 ?s1.0 ?r1.0 ?aa ?b.
         evaluate_outputs t1 ?b ?r1.0 = map Some ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_app
                     (template_app (template_hole 9, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 7, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app (template_hole 6, t_empty))
           ))),
    ("EFSM.visits_step",
     "visits ?target ?e ?s ?r (?h # ?t) =
      (EX (s', T):possible_steps ?e ?s ?r (fst ?h) (snd ?h).
          visits ?target ?e s' (evaluate_updates T (snd ?h) ?r) ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_var 4),
                   template_var 3),
                 template_var 2),
               template_app (template_hole 5, template_var 1)),
             template_app (template_hole 4, template_var 1))),
         template_app (template_hole 3, t_empty)))),
    ("EFSM.recognises_must_be_step",
     "recognises_execution ?e ?s ?r (?h # ?ts) ==>
      EX t s' p d'. step ?e ?s ?r (fst ?h) (snd ?h) = Some (t, s', p, d')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("EFSM.trace_reject_later",
     "ALL (s', T):possible_steps ?e ?s ?r ?l ?i.
         ~ recognises_execution ?e s' (evaluate_updates T ?i ?r) ?t ==>
      ~ recognises_execution ?e ?s ?r ((?l, ?i) # ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 5),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 7, t_empty))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)),
                   template_var 0))
               )
           ))),
    ("EFSM.possible_steps_disparity",
     "[| possible_steps ?e1.0 ?s1.0 ?r1.0 ?l ?i ~= {||};
         possible_steps ?e2.0 ?s2.0 ?r2.0 ?l ?i = {||} |]
      ==> ~ executionally_equivalent ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0
             ((?l, ?i) # ?es)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_hole 3)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 5),
            template_var 4),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 2, template_var 8),
                           template_var 7),
                         template_var 6),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4)),
                   template_var 0))
               )
           ))),
    ("EFSM.obtains_step",
     "obtains ?s ?r ?e ?s' ?r' ((?l, ?i) # ?t) =
      (EX (s'', T):possible_steps ?e ?s' ?r' ?l ?i.
          obtains ?s ?r ?e s'' (evaluate_updates T ?i ?r') ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 3, t_empty)))),
    ("EFSM.replace_finsert",
     "replace (finsert ((?aaa, ?baa), ?b) ?e1.0) ?old ?new =
      (if ((?aaa, ?baa), ?b) = ?old
       then finsert ?new (replace ?e1.0 ?old ?new)
       else finsert ((?aaa, ?baa), ?b) (replace ?e1.0 ?old ?new))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app
                         (template_hole 3,
                          template_app
                           (template_app (template_hole 2, template_var 5),
                            template_var 4)),
                        template_var 3)),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 5),
                           template_var 4)),
                       template_var 3)),
                   template_var 1)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 5),
                       template_var 4)),
                   template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("EFSM.recognises_single_possible_step",
     "[| possible_steps ?e ?s ?r ?l ?i = {|(?s', ?t)|};
         recognises_execution ?e ?s' (evaluate_updates ?t ?i ?r) ?trace |]
      ==> recognises_execution ?e ?s ?r ((?l, ?i) # ?trace)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1)),
            template_hole 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 2),
                template_app
                 (template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 1)),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 5)),
                  template_var 5)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_var 0))
           ))),
    ("EFSM.recognises_single_possible_step_atomic",
     "[| possible_steps ?e ?s ?r (fst ?h) (snd ?h) = {|(?s', ?t)|};
         recognises_execution ?e ?s' (evaluate_updates ?t (snd ?h) ?r)
          ?trace |]
      ==> recognises_execution ?e ?s ?r (?h # ?trace)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5),
                template_var 4),
              template_app (template_hole 9, template_var 3)),
            template_app (template_hole 8, template_var 3)),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1)),
            template_hole 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 2),
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 1)),
                    template_app
                     (template_app
                       (template_hole 1,
                        template_app (template_hole 8, template_var 3)),
                      template_var 4)),
                  template_var 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("EFSM.observe_execution_no_possible_steps",
     "[| possible_steps ?e1.0 ?s1.0 ?r1.0 (fst ?h) (snd ?h) = {||};
         possible_steps ?e2.0 ?s2.0 ?r2.0 (fst ?h) (snd ?h) = {||} |]
      ==> observe_execution ?e1.0 ?s1.0 ?r1.0 (?h # ?t) =
          observe_execution ?e2.0 ?s2.0 ?r2.0 (?h # ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_var 5),
              template_app (template_hole 5, template_var 4)),
            template_app (template_hole 4, template_var 4)),
          template_hole 3),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 5, template_var 4)),
            template_app (template_hole 4, template_var 4)),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 7),
               template_var 6),
             template_var 5),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0))))),
    ("EFSM.observe_execution_step",
     "[| step ?e ?s ?r (fst ?h) (snd ?h) = Some (?t, ?s', ?p, ?r');
         observe_execution ?e ?s' ?r' ?es = ?obs |]
      ==> observe_execution ?e ?s ?r (?h # ?es) = ?p # ?obs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 9),
                  template_var 8),
                template_var 7),
              template_app (template_hole 9, template_var 6)),
            template_app (template_hole 8, template_var 6)),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2))))),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 9),
                template_var 4),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 9),
               template_var 8),
             template_var 7),
           template_app
            (template_app (template_hole 1, template_var 6),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("EFSM.obtains_step_append",
     "[| obtains ?s ?r ?e ?s' ?r' ?t;
         (?s'', ?ta) |\<in>| possible_steps ?e ?s ?r ?l ?i |]
      ==> obtains ?s'' (evaluate_updates ?ta ?i ?r) ?e ?s' ?r'
           (?t @ [(?l, ?i)])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 7),
                      template_var 9),
                    template_var 8),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_var 3),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 5, template_var 2)),
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_var 8)),
                       template_var 8)),
                   template_var 7),
                 template_var 6),
               template_var 5),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_hole 0)))
           ))),
    ("EFSM.possible_steps_alt_atom",
     "(possible_steps ?e ?s ?r ?l ?i = {|?dt|}) =
      (ffilter
        (%((origin, dest), t).
            origin = ?s & Label t = ?l & can_take_transition t ?i ?r)
        ?e =
       {|((?s, fst ?dt), snd ?dt)|})",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 17, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 16, template_var 0),
           template_hole 15)),
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_hole 12, template_app (template_hole 11, t_empty))),
           template_var 5),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app (template_hole 2, template_var 0))),
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("EFSM.possible_steps_alt3",
     "(possible_steps ?e ?s ?r ?l ?i = {|(?d, ?t)|}) =
      (ffilter
        (%((origin, dest), t).
            origin = ?s & Label t = ?l & can_take_transition t ?i ?r)
        ?e =
       {|((?s, ?d), ?t)|})",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 16, template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_var 1),
               template_var 0)),
           template_hole 13)),
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10, template_app (template_hole 9, t_empty))),
           template_var 6),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 1)),
               template_var 0)),
           template_hole 0)))),
    ("EFSM.trace_reject",
     "(~ recognises_execution ?e ?s ?r ((?l, ?i) # ?t)) =
      (possible_steps ?e ?s ?r ?l ?i = {||} |
       (ALL (s', T):possible_steps ?e ?s ?r ?l ?i.
           ~ recognises_execution ?e s' (evaluate_updates T ?i ?r) ?t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 5),
                    template_var 4),
                  template_var 3),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 2),
                      template_var 1)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 6, template_var 5),
                           template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1)),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 6, template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app (template_hole 3, t_empty)))
           ))),
    ("EFSM.accepts_trace_step",
     "accepts_trace ?e ?s ?r ((?l, ?i, ?p) # ?t) =
      (EX (s', T):possible_steps ?e ?s ?r ?l ?i.
          evaluate_outputs T ?i ?r = map Some ?p &
          accepts_trace ?e s' (evaluate_updates T ?i ?r) ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 15, template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_var 3),
               template_app
                (template_app (template_hole 12, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)),
         template_app (template_hole 9, t_empty)))),
    ("EFSM.outgoing_transitions_deterministic",
     "ALL s.
         ALL ((s1, s2), t):outgoing_transitions ?e s.
            ALL ((s1', s2'), t'):outgoing_transitions ?e s.
               s2 ~= s2' | t ~= t' -->
               Label t = Label t' --> ~ choice t t' ==>
      deterministic ?e",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("EFSM.trace_simulation_step_none",
     "[| ?s2.0 = ?f ?s1.0;
         ALL (s1', t1):possible_steps ?e1.0 ?s1.0 ?r1.0 ?l ?i.
            evaluate_outputs t1 ?i ?r1.0 ~= map Some ?o |]
      ==> trace_simulation ?f ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0
           ((?l, ?i, ?o) # ?es)",
     template_implication
      ([template_equation
         (template_var 10, template_app (template_var 9, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 12, template_var 7),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4)),
              template_app (template_hole 11, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_var 9),
                         template_var 7),
                       template_var 8),
                     template_var 6),
                   template_var 2),
                 template_var 10),
               template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3))),
               template_var 0))
           ))),
    ("EFSM.split_label",
     "ffilter
       (%((origin, dest), t).
           origin = ?s & Label t = ?l & can_take_transition t ?i ?r)
       ?e =
      ffilter
       (%((origin, dest), t). origin = ?s & can_take_transition t ?i ?r)
       (ffilter (%((origin, dest), t). Label t = ?l) ?e)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty))),
           template_var 0)))),
    ("EFSM.split_origin",
     "ffilter
       (%((origin, dest), t).
           origin = ?s & Label t = ?l & can_take_transition t ?i ?r)
       ?e =
      ffilter
       (%((origin, dest), t). Label t = ?l & can_take_transition t ?i ?r)
       (ffilter (%((origin, dest), t). origin = ?s) ?e)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty))),
           template_var 0)))),
    ("EFSM.rejects_trace_step",
     "rejects_trace ?e ?s ?r ((?l, ?i, ?p) # ?t) =
      (ALL (s', T):possible_steps ?e ?s ?r ?l ?i.
          evaluate_outputs T ?i ?r ~= map Some ?p |
          rejects_trace ?e s' (evaluate_updates T ?i ?r) ?t)",
     template_equation
      (template_app
        (template_hole 16,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 15, template_var 6),
               template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_var 3),
                 template_app
                  (template_app (template_hole 12, template_var 2),
                   template_var 1))),
             template_var 0))),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)),
         template_app (template_hole 9, t_empty)))),
    ("EFSM.step_Some",
     "(step ?e ?s ?r ?l ?i = Some (?t, ?s', ?p, ?r')) =
      (random_member (possible_steps ?e ?s ?r ?l ?i) = Some (?s', ?t) &
       evaluate_outputs ?t ?i ?r = ?p & evaluate_updates ?t ?i ?r = ?r')",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 17, template_var 8),
                 template_var 7),
               template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_hole 16,
           template_app
            (template_app (template_hole 15, template_var 3),
             template_app
              (template_app (template_hole 14, template_var 2),
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_var 0))))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 9, template_var 8),
                             template_var 7),
                           template_var 6),
                         template_var 5),
                       template_var 4))),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_var 3)))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 3)),
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_var 6))),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 3)),
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_var 6)),
                     template_var 6)),
                 template_var 0)))
           ))),
    ("EFSM.possible_steps_replace_unchanged",
     "[| ((?s, ?aa), ?ba) ~= ((?s1.0, ?s2.0), ?t1.0);
         (?aa, ?ba) |\<in>| possible_steps ?e1.0 ?s ?r ?l ?i |]
      ==> (?aa, ?ba) |\<in>|
          possible_steps
           (replace ?e1.0 ((?s1.0, ?s2.0), ?t1.0) ((?s1.0, ?s2.0), ?t2.0))
           ?s ?r ?l ?i",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 10),
                    template_var 9)),
                template_var 8),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 7),
                    template_var 6)),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 9),
                  template_var 8)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 10),
                    template_var 3),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 9),
                 template_var 8)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_app
                                  (template_hole 4, template_var 7),
                                 template_var 6)),
                             template_var 5)),
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_app
                                (template_hole 4, template_var 7),
                               template_var 6)),
                           template_var 0))),
                     template_var 10),
                   template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("EFSM.accepts_trace_step_2",
     "[| (?s2', ?t2.0) |\<in>| possible_steps ?e2.0 ?s2.0 ?r2.0 ?l ?i;
         accepts_trace ?e2.0 ?s2' (evaluate_updates ?t2.0 ?i ?r2.0) ?t;
         evaluate_outputs ?t2.0 ?i ?r2.0 = map Some ?p |]
      ==> accepts_trace ?e2.0 ?s2.0 ?r2.0 ((?l, ?i, ?p) # ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 8),
                  template_var 7)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 6),
                  template_var 8),
                template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_var 7)),
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 4)),
                  template_var 4)),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 7)),
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 4)),
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 11, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0))),
               template_var 1))
           ))),
    ("EFSM.possible_steps_alt",
     "(possible_steps ?e ?s ?r ?l ?i = {|(?d, ?t)|}) =
      (ffilter
        (%((origin, dest), t).
            origin = ?s &
            Label t = ?l &
            length ?i = Arity t & apply_guards (Guards t) (join_ir ?i ?r))
        ?e =
       {|((?s, ?d), ?t)|})",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 20, template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app (template_hole 18, template_var 1),
               template_var 0)),
           template_hole 17)),
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 14, template_app (template_hole 13, t_empty))),
           template_var 6),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 1)),
               template_var 0)),
           template_hole 0)))),
    ("EFSM.possible_steps_alt_aux",
     "possible_steps ?e ?s ?r ?l ?i = {|(?d, ?t)|} ==>
      ffilter
       (%((origin, dest), t).
           origin = ?s &
           Label t = ?l &
           length ?i = Arity t & apply_guards (Guards t) (join_ir ?i ?r))
       ?e =
      {|((?s, ?d), ?t)|}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_app (template_hole 18, template_var 1),
                template_var 0)),
            template_hole 17))],
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 14, template_app (template_hole 13, t_empty))),
           template_var 6),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 1)),
               template_var 0)),
           template_hole 0)))),
    ("EFSM.possible_steps_finsert",
     "possible_steps (finsert ((?s, ?s'), ?t) ?e) ?ss ?r ?l ?i =
      (if ?s = ?ss &
          Label ?t = ?l &
          length ?i = Arity ?t & apply_guards (Guards ?t) (join_ir ?i ?r)
       then finsert (?s', ?t) (possible_steps ?e ?s ?r ?l ?i)
       else possible_steps ?e ?ss ?r ?l ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app
                           (template_app
                             (template_hole 13,
                              template_app
                               (template_app
                                 (template_hole 12, template_var 7),
                                template_var 6)),
                            template_var 5)),
                        template_var 4)),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 7),
                       template_var 3)),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app (template_hole 7, template_var 5)),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_hole 6, template_var 0)),
                           template_app (template_hole 5, template_var 5))),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 3, template_var 5)),
                         template_app
                          (template_app (template_hole 2, template_var 0),
                           template_var 2)))))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 5)),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 15, template_var 4),
                         template_var 7),
                       template_var 2),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 15, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("EFSM.possible_steps_single_out",
     "[| ffilter (%((origin, dest), t). origin = ?s) ?e =
         {|((?s, ?d), ?t)|};
         Label ?t = ?l &
         length ?i = Arity ?t & apply_guards (Guards ?t) (join_ir ?i ?r) |]
      ==> possible_steps ?e ?s ?r ?l ?i = {|(?d, ?t)|}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 20,
              template_app
               (template_hole 19,
                template_app (template_hole 18, t_empty))),
            template_var 5),
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_var 6),
                    template_var 4)),
                template_var 3)),
            template_hole 13)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 3)),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 17,
                      template_app (template_hole 9, template_var 1)),
                    template_app (template_hole 8, template_var 3))),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 3)),
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 6),
               template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_hole 0)))),
    ("EFSM.fmember_possible_steps",
     "((?s', ?t) |\<in>| possible_steps ?e ?s ?r ?l ?i) =
      (((?s, ?s'), ?t)
       : {((origin, dest), t).
          ((origin, dest), t) : fset ?e &
          origin = ?s &
          Label t = ?l &
          length ?i = Arity t & apply_guards (Guards t) (join_ir ?i ?r)})",
     template_equation
      (template_app
        (template_app
          (template_hole 18,
           template_app
            (template_app (template_hole 17, template_var 6),
             template_var 5)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 16, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_var 3),
                 template_var 6)),
             template_var 5)),
         template_app
          (template_hole 12,
           template_app
            (template_hole 11,
             template_app (template_hole 10, t_empty)))))),
    ("EFSM.possible_steps_alt2",
     "(possible_steps ?e ?s ?r ?l ?i = {|(?d, ?t)|}) =
      (ffilter
        (%((origin, dest), t).
            Label t = ?l &
            length ?i = Arity t & apply_guards (Guards t) (join_ir ?i ?r))
        (ffilter (%((origin, dest), t). origin = ?s) ?e) =
       {|((?s, ?d), ?t)|})",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 20, template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app (template_hole 18, template_var 1),
               template_var 0)),
           template_hole 17)),
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 14, template_app (template_hole 13, t_empty))),
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_hole 14,
                 template_app (template_hole 13, t_empty))),
             template_var 6)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 1)),
               template_var 0)),
           template_hole 0)))),
    ("EFSM.step",
     "[| ?possibilities = possible_steps ?e ?s ?r ?l ?i;
         random_member ?possibilities = Some (?s', ?t);
         evaluate_outputs ?t ?i ?r = ?p; evaluate_updates ?t ?i ?r = ?r' |]
      ==> step ?e ?s ?r ?l ?i = Some (?t, ?s', ?p, ?r')",
     template_implication
      ([template_equation
         (template_var 9,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4)),
        template_equation
         (template_app (template_hole 15, template_var 9),
          template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2))),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2)),
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 6)),
          template_var 1),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 6)),
            template_var 6),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 8),
                 template_var 7),
               template_var 6),
             template_var 5),
           template_var 4),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("EFSM.observe_execution_first_outputs_equiv",
     "[| observe_execution ?e1.0 ?s1.0 ?r1.0 ((?l, ?i) # ?ts) =
         observe_execution ?e2.0 ?s2.0 ?r2.0 ((?l, ?i) # ?ts);
         step ?e1.0 ?s1.0 ?r1.0 ?l ?i = Some (?t, ?s', ?p, ?r') |]
      ==> EX (s2', t2):possible_steps ?e2.0 ?s2.0 ?r2.0 ?l ?i.
             evaluate_outputs t2 ?i ?r2.0 = ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 15, template_var 12),
                template_var 11),
              template_var 10),
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 9),
                  template_var 8)),
              template_var 7)),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 15, template_var 6),
                template_var 5),
              template_var 4),
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 9),
                  template_var 8)),
              template_var 7))),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 12),
                  template_var 11),
                template_var 10),
              template_var 9),
            template_var 8),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 6),
                       template_var 5),
                     template_var 4),
                   template_var 9),
                 template_var 8)),
             template_app (template_hole 4, t_empty))
           ))),
    ("EFSM.possible_steps_singleton",
     "(possible_steps ?e ?s ?r ?l ?i = {|(?d, ?t)|}) =
      ({((origin, dest), t).
        ((origin, dest), t) : fset ?e &
        origin = ?s &
        Label t = ?l &
        length ?i = Arity t & apply_guards (Guards t) (join_ir ?i ?r)} =
       {((?s, ?d), ?t)})",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 22, template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_hole 21,
             template_app
              (template_app (template_hole 20, template_var 1),
               template_var 0)),
           template_hole 19)),
       template_equation
        (template_app
          (template_hole 17,
           template_app
            (template_hole 16, template_app (template_hole 15, t_empty))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 5),
                   template_var 1)),
               template_var 0)),
           template_hole 0)))),
    ("EFSM.deterministic_finsert",
     "[| ALL i r l.
            ALL ((a, b), t)
                :ffilter (%((origin, dest), t). origin = ?s)
                  (finsert ((?s, ?s'), ?t') ?e).
               Label t = l & can_take_transition t i r -->
               ~ can_take_transition ?t' i r;
         deterministic ?e |]
      ==> deterministic (finsert ((?s, ?s'), ?t') ?e)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_var 2)),
                   template_var 1)),
               template_var 0))
           ))),
    ("EFSM.deterministic_alt_aux",
     "(size (possible_steps ?e ?s ?r ?l ?i) <= 1) =
      (possible_steps ?e ?s ?r ?l ?i = {||} |
       (EX s' t.
           ffilter
            (%((origin, dest), t).
                origin = ?s &
                Label t = ?l &
                length ?i = Arity t &
                apply_guards (Guards t) (join_ir ?i ?r))
            ?e =
           {|((?s, s'), t)|}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_hole 24,
                  template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 4),
                          template_var 3),
                        template_var 2),
                      template_var 1),
                    template_var 0))),
              template_hole 22)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_hole 20,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 23, template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_hole 19)),
             template_app (template_hole 18, t_empty))
           ))),
    ("EFSM.observe_execution_possible_step",
     "[| possible_steps ?e ?s ?r (fst ?h) (snd ?h) = {|(?s', ?t)|};
         evaluate_outputs ?t (snd ?h) ?r = ?p;
         evaluate_updates ?t (snd ?h) ?r = ?r';
         observe_execution ?e ?s' ?r' ?es = ?obs |]
      ==> observe_execution ?e ?s ?r (?h # ?es) = ?p # ?obs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 9),
                  template_var 8),
                template_var 7),
              template_app (template_hole 15, template_var 6)),
            template_app (template_hole 14, template_var 6)),
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 5),
                template_var 4)),
            template_hole 11)),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 4)),
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 14, template_var 6)),
              template_var 7)),
          template_var 3),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 4)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 14, template_var 6)),
                template_var 7)),
            template_var 7),
          template_var 2),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 9),
                template_var 5),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 9),
               template_var 8),
             template_var 7),
           template_app
            (template_app (template_hole 1, template_var 6),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("EFSM.deterministic_alt",
     "deterministic ?e =
      (ALL s r l i.
          possible_steps ?e s r l i = {||} |
          (EX s' t.
              ffilter
               (%((origin, dest), t).
                   origin = s &
                   Label t = l &
                   length i = Arity t &
                   apply_guards (Guards t) (join_ir i r))
               ?e =
              {|((s, s'), t)|}))",
     template_equation
      (template_app (template_hole 27, template_var 0),
       template_app (template_hole 26, t_empty))),
    ("EFSM.outgoing_transitions_fprod_deterministic",
     "(!!s b ba bb bc.
          [| (((s, b), ba), (s, bb), bc)
             : fset (outgoing_transitions ?e s) \<times>
               fset (outgoing_transitions ?e s);
             b ~= bb | ba ~= bc; Label ba = Label bc |]
          ==> ~ choice ba bc) ==>
      deterministic ?e",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("EFSM.all_states_deterministic",
     "ALL s l i r.
         ffilter
          (%((origin, dest), t).
              origin = s & Label t = l & can_take_transition t i r)
          ?e =
         {||} |
         (EX x. ffilter
                 (%((origin, dest), t).
                     origin = s & Label t = l & can_take_transition t i r)
                 ?e =
                {|x|}) ==>
      deterministic ?e",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("EFSM.ffilter_split",
     "ffilter
       (%((origin, dest), t).
           origin = ?s &
           Label t = ?l &
           length ?i = Arity t & apply_guards (Guards t) (join_ir ?i ?r))
       ?e =
      ffilter
       (%((origin, dest), t).
           Label t = ?l &
           length ?i = Arity t & apply_guards (Guards t) (join_ir ?i ?r))
       (ffilter (%((origin, dest), t). origin = ?s) ?e)",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11, template_app (template_hole 10, t_empty))),
         template_var 0),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11, template_app (template_hole 10, t_empty))),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11, template_app (template_hole 10, t_empty))),
           template_var 0)))),
    ("EFSM.not_deterministic_conv",
     "~ deterministic ?e ==>
      EX s l i r d1 d2 t1 t2.
         (d1 ~= d2 | t1 ~= t2) &
         ((s, d1), t1) |\<in>| ?e &
         ((s, d2), t2) |\<in>| ?e &
         Label t1 = Label t2 &
         can_take_transition t1 i r & can_take_transition t2 i r",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 15, template_var 0))
            )],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("EFSM.not_deterministic",
     "EX s l i r d1 d2 t1 t2.
         d1 ~= d2 &
         t1 ~= t2 &
         ((s, d1), t1) |\<in>| ?e &
         ((s, d2), t2) |\<in>| ?e &
         Label t1 = Label t2 &
         can_take_transition t1 i r & can_take_transition t2 i r ==>
      ~ deterministic ?e",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("EFSM.deterministic_if",
     "\<nexists>s l i r d1 d2 t1 t2.
         (d1 ~= d2 | t1 ~= t2) &
         ((s, d1), t1) |\<in>| ?e &
         ((s, d2), t2) |\<in>| ?e &
         Label t1 = Label t2 &
         can_take_transition t1 i r & can_take_transition t2 i r ==>
      deterministic ?e",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 15, t_empty)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("EFSM.outgoing_transitions_deterministic2",
     "(!!s a b ba aa bb bc.
          [| ((a, b), ba) |\<in>| outgoing_transitions ?e s;
             ((aa, bb), bc) |\<in>|
             outgoing_transitions ?e s |-| {|((a, b), ba)|};
             b ~= bb | ba ~= bc |]
          ==> ~ choice ba bc) ==>
      deterministic ?e",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("EFSM.ex_comm4",
     "(EX c1 s a b.
          (a, b) : fset (possible_steps ?e ?s' ?r ?l ?i) &
          obtains s c1 ?e a (evaluate_updates b ?i ?r) ?t) =
      (EX a b s c1.
          (a, b) : fset (possible_steps ?e ?s' ?r ?l ?i) &
          obtains s c1 ?e a (evaluate_updates b ?i ?r) ?t)",
     template_equation
      (template_app (template_hole 11, t_empty),
       template_app (template_hole 10, t_empty))),
    ("EFSM.execution_simulation_step",
     "execution_simulation ?f ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0
       ((?l, ?i) # ?es) =
      (?s2.0 = ?f ?s1.0 &
       (ALL (s1', t1):possible_steps ?e1.0 ?s1.0 ?r1.0 ?l ?i.
           EX (s2', t2):possible_steps ?e2.0 ?s2.0 ?r2.0 ?l ?i.
              evaluate_outputs t1 ?i ?r1.0 = evaluate_outputs t2 ?i ?r2.0 &
              execution_simulation ?f ?e1.0 s1'
               (evaluate_updates t1 ?i ?r1.0) ?e2.0 s2'
               (evaluate_updates t2 ?i ?r2.0) ?es))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 14, template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 4),
                 template_app (template_var 9, template_var 7))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 8, template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 2),
                   template_var 1)),
               template_app (template_hole 7, t_empty)))
           ))),
    ("EFSM.trace_simulation_step",
     "trace_simulation ?f ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0
       ((?l, ?i, ?o) # ?es) =
      (?s2.0 = ?f ?s1.0 &
       (ALL (s1', t1)
            :ffilter
              (%(s1', t1). evaluate_outputs t1 ?i ?r1.0 = map Some ?o)
              (possible_steps ?e1.0 ?s1.0 ?r1.0 ?l ?i).
           EX (s2', t2):possible_steps ?e2.0 ?s2.0 ?r2.0 ?l ?i.
              evaluate_outputs t2 ?i ?r2.0 = map Some ?o &
              trace_simulation ?f ?e1.0 s1' (evaluate_updates t1 ?i ?r1.0)
               ?e2.0 s2' (evaluate_updates t2 ?i ?r2.0) ?es))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 18, template_var 10),
                          template_var 9),
                        template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 16, template_var 3),
                    template_app
                     (template_app (template_hole 15, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_var 5),
                 template_app (template_var 10, template_var 8))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app (template_hole 10, t_empty)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 9),
                           template_var 8),
                         template_var 7),
                       template_var 3),
                     template_var 2))),
               template_app (template_hole 10, t_empty)))
           ))),
    ("EFSM.observe_execution_one_possible_step",
     "[| possible_steps ?e1.0 ?s1.0 ?r (fst ?h) (snd ?h) =
         {|(?s1', ?t1.0)|};
         possible_steps ?e2.0 ?s2.0 ?r (fst ?h) (snd ?h) =
         {|(?s2', ?t2.0)|};
         evaluate_outputs ?t1.0 (snd ?h) ?r =
         evaluate_outputs ?t2.0 (snd ?h) ?r;
         evaluate_updates ?t1.0 (snd ?h) ?r = ?r';
         evaluate_updates ?t2.0 (snd ?h) ?r = ?r';
         observe_execution ?e1.0 ?s1' ?r' ?t =
         observe_execution ?e2.0 ?s2' ?r' ?t |]
      ==> observe_execution ?e1.0 ?s1.0 ?r (?h # ?t) =
          observe_execution ?e2.0 ?s2.0 ?r (?h # ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 11),
                  template_var 10),
                template_var 9),
              template_app (template_hole 14, template_var 8)),
            template_app (template_hole 13, template_var 8)),
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 7),
                template_var 6)),
            template_hole 10)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4),
                template_var 9),
              template_app (template_hole 14, template_var 8)),
            template_app (template_hole 13, template_var 8)),
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2)),
            template_hole 10)),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 6)),
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 13, template_var 8)),
              template_var 9)),
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2)),
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 13, template_var 8)),
              template_var 9))),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 6)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 13, template_var 8)),
                template_var 9)),
            template_var 9),
          template_var 1),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 13, template_var 8)),
                template_var 9)),
            template_var 9),
          template_var 1),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 11),
                template_var 7),
              template_var 1),
            template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 3),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 11),
               template_var 10),
             template_var 9),
           template_app
            (template_app (template_hole 0, template_var 8),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 9),
           template_app
            (template_app (template_hole 0, template_var 8),
             template_var 0))))),
    ("EFSM.executionally_equivalent_step",
     "executionally_equivalent ?e1.0 ?s1.0 ?r1.0 ?e2.0 ?s2.0 ?r2.0
       ((?l, ?i) # ?es) =
      ((ALL (s1', t1):possible_steps ?e1.0 ?s1.0 ?r1.0 ?l ?i.
           EX (s2', t2):possible_steps ?e2.0 ?s2.0 ?r2.0 ?l ?i.
              evaluate_outputs t1 ?i ?r1.0 = evaluate_outputs t2 ?i ?r2.0 &
              executionally_equivalent ?e1.0 s1'
               (evaluate_updates t1 ?i ?r1.0) ?e2.0 s2'
               (evaluate_updates t2 ?i ?r2.0) ?es) &
       (ALL (s2', t2):possible_steps ?e2.0 ?s2.0 ?r2.0 ?l ?i.
           EX (s1', t1):possible_steps ?e1.0 ?s1.0 ?r1.0 ?l ?i.
              evaluate_outputs t1 ?i ?r1.0 = evaluate_outputs t2 ?i ?r2.0 &
              executionally_equivalent ?e1.0 s1'
               (evaluate_updates t1 ?i ?r1.0) ?e2.0 s2'
               (evaluate_updates t2 ?i ?r2.0) ?es))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 13, template_var 8),
                   template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 8, template_var 8),
                       template_var 7),
                     template_var 6),
                   template_var 2),
                 template_var 1)),
             template_app (template_hole 7, t_empty))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 8, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1)),
           template_app (template_hole 7, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.EFSMMoreTemplates"
### 0.533s elapsed time, 0.634s cpu time, 0.000s GC time
val it = (): unit
