   [("EFSM_LTL.shd_state_is_none",
     "state_eq None (make_full_observation ?e None ?r ?p ?t)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_hole 0)),
    ("EFSM_LTL.join_iro_R", "join_iro ?i ?r ?p (Rg ?n) = ?r $ ?n",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("EFSM_LTL.nxt_alw", "nxt (alw ?P) ?s ==> alw (nxt ?P) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 1)),
             template_var 0)
           ))),
    ("EFSM_LTL.alw_ev", "alw ?f = (%xs. ~ ev (%s. ~ ?f s) xs)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("EFSM_LTL.smap_statename_None",
     "smap statename (make_full_observation ?e None ?r ?p ?i) =
      sconst None",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_hole 2),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_hole 2))),
    ("EFSM_LTL.state_eq_holds",
     "state_eq ?s = holds (%x. statename x = ?s)",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("EFSM_LTL.snth_sconst", "(ALL i. ?s !! i = ?h) = (?s = sconst ?h)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("EFSM_LTL.alw_sconst", "alw (%xs. shd xs = ?h) ?t = (?t = sconst ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("EFSM_LTL.no_output_none_if_empty",
     "alw (output_eq []) (make_full_observation ?e None ?r [] ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0),
                 template_var 1),
               template_hole 2),
             template_var 0))
         )),
    ("EFSM_LTL.no_updates_none",
     "alw (%x. datastate (shd x) = ?r)
       (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0),
                 template_var 3),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.once_none_always_none",
     "alw (state_eq None) (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_hole 1),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.no_output_none_nxt",
     "alw (nxt (output_eq [])) (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.once_none_nxt_always_none",
     "alw (nxt (state_eq None)) (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_hole 1),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.no_output_none",
     "nxt (alw (output_eq [])) (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.state_eq_None_not_Some",
     "state_eq None ?s ==> statename (shd ?s) ~= Some ?n",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_hole 2)],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("EFSM_LTL.alw_not_some",
     "alw (%xs. statename (shd xs) ~= Some ?s)
       (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.alw_state_eq_smap",
     "alw (state_eq ?s) ?ss = alw (%ss. shd ss = ?s) (smap statename ?ss)",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 0),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_hole 4),
           template_var 0)))),
    ("EFSM_LTL.watch_label",
     "label_eq ?l (watch ?e ?t) = (fst (shd ?t) = String.implode ?l)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 2),
                       template_app (template_hole 5, template_hole 4)),
                     template_hole 3),
                   template_hole 2),
                 template_var 1)))),
         template_app (template_hole 1, template_var 0)),
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("EFSM_LTL.unfold_observe_none",
     "make_full_observation ?e None ?d ?p ?t =
      (| statename = None, datastate = ?d, action = shd ?t,
         output = ?p |) ##
      make_full_observation ?e None ?d [] (stl ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_hole 6),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 6),
                   template_var 2),
                 template_app (template_hole 3, template_var 0)),
               template_var 1),
             template_hole 2)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_hole 6),
               template_var 2),
             template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("EFSM_LTL.no_updates_none_aux",
     "EX p i. ?j = make_full_observation ?e None ?r p i ==>
      alw (%x. datastate (shd x) = ?r) ?j",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)
           ))),
    ("EFSM_LTL.action_components",
     "(label_eq ?l ?s & input_eq ?i ?s) =
      (action (shd ?s) = (String.implode ?l, ?i))",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 2)))),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 2)))),
               template_var 0))
           ),
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("EFSM_LTL.state_none_2",
     "state_eq None (make_full_observation ?e ?s ?r ?p ?t) ==>
      state_eq None (make_full_observation ?e ?s ?r ?p (stl ?t))",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))),
          template_hole 1)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))),
         template_hole 1))),
    ("EFSM_LTL.state_none",
     "state_eq None (make_full_observation ?e ?s ?r ?p ?t) -->
      nxt (state_eq None) (make_full_observation ?e ?s ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 2, template_var 4),
                             template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 0)))),
               template_hole 1)),
           template_app
            (template_app (template_hole 0, t_empty),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("EFSM_LTL.ltl_step_none",
     "possible_steps ?e ?s ?r ?a ?b = {||} ==>
      ltl_step ?e (Some ?s) ?r (?a, ?b) = (None, [], ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1),
            template_var 0),
          template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_app (template_hole 5, template_var 3)),
             template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2))))),
    ("EFSM_LTL.ltl_step_none_2",
     "possible_steps ?e ?s ?r (fst ?ie) (snd ?ie) = {||} ==>
      ltl_step ?e (Some ?s) ?r ?ie = (None, [], ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 9, template_var 0)),
            template_app (template_hole 8, template_var 0)),
          template_hole 7)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app (template_hole 4, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("EFSM_LTL.no_output_none_aux",
     "EX p r i. ?j = make_full_observation ?e None r [] i ==>
      alw (output_eq []) ?j",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)
           ))),
    ("EFSM_LTL.once_none_always_none_aux",
     "EX p r i. ?j = make_full_observation ?e None r p i ==>
      alw (state_eq None) ?j",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)
           ))),
    ("EFSM_LTL.ltl_step_cases",
     "[| ?P (None, [], ?r);
         ALL (s', t):possible_steps ?e ?s ?r ?l ?i.
            ?P (Some s', evaluate_outputs t ?i ?r,
                evaluate_updates t ?i ?r) |]
      ==> ?P (ltl_step ?e (Some ?s) ?r (?l, ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 5,
              template_app
               (template_app (template_hole 14, template_hole 13),
                template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, template_var 3),
                        template_var 2),
                      template_var 4),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 8, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_var 5,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app (template_hole 7, template_var 2)),
                 template_var 4),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("EFSM_LTL.ltl_step_some",
     "[| possible_steps ?e ?s ?r ?l ?i = {|(?s', ?t)|};
         evaluate_outputs ?t ?i ?r = ?p; evaluate_updates ?t ?i ?r = ?r' |]
      ==> ltl_step ?e (Some ?s) ?r (?l, ?i) = (Some ?s', ?p, ?r')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_var 3),
                template_var 2)),
            template_hole 13)),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2)),
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 6)),
          template_var 1),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 6)),
            template_var 6),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 8),
               template_app (template_hole 3, template_var 7)),
             template_var 6),
           template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("EFSM_LTL.ltl_step_singleton",
     "EX t. possible_steps ?e ?n ?r (fst ?v) (snd ?v) = {|(?aa, t)|} &
            evaluate_outputs t (snd ?v) ?r = ?b &
            evaluate_updates t (snd ?v) ?r = ?c ==>
      ltl_step ?e (Some ?n) ?r ?v = (Some ?aa, ?b, ?c)",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 6),
               template_app (template_hole 2, template_var 5)),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("EFSM_LTL.ltl_step_alt",
     "ltl_step ?e (Some ?s) ?r ?t =
      (let possibilities = possible_steps ?e ?s ?r (fst ?t) (snd ?t)
       in if possibilities = {||} then (None, [], ?r)
          else let (s', t') = SOME x. x |\<in>| possibilities
               in (Some s', evaluate_outputs t' (snd ?t) ?r,
                   evaluate_updates t' (snd ?t) ?r))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 21, template_var 3),
             template_app (template_hole 20, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 19,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 18, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 17, template_var 0)),
             template_app (template_hole 16, template_var 0))),
         t_empty)))]
