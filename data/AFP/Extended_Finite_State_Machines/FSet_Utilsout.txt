Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.FSet_Utils" via "HOL-Library.FSet" via "HOL-Library.Countable")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.119s elapsed time, 0.498s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.845s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.314s elapsed time, 1.262s cpu time, 0.123s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.374s elapsed time, 1.508s cpu time, 0.123s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.FSet_Utils" via "HOL-Library.FSet")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.826s elapsed time, 3.151s cpu time, 0.724s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.871s elapsed time, 3.206s cpu time, 0.685s GC time
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.084s elapsed time, 3.548s cpu time, 0.733s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.FSet_Utils")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.716s elapsed time, 5.347s cpu time, 0.887s GC time
Loading theory "Draft.Templates" (required by "Draft.FSet_UtilsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.131s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FSet_UtilsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.484s elapsed time, 1.017s cpu time, 0.104s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 1.879s elapsed time, 2.990s cpu time, 0.319s GC time
Loading theory "Draft.FSet_Utils" (required by "Draft.FSet_UtilsMoreTemplates")
### theory "Draft.FSet_Utils"
### 0.178s elapsed time, 0.198s cpu time, 0.000s GC time
Loading theory "Draft.FSet_UtilsMoreTemplates"
val templateLemmas =
   [("FSet_Utils.singleton_singleton", "fis_singleton {|?a|}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("FSet_Utils.ffilter_empty", "ffilter ?f {||} = {||}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("FSet_Utils.fprod_empty_l", "{||} |\<times>| ?a = {||}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("FSet_Utils.fprod_empty_r", "?a |\<times>| {||} = {||}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("FSet_Utils.exists_fset_of_list", "EX l. ?f = fset_of_list l",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("FSet_Utils.ffold_empty", "ffold ?f ?b {||} = ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("FSet_Utils.fset_of_list_remdups",
     "fset_of_list (remdups ?l) = fset_of_list ?l",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("FSet_Utils.fMin_Min", "fMin (fset_of_list ?l) = Min (set ?l)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.size_fset_of_list",
     "size (fset_of_list ?l) = length (remdups ?l)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.size_ffilter", "size (ffilter ?P ?f) <= size ?f",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("FSet_Utils.size_fimage", "size (?f |`| ?s) <= size ?s",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("FSet_Utils.fset_of_list_empty",
     "(fset_of_list ?l = {||}) = (?l = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("FSet_Utils.fset_of_list_sort",
     "fset_of_list ?l = fset_of_list (sort ?l)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("FSet_Utils.fis_singleton_fthe_elem",
     "fis_singleton ?A = (?A = {|fthe_elem ?A|})",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("FSet_Utils.fset_equiv", "(?f1.0 = ?f2.0) = (fset ?f1.0 = fset ?f2.0)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.sorted_list_of_fset_sort",
     "sorted_list_of_fset (fset_of_list ?l) = sort (remdups ?l)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.fmember_implies_member", "?e |\<in>| ?f ==> ?e : fset ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("FSet_Utils.ffold_ord_fold_sorted",
     "ffold_ord ?f ?s ?b = fold ?f (sorted_list_of_fset ?s) ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("FSet_Utils.fis_singleton_alt",
     "fis_singleton ?f = (EX e. ?f = {|e|})",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("FSet_Utils.size_fsubset",
     "?x2.0 |\<subset>| ?x1.0 ==> size ?x2.0 < size ?x1.0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.ffilter_eq_iff", "(?f = ?g) = (ALL x. ?f x = ?g x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("FSet_Utils.fset_both_sides",
     "(Abs_fset ?s = ?f) = (fset (Abs_fset ?s) = fset ?f)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_equation
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.sorted_list_of_fset_Cons",
     "EX h t. sorted_list_of_fset (finsert ?s ?ss) = h # t",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("FSet_Utils.hd_sort_remdups", "hd (sort (remdups ?l)) = hd (sort ?l)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("FSet_Utils.size_fsingleton", "(size ?f = 1) = (EX e. ?f = {|e|})",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("FSet_Utils.fold_union_ffUnion",
     "fold (|\<union>|) ?l {||} = ffUnion (fset_of_list ?l)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_var 0),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.hd_sorted_list_of_fset",
     "?s ~= {||} ==> hd (sorted_list_of_fset ?s) = fMin ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.ffilter_size_le",
     "size ?s <= ?n ==> size (ffilter ?f ?s) <= ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 1))),
    ("FSet_Utils.fimage_size_le",
     "size ?s <= ?n ==> size (?f |`| ?s) <= ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 1))),
    ("FSet_Utils.fBall_ffilter", "fBall ?X ?f ==> ffilter ?f ?X = ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("FSet_Utils.exists_sorted_distinct_fset_of_list",
     "EX l. sorted l & distinct l & ?f = fset_of_list l",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("FSet_Utils.set_membership_eq",
     "(?A = ?B) = ((%x. x : ?A) = (%x. x : ?B))",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation (t_empty, t_empty))),
    ("FSet_Utils.fset_eq_alt",
     "(?x = ?y) = (?x |\<subseteq>| ?y & size ?x = size ?y)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("FSet_Utils.finsert_equiv",
     "(finsert ?e ?f = ?f') = (insert ?e (fset ?f) = fset ?f')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.fprod_singletons",
     "{|?a|} |\<times>| {|?b|} = {|(?a, ?b)|}",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_hole 5)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("FSet_Utils.ffilter_singleton", "?f ?e ==> ffilter ?f {|?e|} = {|?e|}",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("FSet_Utils.filter_elements",
     "(?x |\<in>| Abs_fset (Set.filter ?f (fset ?s))) =
      (?x : Set.filter ?f (fset ?s))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("FSet_Utils.filter_filter",
     "ffilter ?P (ffilter ?Q ?xs) = ffilter (%x. ?Q x & ?P x) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("FSet_Utils.size_ffilter_card",
     "size (ffilter ?f ?s) = card {e: fset ?s. ?f e}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_hole 4, template_app (template_hole 3, t_empty)))),
    ("FSet_Utils.fprod_equiv",
     "(fset (?f |\<times>| ?f') = ?s) = (fset ?f \<times> fset ?f' = ?s)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty),
         template_var 0))),
    ("FSet_Utils.fminus_filter_singleton",
     "fset_of_list ?l |-| {|?x|} = fset_of_list (filter (%e. e ~= ?x) ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 2, t_empty), template_var 1)))),
    ("FSet_Utils.fsubset_strict",
     "?x2.0 |\<subset>| ?x1.0 ==>
      EX e. e |\<in>| ?x1.0 & e |\<notin>| ?x2.0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("FSet_Utils.hd_sort_Min", "?l ~= [] ==> hd (sort ?l) = Min (set ?l)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("FSet_Utils.size_le_1",
     "(size ?f <= 1) = (?f = {||} | (EX e. ?f = {|e|}))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app (template_hole 1, t_empty))
           ))),
    ("FSet_Utils.fsubset",
     "?x2.0 |\<subset>| ?x1.0 ==>
      \<nexists>e. e |\<in>| ?x2.0 & e |\<notin>| ?x1.0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("FSet_Utils.fprod_subseteq",
     "?x |\<subseteq>| ?x' & ?y |\<subseteq>| ?y' ==>
      ?x |\<times>| ?y |\<subseteq>| ?x' |\<times>| ?y'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("FSet_Utils.ffilter_finsert",
     "ffilter ?f (finsert ?a ?s) =
      (if ?f ?a then finsert ?a (ffilter ?f ?s) else ffilter ?f ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("FSet_Utils.arg_cong_ffilter",
     "ALL e:?f. ?p e = ?p' e ==> ffilter ?p ?f = ffilter ?p' ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("FSet_Utils.fprod_member",
     "[| ?x |\<in>| ?xs; ?y |\<in>| ?ys |]
      ==> (?x, ?y) |\<in>| ?xs |\<times>| ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("FSet_Utils.fBall_ffilter2",
     "[| ?X = ?Y; fBall ?X ?f |] ==> ffilter ?f ?X = ?Y",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("FSet_Utils.sorted_hd_Min",
     "[| sorted ?l; ?l ~= [] |] ==> hd ?l = Min (set ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("FSet_Utils.Abs_ffilter",
     "(ffilter ?f ?s = ?s') = ({e: fset ?s. ?f e} = fset ?s')",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("FSet_Utils.card_minus_fMin",
     "?s ~= {||} ==> card (fset ?s - {fMin ?s}) < card (fset ?s)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_inequation
        (less_than,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))),
         template_app
          (template_hole 5,
           template_app (template_hole 3, template_var 0))))),
    ("FSet_Utils.sorted_distinct_ffold_ord",
     "[| sorted ?l; distinct ?l |]
      ==> ffold_ord ?f (fset_of_list ?l) ?b = fold ?f ?l ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("FSet_Utils.ffilter_mono",
     "[| ffilter ?X ?xs = ?f; ALL x:?xs. ?X x = ?Y x |]
      ==> ffilter ?Y ?xs = ?f",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 2),
         template_var 1))),
    ("FSet_Utils.fimage_fprod",
     "(?a, ?b) |\<in>| ?A |\<times>| ?B ==>
      ?f ?a ?b |\<in>| (%(x, y). ?f x y) |`| (?A |\<times>| ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_var 0, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1, template_app (template_hole 0, t_empty)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)))
           ))),
    ("FSet_Utils.list_eq_hd_tl",
     "[| ?l ~= []; hd ?l = ?h; tl ?l = ?t |] ==> ?l = ?h # ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 1),
        template_equation
         (template_app (template_hole 1, template_var 2), template_var 0)],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FSet_Utils.size_gt_1",
     "1 < size ?f ==>
      EX e1 e2 f'. e1 ~= e2 & ?f = finsert e1 (finsert e2 f')",
     template_implication
      ([template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("FSet_Utils.ffold_ord_cons",
     "[| sorted (?h # ?t); distinct (?h # ?t) |]
      ==> ffold_ord ?f (fset_of_list (?h # ?t)) ?b =
          ffold_ord ?f (fset_of_list ?t) (?f ?h ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_var 1, template_var 3),
             template_var 0))))),
    ("FSet_Utils.fprod_finsert",
     "finsert ?a ?as |\<times>| finsert ?b ?bs =
      finsert (?a, ?b)
       (Pair ?a |`| ?bs |\<union>| (%a. (a, ?b)) |`| ?as |\<union>|
        ?as |\<times>| ?bs)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, t_empty), template_var 2))),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 0))))),
    ("FSet_Utils.size_fsubset_elem",
     "[| EX e. e |\<in>| ?x1.0 & e |\<notin>| ?x2.0;
         \<nexists>e. e |\<in>| ?x2.0 & e |\<notin>| ?x1.0 |]
      ==> size ?x2.0 < size ?x1.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_negation
         (template_predicate (template_app (template_hole 5, t_empty)))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1))))]:
   (string * thm * template) list
### theory "Draft.FSet_UtilsMoreTemplates"
### 0.341s elapsed time, 0.495s cpu time, 0.045s GC time
val it = (): unit
