Loading theory "Extended_Finite_State_Machines.VName" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
Loading theory "Extended_Finite_State_Machines.Trilean" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "Extended_Finite_State_Machines.Value_Lexorder" via "Extended_Finite_State_Machines.Value")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.550s cpu time, 0.049s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vname :: linorder
  less_eq_vname == less_eq :: vname => vname => bool
  less_vname == less :: vname => vname => bool
### theory "HOL-Library.Infinite_Set"
### 0.286s elapsed time, 1.151s cpu time, 0.119s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "HOL-Library.FSet" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
### theory "Extended_Finite_State_Machines.VName"
### 0.361s elapsed time, 1.449s cpu time, 0.119s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
Found termination order: "{}"
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
### theory "HOL-Library.Nat_Bijection"
### 0.308s elapsed time, 1.213s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.ExtrEqs")
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
Found termination order: "{}"
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
Found termination order: "{}"
### theory "Extended_Finite_State_Machines.Trilean"
### 0.659s elapsed time, 2.623s cpu time, 0.267s GC time
Loading theory "Extended_Finite_State_Machines.Value" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "Extended_Finite_State_Machines.Value_Lexorder")
### theory "HOL-Library.Option_ord"
### 0.318s elapsed time, 1.246s cpu time, 0.148s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "FinFun.FinFun" via "HOL-Library.Cardinality")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.416s elapsed time, 1.644s cpu time, 0.148s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.412s elapsed time, 1.460s cpu time, 0.597s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.Phantom_Type"
### 0.774s elapsed time, 2.886s cpu time, 0.733s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "FinFun.FinFun")
consts
  prefixes :: "'a list => 'a list list"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  flat :: "'a list stream => 'a stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Extended_Finite_State_Machines.Value"
### 0.948s elapsed time, 3.566s cpu time, 0.821s GC time
Loading theory "Extended_Finite_State_Machines.Value_Lexorder" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  value :: linorder
  less_eq_value == less_eq :: value => value => bool
  less_value == less :: value => value => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.246s elapsed time, 4.748s cpu time, 0.908s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "{}"
### Additional type variable(s) in locale specification "card2": 'a
### theory "Extended_Finite_State_Machines.Value_Lexorder"
### 0.144s elapsed time, 0.565s cpu time, 0.097s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "HOL-Library.FSet")
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
consts
  suffixes :: "'a list => 'a list list"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
Proofs for inductive predicate(s) "list_emb"
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
  Proving monotonicity ...
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.794s elapsed time, 3.123s cpu time, 0.374s GC time
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Loading theory "FinFun.FinFun" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
bundle finfun
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.862s elapsed time, 7.141s cpu time, 1.661s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
Found termination order: "size <*mlex*> {}"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.522s elapsed time, 5.818s cpu time, 1.401s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.812s elapsed time, 3.001s cpu time, 1.301s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
### theory "HOL-Library.BigO"
### 1.168s elapsed time, 4.399s cpu time, 1.401s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM")
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
### theory "HOL-Library.Tree"
### 2.757s elapsed time, 10.467s cpu time, 2.891s GC time
Loading theory "Draft.Templates" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.ExtrEqs")
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EFSM_LTLMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
### theory "FinFun.FinFun"
### 2.639s elapsed time, 10.009s cpu time, 2.851s GC time
Loading theory "Extended_Finite_State_Machines.AExp" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.705s elapsed time, 2.791s cpu time, 0.298s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.096s elapsed time, 7.461s cpu time, 0.757s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
consts
  input2state_prim :: "value list => nat => nat \<Rightarrow>f value option"
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
consts
  repeat :: "nat => 'a => 'a list"
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### theory "HOL-Library.Order_Continuity"
### 0.557s elapsed time, 1.725s cpu time, 0.224s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
class infinity = type +
  fixes infinity :: "'a"
### theory "HOL-Library.FSet"
### 2.704s elapsed time, 9.277s cpu time, 1.085s GC time
Loading theory "Extended_Finite_State_Machines.FSet_Utils" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM")
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
### theory "Extended_Finite_State_Machines.FSet_Utils"
### 0.283s elapsed time, 0.972s cpu time, 0.121s GC time
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.677s elapsed time, 2.004s cpu time, 0.340s GC time
Loading theory "HOL-Library.Linear_Temporal_Logic_on_Streams" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "ev"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "alw"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "UNTIL"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.AExp"
### 3.250s elapsed time, 9.555s cpu time, 1.138s GC time
Loading theory "Extended_Finite_State_Machines.GExp" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition")
Proofs for inductive predicate(s) "ev_at"
  Proving monotonicity ...
Proofs for inductive predicate(s) "suntil"
  Proving monotonicity ...
### theory "HOL-Library.Linear_Temporal_Logic_on_Streams"
### 0.990s elapsed time, 2.161s cpu time, 0.301s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  padding :: "nat => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.GExp"
### 2.407s elapsed time, 3.316s cpu time, 0.517s GC time
Loading theory "Extended_Finite_State_Machines.Transition" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL" via "Extended_Finite_State_Machines.EFSM")
Proofs for inductive predicate(s) "eq_upto_rename"
  Proving monotonicity ...
### theory "Extended_Finite_State_Machines.Transition"
### 0.296s elapsed time, 0.310s cpu time, 0.000s GC time
Loading theory "Extended_Finite_State_Machines.EFSM" (required by "Draft.EFSM_LTLMoreTemplates" via "Draft.EFSM_LTL")
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "recognises_execution"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
Proofs for inductive predicate(s) "accepts_trace"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p)))
         (snd (snd (snd p)))) <*mlex*>
   {}"
Proofs for inductive predicate(s) "trace_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "execution_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "executionally_equivalent"
  Proving monotonicity ...
Proofs for inductive predicate(s) "visits"
  Proving monotonicity ...
Proofs for inductive predicate(s) "obtains"
  Proving monotonicity ...
### theory "Extended_Finite_State_Machines.EFSM"
### 1.529s elapsed time, 1.899s cpu time, 0.368s GC time
Loading theory "Draft.EFSM_LTL" (required by "Draft.EFSM_LTLMoreTemplates")
Found termination order: "{}"
consts
  make_full_observation ::
    "((nat * nat) * transition) fset
     => nat option
        => nat \<Rightarrow>f value option
           => value option list
              => (String.literal * value list) stream => state stream"
### theory "Draft.EFSM_LTL"
### 1.064s elapsed time, 1.188s cpu time, 0.150s GC time
Loading theory "Draft.EFSM_LTLMoreTemplates"
val templateLemmas =
   [("EFSM_LTL.shd_state_is_none",
     "state_eq None (make_full_observation ?e None ?r ?p ?t)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_hole 0)),
    ("EFSM_LTL.join_iro_R", "join_iro ?i ?r ?p (Rg ?n) = ?r $ ?n",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("EFSM_LTL.nxt_alw", "nxt (alw ?P) ?s ==> alw (nxt ?P) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 1)),
             template_var 0)
           ))),
    ("EFSM_LTL.alw_ev", "alw ?f = (%xs. ~ ev (%s. ~ ?f s) xs)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("EFSM_LTL.smap_statename_None",
     "smap statename (make_full_observation ?e None ?r ?p ?i) =
      sconst None",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_hole 2),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_hole 2))),
    ("EFSM_LTL.state_eq_holds",
     "state_eq ?s = holds (%x. statename x = ?s)",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("EFSM_LTL.snth_sconst", "(ALL i. ?s !! i = ?h) = (?s = sconst ?h)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("EFSM_LTL.alw_sconst", "alw (%xs. shd xs = ?h) ?t = (?t = sconst ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("EFSM_LTL.no_output_none_if_empty",
     "alw (output_eq []) (make_full_observation ?e None ?r [] ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0),
                 template_var 1),
               template_hole 2),
             template_var 0))
         )),
    ("EFSM_LTL.no_updates_none",
     "alw (%x. datastate (shd x) = ?r)
       (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0),
                 template_var 3),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.once_none_always_none",
     "alw (state_eq None) (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_hole 1),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.no_output_none_nxt",
     "alw (nxt (output_eq [])) (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.once_none_nxt_always_none",
     "alw (nxt (state_eq None)) (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_hole 1),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.no_output_none",
     "nxt (alw (output_eq [])) (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.state_eq_None_not_Some",
     "state_eq None ?s ==> statename (shd ?s) ~= Some ?n",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_hole 2)],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("EFSM_LTL.alw_not_some",
     "alw (%xs. statename (shd xs) ~= Some ?s)
       (make_full_observation ?e None ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("EFSM_LTL.alw_state_eq_smap",
     "alw (state_eq ?s) ?ss = alw (%ss. shd ss = ?s) (smap statename ?ss)",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 0),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_hole 4),
           template_var 0)))),
    ("EFSM_LTL.watch_label",
     "label_eq ?l (watch ?e ?t) = (fst (shd ?t) = String.implode ?l)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 2),
                       template_app (template_hole 5, template_hole 4)),
                     template_hole 3),
                   template_hole 2),
                 template_var 1)))),
         template_app (template_hole 1, template_var 0)),
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("EFSM_LTL.unfold_observe_none",
     "make_full_observation ?e None ?d ?p ?t =
      (| statename = None, datastate = ?d, action = shd ?t,
         output = ?p |) ##
      make_full_observation ?e None ?d [] (stl ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_hole 6),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 6),
                   template_var 2),
                 template_app (template_hole 3, template_var 0)),
               template_var 1),
             template_hole 2)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_hole 6),
               template_var 2),
             template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("EFSM_LTL.no_updates_none_aux",
     "EX p i. ?j = make_full_observation ?e None ?r p i ==>
      alw (%x. datastate (shd x) = ?r) ?j",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)
           ))),
    ("EFSM_LTL.action_components",
     "(label_eq ?l ?s & input_eq ?i ?s) =
      (action (shd ?s) = (String.implode ?l, ?i))",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 2)))),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 2)))),
               template_var 0))
           ),
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_var 0)))),
    ("EFSM_LTL.state_none_2",
     "state_eq None (make_full_observation ?e ?s ?r ?p ?t) ==>
      state_eq None (make_full_observation ?e ?s ?r ?p (stl ?t))",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))),
          template_hole 1)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))),
         template_hole 1))),
    ("EFSM_LTL.state_none",
     "state_eq None (make_full_observation ?e ?s ?r ?p ?t) -->
      nxt (state_eq None) (make_full_observation ?e ?s ?r ?p ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 2, template_var 4),
                             template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 0)))),
               template_hole 1)),
           template_app
            (template_app (template_hole 0, t_empty),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("EFSM_LTL.ltl_step_none",
     "possible_steps ?e ?s ?r ?a ?b = {||} ==>
      ltl_step ?e (Some ?s) ?r (?a, ?b) = (None, [], ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1),
            template_var 0),
          template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_app (template_hole 5, template_var 3)),
             template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2))))),
    ("EFSM_LTL.ltl_step_none_2",
     "possible_steps ?e ?s ?r (fst ?ie) (snd ?ie) = {||} ==>
      ltl_step ?e (Some ?s) ?r ?ie = (None, [], ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 9, template_var 0)),
            template_app (template_hole 8, template_var 0)),
          template_hole 7)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app (template_hole 4, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("EFSM_LTL.no_output_none_aux",
     "EX p r i. ?j = make_full_observation ?e None r [] i ==>
      alw (output_eq []) ?j",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)
           ))),
    ("EFSM_LTL.once_none_always_none_aux",
     "EX p r i. ?j = make_full_observation ?e None r p i ==>
      alw (state_eq None) ?j",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty), template_var 1)
           ))),
    ("EFSM_LTL.ltl_step_cases",
     "[| ?P (None, [], ?r);
         ALL (s', t):possible_steps ?e ?s ?r ?l ?i.
            ?P (Some s', evaluate_outputs t ?i ?r,
                evaluate_updates t ?i ?r) |]
      ==> ?P (ltl_step ?e (Some ?s) ?r (?l, ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 5,
              template_app
               (template_app (template_hole 14, template_hole 13),
                template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 9, template_var 3),
                        template_var 2),
                      template_var 4),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 8, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_var 5,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app (template_hole 7, template_var 2)),
                 template_var 4),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("EFSM_LTL.ltl_step_some",
     "[| possible_steps ?e ?s ?r ?l ?i = {|(?s', ?t)|};
         evaluate_outputs ?t ?i ?r = ?p; evaluate_updates ?t ?i ?r = ?r' |]
      ==> ltl_step ?e (Some ?s) ?r (?l, ?i) = (Some ?s', ?p, ?r')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_var 3),
                template_var 2)),
            template_hole 13)),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2)),
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 6)),
          template_var 1),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 6)),
            template_var 6),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 8),
               template_app (template_hole 3, template_var 7)),
             template_var 6),
           template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("EFSM_LTL.ltl_step_singleton",
     "EX t. possible_steps ?e ?n ?r (fst ?v) (snd ?v) = {|(?aa, t)|} &
            evaluate_outputs t (snd ?v) ?r = ?b &
            evaluate_updates t (snd ?v) ?r = ?c ==>
      ltl_step ?e (Some ?n) ?r ?v = (Some ?aa, ?b, ?c)",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 6),
               template_app (template_hole 2, template_var 5)),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("EFSM_LTL.ltl_step_alt",
     "ltl_step ?e (Some ?s) ?r ?t =
      (let possibilities = possible_steps ?e ?s ?r (fst ?t) (snd ?t)
       in if possibilities = {||} then (None, [], ?r)
          else let (s', t') = SOME x. x |\<in>| possibilities
               in (Some s', evaluate_outputs t' (snd ?t) ?r,
                   evaluate_updates t' (snd ?t) ?r))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 21, template_var 3),
             template_app (template_hole 20, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 19,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 18, template_var 3),
                   template_var 2),
                 template_var 1),
               template_app (template_hole 17, template_var 0)),
             template_app (template_hole 16, template_var 0))),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.EFSM_LTLMoreTemplates"
### 0.599s elapsed time, 0.880s cpu time, 0.110s GC time
val it = (): unit
