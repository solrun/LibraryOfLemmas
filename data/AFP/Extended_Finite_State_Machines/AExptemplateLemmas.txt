   [("AExp.finite_enumerate_regs", "finite (enumerate_regs ?a)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("AExp.apply_empty_None", "<> $ ?x2.0 = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("AExp.length_repeat", "length (repeat ?n ?a) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("AExp.max_reg_V_I", "max_reg (V (I ?n)) = None",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("AExp.input2state_empty", "input2state [] $ ?x1.0 = None",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("AExp.enumerate_aexp_inputs_list",
     "EX l. enumerate_aexp_inputs ?a = set l",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("AExp.max_input_I", "max_input (V (I ?i)) = Some ?i",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("AExp.max_reg_V_R", "max_reg (V (R ?n)) = Some ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("AExp.input2state_exists", "EX i. input2state i $ ?x1.0 = Some ?a",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("AExp.join_ir_R", "join_ir ?i ?r (R ?n) = ?r $ ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("AExp.length_append_repeat", "length ?i <= length (?i @ repeat ?a ?y)",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 2),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("AExp.max_input_Minus",
     "max_input (Minus ?a1.0 ?a2.0) =
      max (max_input ?a1.0) (max_input ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_input_Plus",
     "max_input (Plus ?a1.0 ?a2.0) =
      max (max_input ?a1.0) (max_input ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_input_Times",
     "max_input (Times ?a1.0 ?a2.0) =
      max (max_input ?a1.0) (max_input ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_reg_Minus",
     "max_reg (Minus ?a1.0 ?a2.0) = max (max_reg ?a1.0) (max_reg ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_reg_Plus",
     "max_reg (Plus ?a1.0 ?a2.0) = max (max_reg ?a1.0) (max_reg ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_reg_Times",
     "max_reg (Times ?a1.0 ?a2.0) = max (max_reg ?a1.0) (max_reg ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.exists_join_ir_ext", "EX i r. join_ir i r ?v = ?s ?v",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("AExp.aval_plus_symmetry",
     "aval (Plus ?x ?y) ?s = aval (Plus ?y ?x) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("AExp.input2state_out_of_bounds",
     "length ?ia <= ?i ==> input2state ?ia $ ?i = None",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("AExp.input2state_not_None",
     "input2state ?i $ ?x ~= None ==> ?x < length ?i",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("AExp.input2state_within_bounds",
     "input2state ?i $ ?x = Some ?a ==> ?x < length ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 2)))),
    ("AExp.input2state_Some",
     "(EX v. input2state ?i $ ?x = Some v) = (?x < length ?i)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("AExp.input2state_append",
     "input2state (?i @ [?a]) = (input2state ?i)(length ?i $:= Some ?a)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 6, template_var 1)),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("AExp.enumerate_aexp_inputs_empty_input_unconstrained",
     "enumerate_aexp_inputs ?a = {} ==>
      ALL r. ~ aexp_constrains ?a (V (I r))",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("AExp.enumerate_regs_empty_reg_unconstrained",
     "enumerate_regs ?a = {} ==> ALL r. ~ aexp_constrains ?a (V (R r))",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("AExp.input2state_nth",
     "?i < length ?ia ==> input2state ?ia $ ?i = Some (?ia ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("AExp.join_ir_nth",
     "?i < length ?is ==> join_ir ?is ?r (I ?i) = Some (?is ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("AExp.input2state_double_exists",
     "EX i. input2state i $ ?x = Some ?a & input2state i $ ?y = Some ?a",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("AExp.enumerate_aexp_inputs_not_empty",
     "(enumerate_aexp_inputs ?a ~= {}) =
      (EX b c. enumerate_aexp_inputs ?a = set (b # c))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_hole 4)),
       template_app (template_hole 3, t_empty))),
    ("AExp.no_reg_aval_swap_regs",
     "max_reg ?a = None ==>
      aval ?a (join_ir ?i ?r) = aval ?a (join_ir ?i ?r')",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3), template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("AExp.length_input2state_repeat",
     "input2state ?i $ ?x = Some ?a ==> ?y < length (?i @ repeat ?y ?a)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3)),
            template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("AExp.datastate",
     "input2state ?n =
      fold (%(k, v) f. f(k $:= Some v)) (enumerate 0 ?n) (K$ None)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("AExp.join_ir_double_exists",
     "EX i r. join_ir i r ?v = Some ?a & join_ir i r ?v' = Some ?a",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("AExp.input2state_cons_shift",
     "input2state ?i $ ?x1.0 = Some ?a ==>
      input2state (?b # ?i) $ (Suc ?x1.0) = Some ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 3)),
            template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3))),
           template_app (template_hole 0, template_var 2)),
         template_app (template_hole 2, template_var 1)))),
    ("AExp.no_variables_aval",
     "[| enumerate_aexp_inputs ?a = {}; enumerate_regs ?a = {} |]
      ==> aval ?a ?s = aval ?a ?s'",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2), template_hole 3),
        template_equation
         (template_app (template_hole 2, template_var 2), template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("AExp.aval_take",
     "max_input ?x < Some ?a ==>
      aval ?x (join_ir ?i ?r) = aval ?x (join_ir (take ?a ?i) ?r)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 3),
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("AExp.input2state_some",
     "[| ?i < length ?ia; ?ia ! ?i = ?x |]
      ==> input2state ?ia $ ?i = Some ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("AExp.input_unconstrained_aval_input_swap",
     "ALL i. ~ aexp_constrains ?a (V (I i)) ==>
      aval ?a (join_ir ?i ?r) = aval ?a (join_ir ?i' ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("AExp.input_unconstrained_aval_register_swap",
     "ALL i. ~ aexp_constrains ?a (V (R i)) ==>
      aval ?a (join_ir ?i ?r) = aval ?a (join_ir ?i ?r')",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("AExp.input2state_double_exists_2",
     "?x ~= ?y ==>
      EX i. input2state i $ ?x = Some ?a & input2state i $ ?y = Some ?a'",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("AExp.input2state_cons",
     "[| 0 < ?x1.0; ?x1.0 < length ?ia |]
      ==> input2state (?a # ?ia) $ ?x1.0 = input2state ?ia $ (?x1.0 - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("AExp.join_ir_double_exists_2",
     "?v ~= ?v' ==>
      EX i r. join_ir i r ?v = Some ?a & join_ir i r ?v' = Some ?a'",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("AExp.aval_no_reg_swap_regs",
     "[| max_input ?x < Some ?a; max_reg ?x = None |]
      ==> aval ?x (join_ir ?i ?ra) = aval ?x (join_ir (take ?a ?i) ?r)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_var 4),
          template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app (template_hole 5, template_var 4), template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 0))))),
    ("AExp.unconstrained_variable_swap_aval",
     "[| ALL i. ~ aexp_constrains ?a (V (I i));
         ALL r. ~ aexp_constrains ?a (V (R r)) |]
      ==> aval ?a ?s = aval ?a ?s'",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("AExp.input2state_take",
     "[| ?x1.0 < ?A; ?A <= length ?i; ?x = I ?x1.0 |]
      ==> input2state ?i $ ?x1.0 = input2state (take ?A ?i) $ ?x1.0",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_var 0, template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 3)))),
    ("AExp.aval_reg_none_superset",
     "[| ALL a. ?r $ a ~= None --> ?r $ a = ?r' $ a;
         aval ?a (join_ir ?i ?r') = None |]
      ==> aval ?a (join_ir ?i ?r) = None",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_hole 2))),
    ("AExp.aval_reg_some_superset",
     "[| ALL a. ?r $ a ~= None --> ?r $ a = ?r' $ a;
         aval ?a (join_ir ?i ?r) = Some ?v |]
      ==> aval ?a (join_ir ?i ?r') = Some ?v",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 4)),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app (template_hole 0, template_var 0)))),
    ("AExp.aval_ir_take",
     "[| ?A <= length ?i; enumerate_regs ?a = {};
         enumerate_aexp_inputs ?a ~= {};
         Max (enumerate_aexp_inputs ?a) < ?A |]
      ==> aval ?a (join_ir (take ?A ?i) ?r) = aval ?a (join_ir ?i ?ra)",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app (template_hole 11, template_var 3)),
        template_equation
         (template_app (template_hole 9, template_var 2), template_hole 8),
        template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 2),
              template_hole 8)
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 4,
            template_app (template_hole 6, template_var 2)),
          template_var 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("AExp.aexp_induct_separate_V_cases",
     "[| !!x. ?P (L x); !!x. ?P (V (I x)); !!x. ?P (V (R x));
         !!x1a x2a. [| ?P x1a; ?P x2a |] ==> ?P (Plus x1a x2a);
         !!x1a x2a. [| ?P x1a; ?P x2a |] ==> ?P (Minus x1a x2a);
         !!x1a x2a. [| ?P x1a; ?P x2a |] ==> ?P (Times x1a x2a) |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]
