Loading theory "Draft.Trilean" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "Draft.Value_Lexorder" via "Draft.Value")
Loading theory "Draft.VName" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TransitionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TransitionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.598s cpu time, 0.040s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
Found termination order: "size_list size <*mlex*> {}"
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.342s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TransitionMoreTemplates" via "Draft.ExtrEqs")
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
instantiation
  vname :: linorder
  less_eq_vname == less_eq :: vname => vname => bool
  less_vname == less :: vname => vname => bool
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.VName"
### 0.477s elapsed time, 1.896s cpu time, 0.211s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "FinFun.FinFun" via "HOL-Library.Cardinality")
### theory "HOL-Library.Option_ord"
### 0.328s elapsed time, 1.284s cpu time, 0.171s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TransitionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "{}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
Found termination order: "{}"
### theory "Draft.Trilean"
### 0.666s elapsed time, 2.640s cpu time, 0.307s GC time
Loading theory "Draft.Value" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "Draft.Value_Lexorder")
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.899s cpu time, 0.095s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TransitionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
### theory "HOL-Library.Phantom_Type"
### 0.776s elapsed time, 2.903s cpu time, 0.720s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp" via "FinFun.FinFun")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
Found termination order: "{}"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.154s elapsed time, 4.383s cpu time, 0.936s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TransitionMoreTemplates" via "Draft.ExtrEqs")
### Additional type variable(s) in locale specification "card2": 'a
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
Found termination order: "{}"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Value"
### 0.955s elapsed time, 3.604s cpu time, 0.766s GC time
Loading theory "Draft.Value_Lexorder" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
instantiation
  value :: linorder
  less_eq_value == less_eq :: value => value => bool
  less_value == less :: value => value => bool
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
Found termination order: "{}"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
Found termination order: "size <*mlex*> {}"
### theory "Draft.Value_Lexorder"
### 0.134s elapsed time, 0.534s cpu time, 0.078s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.762s elapsed time, 2.786s cpu time, 0.238s GC time
Loading theory "FinFun.FinFun" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition" via "Draft.GExp" via "Draft.AExp")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
bundle finfun
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.815s elapsed time, 2.753s cpu time, 0.263s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
Found termination order: "size <*mlex*> {}"
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
### theory "HOL-Library.Tree"
### 2.392s elapsed time, 7.617s cpu time, 1.908s GC time
Loading theory "Draft.Templates" (required by "Draft.TransitionMoreTemplates" via "Draft.ExtrEqs")
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TransitionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.554s elapsed time, 1.189s cpu time, 0.179s GC time
### theory "FinFun.FinFun"
### 2.095s elapsed time, 5.045s cpu time, 1.990s GC time
Loading theory "Draft.AExp" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition" via "Draft.GExp")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  input2state_prim :: "value list => nat => nat \<Rightarrow>f value option"
consts
  repeat :: "nat => 'a => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AExp"
### 2.493s elapsed time, 2.983s cpu time, 0.337s GC time
Loading theory "Draft.GExp" (required by "Draft.TransitionMoreTemplates" via "Draft.Transition")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  padding :: "nat => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.GExp"
### 2.410s elapsed time, 2.960s cpu time, 0.312s GC time
Loading theory "Draft.Transition" (required by "Draft.TransitionMoreTemplates")
Proofs for inductive predicate(s) "eq_upto_rename"
  Proving monotonicity ...
### theory "Draft.Transition"
### 0.311s elapsed time, 0.325s cpu time, 0.000s GC time
Loading theory "Draft.TransitionMoreTemplates"
val templateLemmas =
   [("Transition.apply_outputs_empty", "apply_outputs [] ?s = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Transition.apply_outputs_preserves_length",
     "length (apply_outputs ?p ?s) = length ?p",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Transition.apply_outputs",
     "apply_outputs ?p ?s = map (%p. aval p ?s) ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Transition.can_take_empty", "length ?i = ?a ==> can_take ?a [] ?i ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2), template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0),
               template_var 2),
             template_var 0)
           ))),
    ("Transition.can_take",
     "can_take_transition ?t ?i ?r = can_take (Arity ?t) (Guards ?t) ?i ?r",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Transition.can_take_transition_empty_guard",
     "Guards ?t = [] ==> EX i. can_take_transition ?t i ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transition.valid_list_can_take",
     "ALL g:set (Guards ?t). valid g ==> EX i. can_take_transition ?t i ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))),
              t_empty)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transition.can_take",
     "can_take ?a ?g ?i ?r =
      (length ?i = ?a & apply_guards ?g (join_ir ?i ?r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Transition.apply_outputs_nth",
     "?i < length ?p ==> apply_outputs ?p ?s ! ?i = aval (?p ! ?i) ?s",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Transition.apply_outputs",
     "input2state ?n =
      fold (%(k, v) f. f(k $:= Some v)) (enumerate 0 ?n) (K$ None)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("Transition.update_twice",
     "apply_updates [(?r, ?a), (?r, ?b)] ?s ?regs = ?regs
      (?r $:= aval ?b ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 2)),
                 template_hole 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 4),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Transition.r_not_updated_stays_the_same",
     "?r ~: fst ` set ?U ==> apply_updates ?U ?c ?d $ ?r = ?d $ ?r",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 2)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 3)))),
    ("Transition.cant_take_if",
     "EX g:set (Guards ?t). gval g (join_ir ?i ?r) ~= true ==>
      ~ can_take_transition ?t ?i ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2))),
              t_empty)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)
               )
           ))),
    ("Transition.apply_outputs_register",
     "?r < length ?P ==>
      apply_outputs (?P[?r := V (R ?p)]) (join_ir ?i ?c) ! ?r = ?c $ ?p",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 8, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 4),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_var 4),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Transition.apply_outputs_literal",
     "[| ?P ! ?r = L ?v; ?r < length ?P |]
      ==> apply_outputs ?P ?s ! ?r = Some ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Transition.can_take_subset_append",
     "set (Guards ?t) <= set (Guards ?t') ==>
      can_take ?a (Guards ?t @ Guards ?t') ?i ?c =
      can_take ?a (Guards ?t') ?i ?c",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 4)),
          template_app
           (template_hole 5,
            template_app (template_hole 3, template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 4)),
                 template_app (template_hole 3, template_var 3))),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 3, template_var 3)),
             template_var 1),
           template_var 0)))),
    ("Transition.apply_outputs_unupdated",
     "[| ?ia ~= ?r; ?ia < length ?P |]
      ==> apply_outputs ?P ?j ! ?ia =
          apply_outputs (?P[?r := ?v]) ?j ! ?ia",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 0)),
               template_var 1)),
           template_var 4)))),
    ("Transition.apply_updates_cons",
     "?ra ~= ?r ==>
      apply_updates ?u (join_ir ?ia ?c) ?c $ ?ra =
      apply_updates ((?r, ?a) # ?u) (join_ir ?ia ?c) ?c $ ?ra",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 1)),
           template_var 5),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 0)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 1)),
           template_var 5)))),
    ("Transition.can_take_subset",
     "[| length ?i = Arity ?t; Arity ?t = Arity ?t';
         set (Guards ?t') <= set (Guards ?t);
         can_take_transition ?t ?i ?r |]
      ==> can_take_transition ?t' ?i ?r",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 3),
          template_app (template_hole 7, template_var 2)),
        template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_hole 4,
            template_app (template_hole 2, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.TransitionMoreTemplates"
### 0.446s elapsed time, 0.643s cpu time, 0.083s GC time
val it = (): unit
