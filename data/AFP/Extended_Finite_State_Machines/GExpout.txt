Loading theory "Draft.Trilean" (required by "Draft.GExpMoreTemplates" via "Draft.GExp" via "Draft.AExp" via "Draft.Value_Lexorder" via "Draft.Value")
Loading theory "Draft.VName" (required by "Draft.GExpMoreTemplates" via "Draft.GExp" via "Draft.AExp")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GExpMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.GExpMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.529s cpu time, 0.040s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.GExpMoreTemplates" via "Draft.GExp" via "Draft.AExp")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
Found termination order: "size_list size <*mlex*> {}"
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
instantiation
  vname :: linorder
  less_eq_vname == less_eq :: vname => vname => bool
  less_vname == less :: vname => vname => bool
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.307s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.GExpMoreTemplates" via "Draft.ExtrEqs")
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
Found termination order: "{}"
### theory "Draft.VName"
### 0.375s elapsed time, 1.504s cpu time, 0.108s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.GExpMoreTemplates" via "Draft.GExp" via "Draft.AExp" via "FinFun.FinFun" via "HOL-Library.Cardinality")
### theory "HOL-Library.Option_ord"
### 0.294s elapsed time, 1.145s cpu time, 0.130s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.GExpMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "{}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "{}"
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
Found termination order: "{}"
### theory "Draft.Trilean"
### 0.646s elapsed time, 2.570s cpu time, 0.250s GC time
Loading theory "Draft.Value" (required by "Draft.GExpMoreTemplates" via "Draft.GExp" via "Draft.AExp" via "Draft.Value_Lexorder")
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.899s cpu time, 0.080s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.GExpMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.Phantom_Type"
### 0.745s elapsed time, 2.773s cpu time, 0.755s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.GExpMoreTemplates" via "Draft.GExp" via "Draft.AExp" via "FinFun.FinFun")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  cycle :: "'a list => 'a stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "card2": 'a
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  left :: "'a tree => 'a tree"
Found termination order: "{}"
consts
  right :: "'a tree => 'a tree"
### theory "HOL-Library.Stream"
### 1.132s elapsed time, 4.295s cpu time, 0.870s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GExpMoreTemplates" via "Draft.ExtrEqs")
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
### theory "Draft.Value"
### 0.897s elapsed time, 3.370s cpu time, 0.728s GC time
Loading theory "Draft.Value_Lexorder" (required by "Draft.GExpMoreTemplates" via "Draft.GExp" via "Draft.AExp")
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  value :: linorder
  less_eq_value == less_eq :: value => value => bool
  less_value == less :: value => value => bool
Found termination order: "size <*mlex*> {}"
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
### theory "Draft.Value_Lexorder"
### 0.136s elapsed time, 0.548s cpu time, 0.067s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Cardinality"
### 0.769s elapsed time, 2.856s cpu time, 0.182s GC time
Loading theory "FinFun.FinFun" (required by "Draft.GExpMoreTemplates" via "Draft.GExp" via "Draft.AExp")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
bundle finfun
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.846s elapsed time, 2.798s cpu time, 0.290s GC time
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
Found termination order: "size <*mlex*> {}"
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
### theory "HOL-Library.Tree"
### 2.090s elapsed time, 6.752s cpu time, 1.113s GC time
Loading theory "Draft.Templates" (required by "Draft.GExpMoreTemplates" via "Draft.ExtrEqs")
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GExpMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.817s elapsed time, 1.986s cpu time, 0.875s GC time
### theory "FinFun.FinFun"
### 1.879s elapsed time, 4.392s cpu time, 1.142s GC time
Loading theory "Draft.AExp" (required by "Draft.GExpMoreTemplates" via "Draft.GExp")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  input2state_prim :: "value list => nat => nat \<Rightarrow>f value option"
consts
  repeat :: "nat => 'a => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AExp"
### 2.746s elapsed time, 3.759s cpu time, 1.046s GC time
Loading theory "Draft.GExp" (required by "Draft.GExpMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  padding :: "nat => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.GExp"
### 2.373s elapsed time, 2.944s cpu time, 0.320s GC time
Loading theory "Draft.GExpMoreTemplates"
val templateLemmas =
   [("GExp.finite_enumerate_regs", "finite (GExp.enumerate_regs ?g)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("GExp.apply_guards_empty", "apply_guards [] ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("GExp.length_padding", "length (padding ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("GExp.max_input_Bc", "GExp.max_input (Bc ?x) = None",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("GExp.length_take_or_pad", "length (take_or_pad ?a ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("GExp.max_reg_gNot", "GExp.max_reg (gNot ?x) = GExp.max_reg ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("GExp.enumerate_gexp_inputs_list",
     "EX l. enumerate_gexp_inputs ?g = set l",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("GExp.rev_apply_guards",
     "apply_guards (rev ?G) ?s = apply_guards ?G ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("GExp.gexp_max_input_In",
     "GExp.max_input (In ?v ?l) = AExp.max_input (V ?v)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 1)))),
    ("GExp.gval_gNot", "gval (gNot ?x) ?s = \<not>? gval ?x ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("GExp.max_input_Eq",
     "GExp.max_input (Eq ?a1.0 ?a2.0) =
      max (AExp.max_input ?a1.0) (AExp.max_input ?a2.0)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("GExp.max_input_Gt",
     "GExp.max_input (Gt ?a1.0 ?a2.0) =
      max (AExp.max_input ?a1.0) (AExp.max_input ?a2.0)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("GExp.gexp_max_input_Nor",
     "GExp.max_input (Nor ?g1.0 ?g2.0) =
      max (GExp.max_input ?g1.0) (GExp.max_input ?g2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("GExp.max_input_list_cons",
     "max_input_list (?a # ?G) =
      max (GExp.max_input ?a) (max_input_list ?G)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("GExp.max_reg_Eq",
     "GExp.max_reg (Eq ?a ?b) = max (AExp.max_reg ?a) (AExp.max_reg ?b)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("GExp.max_reg_Gt",
     "GExp.max_reg (Gt ?a ?b) = max (AExp.max_reg ?a) (AExp.max_reg ?b)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("GExp.max_reg_Nor",
     "GExp.max_reg (Nor ?a ?b) = max (GExp.max_reg ?a) (GExp.max_reg ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("GExp.max_reg_list_append",
     "max_reg_list (?as @ ?bs) = max (max_reg_list ?as) (max_reg_list ?bs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("GExp.max_reg_list_cons",
     "max_reg_list (?a # ?G) = max (GExp.max_reg ?a) (max_reg_list ?G)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("GExp.fold_maybe_or_invalid_base",
     "fold (\<or>?) ?l invalid = invalid",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("GExp.possible_to_be_in", "?s ~= [] ==> satisfiable (In ?v ?s)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("GExp.apply_guards_condense",
     "EX g. apply_guards ?G ?s = (gval g ?s = true)",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("GExp.fold_maybe_or_true_base_never_false",
     "fold (\<or>?) ?l true ~= false",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_var 0),
             template_hole 1),
           template_hole 0)
         )),
    ("GExp.apply_guards_singleton",
     "apply_guards [?g] ?s = (gval ?g ?s = true)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("GExp.gAnd_commute", "gval (gAnd ?a ?b) ?s = gval (gAnd ?b ?a) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("GExp.gOr_commute", "gval (gOr ?a ?b) ?s = gval (gOr ?b ?a) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("GExp.apply_guards_false_condense",
     "EX g. (~ apply_guards ?G ?s) = (gval g ?s = false)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("GExp.nor_equiv", "gval (gNot (gOr ?a ?b)) ?s = gval (Nor ?a ?b) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("GExp.apply_guards_fold",
     "apply_guards ?G ?s = (gval (fold gAnd ?G (Bc True)) ?s = true)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1),
               template_app (template_hole 2, template_hole 1))),
           template_var 0),
         template_hole 0))),
    ("GExp.apply_guards_foldr",
     "apply_guards ?G ?s = (gval (foldr gAnd ?G (Bc True)) ?s = true)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 1),
               template_app (template_hole 2, template_hole 1))),
           template_var 0),
         template_hole 0))),
    ("GExp.apply_guards_append",
     "apply_guards (?a @ ?a') ?s =
      (apply_guards ?a ?s & apply_guards ?a' ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("GExp.fold_apply_guards",
     "(gval (fold gAnd ?G (Bc True)) ?s = true) = apply_guards ?G ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 1),
                 template_app (template_hole 3, template_hole 2))),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GExp.foldr_apply_guards",
     "(gval (foldr gAnd ?G (Bc True)) ?s = true) = apply_guards ?G ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 1),
                 template_app (template_hole 3, template_hole 2))),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("GExp.gval_Lt",
     "gval (Lt ?a1.0 ?a2.0) ?s = value_gt (aval ?a2.0 ?s) (aval ?a1.0 ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("GExp.gval_gAnd",
     "gval (gAnd ?g1.0 ?g2.0) ?s = gval ?g1.0 ?s \<and>? gval ?g2.0 ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("GExp.gval_gOr", "gval (gOr ?x ?y) ?r = gval ?x ?r \<or>? gval ?y ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("GExp.gval_fold_gOr_foldr",
     "gval (fold gOr ?l ?g) ?s = gval (foldr gOr ?l ?g) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("GExp.max_reg_list_append_singleton",
     "max_reg_list (?as @ [?bs]) =
      max (max_reg_list ?as) (max_reg_list [?bs])",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))))),
    ("GExp.gval_Ge",
     "gval (Ge ?a1.0 ?a2.0) ?s =
      \<not>? value_gt (aval ?a2.0 ?s) (aval ?a1.0 ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("GExp.gval_Le",
     "gval (Le ?a1.0 ?a2.0) ?s =
      \<not>? value_gt (aval ?a1.0 ?s) (aval ?a2.0 ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("GExp.gval_Ne",
     "gval (Ne ?a1.0 ?a2.0) ?s =
      \<not>? value_eq (aval ?a1.0 ?s) (aval ?a2.0 ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("GExp.gval_fold_gOr_rev",
     "gval (fold gOr (rev ?l) ?g) ?s = gval (fold gOr ?l ?g) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("GExp.apply_guards_subset",
     "set ?g' <= set ?g ==> apply_guards ?g ?c --> apply_guards ?g' ?c",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("GExp.apply_guards_cons",
     "apply_guards (?a # ?G) ?c = (gval ?a ?c = true & apply_guards ?G ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))
           ))),
    ("GExp.not_restricted_cons",
     "not_restricted ?v (?g # ?gs) =
      (~ gexp_constrains ?g (V ?v) & not_restricted ?v ?gs)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 2)))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 0)))),
    ("GExp.gval_fold_equiv_gval_foldr",
     "gval (fold gAnd ?G (Bc True)) ?s = gval (foldr gAnd ?G (Bc True)) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1),
             template_app (template_hole 2, template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 1),
             template_app (template_hole 2, template_hole 1))),
         template_var 0))),
    ("GExp.gval_foldr_equiv_gval_fold",
     "gval (foldr gAnd ?G (Bc True)) ?s = gval (fold gAnd ?G (Bc True)) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1),
             template_app (template_hole 2, template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 1),
             template_app (template_hole 2, template_hole 1))),
         template_var 0))),
    ("GExp.apply_guards_rearrange",
     "?x : set ?G ==> apply_guards ?G ?s = apply_guards (?x # ?G) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("GExp.gval_fold_equiv_fold_rev",
     "gval (fold gAnd ?G (Bc True)) ?s =
      gval (fold gAnd (rev ?G) (Bc True)) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1),
             template_app (template_hole 2, template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 2, template_hole 1))),
         template_var 0))),
    ("GExp.gval_fold_rev_equiv_fold",
     "gval (fold gAnd (rev ?G) (Bc True)) ?s =
      gval (fold gAnd ?G (Bc True)) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, template_hole 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1),
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("GExp.apply_guards_subset_append",
     "set ?G <= set ?G' ==>
      apply_guards (?G @ ?G') ?s = apply_guards ?G' ?s",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("GExp.gval_fold_In",
     "?l ~= [] ==> gval (In ?v ?l) ?s = gval (fold_In ?v ?l) ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("GExp.fold_maybe_or_rev",
     "fold (\<or>?) ?l ?b = fold (\<or>?) (rev ?l) ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("GExp.apply_guards_double_cons",
     "apply_guards (?y # ?x # ?G) ?s =
      (gval (gAnd ?y ?x) ?s = true & apply_guards ?G ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 2)),
                     template_var 0)),
                 template_hole 0)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))
           ))),
    ("GExp.gval_gAnd_True",
     "(gval (gAnd ?g1.0 ?g2.0) ?s = true) =
      (gval ?g1.0 ?s = true & gval ?g2.0 ?s = true)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_hole 1))
           ))),
    ("GExp.gval_foldr_true",
     "(gval (foldr gAnd ?G (Bc True)) ?s = true) =
      (ALL g:set ?G. gval g ?s = true)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 1),
                 template_app (template_hole 4, template_hole 3))),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty))),
    ("GExp.gval_fold_gOr",
     "gval (fold gOr (?a # ?l) ?g) ?s =
      gval ?a ?s \<or>? gval (fold gOr ?l ?g) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("GExp.fold_Eq_true",
     "ALL v.
         fold (\<or>?) (map (%x. if v = x then true else false) ?vs) true =
         true",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("GExp.gval_foldr_gOr_false",
     "(gval (fold gOr ?l ?g) ?s = false) =
      (ALL g':set (?g # ?l). gval g' ?s = false)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))),
         t_empty))),
    ("GExp.gval_foldr_gOr_invalid",
     "(gval (fold gOr ?l ?g) ?s = invalid) =
      (EX g':set (?g # ?l). gval g' ?s = invalid)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))),
         t_empty))),
    ("GExp.gval_take",
     "GExp.max_input ?g < Some ?a ==>
      gval ?g (join_ir ?i ?r) = gval ?g (join_ir (take ?a ?i) ?r)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 3),
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("GExp.must_have_one_false",
     "gval (fold gAnd ?G (Bc True)) ?s = false ==>
      EX g:set ?G. gval g ?s = false",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1),
                template_app (template_hole 4, template_hole 3))),
            template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("GExp.fold_invalid_means_one_invalid",
     "gval (fold gAnd ?G (Bc True)) ?s = invalid ==>
      EX g:set ?G. gval g ?s = invalid",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1),
                template_app (template_hole 4, template_hole 3))),
            template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("GExp.gval_fold_not_invalid_all_valid_contra",
     "EX g:set ?G. gval g ?s = invalid ==>
      gval (fold gAnd ?G (Bc True)) ?s = invalid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1),
               template_app (template_hole 1, template_hole 0))),
           template_var 0),
         template_hole 4))),
    ("GExp.gval_In_cons",
     "gval (In ?v (?a # ?as)) ?s =
      gval (Eq (V ?v) (L ?a)) ?s \<or>? gval (In ?v ?as) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3)),
                 template_app (template_hole 0, template_var 2))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("GExp.gval_fold_gOr_map",
     "gval (fold gOr ?l (Bc False)) ?s =
      fold (\<or>?) (map (%g. gval g ?s) ?l) false",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1),
             template_app (template_hole 5, template_hole 4))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_hole 0))),
    ("GExp.gval_fold_cons",
     "gval (fold gAnd (?g # ?gs) (Bc True)) ?s =
      gval ?g ?s \<and>? gval (fold gAnd ?gs (Bc True)) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app (template_hole 2, template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1),
               template_app (template_hole 2, template_hole 1))),
           template_var 0)))),
    ("GExp.fold_maybe_or_cons",
     "fold (\<or>?) (?a # ?l) ?b = ?a \<or>? fold (\<or>?) ?l ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_var 1),
           template_var 0)))),
    ("GExp.gval_fold_rev_false",
     "gval (fold gAnd (rev ?G) (Bc True)) ?s = false ==>
      gval (fold gAnd ?G (Bc True)) ?s = false",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 1)),
                template_app (template_hole 2, template_hole 1))),
            template_var 0),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1),
               template_app (template_hole 2, template_hole 1))),
           template_var 0),
         template_hole 0))),
    ("GExp.gval_fold_rev_invalid",
     "gval (fold gAnd (rev ?G) (Bc True)) ?s = invalid ==>
      gval (fold gAnd ?G (Bc True)) ?s = invalid",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 1)),
                template_app (template_hole 2, template_hole 1))),
            template_var 0),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1),
               template_app (template_hole 2, template_hole 1))),
           template_var 0),
         template_hole 0))),
    ("GExp.gval_fold_rev_true",
     "gval (fold gAnd (rev ?G) (Bc True)) ?s = true ==>
      gval (fold gAnd ?G (Bc True)) ?s = true",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 1)),
                template_app (template_hole 2, template_hole 1))),
            template_var 0),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1),
               template_app (template_hole 2, template_hole 1))),
           template_var 0),
         template_hole 0))),
    ("GExp.gval_fold_not_invalid_all_valid",
     "gval (fold gAnd ?G (Bc True)) ?s ~= invalid ==>
      ALL g:set ?G. gval g ?s ~= invalid",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_var 1),
                    template_app (template_hole 4, template_hole 3))),
                template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("GExp.must_have_one_false_contra",
     "ALL g:set ?G. gval g ?s ~= false ==>
      gval (fold gAnd ?G (Bc True)) ?s ~= false",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 1),
                   template_app (template_hole 1, template_hole 0))),
               template_var 0),
             template_hole 4)
           ))),
    ("GExp.all_valid_fold",
     "ALL g:set ?G. gval g ?s ~= invalid ==>
      gval (fold gAnd ?G (Bc True)) ?s ~= invalid",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 1),
                   template_app (template_hole 1, template_hole 0))),
               template_var 0),
             template_hole 4)
           ))),
    ("GExp.gval_fold_gAnd_append_singleton",
     "gval (fold gAnd (?a @ [?G]) (Bc True)) ?s =
      gval (fold gAnd ?a (Bc True)) ?s \<and>? gval ?G ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3))),
             template_app (template_hole 2, template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2),
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_var 0)))),
    ("GExp.fold_true_invalid_fold_rev_false_invalid",
     "fold (\<or>?) ?l true = invalid ==>
      fold (\<or>?) (rev ?l) false = invalid",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, t_empty), template_var 0),
            template_hole 3),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 1, template_var 0)),
           template_hole 0),
         template_hole 2))),
    ("GExp.restricted_once_cons",
     "restricted_once ?v (?g # ?gs) =
      (gexp_constrains ?g (V ?v) & not_restricted ?v ?gs |
       ~ gexp_constrains ?g (V ?v) & restricted_once ?v ?gs)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_var 2))),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_var 2)))),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 0))))),
    ("GExp.x_in_set_fold_eq",
     "?x : set ?ll ==>
      fold (\<or>?) (map (%xa. if ?x = xa then true else false) ?ll) false =
      true",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, t_empty),
             template_app
              (template_app (template_hole 4, t_empty), template_var 0)),
           template_hole 0),
         template_hole 1))),
    ("GExp.fold_true_fold_false_not_invalid",
     "fold (\<or>?) ?l true = true ==>
      fold (\<or>?) (rev ?l) false ~= invalid",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, t_empty), template_var 0),
            template_hole 4),
          template_hole 4)],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 6, t_empty),
                 template_app (template_hole 2, template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("GExp.gval_In_fold",
     "gval (In ?v ?l) ?s =
      (if ?s ?v = None then invalid
       else gval (fold gOr (map (%x. Eq (V ?v) (L x)) ?l) (Bc False)) ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_var 0, template_var 2)),
                   template_hole 9)),
               template_hole 8),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app
                      (template_app (template_hole 5, t_empty),
                       template_var 1)),
                   template_app (template_hole 1, template_hole 0))),
               template_var 0))
           ))),
    ("GExp.all_gval_not_false",
     "(ALL g:set ?G. gval g ?s ~= false) =
      (ALL g:set ?G. gval g ?s = true) |
      (EX g:set ?G. gval g ?s = invalid)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 1)),
                   t_empty)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 t_empty))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 7, template_var 1)),
             t_empty))
         )),
    ("GExp.x_not_in_set_fold_eq",
     "?s ?v ~: Some ` set ?ll ==>
      false =
      fold (\<or>?) (map (%x. if ?s ?v = Some x then true else false) ?ll)
       false",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_var 2, template_var 1)),
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_app (template_hole 8, template_var 0)))
                )
            )],
       template_equation
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 3, t_empty), template_var 0)),
           template_hole 6)))),
    ("GExp.apply_guards_reg_some_superset",
     "[| ALL a. ?r $ a ~= None --> ?r $ a = ?r' $ a;
         apply_guards ?G (join_ir ?i ?r) |]
      ==> apply_guards ?G (join_ir ?i ?r')",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("GExp.one_false_all_valid_false",
     "[| EX g:set ?G. gval g ?s = false;
         ALL g:set ?G. gval g ?s ~= invalid |]
      ==> gval (fold gAnd ?G (Bc True)) ?s = false",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 10, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1),
               template_app (template_hole 1, template_hole 0))),
           template_var 0),
         template_hole 7))),
    ("GExp.gval_foldr_gOr_true",
     "(gval (fold gOr ?l ?g) ?s = true) =
      ((EX g':set (?g # ?l). gval g' ?s = true) &
       (ALL g':set (?g # ?l). gval g' ?s ~= invalid))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_hole 7),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 2))),
             t_empty)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2))),
           t_empty)))),
    ("GExp.gval_unfold_first",
     "gval (fold gOr (map (%x. Eq (V ?v) (L x)) ?ls) (Eq (V ?v) (L ?l)))
       ?s =
      gval (fold gOr (map (%x. Eq (V ?v) (L x)) (?l # ?ls)) (Bc False)) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, t_empty), template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3)),
               template_app (template_hole 3, template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))),
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("GExp.gval_reg_some_superset",
     "[| ALL a. ?r $ a ~= None --> ?r $ a = ?r' $ a; ?x ~= invalid;
         gval ?a (join_ir ?i ?r) = ?x |]
      ==> gval ?a (join_ir ?i ?r') = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 4)),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_var 2))),
    ("GExp.gval_fold_take",
     "[| max_input_list ?G < Some ?a; ?a <= length ?i;
         max_input_list ?G <= Some (length ?i) |]
      ==> gval (fold gAnd ?G (Bc True)) (join_ir ?i ?r) =
          gval (fold gAnd ?G (Bc True)) (join_ir (take ?a ?i) ?r)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 12, template_var 3),
          template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 3),
          template_app
           (template_hole 11,
            template_app (template_hole 9, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 3),
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 3),
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.GExpMoreTemplates"
### 0.428s elapsed time, 0.612s cpu time, 0.071s GC time
val it = (): unit
