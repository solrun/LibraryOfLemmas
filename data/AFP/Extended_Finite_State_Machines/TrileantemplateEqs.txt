   [("Trilean.maybe_or_zero", "false \<or>? ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Trilean.maybe_or_idempotent", "?a \<or>? ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Trilean.invalid_maybe_and", "invalid \<and>? ?x = invalid",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Trilean.maybe_and_one", "true \<and>? ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Trilean.maybe_and_idempotent", "?a \<and>? ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Trilean.maybe_double_negation", "\<not>? \<not>? ?x = ?x",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Trilean.plus_trilean_commutative", "?a \<or>? ?b = ?b \<or>? ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Trilean.times_trilean_commutative", "?a \<and>? ?b = ?b \<and>? ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Trilean.maybe_negate_false", "(\<not>? ?x = false) = (?x = true)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Trilean.maybe_not_invalid", "(\<not>? ?x = invalid) = (?x = invalid)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Trilean.maybe_negate_true", "(\<not>? ?x = true) = (?x = false)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Trilean.pull_negation", "(?x = \<not>? ?y) = (\<not>? ?x = ?y)",
     template_bimplication
      (template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Trilean.maybe_not_eq", "(\<not>? ?x = \<not>? ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Trilean.negate_valid", "(\<not>? ?x ~= invalid) = (?x ~= invalid)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ),
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Trilean.de_morgans_1",
     "\<not>? ?a \<or>? ?b = (\<not>? ?a) \<and>? (\<not>? ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Trilean.de_morgans_2",
     "\<not>? ?a \<and>? ?b = (\<not>? ?a) \<or>? (\<not>? ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Trilean.plus_trilean_assoc",
     "?a \<or>? ?b \<or>? ?c = ?a \<or>? (?b \<or>? ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Trilean.times_trilean_assoc",
     "?a \<and>? ?b \<and>? ?c = ?a \<and>? (?b \<and>? ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Trilean.not_true", "(?x ~= true) = (?x = false | ?x = invalid)",
     template_bimplication
      (template_negation
        (template_equation (template_var 0, template_hole 3)),
       template_dunno)),
    ("Trilean.maybe_or_false",
     "(?x \<or>? ?y = false) = (?x = false & ?y = false)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("Trilean.maybe_or_invalid",
     "(?x \<or>? ?y = invalid) = (?x = invalid | ?y = invalid)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("Trilean.maybe_and_invalid",
     "(?x \<and>? ?y = invalid) = (?x = invalid | ?y = invalid)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("Trilean.maybe_and_true",
     "(?x \<and>? ?y = true) = (?x = true & ?y = true)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("Trilean.trilean_distributivity_1",
     "(?a \<or>? ?b) \<and>? ?c = ?a \<and>? ?c \<or>? ?b \<and>? ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Trilean.maybe_and_not_true",
     "(?x \<and>? ?y ~= true) = (?x ~= true | ?y ~= true)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1)
           ),
       template_dunno)),
    ("Trilean.maybe_or_true",
     "(?x \<or>? ?y = true) =
      ((?x = true | ?y = true) & ?x ~= invalid & ?y ~= invalid)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_dunno)),
    ("Trilean.maybe_and_false",
     "(?x \<and>? ?y = false) =
      ((?x = false | ?y = false) & ?x ~= invalid & ?y ~= invalid)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_dunno))]
