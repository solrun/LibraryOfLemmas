Loading theory "Draft.Trilean" (required by "Draft.AExpMoreTemplates" via "Draft.AExp" via "Draft.Value_Lexorder" via "Draft.Value")
Loading theory "Draft.VName" (required by "Draft.AExpMoreTemplates" via "Draft.AExp")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AExpMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AExpMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.159s elapsed time, 0.650s cpu time, 0.050s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.AExpMoreTemplates" via "Draft.AExp")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
Found termination order: "size_list size <*mlex*> {}"
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.334s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AExpMoreTemplates" via "Draft.ExtrEqs")
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
instantiation
  vname :: linorder
  less_eq_vname == less_eq :: vname => vname => bool
  less_vname == less :: vname => vname => bool
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.VName"
### 0.431s elapsed time, 1.722s cpu time, 0.120s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.AExpMoreTemplates" via "Draft.AExp" via "FinFun.FinFun" via "HOL-Library.Cardinality")
### theory "HOL-Library.Option_ord"
### 0.310s elapsed time, 1.224s cpu time, 0.138s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AExpMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "{}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
Found termination order: "{}"
### theory "Draft.Trilean"
### 0.628s elapsed time, 2.489s cpu time, 0.277s GC time
Loading theory "Draft.Value" (required by "Draft.AExpMoreTemplates" via "Draft.AExp" via "Draft.Value_Lexorder")
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.840s cpu time, 0.088s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AExpMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.Phantom_Type"
### 0.758s elapsed time, 2.800s cpu time, 0.842s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.AExpMoreTemplates" via "Draft.AExp" via "FinFun.FinFun")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
Found termination order: "{}"
consts
  flat :: "'a list stream => 'a stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.112s elapsed time, 4.190s cpu time, 0.978s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AExpMoreTemplates" via "Draft.ExtrEqs")
### Additional type variable(s) in locale specification "card2": 'a
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
### theory "Draft.Value"
### 0.900s elapsed time, 3.358s cpu time, 0.821s GC time
Loading theory "Draft.Value_Lexorder" (required by "Draft.AExpMoreTemplates" via "Draft.AExp")
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
instantiation
  value :: linorder
  less_eq_value == less_eq :: value => value => bool
  less_value == less :: value => value => bool
Found termination order: "size <*mlex*> {}"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
### theory "Draft.Value_Lexorder"
### 0.142s elapsed time, 0.554s cpu time, 0.083s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.774s elapsed time, 2.813s cpu time, 0.288s GC time
Loading theory "FinFun.FinFun" (required by "Draft.AExpMoreTemplates" via "Draft.AExp")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
bundle finfun
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.805s elapsed time, 2.676s cpu time, 0.265s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
Found termination order: "size <*mlex*> {}"
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
### theory "HOL-Library.Tree"
### 2.364s elapsed time, 7.440s cpu time, 1.969s GC time
Loading theory "Draft.Templates" (required by "Draft.AExpMoreTemplates" via "Draft.ExtrEqs")
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AExpMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.554s elapsed time, 1.190s cpu time, 0.180s GC time
### theory "FinFun.FinFun"
### 2.109s elapsed time, 5.105s cpu time, 2.002s GC time
Loading theory "Draft.AExp" (required by "Draft.AExpMoreTemplates")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  input2state_prim :: "value list => nat => nat \<Rightarrow>f value option"
consts
  repeat :: "nat => 'a => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AExp"
### 2.506s elapsed time, 2.987s cpu time, 0.312s GC time
Loading theory "Draft.AExpMoreTemplates"
val templateLemmas =
   [("AExp.finite_enumerate_regs", "finite (enumerate_regs ?a)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("AExp.apply_empty_None", "<> $ ?x2.0 = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("AExp.length_repeat", "length (repeat ?n ?a) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("AExp.max_reg_V_I", "max_reg (V (I ?n)) = None",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("AExp.input2state_empty", "input2state [] $ ?x1.0 = None",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("AExp.enumerate_aexp_inputs_list",
     "EX l. enumerate_aexp_inputs ?a = set l",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("AExp.max_input_I", "max_input (V (I ?i)) = Some ?i",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("AExp.max_reg_V_R", "max_reg (V (R ?n)) = Some ?n",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("AExp.input2state_exists", "EX i. input2state i $ ?x1.0 = Some ?a",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("AExp.join_ir_R", "join_ir ?i ?r (R ?n) = ?r $ ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("AExp.length_append_repeat", "length ?i <= length (?i @ repeat ?a ?y)",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 2),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("AExp.max_input_Minus",
     "max_input (Minus ?a1.0 ?a2.0) =
      max (max_input ?a1.0) (max_input ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_input_Plus",
     "max_input (Plus ?a1.0 ?a2.0) =
      max (max_input ?a1.0) (max_input ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_input_Times",
     "max_input (Times ?a1.0 ?a2.0) =
      max (max_input ?a1.0) (max_input ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_reg_Minus",
     "max_reg (Minus ?a1.0 ?a2.0) = max (max_reg ?a1.0) (max_reg ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_reg_Plus",
     "max_reg (Plus ?a1.0 ?a2.0) = max (max_reg ?a1.0) (max_reg ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.max_reg_Times",
     "max_reg (Times ?a1.0 ?a2.0) = max (max_reg ?a1.0) (max_reg ?a2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("AExp.exists_join_ir_ext", "EX i r. join_ir i r ?v = ?s ?v",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("AExp.aval_plus_symmetry",
     "aval (Plus ?x ?y) ?s = aval (Plus ?y ?x) ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("AExp.input2state_out_of_bounds",
     "length ?ia <= ?i ==> input2state ?ia $ ?i = None",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("AExp.input2state_not_None",
     "input2state ?i $ ?x ~= None ==> ?x < length ?i",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("AExp.input2state_within_bounds",
     "input2state ?i $ ?x = Some ?a ==> ?x < length ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 2)))),
    ("AExp.input2state_Some",
     "(EX v. input2state ?i $ ?x = Some v) = (?x < length ?i)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("AExp.input2state_append",
     "input2state (?i @ [?a]) = (input2state ?i)(length ?i $:= Some ?a)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 6, template_var 1)),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("AExp.enumerate_aexp_inputs_empty_input_unconstrained",
     "enumerate_aexp_inputs ?a = {} ==>
      ALL r. ~ aexp_constrains ?a (V (I r))",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("AExp.enumerate_regs_empty_reg_unconstrained",
     "enumerate_regs ?a = {} ==> ALL r. ~ aexp_constrains ?a (V (R r))",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("AExp.input2state_nth",
     "?i < length ?ia ==> input2state ?ia $ ?i = Some (?ia ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("AExp.join_ir_nth",
     "?i < length ?is ==> join_ir ?is ?r (I ?i) = Some (?is ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("AExp.input2state_double_exists",
     "EX i. input2state i $ ?x = Some ?a & input2state i $ ?y = Some ?a",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("AExp.enumerate_aexp_inputs_not_empty",
     "(enumerate_aexp_inputs ?a ~= {}) =
      (EX b c. enumerate_aexp_inputs ?a = set (b # c))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_hole 4)),
       template_app (template_hole 3, t_empty))),
    ("AExp.no_reg_aval_swap_regs",
     "max_reg ?a = None ==>
      aval ?a (join_ir ?i ?r) = aval ?a (join_ir ?i ?r')",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3), template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("AExp.length_input2state_repeat",
     "input2state ?i $ ?x = Some ?a ==> ?y < length (?i @ repeat ?y ?a)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3)),
            template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("AExp.datastate",
     "input2state ?n =
      fold (%(k, v) f. f(k $:= Some v)) (enumerate 0 ?n) (K$ None)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("AExp.join_ir_double_exists",
     "EX i r. join_ir i r ?v = Some ?a & join_ir i r ?v' = Some ?a",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("AExp.input2state_cons_shift",
     "input2state ?i $ ?x1.0 = Some ?a ==>
      input2state (?b # ?i) $ (Suc ?x1.0) = Some ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 3)),
            template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3))),
           template_app (template_hole 0, template_var 2)),
         template_app (template_hole 2, template_var 1)))),
    ("AExp.no_variables_aval",
     "[| enumerate_aexp_inputs ?a = {}; enumerate_regs ?a = {} |]
      ==> aval ?a ?s = aval ?a ?s'",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2), template_hole 3),
        template_equation
         (template_app (template_hole 2, template_var 2), template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("AExp.aval_take",
     "max_input ?x < Some ?a ==>
      aval ?x (join_ir ?i ?r) = aval ?x (join_ir (take ?a ?i) ?r)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 3),
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("AExp.input2state_some",
     "[| ?i < length ?ia; ?ia ! ?i = ?x |]
      ==> input2state ?ia $ ?i = Some ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("AExp.input_unconstrained_aval_input_swap",
     "ALL i. ~ aexp_constrains ?a (V (I i)) ==>
      aval ?a (join_ir ?i ?r) = aval ?a (join_ir ?i' ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("AExp.input_unconstrained_aval_register_swap",
     "ALL i. ~ aexp_constrains ?a (V (R i)) ==>
      aval ?a (join_ir ?i ?r) = aval ?a (join_ir ?i ?r')",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("AExp.input2state_double_exists_2",
     "?x ~= ?y ==>
      EX i. input2state i $ ?x = Some ?a & input2state i $ ?y = Some ?a'",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("AExp.input2state_cons",
     "[| 0 < ?x1.0; ?x1.0 < length ?ia |]
      ==> input2state (?a # ?ia) $ ?x1.0 = input2state ?ia $ (?x1.0 - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("AExp.join_ir_double_exists_2",
     "?v ~= ?v' ==>
      EX i r. join_ir i r ?v = Some ?a & join_ir i r ?v' = Some ?a'",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("AExp.aval_no_reg_swap_regs",
     "[| max_input ?x < Some ?a; max_reg ?x = None |]
      ==> aval ?x (join_ir ?i ?ra) = aval ?x (join_ir (take ?a ?i) ?r)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 8, template_var 4),
          template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app (template_hole 5, template_var 4), template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 0))))),
    ("AExp.unconstrained_variable_swap_aval",
     "[| ALL i. ~ aexp_constrains ?a (V (I i));
         ALL r. ~ aexp_constrains ?a (V (R r)) |]
      ==> aval ?a ?s = aval ?a ?s'",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("AExp.input2state_take",
     "[| ?x1.0 < ?A; ?A <= length ?i; ?x = I ?x1.0 |]
      ==> input2state ?i $ ?x1.0 = input2state (take ?A ?i) $ ?x1.0",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_var 0, template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 3)))),
    ("AExp.aval_reg_none_superset",
     "[| ALL a. ?r $ a ~= None --> ?r $ a = ?r' $ a;
         aval ?a (join_ir ?i ?r') = None |]
      ==> aval ?a (join_ir ?i ?r) = None",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_hole 2))),
    ("AExp.aval_reg_some_superset",
     "[| ALL a. ?r $ a ~= None --> ?r $ a = ?r' $ a;
         aval ?a (join_ir ?i ?r) = Some ?v |]
      ==> aval ?a (join_ir ?i ?r') = Some ?v",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 4)),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app (template_hole 0, template_var 0)))),
    ("AExp.aval_ir_take",
     "[| ?A <= length ?i; enumerate_regs ?a = {};
         enumerate_aexp_inputs ?a ~= {};
         Max (enumerate_aexp_inputs ?a) < ?A |]
      ==> aval ?a (join_ir (take ?A ?i) ?r) = aval ?a (join_ir ?i ?ra)",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app (template_hole 11, template_var 3)),
        template_equation
         (template_app (template_hole 9, template_var 2), template_hole 8),
        template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 2),
              template_hole 8)
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 4,
            template_app (template_hole 6, template_var 2)),
          template_var 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("AExp.aexp_induct_separate_V_cases",
     "[| !!x. ?P (L x); !!x. ?P (V (I x)); !!x. ?P (V (R x));
         !!x1a x2a. [| ?P x1a; ?P x2a |] ==> ?P (Plus x1a x2a);
         !!x1a x2a. [| ?P x1a; ?P x2a |] ==> ?P (Minus x1a x2a);
         !!x1a x2a. [| ?P x1a; ?P x2a |] ==> ?P (Times x1a x2a) |]
      ==> ?P ?a",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.AExpMoreTemplates"
### 0.400s elapsed time, 0.547s cpu time, 0.000s GC time
val it = (): unit
