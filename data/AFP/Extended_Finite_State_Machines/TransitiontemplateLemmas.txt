   [("Transition.apply_outputs_empty", "apply_outputs [] ?s = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Transition.apply_outputs_preserves_length",
     "length (apply_outputs ?p ?s) = length ?p",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Transition.apply_outputs",
     "apply_outputs ?p ?s = map (%p. aval p ?s) ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Transition.can_take_empty", "length ?i = ?a ==> can_take ?a [] ?i ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2), template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0),
               template_var 2),
             template_var 0)
           ))),
    ("Transition.can_take",
     "can_take_transition ?t ?i ?r = can_take (Arity ?t) (Guards ?t) ?i ?r",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Transition.can_take_transition_empty_guard",
     "Guards ?t = [] ==> EX i. can_take_transition ?t i ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transition.valid_list_can_take",
     "ALL g:set (Guards ?t). valid g ==> EX i. can_take_transition ?t i ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1))),
              t_empty)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Transition.can_take",
     "can_take ?a ?g ?i ?r =
      (length ?i = ?a & apply_guards ?g (join_ir ?i ?r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Transition.apply_outputs_nth",
     "?i < length ?p ==> apply_outputs ?p ?s ! ?i = aval (?p ! ?i) ?s",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Transition.apply_outputs",
     "input2state ?n =
      fold (%(k, v) f. f(k $:= Some v)) (enumerate 0 ?n) (K$ None)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("Transition.update_twice",
     "apply_updates [(?r, ?a), (?r, ?b)] ?s ?regs = ?regs
      (?r $:= aval ?b ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 2)),
                 template_hole 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 4),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Transition.r_not_updated_stays_the_same",
     "?r ~: fst ` set ?U ==> apply_updates ?U ?c ?d $ ?r = ?d $ ?r",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 2)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 3)))),
    ("Transition.cant_take_if",
     "EX g:set (Guards ?t). gval g (join_ir ?i ?r) ~= true ==>
      ~ can_take_transition ?t ?i ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2))),
              t_empty)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)
               )
           ))),
    ("Transition.apply_outputs_register",
     "?r < length ?P ==>
      apply_outputs (?P[?r := V (R ?p)]) (join_ir ?i ?c) ! ?r = ?c $ ?p",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 8, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 4),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_var 4),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Transition.apply_outputs_literal",
     "[| ?P ! ?r = L ?v; ?r < length ?P |]
      ==> apply_outputs ?P ?s ! ?r = Some ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Transition.can_take_subset_append",
     "set (Guards ?t) <= set (Guards ?t') ==>
      can_take ?a (Guards ?t @ Guards ?t') ?i ?c =
      can_take ?a (Guards ?t') ?i ?c",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 4)),
          template_app
           (template_hole 5,
            template_app (template_hole 3, template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 4, template_var 4)),
                 template_app (template_hole 3, template_var 3))),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 3, template_var 3)),
             template_var 1),
           template_var 0)))),
    ("Transition.apply_outputs_unupdated",
     "[| ?ia ~= ?r; ?ia < length ?P |]
      ==> apply_outputs ?P ?j ! ?ia =
          apply_outputs (?P[?r := ?v]) ?j ! ?ia",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 4),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 0)),
               template_var 1)),
           template_var 4)))),
    ("Transition.apply_updates_cons",
     "?ra ~= ?r ==>
      apply_updates ?u (join_ir ?ia ?c) ?c $ ?ra =
      apply_updates ((?r, ?a) # ?u) (join_ir ?ia ?c) ?c $ ?ra",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 1)),
           template_var 5),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 0)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 1)),
           template_var 5)))),
    ("Transition.can_take_subset",
     "[| length ?i = Arity ?t; Arity ?t = Arity ?t';
         set (Guards ?t') <= set (Guards ?t);
         can_take_transition ?t ?i ?r |]
      ==> can_take_transition ?t' ?i ?r",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 3),
          template_app (template_hole 7, template_var 2)),
        template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_hole 4,
            template_app (template_hole 2, template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)
           )))]
