Loading theory "Draft.Trilean" (required by "Draft.TrileanMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TrileanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TrileanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TrileanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.534s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TrileanMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.845s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TrileanMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.276s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TrileanMoreTemplates" via "Draft.ExtrEqs")
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
Found termination order: "{}"
Found termination order: "{}"
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
Found termination order: "{}"
### theory "Draft.Trilean"
### 0.568s elapsed time, 2.266s cpu time, 0.186s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.695s elapsed time, 2.437s cpu time, 0.248s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.900s elapsed time, 2.824s cpu time, 0.654s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.693s elapsed time, 4.244s cpu time, 0.788s GC time
Loading theory "Draft.Templates" (required by "Draft.TrileanMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.061s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TrileanMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.450s elapsed time, 0.502s cpu time, 0.064s GC time
Loading theory "Draft.TrileanMoreTemplates"
val templateLemmas =
   [("Trilean.maybe_or_zero", "false \<or>? ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Trilean.maybe_or_idempotent", "?a \<or>? ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Trilean.invalid_maybe_and", "invalid \<and>? ?x = invalid",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Trilean.maybe_and_one", "true \<and>? ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Trilean.maybe_and_idempotent", "?a \<and>? ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Trilean.maybe_double_negation", "\<not>? \<not>? ?x = ?x",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Trilean.plus_trilean_commutative", "?a \<or>? ?b = ?b \<or>? ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Trilean.times_trilean_commutative", "?a \<and>? ?b = ?b \<and>? ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Trilean.maybe_negate_false", "(\<not>? ?x = false) = (?x = true)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Trilean.maybe_not_invalid", "(\<not>? ?x = invalid) = (?x = invalid)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Trilean.maybe_negate_true", "(\<not>? ?x = true) = (?x = false)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Trilean.pull_negation", "(?x = \<not>? ?y) = (\<not>? ?x = ?y)",
     template_bimplication
      (template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Trilean.maybe_not_eq", "(\<not>? ?x = \<not>? ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Trilean.negate_valid", "(\<not>? ?x ~= invalid) = (?x ~= invalid)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ),
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Trilean.de_morgans_1",
     "\<not>? ?a \<or>? ?b = (\<not>? ?a) \<and>? (\<not>? ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Trilean.de_morgans_2",
     "\<not>? ?a \<and>? ?b = (\<not>? ?a) \<or>? (\<not>? ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Trilean.plus_trilean_assoc",
     "?a \<or>? ?b \<or>? ?c = ?a \<or>? (?b \<or>? ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Trilean.times_trilean_assoc",
     "?a \<and>? ?b \<and>? ?c = ?a \<and>? (?b \<and>? ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Trilean.not_true", "(?x ~= true) = (?x = false | ?x = invalid)",
     template_bimplication
      (template_negation
        (template_equation (template_var 0, template_hole 3)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 0))
           ))),
    ("Trilean.maybe_or_false",
     "(?x \<or>? ?y = false) = (?x = false & ?y = false)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Trilean.maybe_or_invalid",
     "(?x \<or>? ?y = invalid) = (?x = invalid | ?y = invalid)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Trilean.maybe_and_invalid",
     "(?x \<and>? ?y = invalid) = (?x = invalid | ?y = invalid)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Trilean.maybe_and_true",
     "(?x \<and>? ?y = true) = (?x = true & ?y = true)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Trilean.trilean_distributivity_1",
     "(?a \<or>? ?b) \<and>? ?c = ?a \<and>? ?c \<or>? ?b \<and>? ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Trilean.maybe_and_not_true",
     "(?x \<and>? ?y ~= true) = (?x ~= true | ?y ~= true)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 1)))
           ))),
    ("Trilean.maybe_or_valid",
     "?x \<or>? ?y ~= invalid ==> ?x ~= invalid & ?y ~= invalid",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 1)))
           ))),
    ("Trilean.maybe_and_valid",
     "?x \<and>? ?y ~= invalid ==> ?x ~= invalid & ?y ~= invalid",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 1)))
           ))),
    ("Trilean.maybe_or_true",
     "(?x \<or>? ?y = true) =
      ((?x = true | ?y = true) & ?x ~= invalid & ?y ~= invalid)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 4)),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 0))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 0))))
           ))),
    ("Trilean.maybe_and_false",
     "(?x \<and>? ?y = false) =
      ((?x = false | ?y = false) & ?x ~= invalid & ?y ~= invalid)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 4)),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 0))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 0))))
           )))]:
   (string * thm * template) list
### theory "Draft.TrileanMoreTemplates"
### 0.332s elapsed time, 0.499s cpu time, 0.084s GC time
val it = (): unit
