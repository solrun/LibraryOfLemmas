Loading theory "Draft.Matrix_LinPoly" (required by "Draft.Linear_ProgrammingTemplates" via "Draft.Linear_Programming" via "Draft.LP_Preliminaries")
Loading theory "Draft.Templates" (required by "Draft.Linear_ProgrammingTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.More_Jordan_Normal_Forms" (required by "Draft.Linear_ProgrammingTemplates" via "Draft.Linear_Programming" via "Draft.LP_Preliminaries")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.268s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Linear_ProgrammingTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.More_Jordan_Normal_Forms"
### 0.499s elapsed time, 1.485s cpu time, 0.159s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.599s elapsed time, 1.580s cpu time, 0.159s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Matrix_LinPoly"
### 1.599s elapsed time, 2.852s cpu time, 0.306s GC time
Loading theory "Draft.LP_Preliminaries" (required by "Draft.Linear_ProgrammingTemplates" via "Draft.Linear_Programming")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.LP_Preliminaries"
### 3.556s elapsed time, 4.007s cpu time, 0.730s GC time
Loading theory "Draft.Linear_Programming" (required by "Draft.Linear_ProgrammingTemplates")
locale abstract_LP
  fixes A :: "'a mat"
    and b :: "'a vec"
    and c :: "'a vec"
    and m :: "nat"
    and n :: "nat"
  assumes "abstract_LP A b c m n"
Found termination order: "{}"
Found termination order: "{}"
locale rat_LP
  fixes A :: "rat mat"
    and b :: "rat vec"
    and c :: "rat vec"
    and m :: "nat"
    and n :: "nat"
  assumes "rat_LP A b c m n"
Found termination order: "{}"
deriving "ceq" instance for type "Rat.rat" via "="
derived is_ceq_rat-lemma
deriving "compare" instance for type "Rat.rat"
deriving "ccompare_order" instance for type "Rat.rat" via compare_order
derived is_ccompare_rat-lemma
use rbt as set_impl for type rat
registered rat in class set_impl
deriving "ceq" instance for type "Simplex.atom" via "="
derived is_ceq_atom-lemma
deriving "ceq" instance for type "QDelta.QDelta" via "="
derived is_ceq_QDelta-lemma
deriving "compare_order" instance for type "QDelta.QDelta"
deriving "compare" instance for type "QDelta.QDelta"
deriving "compare_order" instance for type "Simplex.atom"
deriving "compare" instance for type "Simplex.atom"
generating comparator for type "Simplex.atom"
deriving "ccompare" instance for type "Simplex.atom"
derived is_ccompare_atom-lemma
deriving "ccompare" instance for type "QDelta.QDelta"
derived is_ccompare_QDelta-lemma
use rbt as set_impl for type atom
registered atom in class set_impl
use rbt as set_impl for type QDelta
registered QDelta in class set_impl
### theory "Draft.Linear_Programming"
### 5.858s elapsed time, 6.242s cpu time, 0.777s GC time
Loading theory "Draft.Linear_ProgrammingTemplates"
val templateLemmas =
   [("Linear_Programming.comparator_atom",
     "comparator ?comp\<^sub>'\<^sub>a ==>
      comparator (comparator_atom ?comp\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Linear_Programming.comparator_atom_simps",
     "comparator_atom ?comp\<^sub>'\<^sub>a (Geq ?x ?xa) (Leq ?y ?ya) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Linear_Programming.comparator_atom_simps",
     "comparator_atom ?comp\<^sub>'\<^sub>a (Leq ?x ?xa) (Geq ?yb ?yc) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Linear_Programming.sat_primalI",
     "[?A*\<^sub>v?x]\<le>?b ==> ?x : sat_primal ?A ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Linear_Programming.sat_primalD",
     "?x : sat_primal ?A ?b ==> [?A*\<^sub>v?x]\<le>?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Linear_Programming.sat_dualD",
     "?y : sat_dual ?A ?c ==> [?y\<^sub>v*?A]=?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Linear_Programming.sol_dim_in_sat_dual",
     "?x : sat_dual ?A ?c ==> dim_vec ?x = dim_row ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Linear_Programming.sol_dim_in_sat_primal",
     "?x : sat_primal ?A ?b ==> dim_vec ?x = dim_col ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Linear_Programming.maximize_option_elim",
     "maximize ?A ?b ?c = Some ?x ==> dim_vec ?b = dim_row ?A",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 3)))),
    ("Linear_Programming.maximize_option_elim",
     "maximize ?A ?b ?c = Some ?x ==> dim_vec ?c = dim_col ?A",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 3)))),
    ("Linear_Programming.optimize_sat",
     "maximize ?A ?b ?c = Some (Inr ?x) ==> [?A*\<^sub>v?x]\<le>?b",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 2)
           ))),
    ("Linear_Programming.optimize_sol_dimension",
     "maximize ?A ?b ?c = Some (Inr ?x) ==> ?x : carrier_vec (dim_col ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Linear_Programming.of_rat_val",
     "simplex ?cs = Inr ?v ==>
      of_rat_val \<langle>?v\<rangle> \<Turnstile>\<^sub>r\<^sub>c\<^sub>s
      set ?cs",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("Linear_Programming.comparator_atom_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_atom ?x\<^sub>0 ==>
          peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      peq_comp (comparator_atom ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Linear_Programming.comparator_atom_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_atom ?x\<^sub>0 ==>
          psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      psym_comp (comparator_atom ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Linear_Programming.comparator_atom_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_atom ?x\<^sub>0 ==>
          ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      ptrans_comp (comparator_atom ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Linear_Programming.comparator_atom_simps",
     "comparator_atom ?comp\<^sub>'\<^sub>a (Geq ?x ?xa) (Geq ?yb ?yc) =
      (case comparator_of ?x ?yb of Eq => ?comp\<^sub>'\<^sub>a ?xa ?yc
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Linear_Programming.comparator_atom_simps",
     "comparator_atom ?comp\<^sub>'\<^sub>a (Leq ?x ?xa) (Leq ?y ?ya) =
      (case comparator_of ?x ?y of Eq => ?comp\<^sub>'\<^sub>a ?xa ?ya
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Linear_Programming.sat_dualD",
     "?y : sat_dual ?A ?c ==> ALL i<dim_vec ?y. (0::?'a) <= ?y $ i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Linear_Programming.sol_dim_in_max_lp",
     "?x : max_lp ?A ?b ?c ==> dim_vec ?x = dim_col ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, t_empty),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app (template_hole 1, template_var 3),
         template_app (template_hole 0, template_var 1)))),
    ("Linear_Programming.max_lp_in_sat_primal",
     "?x : max_lp ?A ?b ?c ==> ?x : sat_primal ?A ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, t_empty),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Linear_Programming.sol_dim_in_min_lp",
     "?x : optimal_set (%x y. x \<bullet> ?c <= y \<bullet> ?c)
            (sat_dual ?A ?c) ==>
      dim_vec ?x = dim_row ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, t_empty),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1)))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Programming.min_lp_in_sat_dual",
     "?x : optimal_set (%x y. x \<bullet> ?c <= y \<bullet> ?c)
            (sat_dual ?A ?c) ==>
      ?x : sat_dual ?A ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, t_empty),
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Linear_Programming.optimize_sound",
     "maximize ?A ?b ?c = Some (Inr ?x) ==> ?x : max_lp ?A ?b ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)))
           ))),
    ("Linear_Programming.sat_dualI",
     "[| [?y\<^sub>v*?A]=?c; ALL i<dim_vec ?y. (0::?'a) <= ?y $ i |]
      ==> ?y : sat_dual ?A ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Linear_Programming.create_opt_sol_satisfies",
     "create_optimal_solutions ?A ?b ?c = Inr ?X ==>
      \<langle>?X\<rangle> \<Turnstile>\<^sub>c\<^sub>s
      set (x_times_c_geq_y_times_b ?c ?b #
           mat_leqb_eqc ?A ?b ?c @
           from_index_geq0_vector (dim_vec ?c) (0\<^sub>v (dim_vec ?b)))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_var 2)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_var 3),
                           template_var 2),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 1)),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3, template_var 2))))))),
             t_empty)
           ))),
    ("Linear_Programming.create_opt_sol_satisfies_leq",
     "[| create_optimal_solutions ?A ?b ?c = Inr ?X;
         (?x, ?y) = split_n_m_x (dim_vec ?c) (dim_vec ?b) ?X |]
      ==> ?y \<bullet> ?b <= ?x \<bullet> ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 7, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 3, template_var 3)),
                template_app (template_hole 3, template_var 4))),
            template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 4),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3)))),
    ("Linear_Programming.create_opt_sol_sat_leq_mat",
     "[| dim_vec ?b = dim_row ?A;
         create_optimal_solutions ?A ?b ?c = Inr ?X;
         (?x, ?y) = split_i_j_x (dim_col ?A) (dim_vec ?b) ?X |]
      ==> [?A*\<^sub>v?x]\<le>?b",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 5),
          template_app (template_hole 8, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 4),
              template_var 5),
            template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 4)),
              template_app (template_hole 9, template_var 5)),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 5)
           ))),
    ("Linear_Programming.optimal_setI",
     "[| ?x : ?S; !!y. y : ?S ==> ?x \<bullet> ?c <= y \<bullet> ?c |]
      ==> ?x : optimal_set (%x y. x \<bullet> ?c <= y \<bullet> ?c) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           ))),
    ("Linear_Programming.create_opt_sol_satisfies_geq0",
     "[| create_optimal_solutions ?A ?b ?c = Inr ?X;
         (?x, ?y) = split_n_m_x (dim_vec ?c) (dim_vec ?b) ?X;
         ?i < dim_vec ?y |]
      ==> 0 <= ?y $ ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5),
            template_var 4),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app
           (template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 5, template_var 4)),
                template_app (template_hole 5, template_var 5))),
            template_var 3)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Programming.max_lpI",
     "[| [?A*\<^sub>v?x]\<le>?b;
         !!y. [?A*\<^sub>vy]\<le>?b ==> y \<bullet> ?c <= ?x \<bullet> ?c |]
      ==> ?x : max_lp ?A ?b ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)))
           ))),
    ("Linear_Programming.create_opt_sol_sat_eq_mat",
     "[| dim_vec ?c = dim_row ?A\<^sup>T; dim_vec ?b = dim_col ?A\<^sup>T;
         create_optimal_solutions ?A ?b ?c = Inr ?X;
         (?x, ?y) = split_n_m_x (dim_vec ?c) (dim_vec ?b) ?X |]
      ==> [?y\<^sub>v*?A]=?c",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 5),
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_var 4))),
        template_equation
         (template_app (template_hole 11, template_var 3),
          template_app
           (template_hole 8,
            template_app (template_hole 9, template_var 4))),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3),
            template_var 5),
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 11, template_var 5)),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 11, template_var 5)),
                template_app (template_hole 11, template_var 3))),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4),
             template_var 5)
           ))),
    ("Linear_Programming.min_lpI",
     "[| [?y\<^sub>v*?A]=?c; !!i. i < dim_vec ?y ==> (0::?'a) <= ?y $ i;
         !!x. x : sat_dual ?A ?c ==> ?y \<bullet> ?c <= x \<bullet> ?c |]
      ==> ?y : optimal_set (%x y. x \<bullet> ?c <= y \<bullet> ?c)
                (sat_dual ?A ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 0, t_empty),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.Linear_ProgrammingTemplates"
### 1.817s elapsed time, 2.657s cpu time, 0.904s GC time
val it = (): unit
