   [("Wetzels_Problem.Card_gcard", "Card (gcard ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Wetzels_Problem.less_succ_self", "?x < ZFC_in_HOL.succ ?x",
     template_inequation
      (less_than, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Wetzels_Problem.gcard_eq_vcard", "gcard (elts ?x) = vcard ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Wetzels_Problem.gcard_single_1", "gcard {?x} = 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Wetzels_Problem.cadd_ac", "?i \<oplus> ?j = ?j \<oplus> ?i",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Wetzels_Problem.InfCard_Aleph",
     "Ord ?\<alpha> ==> InfCard (\<aleph>?\<alpha>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Wetzels_Problem.finite_iff_less_Aleph0",
     "finite (elts ?x) = (vcard ?x < \<omega>)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Wetzels_Problem.omega_le_Aleph",
     "Ord ?\<alpha> ==> \<omega> <= \<aleph>?\<alpha>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Wetzels_Problem.inv_V_of_image_eq", "inv V_of ` V_of ` ?X = ?X",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)),
       template_var 0)),
    ("Wetzels_Problem.countable_iff_vcard_less1",
     "countable (elts ?x) = (vcard ?x < \<omega>1)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("Wetzels_Problem.countable_imp_g_le_Aleph0",
     "countable ?X ==> gcard ?X <= \<aleph>0",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Wetzels_Problem.finite_imp_g_le_Aleph0",
     "finite ?X ==> gcard ?X < \<aleph>0",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Wetzels_Problem.gcard_eqpoll",
     "small ?X ==> elts (gcard ?X) \<approx> ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_var 0)
           ))),
    ("Wetzels_Problem.gcard_big_0", "~ small ?X ==> gcard ?X = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Wetzels_Problem.vcard_sup",
     "vcard (?x \<squnion> ?y) <= vcard ?x \<oplus> vcard ?y",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Wetzels_Problem.gcard_eq_card",
     "finite ?X ==> gcard ?X = ord_of_nat (card ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Wetzels_Problem.vcard_Aleph",
     "Ord ?\<alpha> ==> vcard (\<aleph>?\<alpha>) = \<aleph>?\<alpha>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Wetzels_Problem.elts_cmult",
     "elts (?\<kappa>' \<otimes> ?\<kappa>) \<approx>
      elts ?\<kappa>' \<times> elts ?\<kappa>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             t_empty))
         )),
    ("Wetzels_Problem.gcard_Times",
     "gcard (?X \<times> ?Y) = gcard ?X \<otimes> gcard ?Y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), t_empty)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Wetzels_Problem.cadd_left_commute",
     "?j \<oplus> (?i \<oplus> ?k) = ?i \<oplus> (?j \<oplus> ?k)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Wetzels_Problem.cadd_ac",
     "?i \<oplus> ?j \<oplus> ?k = ?i \<oplus> (?j \<oplus> ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Wetzels_Problem.gcard_image_le",
     "small ?A ==> gcard (?f ` ?A) <= gcard ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Wetzels_Problem.elts_set_V_of",
     "small ?X ==> elts (ZFC_in_HOL.set (V_of ` ?X)) \<approx> ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)))),
             template_var 0)
           ))),
    ("Wetzels_Problem.lepoll_small",
     "[| ?A \<lesssim> ?B; small ?B |] ==> small ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Wetzels_Problem.countable_infinite_gcard",
     "(countable ?X & infinite ?X) = (gcard ?X = \<aleph>0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Wetzels_Problem.Aleph_csquare_eq",
     "Ord ?\<alpha> ==>
      \<aleph>?\<alpha> \<otimes> \<aleph>?\<alpha> = \<aleph>?\<alpha>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Wetzels_Problem.countable_iff_g_le_Aleph0",
     "small ?X ==> countable ?X = (gcard ?X <= \<aleph>0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_hole 0))))),
    ("Wetzels_Problem.finite_iff_g_le_Aleph0",
     "small ?X ==> finite ?X = (gcard ?X < \<aleph>0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_hole 0))))),
    ("Wetzels_Problem.gcard_image",
     "inj_on ?f ?A ==> gcard (?f ` ?A) = gcard ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Wetzels_Problem.Card_Un",
     "[| Card ?x; Card ?y |] ==> Card (?x \<squnion> ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Wetzels_Problem.transrec",
     "Wetzels_Problem.transrec ?H ?a =
      ?H (restrict (Wetzels_Problem.transrec ?H) (elts ?a)) ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Wetzels_Problem.uncountable_gcard",
     "small ?X ==> uncountable ?X = (\<aleph>0 < gcard ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Wetzels_Problem.uncountable_gcard_ge",
     "small ?X ==> uncountable ?X = (\<omega>1 <= gcard ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Wetzels_Problem.countable_infinite_vcard",
     "(countable (elts ?x) & infinite (elts ?x)) = (vcard ?x = \<aleph>0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 0))),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 6, template_var 0))))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Wetzels_Problem.inj_on_restrict_iff",
     "?A <= ?B ==> inj_on (restrict ?f ?B) ?A = inj_on ?f ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Wetzels_Problem.lepoll_imp_gcard_le",
     "[| ?A \<lesssim> ?B; small ?B |] ==> gcard ?A <= gcard ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Wetzels_Problem.subset_imp_gcard_le",
     "[| ?A <= ?B; small ?B |] ==> gcard ?A <= gcard ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Wetzels_Problem.gcard_le_lepoll",
     "[| gcard ?A <= ?\<alpha>; small ?A |]
      ==> ?A \<lesssim> elts ?\<alpha>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Wetzels_Problem.V_of_image_times",
     "V_of ` (?X \<times> ?Y) \<approx> V_of ` ?X \<times> V_of ` ?Y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 5, template_var 1), t_empty))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             t_empty))
         )),
    ("Wetzels_Problem.vcard_set_image",
     "inj_on ?f (elts ?x) ==>
      vcard (ZFC_in_HOL.set (?f ` elts ?x)) = vcard ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 4, template_var 0)))),
         template_app (template_hole 2, template_var 0)))),
    ("Wetzels_Problem.csucc_le_Card_iff",
     "[| Card ?\<kappa>'; Card ?\<kappa> |]
      ==> (csucc ?\<kappa>' <= ?\<kappa>) = (?\<kappa>' < ?\<kappa>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Wetzels_Problem.Erdos_Wetzel_nonCH",
     "[| Wetzel ?F; \<omega>1 < C_continuum; small ?F |] ==> countable ?F",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 4, template_hole 3),
          template_hole 2),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Wetzels_Problem.csucc_lt_csucc_iff",
     "[| Card ?\<kappa>'; Card ?\<kappa> |]
      ==> (csucc ?\<kappa>' < csucc ?\<kappa>) = (?\<kappa>' < ?\<kappa>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Wetzels_Problem.csucc_le_csucc_iff",
     "[| Card ?\<kappa>'; Card ?\<kappa> |]
      ==> (csucc ?\<kappa>' <= csucc ?\<kappa>) =
          (?\<kappa>' <= ?\<kappa>)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Wetzels_Problem.gcard_finite_set",
     "[| finite ?X; ?a ~: ?X |]
      ==> gcard (insert ?a ?X) = ZFC_in_HOL.succ (gcard ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 1))))),
    ("Wetzels_Problem.small_Times_iff",
     "small (?X \<times> ?Y) = (small ?X & small ?Y | ?X = {} | ?Y = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Wetzels_Problem.cadd_InfCard_le",
     "[| ?\<alpha> <= ?\<kappa>; ?\<beta> <= ?\<kappa>; InfCard ?\<kappa> |]
      ==> ?\<alpha> \<oplus> ?\<beta> <= ?\<kappa>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Wetzels_Problem.cmult_InfCard_le",
     "[| ?\<alpha> <= ?\<kappa>; ?\<beta> <= ?\<kappa>; InfCard ?\<kappa> |]
      ==> ?\<alpha> \<otimes> ?\<beta> <= ?\<kappa>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Wetzels_Problem.Erdos_Wetzel_CH",
     "[| C_continuum = \<omega>1;
         !!F. [| Wetzel F; uncountable F |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_hole 6, template_app (template_hole 5, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Wetzels_Problem.analytic_on_prod",
     "(!!i. i : ?I ==> ?f i analytic_on ?S) ==>
      (%x. PROD i:?I. ?f i x) analytic_on ?S",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("Wetzels_Problem.holomorphic_countable_equal_UNIV",
     "[| ?f holomorphic_on UNIV; ?g holomorphic_on UNIV;
         uncountable {z. ?f z = ?g z} |]
      ==> ?f = ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 3, template_app (template_hole 2, t_empty))
                )
            )],
       template_equation (template_var 1, template_var 0))),
    ("Wetzels_Problem.vcard_Sup_le_cmult",
     "[| small ?U; !!x. x : ?U ==> vcard x <= ?\<kappa> |]
      ==> vcard (\<Squnion> ?U)
          <= vcard (ZFC_in_HOL.set ?U) \<otimes> ?\<kappa>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("Wetzels_Problem.subset_smaller_gcard",
     "[| ?\<kappa> <= gcard ?X; Card ?\<kappa>;
         !!Y. [| Y <= ?X; gcard Y = ?\<kappa> |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Wetzels_Problem.subset_smaller_vcard",
     "[| ?\<kappa> <= vcard ?x; Card ?\<kappa>;
         !!y. [| y <= ?x; vcard y = ?\<kappa> |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Wetzels_Problem.holomorphic_countable_zeros",
     "[| ?f holomorphic_on ?S; open ?S; connected ?S; fsigma ?S;
         ~ ?f constant_on ?S |]
      ==> countable {z: ?S. ?f z = 0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("Wetzels_Problem.gcard_Union_le_cmult",
     "[| small ?U; !!x. x : ?U ==> gcard x <= ?\<kappa>;
         !!x. x : ?U ==> small x |]
      ==> gcard (\<Union> ?U) <= gcard ?U \<otimes> ?\<kappa>",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Wetzels_Problem.holomorphic_countable_equal",
     "[| ?f holomorphic_on ?S; ?g holomorphic_on ?S; open ?S; connected ?S;
         fsigma ?S; uncountable {z: ?S. ?f z = ?g z} |]
      ==> ?S <= {z: ?S. ?f z = ?g z}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5, template_app (template_hole 4, t_empty))
                )
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 4, t_empty))))]
