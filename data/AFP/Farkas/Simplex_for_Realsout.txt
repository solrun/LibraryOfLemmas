Loading theory "Draft.Farkas" (required by "Draft.Simplex_for_RealsTemplates" via "Draft.Simplex_for_Reals")
Loading theory "Draft.Templates" (required by "Draft.Simplex_for_RealsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Simplex_for_RealsTemplates")
consts
  rel_of :: "le_rel => 'a => 'a => bool"
instantiation
  le_rel :: comm_monoid_add
  zero_le_rel == zero_class.zero :: le_rel
  plus_le_rel == plus :: le_rel => le_rel => le_rel
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.119s cpu time, 0.099s GC time
instantiation
  le_constraint :: (lrv) comm_monoid_add
  zero_le_constraint == zero_class.zero :: 'a le_constraint
  plus_le_constraint == plus ::
    'a le_constraint => 'a le_constraint => 'a le_constraint
Found termination order: "{}"
consts
  satisfiable_le_constraint :: "(nat => 'a) => 'a le_constraint => bool"
instantiation
  ns_constraint :: (scaleRat) scaleRat
  scaleRat_ns_constraint == scaleRat ::
    rat => 'a ns_constraint => 'a ns_constraint
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va. lec_of_nsc (GEQ_ns v va) = undefined
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale PivotUpdateMinVars
  fixes eq_idx_for_lvar :: "(nat * linear_poly) list => nat => nat"
    and min_lvar_not_in_bounds :: "('i, 'a) state => nat option"
    and
    min_rvar_incdec_eq ::
      "('i, 'a) Direction
       => ('i, 'a) state => nat * linear_poly => 'i list + nat"
    and
    pivot_and_update ::
      "nat => nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes
    "PivotUpdateMinVars eq_idx_for_lvar min_lvar_not_in_bounds
      min_rvar_incdec_eq pivot_and_update"
locale Update
  fixes update :: "nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes "Update update"
locale AssertAllState'''
  fixes init :: "(nat * linear_poly) list => ('i, 'a) state"
    and ass_bnd :: "'i * 'a atom => ('i, 'a) state => ('i, 'a) state"
    and chk :: "('i, 'a) state => ('i, 'a) state"
    and update :: "nat => 'a => ('i, 'a) state => ('i, 'a) state"
    and eq_idx_for_lvar :: "(nat * linear_poly) list => nat => nat"
    and min_lvar_not_in_bounds :: "('i, 'a) state => nat option"
    and
    min_rvar_incdec_eq ::
      "('i, 'a) Direction
       => ('i, 'a) state => nat * linear_poly => 'i list + nat"
    and
    pivot_and_update ::
      "nat => nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes
    "AssertAllState''' init ass_bnd chk update eq_idx_for_lvar
      min_lvar_not_in_bounds min_rvar_incdec_eq pivot_and_update"
locale AssertAllState'''
  fixes init :: "(nat * linear_poly) list => ('i, 'a) state"
    and ass_bnd :: "'i * 'a atom => ('i, 'a) state => ('i, 'a) state"
    and chk :: "('i, 'a) state => ('i, 'a) state"
    and update :: "nat => 'a => ('i, 'a) state => ('i, 'a) state"
    and eq_idx_for_lvar :: "(nat * linear_poly) list => nat => nat"
    and min_lvar_not_in_bounds :: "('i, 'a) state => nat option"
    and
    min_rvar_incdec_eq ::
      "('i, 'a) Direction
       => ('i, 'a) state => nat * linear_poly => 'i list + nat"
    and
    pivot_and_update ::
      "nat => nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes
    "AssertAllState''' init ass_bnd chk update eq_idx_for_lvar
      min_lvar_not_in_bounds min_rvar_incdec_eq pivot_and_update"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va. lec_of_constraint (GT v va) = undefined
### !!v va. lec_of_constraint (GEQ v va) = undefined
### !!v va. lec_of_constraint (EQ v va) = undefined
### (5 more)
Found termination order: "{}"
instantiation
  constraint :: scaleRat
  scaleRat_constraint == scaleRat :: rat => constraint => constraint
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Farkas"
### 1.809s elapsed time, 2.591s cpu time, 0.248s GC time
Loading theory "Draft.Simplex_for_Reals" (required by "Draft.Simplex_for_RealsTemplates")
instantiation
  real :: lrv
  scaleRat_real == scaleRat :: rat => real => real
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Simplex_for_Reals"
### 0.331s elapsed time, 0.343s cpu time, 0.000s GC time
Loading theory "Draft.Simplex_for_RealsTemplates"
val templateLemmas =
   [("Simplex_for_Reals.incremental_simplex_real",
     "checked_simplex ?cs {} (init_simplex ?cs)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Simplex_for_Reals.minimal_unsat_core_real_conv",
     "minimal_unsat_core_real ?I ?ics = minimal_unsat_core ?I ?ics",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Simplex_for_Reals.of_rat_val_constraint",
     "of_rat_val ?v \<Turnstile>\<^sub>c ?c = ?v \<Turnstile>\<^sub>c ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Simplex_for_Reals.of_rat_lec_sum",
     "of_rat_lec (sum_list ?c) = sum_list (map of_rat_lec ?c)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Simplex_for_Reals.of_rat_val_eval",
     "?p \<lbrace> of_rat_val ?v \<rbrace> =
      real_of_rat ?p \<lbrace> ?v \<rbrace>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Simplex_for_Reals.of_rat_lec_add",
     "of_rat_lec (?c + ?d) = of_rat_lec ?c + of_rat_lec ?d",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Simplex_for_Reals.sat_scale_rat_real",
     "?v \<Turnstile>\<^sub>c ?c ==> ?v \<Turnstile>\<^sub>c (?r *R ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Simplex_for_Reals.incremental_simplex_real",
     "checked_simplex ?cs ?J ?s ==> invariant_simplex ?cs ?J ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Simplex_for_Reals.lec_of_constraint_real",
     "is_le ?c ==>
      ?v \<Turnstile>\<^sub>l\<^sub>e of_rat_lec (lec_of_constraint ?c) =
      ?v \<Turnstile>\<^sub>c ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Simplex_for_Reals.of_rat_val_constraints",
     "of_rat_val ?v \<Turnstile>\<^sub>r\<^sub>c\<^sub>s ?cs =
      ?v \<Turnstile>\<^sub>c\<^sub>s ?cs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), t_empty),
       template_app
        (template_app (template_hole 3, template_var 1), t_empty))),
    ("Simplex_for_Reals.simplex_real",
     "simplex ?cs = Inr ?v ==>
      \<langle>?v\<rangle> \<Turnstile>\<^sub>c\<^sub>s set ?cs",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty)
           ))),
    ("Simplex_for_Reals.simplex_index_real",
     "simplex_index ?cs = Inr ?v ==>
      \<langle>?v\<rangle> \<Turnstile>\<^sub>c\<^sub>s (snd ` set ?cs)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 1))),
             t_empty)
           ))),
    ("Simplex_for_Reals.simplex_real",
     "simplex ?cs = Inl ?I ==>
      \<nexists>v. v \<Turnstile>\<^sub>r\<^sub>c\<^sub>s set ?cs",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_negation
        (template_predicate (template_app (template_hole 3, t_empty))))),
    ("Simplex_for_Reals.incremental_simplex_real",
     "[| invariant_simplex ?cs ?J ?s; check_simplex ?s = Inr ?s' |]
      ==> checked_simplex ?cs ?J ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Simplex_for_Reals.incremental_simplex_real",
     "[| checked_simplex ?cs ?J ?s; solution_simplex ?s = ?v |]
      ==> (?J, ?v) \<Turnstile>\<^sub>i\<^sub>c\<^sub>s set ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 3, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Simplex_for_Reals.incremental_simplex_real",
     "[| invariant_simplex ?cs ?J ?s; assert_simplex ?j ?s = Inr ?s' |]
      ==> invariant_simplex ?cs (insert ?j ?J) ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("Simplex_for_Reals.rat_real_conversion",
     "finite ?cs ==>
      (EX v. v \<Turnstile>\<^sub>c\<^sub>s ?cs) =
      (EX v. v \<Turnstile>\<^sub>r\<^sub>c\<^sub>s ?cs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 1, t_empty)))),
    ("Simplex_for_Reals.incremental_simplex_real",
     "[| invariant_simplex ?cs ?J ?s; assert_all_simplex ?K ?s = Inr ?s' |]
      ==> invariant_simplex ?cs (?J Un set ?K) ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 2),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Simplex_for_Reals.incremental_simplex_real",
     "[| invariant_simplex ?cs ?J ?s; check_simplex ?s = Inl ?I |]
      ==> set ?I <= ?J & minimal_unsat_core_real (set ?I) ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 0)),
               template_var 3))
           ))),
    ("Simplex_for_Reals.incremental_simplex_real",
     "[| invariant_simplex ?cs ?J ?s; assert_simplex ?j ?s = Inl ?I |]
      ==> set ?I <= insert ?j ?J & minimal_unsat_core_real (set ?I) ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 2),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0)),
               template_var 4))
           ))),
    ("Simplex_for_Reals.incremental_simplex_real",
     "[| invariant_simplex ?cs ?J ?s; assert_all_simplex ?K ?s = Inl ?I |]
      ==> set ?I <= set ?K Un ?J & minimal_unsat_core_real (set ?I) ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 2),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 2, template_var 1)),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 2, template_var 0)),
               template_var 4))
           ))),
    ("Simplex_for_Reals.incremental_simplex_real",
     "[| checked_simplex ?cs ?J ?s; checkpoint_simplex ?s = ?c;
         invariant_simplex ?cs ?K ?s'; backtrack_simplex ?c ?s' = ?s'';
         ?J <= ?K |]
      ==> invariant_simplex ?cs ?J ?s''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_hole 4, template_var 4), template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 1),
          template_var 0),
        template_inequation (less_equals, template_var 5, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 6),
               template_var 5),
             template_var 0)
           ))),
    ("Simplex_for_Reals.simplex_index_real",
     "simplex_index ?cs = Inl ?I ==>
      set ?I <= fst ` set ?cs &
      (\<nexists>v.
          (set ?I, v) \<Turnstile>\<^sub>r\<^sub>i\<^sub>c\<^sub>s
          set ?cs) &
      (distinct_indices ?cs -->
       (ALL J<set ?I.
           EX v. (J, v) \<Turnstile>\<^sub>i\<^sub>c\<^sub>s set ?cs))",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 1),
          template_app (template_hole 17, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app (template_hole 14, template_var 0)),
                 template_app
                  (template_app (template_hole 13, template_hole 12),
                   template_app (template_hole 11, template_var 1)))),
             template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, t_empty))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app (template_hole 4, t_empty))))
           ))),
    ("Simplex_for_Reals.simplex_real",
     "simplex ?cs = Inl ?I ==>
      set ?I <= {0..<length ?cs} &
      (\<nexists>v.
          v \<Turnstile>\<^sub>r\<^sub>c\<^sub>s {?cs ! i |i. i : set ?I}) &
      (ALL J<set ?I.
          EX v. v \<Turnstile>\<^sub>c\<^sub>s {?cs ! i |i. i : J})",
     template_implication
      ([template_equation
         (template_app (template_hole 21, template_var 1),
          template_app (template_hole 20, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 18,
                   template_app (template_hole 17, template_var 0)),
                 template_app
                  (template_app (template_hole 16, template_hole 15),
                   template_app (template_hole 14, template_var 1)))),
             template_app
              (template_app
                (template_hole 19,
                 template_app
                  (template_hole 13,
                   template_app (template_hole 12, t_empty))),
               template_app (template_hole 4, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.Simplex_for_RealsTemplates"
### 0.911s elapsed time, 1.364s cpu time, 0.479s GC time
val it = (): unit
