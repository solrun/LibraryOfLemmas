Loading theory "Draft.Farkas" (required by "Draft.Matrix_FarkasTemplates" via "Draft.Matrix_Farkas")
Loading theory "Draft.Templates" (required by "Draft.Matrix_FarkasTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Matrix_FarkasTemplates")
consts
  rel_of :: "le_rel => 'a => 'a => bool"
instantiation
  le_rel :: comm_monoid_add
  zero_le_rel == zero_class.zero :: le_rel
  plus_le_rel == plus :: le_rel => le_rel => le_rel
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.548s elapsed time, 1.136s cpu time, 0.111s GC time
instantiation
  le_constraint :: (lrv) comm_monoid_add
  zero_le_constraint == zero_class.zero :: 'a le_constraint
  plus_le_constraint == plus ::
    'a le_constraint => 'a le_constraint => 'a le_constraint
Found termination order: "{}"
consts
  satisfiable_le_constraint :: "(nat => 'a) => 'a le_constraint => bool"
instantiation
  ns_constraint :: (scaleRat) scaleRat
  scaleRat_ns_constraint == scaleRat ::
    rat => 'a ns_constraint => 'a ns_constraint
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va. lec_of_nsc (GEQ_ns v va) = undefined
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale PivotUpdateMinVars
  fixes eq_idx_for_lvar :: "(nat * linear_poly) list => nat => nat"
    and min_lvar_not_in_bounds :: "('i, 'a) state => nat option"
    and
    min_rvar_incdec_eq ::
      "('i, 'a) Direction
       => ('i, 'a) state => nat * linear_poly => 'i list + nat"
    and
    pivot_and_update ::
      "nat => nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes
    "PivotUpdateMinVars eq_idx_for_lvar min_lvar_not_in_bounds
      min_rvar_incdec_eq pivot_and_update"
locale Update
  fixes update :: "nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes "Update update"
locale AssertAllState'''
  fixes init :: "(nat * linear_poly) list => ('i, 'a) state"
    and ass_bnd :: "'i * 'a atom => ('i, 'a) state => ('i, 'a) state"
    and chk :: "('i, 'a) state => ('i, 'a) state"
    and update :: "nat => 'a => ('i, 'a) state => ('i, 'a) state"
    and eq_idx_for_lvar :: "(nat * linear_poly) list => nat => nat"
    and min_lvar_not_in_bounds :: "('i, 'a) state => nat option"
    and
    min_rvar_incdec_eq ::
      "('i, 'a) Direction
       => ('i, 'a) state => nat * linear_poly => 'i list + nat"
    and
    pivot_and_update ::
      "nat => nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes
    "AssertAllState''' init ass_bnd chk update eq_idx_for_lvar
      min_lvar_not_in_bounds min_rvar_incdec_eq pivot_and_update"
locale AssertAllState'''
  fixes init :: "(nat * linear_poly) list => ('i, 'a) state"
    and ass_bnd :: "'i * 'a atom => ('i, 'a) state => ('i, 'a) state"
    and chk :: "('i, 'a) state => ('i, 'a) state"
    and update :: "nat => 'a => ('i, 'a) state => ('i, 'a) state"
    and eq_idx_for_lvar :: "(nat * linear_poly) list => nat => nat"
    and min_lvar_not_in_bounds :: "('i, 'a) state => nat option"
    and
    min_rvar_incdec_eq ::
      "('i, 'a) Direction
       => ('i, 'a) state => nat * linear_poly => 'i list + nat"
    and
    pivot_and_update ::
      "nat => nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes
    "AssertAllState''' init ass_bnd chk update eq_idx_for_lvar
      min_lvar_not_in_bounds min_rvar_incdec_eq pivot_and_update"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va. lec_of_constraint (GT v va) = undefined
### !!v va. lec_of_constraint (GEQ v va) = undefined
### !!v va. lec_of_constraint (EQ v va) = undefined
### (5 more)
Found termination order: "{}"
instantiation
  constraint :: scaleRat
  scaleRat_constraint == scaleRat :: rat => constraint => constraint
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Farkas"
### 1.941s elapsed time, 2.760s cpu time, 0.288s GC time
Loading theory "Draft.Matrix_Farkas" (required by "Draft.Matrix_FarkasTemplates")
### theory "Draft.Matrix_Farkas"
### 0.716s elapsed time, 1.052s cpu time, 0.466s GC time
Loading theory "Draft.Matrix_FarkasTemplates"
val templateLemmas =
   [("Matrix_Farkas.finite_constraints_of_mat_vec",
     "finite (constraints_of_mat_vec ?A ?b)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Matrix_Farkas.vars_poly_of_vec",
     "vars (poly_of_vec ?v) <= {0..<dim_vec ?v}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Farkas.lec_rec_constraints_of_mat_vec",
     "lec_rel ` constraints_of_mat_vec ?A ?b <= {Leq_Rel}",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("Matrix_Farkas.valuate_poly_of_vec",
     "[| ?w : carrier_vec ?n; ?v : carrier_vec ?n |]
      ==> poly_of_vec ?v \<lbrace> val_of_vec ?w \<rbrace> =
          ?v \<bullet> ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Matrix_Farkas.constraints_of_mat_vec_solution",
     "[| ?A : carrier_mat ?nr ?nc; ?b : carrier_vec ?nr |]
      ==> (EX x:carrier_vec ?nc. ?A *\<^sub>v x <= ?b) =
          (EX v. ALL c:constraints_of_mat_vec ?A ?b.
                    v \<Turnstile>\<^sub>l\<^sub>e c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app (template_hole 8, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 8, template_var 1)),
           t_empty),
         template_app (template_hole 3, t_empty)))),
    ("Matrix_Farkas.constraints_of_mat_vec_solution_1",
     "[| ?A : carrier_mat ?nr ?nc; ?b : carrier_vec ?nr;
         EX x:carrier_vec ?nc. ?A *\<^sub>v x <= ?b |]
      ==> EX v. ALL c:constraints_of_mat_vec ?A ?b.
                   v \<Turnstile>\<^sub>l\<^sub>e c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 7, template_var 1)),
              t_empty)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Matrix_Farkas.constraints_of_mat_vec_solution_2",
     "[| ?A : carrier_mat ?nr ?nc; ?b : carrier_vec ?nr;
         EX v. ALL c:constraints_of_mat_vec ?A ?b.
                  v \<Turnstile>\<^sub>l\<^sub>e c |]
      ==> EX x:carrier_vec ?nc. ?A *\<^sub>v x <= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 7, template_var 1)),
             t_empty)
           ))),
    ("Matrix_Farkas.constraints_of_mat_vec_solution_main",
     "[| ?A : carrier_mat ?nr ?nc; ?x : carrier_vec ?nc;
         ?b : carrier_vec ?nr; ?A *\<^sub>v ?x <= ?b;
         ?c : constraints_of_mat_vec ?A ?b |]
      ==> val_of_vec ?x \<Turnstile>\<^sub>l\<^sub>e ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 4))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 5), template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("Matrix_Farkas.farkas_lemma_matrix",
     "[| ?A : carrier_mat ?nr ?nc; ?b : carrier_vec ?nr |]
      ==> (EX x:carrier_vec ?nc. ?A *\<^sub>v x <= ?b) =
          (ALL y>=0\<^sub>v ?nr.
              mat_of_row y * ?A = 0\<^sub>m 1 ?nc --> 0 <= y \<bullet> ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_app
               (template_app (template_hole 17, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 0),
              template_app (template_hole 15, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app (template_hole 15, template_var 1)),
           t_empty),
         template_app (template_hole 10, t_empty)))),
    ("Matrix_Farkas.farkas_lemma_matrix'",
     "[| ?A : carrier_mat ?nr ?nc; ?b : carrier_vec ?nr |]
      ==> (EX x>=0\<^sub>v ?nc. ?A *\<^sub>v x = ?b) =
          (ALL y:carrier_vec ?nr.
              0\<^sub>m 1 ?nc <= mat_of_row y * ?A -->
              0 <= y \<bullet> ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 3),
              template_app
               (template_app (template_hole 19, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 0),
              template_app (template_hole 17, template_var 2))
            )],
       template_equation
        (template_app (template_hole 15, t_empty),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 17, template_var 2)),
           t_empty))))]:
   (string * thm * template) list
### theory "Draft.Matrix_FarkasTemplates"
### 0.994s elapsed time, 1.200s cpu time, 0.141s GC time
val it = (): unit
