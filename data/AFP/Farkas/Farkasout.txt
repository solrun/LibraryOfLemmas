Loading theory "Draft.Templates" (required by "Draft.FarkasTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Farkas" (required by "Draft.FarkasTemplates")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.164s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FarkasTemplates")
consts
  rel_of :: "le_rel => 'a => 'a => bool"
instantiation
  le_rel :: comm_monoid_add
  zero_le_rel == zero_class.zero :: le_rel
  plus_le_rel == plus :: le_rel => le_rel => le_rel
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.134s cpu time, 0.102s GC time
instantiation
  le_constraint :: (lrv) comm_monoid_add
  zero_le_constraint == zero_class.zero :: 'a le_constraint
  plus_le_constraint == plus ::
    'a le_constraint => 'a le_constraint => 'a le_constraint
Found termination order: "{}"
consts
  satisfiable_le_constraint :: "(nat => 'a) => 'a le_constraint => bool"
instantiation
  ns_constraint :: (scaleRat) scaleRat
  scaleRat_ns_constraint == scaleRat ::
    rat => 'a ns_constraint => 'a ns_constraint
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va. lec_of_nsc (GEQ_ns v va) = undefined
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale PivotUpdateMinVars
  fixes eq_idx_for_lvar :: "(nat * linear_poly) list => nat => nat"
    and min_lvar_not_in_bounds :: "('i, 'a) state => nat option"
    and
    min_rvar_incdec_eq ::
      "('i, 'a) Direction
       => ('i, 'a) state => nat * linear_poly => 'i list + nat"
    and
    pivot_and_update ::
      "nat => nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes
    "PivotUpdateMinVars eq_idx_for_lvar min_lvar_not_in_bounds
      min_rvar_incdec_eq pivot_and_update"
locale Update
  fixes update :: "nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes "Update update"
locale AssertAllState'''
  fixes init :: "(nat * linear_poly) list => ('i, 'a) state"
    and ass_bnd :: "'i * 'a atom => ('i, 'a) state => ('i, 'a) state"
    and chk :: "('i, 'a) state => ('i, 'a) state"
    and update :: "nat => 'a => ('i, 'a) state => ('i, 'a) state"
    and eq_idx_for_lvar :: "(nat * linear_poly) list => nat => nat"
    and min_lvar_not_in_bounds :: "('i, 'a) state => nat option"
    and
    min_rvar_incdec_eq ::
      "('i, 'a) Direction
       => ('i, 'a) state => nat * linear_poly => 'i list + nat"
    and
    pivot_and_update ::
      "nat => nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes
    "AssertAllState''' init ass_bnd chk update eq_idx_for_lvar
      min_lvar_not_in_bounds min_rvar_incdec_eq pivot_and_update"
locale AssertAllState'''
  fixes init :: "(nat * linear_poly) list => ('i, 'a) state"
    and ass_bnd :: "'i * 'a atom => ('i, 'a) state => ('i, 'a) state"
    and chk :: "('i, 'a) state => ('i, 'a) state"
    and update :: "nat => 'a => ('i, 'a) state => ('i, 'a) state"
    and eq_idx_for_lvar :: "(nat * linear_poly) list => nat => nat"
    and min_lvar_not_in_bounds :: "('i, 'a) state => nat option"
    and
    min_rvar_incdec_eq ::
      "('i, 'a) Direction
       => ('i, 'a) state => nat * linear_poly => 'i list + nat"
    and
    pivot_and_update ::
      "nat => nat => 'a => ('i, 'a) state => ('i, 'a) state"
  assumes
    "AssertAllState''' init ass_bnd chk update eq_idx_for_lvar
      min_lvar_not_in_bounds min_rvar_incdec_eq pivot_and_update"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!v va. lec_of_constraint (GT v va) = undefined
### !!v va. lec_of_constraint (GEQ v va) = undefined
### !!v va. lec_of_constraint (EQ v va) = undefined
### (5 more)
Found termination order: "{}"
instantiation
  constraint :: scaleRat
  scaleRat_constraint == scaleRat :: rat => constraint => constraint
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Farkas"
### 1.927s elapsed time, 2.735s cpu time, 0.266s GC time
Loading theory "Draft.FarkasTemplates"
val templateLemmas =
   [("Farkas.satisfies_zero_le_constraint",
     "?v \<Turnstile>\<^sub>l\<^sub>e 0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Farkas.subst_poly_lec_0", "subst_poly_lec ?\<sigma> 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Farkas.subst_poly_0", "subst_poly ?\<sigma> 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Farkas.nsc_of_atom",
     "?v \<Turnstile>\<^sub>n\<^sub>s nsc_of_atom ?a =
      ?v \<Turnstile>\<^sub>a ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Farkas.subst_poly_lec_sum_list",
     "subst_poly_lec ?\<sigma> (sum_list ?ps) =
      sum_list (map (subst_poly_lec ?\<sigma>) ?ps)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Farkas.subst_poly_lp_monom",
     "subst_poly ?\<sigma> (lp_monom ?r ?x) = ?r *R ?\<sigma> ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Farkas.sat_scale_rat_ns",
     "?v \<Turnstile>\<^sub>n\<^sub>s ?ns ==>
      ?v \<Turnstile>\<^sub>n\<^sub>s (?f *R ?ns)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Farkas.sat_scale_rat",
     "?v \<Turnstile>\<^sub>c ?c ==> ?v \<Turnstile>\<^sub>c (?r *R ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Farkas.subst_poly_scaleRat",
     "subst_poly ?\<sigma> (?r *R ?p) = ?r *R subst_poly ?\<sigma> ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Farkas.lec_of_constraint",
     "is_le ?c ==>
      ?v \<Turnstile>\<^sub>l\<^sub>e lec_of_constraint ?c =
      ?v \<Turnstile>\<^sub>c ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Farkas.lec_of_nsc",
     "is_leq_ns ?c ==>
      ?v \<Turnstile>\<^sub>l\<^sub>e lec_of_nsc ?c =
      ?v \<Turnstile>\<^sub>n\<^sub>s ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Farkas.valuate_subst_poly",
     "subst_poly ?\<sigma> ?p \<lbrace> ?v \<rbrace> =
      ?p \<lbrace> %x. ?\<sigma> x \<lbrace> ?v \<rbrace> \<rbrace>",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("Farkas.subst_poly_lec_add",
     "subst_poly_lec ?\<sigma> (?c1.0 + ?c2.0) =
      subst_poly_lec ?\<sigma> ?c1.0 + subst_poly_lec ?\<sigma> ?c2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Farkas.subst_poly_add",
     "subst_poly ?\<sigma> (?p + ?q) =
      subst_poly ?\<sigma> ?p + subst_poly ?\<sigma> ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Farkas.farkas_coefficients_unsat",
     "farkas_coefficients ?cs ?C ==>
      \<nexists>v. v \<Turnstile>\<^sub>c\<^sub>s ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("Farkas.farkas_coefficients_ns_unsat",
     "farkas_coefficients_ns ?ns ?C ==>
      \<nexists>v. v \<Turnstile>\<^sub>n\<^sub>s\<^sub>s  ?ns",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_predicate (template_app (template_hole 2, t_empty))))),
    ("Farkas.Tableau_is_monom_preprocess'",
     "(?x, ?p) : set (Tableau (preprocess' ?cs ?start)) ==> ~ is_monom ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 2))
           ))),
    ("Farkas.satisfies_sum_le_constraints",
     "[| ?v \<Turnstile>\<^sub>l\<^sub>e ?c;
         ?v \<Turnstile>\<^sub>l\<^sub>e ?d |]
      ==> ?v \<Turnstile>\<^sub>l\<^sub>e (?c + ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Farkas.farkas_coefficients_atoms_tableau_mono",
     "[| ?as <= ?bs; farkas_coefficients_atoms_tableau ?as ?t ?C |]
      ==> farkas_coefficients_atoms_tableau ?bs ?t ?C",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Farkas.sum_list_lec",
     "sum_list ?ls =
      Le_Constraint (sum_list (map lec_rel ?ls))
       (sum_list (map lec_poly ?ls)) (sum_list (map lec_const ?ls))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 0))),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Farkas.farkas_coefficients_atoms_tableau_unsat",
     "farkas_coefficients_atoms_tableau ?as ?t ?C ==>
      \<nexists>v.
         v \<Turnstile>\<^sub>t ?t & v \<Turnstile>\<^sub>a\<^sub>s ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_predicate (template_app (template_hole 3, t_empty))))),
    ("Farkas.preprocess'_unsat_index_farkas_coefficients_ns",
     "?i : set (UnsatIndices (preprocess' ?ns ?j)) ==>
      EX C. farkas_coefficients_ns (snd ` set ?ns) C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Farkas.satisfies_sumlist_le_constraints",
     "(!!c. c : set ?cs ==> ?v \<Turnstile>\<^sub>l\<^sub>e c) ==>
      ?v \<Turnstile>\<^sub>l\<^sub>e sum_list ?cs",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Farkas.compatible_cs_plus",
     "[| compatible_cs ?c1.0 ?d1.0; compatible_cs ?c2.0 ?d2.0 |]
      ==> compatible_cs (?c1.0 + ?c2.0) (?d1.0 + ?d2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Farkas.sum_list_Leq_Rel",
     "((SUM x<-?C. lec_rel (?f x)) = Leq_Rel) =
      (ALL x:set ?C. lec_rel (?f x) = Leq_Rel)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 0))),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Farkas.farkas_coefficients",
     "finite ?cs ==>
      (EX C. farkas_coefficients ?cs C) =
      (\<nexists>v. v \<Turnstile>\<^sub>c\<^sub>s ?cs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, t_empty),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Farkas.farkas_coefficients_ns",
     "finite ?ns ==>
      (EX C. farkas_coefficients_ns ?ns C) =
      (\<nexists>v. v \<Turnstile>\<^sub>n\<^sub>s\<^sub>s  ?ns)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, t_empty),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Farkas.sum_list_map_filter_sum",
     "sum_list (map ?f (filter ?g ?xs)) +
      sum_list (map ?f (filter (Not o ?g) ?xs)) =
      sum_list (map ?f ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 0)))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Farkas.monom_of_atom_coeff",
     "[| is_monom (poly ?ns); ?a = qdelta_constraint_to_atom ?ns ?v |]
      ==> monom_coeff (poly ?ns) *R nsc_of_atom ?a = ?ns",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 6, template_var 2))),
           template_app (template_hole 0, template_var 1)),
         template_var 2))),
    ("Farkas.unsat_farkas_coefficients",
     "[| \<nexists>v. v \<Turnstile>\<^sub>c\<^sub>s ?cs; finite ?cs |]
      ==> EX C. farkas_coefficients ?cs C",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 5, t_empty))),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Farkas.scaleRat_scaleRat_ns_constraint",
     "(?a ~= 0 ==> ?b ~= 0) ==> ?a *R ?b *R ?c = (?a * ?b) *R ?c",
     template_implication
      ([template_implication
         ([template_negation
            (template_equation (template_var 2, template_hole 3))],
          template_negation
           (template_equation (template_var 1, template_hole 3)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Farkas.farkas_coefficients_atoms_tableau",
     "[| \<triangle> ?t; finite ?as |]
      ==> (EX C. farkas_coefficients_atoms_tableau ?as ?t C) =
          (\<nexists>v.
              v \<Turnstile>\<^sub>t ?t &
              v \<Turnstile>\<^sub>a\<^sub>s ?as)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app (template_hole 6, t_empty),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Farkas.preprocess'_unsat_indexD",
     "?i : set (UnsatIndices (preprocess' ?ns ?j)) ==>
      EX c. poly c = 0 & ~ zero_satisfies c & (?i, c) : set ?ns",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Farkas.farkas_coefficients_preprocess'",
     "[| preprocess' ?cs (start_fresh_variable ?cs) = ?S;
         farkas_coefficients_atoms_tableau (snd ` set (Atoms ?S))
          (Tableau ?S) ?C |]
      ==> EX C. farkas_coefficients_ns (snd ` set ?cs) C",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 2),
            template_app (template_hole 11, template_var 2)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 1)))),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Farkas.preprocess'_atoms_to_constraints'",
     "preprocess' ?cs ?start = ?S ==>
      set (Atoms ?S)
      <= {(i, qdelta_constraint_to_atom c v) |i c v.
          (i, c) : set ?cs &
          (~ is_monom (poly c) --> Poly_Mapping ?S (poly c) = Some v)}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 21, template_var 2),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 19,
           template_app (template_hole 18, template_var 0)),
         template_app (template_hole 17, t_empty)))),
    ("Farkas.Farkas'_Lemma_set_sum",
     "[| lec_rel ` ?cs <= {Leq_Rel}; finite ?cs |]
      ==> (\<nexists>v. ALL c:?cs. v \<Turnstile>\<^sub>l\<^sub>e c) =
          (EX C const.
              (ALL c:?cs. 0 <= C c) &
              (SUM c:?cs.
                  Le_Constraint Leq_Rel (C c *R lec_poly c)
                   (C c *R lec_const c)) =
              Le_Constraint Leq_Rel 0 const &
              const < 0)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 24, template_hole 23),
            template_var 0),
          template_app
           (template_app (template_hole 22, template_hole 21),
            template_hole 20)),
        template_predicate
         (template_app (template_hole 19, template_var 0))],
       template_equation
        (template_app
          (template_hole 17, template_app (template_hole 16, t_empty)),
         template_app (template_hole 13, t_empty)))),
    ("Farkas.Farkas'_Lemma_indexed",
     "[| lec_rel ` ?c ` ?Is <= {Leq_Rel}; finite ?Is |]
      ==> (\<nexists>v. ALL i:?Is. v \<Turnstile>\<^sub>l\<^sub>e ?c i) =
          (EX C const.
              (ALL i:?Is. 0 <= C i) &
              (SUM i:?Is.
                  Le_Constraint Leq_Rel (C i *R lec_poly (?c i))
                   (C i *R lec_const (?c i))) =
              Le_Constraint Leq_Rel 0 const &
              const < 0)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 24, template_hole 23),
            template_app
             (template_app (template_hole 22, template_var 1),
              template_var 0)),
          template_app
           (template_app (template_hole 21, template_hole 20),
            template_hole 19)),
        template_predicate
         (template_app (template_hole 18, template_var 0))],
       template_equation
        (template_app
          (template_hole 16, template_app (template_hole 15, t_empty)),
         template_app (template_hole 15, t_empty)))),
    ("Farkas.Farkas'_Lemma",
     "[| lec_rel ` ?cs <= {Leq_Rel}; finite ?cs |]
      ==> (\<nexists>v. ALL c:?cs. v \<Turnstile>\<^sub>l\<^sub>e c) =
          (EX C const.
              (ALL (r, c):set C. 0 < r & c : ?cs) &
              (SUM (r,
                  c)<-C. Le_Constraint Leq_Rel (r *R lec_poly c)
                          (r *R lec_const c)) =
              Le_Constraint Leq_Rel 0 const &
              const < 0)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 29, template_hole 28),
            template_var 0),
          template_app
           (template_app (template_hole 27, template_hole 26),
            template_hole 25)),
        template_predicate
         (template_app (template_hole 24, template_var 0))],
       template_equation
        (template_app
          (template_hole 22, template_app (template_hole 21, t_empty)),
         template_app (template_hole 18, t_empty)))),
    ("Farkas.Farkas'_Lemma_Delta_Rationals",
     "[| lec_rel ` ?cs <= {Leq_Rel}; finite ?cs |]
      ==> (\<nexists>v. ALL c:?cs. v \<Turnstile>\<^sub>l\<^sub>e c) =
          (EX C const.
              (ALL (r, c):set C. 0 < r & c : ?cs) &
              (SUM (r,
                  c)<-C. Le_Constraint Leq_Rel (r *R lec_poly c)
                          (r *R lec_const c)) =
              Le_Constraint Leq_Rel 0 const &
              const < 0)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 31, template_hole 30),
            template_var 0),
          template_app
           (template_app (template_hole 29, template_hole 28),
            template_hole 27)),
        template_predicate
         (template_app (template_hole 26, template_var 0))],
       template_equation
        (template_app
          (template_hole 24, template_app (template_hole 23, t_empty)),
         template_app (template_hole 20, t_empty)))),
    ("Farkas.Motzkin's_transposition_theorem",
     "finite ?cs ==>
      (\<nexists>v. ALL c:?cs. v \<Turnstile>\<^sub>l\<^sub>e c) =
      (EX C const rel.
          (ALL (r, c):set C. 0 < r & c : ?cs) &
          (SUM (r,
              c)<-C. Le_Constraint (lec_rel c) (r *R lec_poly c)
                      (r *R lec_const c)) =
          Le_Constraint rel 0 const &
          (rel = Leq_Rel & const < 0 | rel = Lt_Rel & const <= 0))",
     template_implication
      ([template_predicate
         (template_app (template_hole 31, template_var 0))],
       template_equation
        (template_app
          (template_hole 29, template_app (template_hole 28, t_empty)),
         template_app (template_hole 25, t_empty)))),
    ("Farkas.preprocess'_atoms_to_constraints",
     "[| preprocess' ?cs ?start = ?S; ?start = start_fresh_variable ?cs;
         ?ns = (case ?a of Leq v c => LEQ_ns ?q c | Geq v c => GEQ_ns ?q c);
         ?a : snd ` set (Atoms ?S) |]
      ==> (atom_var ?a ~: fst ` set (Tableau ?S) -->
           (EX r. r ~= 0 & r *R nsc_of_atom ?a : snd ` set ?cs)) &
          ((atom_var ?a, ?q) : set (Tableau ?S) --> ?ns : snd ` set ?cs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 31, template_var 5),
            template_var 4),
          template_var 3),
        template_equation
         (template_var 4, template_app (template_hole 29, template_var 5)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_app (template_hole 27, t_empty), t_empty),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 0),
              template_app
               (template_app (template_hole 23, template_hole 22),
                template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_hole 17,
                     template_app
                      (template_app
                        (template_hole 16,
                         template_app (template_hole 15, template_var 0)),
                       template_app
                        (template_app (template_hole 14, template_hole 13),
                         template_app
                          (template_hole 12,
                           template_app
                            (template_hole 11, template_var 3)))))),
                 template_app (template_hole 10, t_empty))),
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 15, template_var 0)),
                       template_var 1)),
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_var 3)))),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 2, template_var 5)))))
           )))]:
   (string * thm * template) list
### theory "Draft.FarkasTemplates"
### 0.872s elapsed time, 1.385s cpu time, 0.531s GC time
val it = (): unit
