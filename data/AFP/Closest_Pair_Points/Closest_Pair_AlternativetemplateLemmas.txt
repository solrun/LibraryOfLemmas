   [("Closest_Pair_Alternative.closest_pair_recurrence_nonneg",
     "0 <= closest_pair_recurrence ?n",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Closest_Pair_Alternative.closest_pair_code_eq",
     "closest_pair ?ps = closest_pair_code ?ps",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Closest_Pair_Alternative.closest_pair_rec_eq_val_closest_pair_rec_tm",
     "Time_Monad.val (closest_pair_rec_tm ?xs) = closest_pair_rec ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Closest_Pair_Alternative.closest_pair_eq_val_closest_pair_tm",
     "Time_Monad.val (closest_pair_tm ?ps) = closest_pair ?ps",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Closest_Pair_Alternative.time_closest_pair_rec_conv_closest_pair_recurrence",
     "real (time (closest_pair_rec_tm ?ps))
      <= closest_pair_recurrence (length ?ps)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Closest_Pair_Alternative.time_closest_pair_conv_closest_pair_recurrence",
     "real (time (closest_pair_tm ?ps)) <= closest_pair_time (length ?ps)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Closest_Pair_Alternative.find_closest_pair_eq_val_find_closest_pair_tm",
     "Time_Monad.val (find_closest_pair_tm (?c\<^sub>0, ?c\<^sub>1) ?ps) =
      find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Closest_Pair_Alternative.closest_pair_rec_distinct",
     "[| distinct ?xs; (?ys, ?p) = closest_pair_rec ?xs |]
      ==> distinct ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app (template_hole 0, template_var 2))],
       template_predicate
        (template_app (template_hole 3, template_var 1)))),
    ("Closest_Pair_Alternative.time_find_closest_pair_tm",
     "time (find_closest_pair_tm (?c\<^sub>0, ?c\<^sub>1) ?ps)
      <= 17 * length ?ps + 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 10,
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 3, template_hole 2)))))),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Closest_Pair_Alternative.combine_eq_val_combine_tm",
     "Time_Monad.val
       (combine_tm (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
         (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps) =
      combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
       (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Closest_Pair_Alternative.closest_pair_simps",
     "1 < length ?ps ==>
      closest_pair ?ps =
      (let (uu_, c\<^sub>0, c\<^sub>1) =
             closest_pair_rec (mergesort fst ?ps)
       in (c\<^sub>0, c\<^sub>1))",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 0))),
           template_app (template_hole 2, t_empty))))),
    ("Closest_Pair_Alternative.closest_pair_rec_set_length_sorted_snd",
     "(?ys, ?p) = closest_pair_rec ?xs ==>
      set ?ys = set ?xs & length ?ys = length ?xs & sorted_snd ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Closest_Pair_Alternative.closest_pair_c0_c1",
     "[| 1 < length ?ps; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) = closest_pair ?ps |]
      ==> ?c\<^sub>0 ~= ?c\<^sub>1",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Closest_Pair_Alternative.closest_pair_c0_c1",
     "[| 1 < length ?ps; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) = closest_pair ?ps |]
      ==> ?c\<^sub>0 : set ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Closest_Pair_Alternative.closest_pair_c0_c1",
     "[| 1 < length ?ps; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) = closest_pair ?ps |]
      ==> ?c\<^sub>1 : set ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Closest_Pair_Alternative.closest_pair_rec_code_dist_eq",
     "[| 1 < length ?xs;
         (?ys, ?\<delta>, ?c\<^sub>0, ?c\<^sub>1) =
         closest_pair_rec_code ?xs |]
      ==> ?\<delta> = dist_code ?c\<^sub>0 ?c\<^sub>1",
     template_implication
      ([template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 7, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))),
          template_app (template_hole 2, template_var 4))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Closest_Pair_Alternative.time_combine_tm",
     "time
       (combine_tm (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
         (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps)
      <= 3 + 18 * length ?ps",
     template_inequation
      (less_equals,
       template_app
        (template_hole 9,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 5),
                   template_var 4)),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 1, template_hole 3)))))),
           template_app (template_hole 0, template_var 0))))),
    ("Closest_Pair_Alternative.find_closest_pair_c0_ne_c1",
     "[| ?c\<^sub>0 ~= ?c\<^sub>1; distinct ?ps;
         (?C\<^sub>0, ?C\<^sub>1) =
         find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps |]
      ==> ?C\<^sub>0 ~= ?C\<^sub>1",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3)),
            template_var 2))],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Closest_Pair_Alternative.time_closest_pair_rec_tm_simps_1",
     "length ?xs <= 3 ==>
      time (closest_pair_rec_tm ?xs) =
      1 + time (length_tm ?xs) + time (mergesort_tm snd ?xs) +
      time (closest_pair_bf_tm ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)))],
       template_equation
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0)))),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Closest_Pair_Alternative.find_closest_pair_code_dist_eq",
     "[| ?\<delta> = dist_code ?c\<^sub>0 ?c\<^sub>1;
         (?\<Delta>, ?C\<^sub>0, ?C\<^sub>1) =
         find_closest_pair_code (?\<delta>, ?c\<^sub>0, ?c\<^sub>1) ?ps |]
      ==> ?\<Delta> = dist_code ?C\<^sub>0 ?C\<^sub>1",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 4, template_var 5),
            template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 2, template_var 6),
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4))),
            template_var 0))],
       template_equation
        (template_var 3,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 1)))),
    ("Closest_Pair_Alternative.find_closest_pair_set",
     "(?C\<^sub>0, ?C\<^sub>1) =
      find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps ==>
      ?C\<^sub>0 : set ?ps & ?C\<^sub>1 : set ?ps |
      ?C\<^sub>0 = ?c\<^sub>0 & ?C\<^sub>1 = ?c\<^sub>1",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1)),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_app (template_hole 1, template_var 0))),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)))
           ))),
    ("Closest_Pair_Alternative.closest_pair_rec_ys_eq",
     "[| 1 < length ?xs;
         (?ys, ?c\<^sub>0, ?c\<^sub>1) = closest_pair_rec ?xs;
         (?ys', ?\<delta>', ?c\<^sub>0', ?c\<^sub>1') =
         closest_pair_rec_code ?xs |]
      ==> ?ys = ?ys'",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 6),
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4)),
          template_app (template_hole 5, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))),
          template_app (template_hole 1, template_var 7))],
       template_equation (template_var 6, template_var 3))),
    ("Closest_Pair_Alternative.closest_pair_rec_c0_c1",
     "[| 1 < length ?xs; distinct ?xs;
         (?ys, ?c\<^sub>0, ?c\<^sub>1) = closest_pair_rec ?xs |]
      ==> ?c\<^sub>0 : set ?xs &
          ?c\<^sub>1 : set ?xs & ?c\<^sub>0 ~= ?c\<^sub>1",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app (template_hole 5, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_var 3))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 2, template_var 3))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("Closest_Pair_Alternative.closest_pair_rec_code_eq",
     "[| 1 < length ?xs;
         (?ys, ?c\<^sub>0, ?c\<^sub>1) = closest_pair_rec ?xs;
         (?ys', ?\<delta>', ?c\<^sub>0', ?c\<^sub>1') =
         closest_pair_rec_code ?xs |]
      ==> ?c\<^sub>0 = ?c\<^sub>0' & ?c\<^sub>1 = ?c\<^sub>1'",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 6),
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 4)),
          template_app (template_hole 6, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))),
          template_app (template_hole 2, template_var 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("Closest_Pair_Alternative.combine_c0_ne_c1",
     "[| ?p\<^sub>0\<^sub>L ~= ?p\<^sub>1\<^sub>L;
         ?p\<^sub>0\<^sub>R ~= ?p\<^sub>1\<^sub>R; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) =
         combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps |]
      ==> ?c\<^sub>0 ~= ?c\<^sub>1",
     template_implication
      ([template_negation
         (template_equation (template_var 7, template_var 6)),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 1, template_var 7),
                    template_var 6)),
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4)),
              template_var 0),
            template_var 3))],
       template_negation
        (template_equation (template_var 2, template_var 1)))),
    ("Closest_Pair_Alternative.combine_set",
     "(?c\<^sub>0, ?c\<^sub>1) =
      combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
       (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps ==>
      ?c\<^sub>0 : set ?ps & ?c\<^sub>1 : set ?ps |
      ?c\<^sub>0 = ?p\<^sub>0\<^sub>L & ?c\<^sub>1 = ?p\<^sub>1\<^sub>L |
      ?c\<^sub>0 = ?p\<^sub>0\<^sub>R & ?c\<^sub>1 = ?p\<^sub>1\<^sub>R",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 7), template_var 6),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4)),
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 7),
                     template_app (template_hole 1, template_var 0))),
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 7),
                       template_var 5)),
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 4))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 2))))
           ))),
    ("Closest_Pair_Alternative.closest_pair_dist",
     "[| 1 < length ?ps; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) = closest_pair ?ps |]
      ==> sparse
           (dist
             (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)))
           (set ?ps)",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, t_empty),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 0))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Closest_Pair_Alternative.combine_code_dist_eq",
     "[| ?\<delta>\<^sub>L =
         dist_code ?p\<^sub>0\<^sub>L ?p\<^sub>1\<^sub>L;
         ?\<delta>\<^sub>R =
         dist_code ?p\<^sub>0\<^sub>R ?p\<^sub>1\<^sub>R;
         (?\<delta>, ?c\<^sub>0, ?c\<^sub>1) =
         combine_code
          (?\<delta>\<^sub>L, ?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?\<delta>\<^sub>R, ?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l
          ?ps |]
      ==> ?\<delta> = dist_code ?c\<^sub>0 ?c\<^sub>1",
     template_implication
      ([template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 4, template_var 9),
            template_var 8)),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 4, template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4),
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 2, template_var 10),
                    template_app
                     (template_app (template_hole 1, template_var 9),
                      template_var 8))),
                template_app
                 (template_app (template_hole 2, template_var 7),
                  template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 5))),
              template_var 1),
            template_var 0))],
       template_equation
        (template_var 4,
         template_app
          (template_app (template_hole 4, template_var 3),
           template_var 2)))),
    ("Closest_Pair_Alternative.closest_pair_rec_dist",
     "[| 1 < length ?xs; distinct ?xs; sorted_fst ?xs;
         (?ys, ?c\<^sub>0, ?c\<^sub>1) = closest_pair_rec ?xs |]
      ==> sparse
           (dist
             (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)))
           (set ?xs)",
     template_implication
      ([template_inequation
         (less_than, template_hole 13,
          template_app (template_hole 12, template_var 3)),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)),
          template_app (template_hole 6, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, t_empty),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 0))),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Closest_Pair_Alternative.find_closest_pair_dist_mono",
     "(?C\<^sub>0, ?C\<^sub>1) =
      find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps ==>
      dist (case ?C\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
       (case ?C\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
      <= dist (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1)),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 4)),
           template_app
            (template_app (template_hole 2, t_empty), template_var 3)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 2, t_empty), template_var 1))))),
    ("Closest_Pair_Alternative.combine_code_eq",
     "[| ?\<delta>\<^sub>L' =
         dist_code ?p\<^sub>0\<^sub>L ?p\<^sub>1\<^sub>L;
         ?\<delta>\<^sub>R' =
         dist_code ?p\<^sub>0\<^sub>R ?p\<^sub>1\<^sub>R;
         (?c\<^sub>0, ?c\<^sub>1) =
         combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps;
         (?\<delta>', ?c\<^sub>0', ?c\<^sub>1') =
         combine_code
          (?\<delta>\<^sub>L', ?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?\<delta>\<^sub>R', ?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l
          ?ps |]
      ==> ?c\<^sub>0 = ?c\<^sub>0' & ?c\<^sub>1 = ?c\<^sub>1'",
     template_implication
      ([template_equation
         (template_var 12,
          template_app
           (template_app (template_hole 8, template_var 11),
            template_var 10)),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 8, template_var 8),
            template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 6), template_var 5),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 6, template_var 11),
                    template_var 10)),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_var 7)),
              template_var 4),
            template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 3, template_var 12),
                    template_app
                     (template_app (template_hole 6, template_var 11),
                      template_var 10))),
                template_app
                 (template_app (template_hole 3, template_var 9),
                  template_app
                   (template_app (template_hole 6, template_var 8),
                    template_var 7))),
              template_var 4),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 0))
           ))),
    ("Closest_Pair_Alternative.closest_pair_rec_code_simps",
     "[| ?n = length ?xs; ~ ?n <= 3 |]
      ==> closest_pair_rec_code ?xs =
          (let (xs\<^sub>L, xs\<^sub>R) = split_at (?n div 2) ?xs;
               l = fst (hd xs\<^sub>R);
               (ys\<^sub>L, p\<^sub>L) = closest_pair_rec_code xs\<^sub>L;
               (ys\<^sub>R, p\<^sub>R) = closest_pair_rec_code xs\<^sub>R;
               ys = Common.merge snd ys\<^sub>L ys\<^sub>R
           in (ys, combine_code p\<^sub>L p\<^sub>R l ys))",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 22, template_var 0)),
        template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_hole 19,
                template_app (template_hole 18, template_hole 17)))
            )],
       template_equation
        (template_app (template_hole 15, template_var 0),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 1),
                   template_app
                    (template_hole 19,
                     template_app (template_hole 11, template_hole 17)))),
               template_var 0)),
           template_app (template_hole 10, t_empty))))),
    ("Closest_Pair_Alternative.closest_pair_rec_simps",
     "[| ?n = length ?xs; ~ ?n <= 3 |]
      ==> closest_pair_rec ?xs =
          (let (xs\<^sub>L, xs\<^sub>R) = split_at (?n div 2) ?xs;
               (ys\<^sub>L, p\<^sub>0\<^sub>L, p\<^sub>1\<^sub>L) =
                 closest_pair_rec xs\<^sub>L;
               (ys\<^sub>R, p\<^sub>0\<^sub>R, p\<^sub>1\<^sub>R) =
                 closest_pair_rec xs\<^sub>R;
               ys = Common.merge snd ys\<^sub>L ys\<^sub>R
           in (ys,
               combine (p\<^sub>0\<^sub>L, p\<^sub>1\<^sub>L)
                (p\<^sub>0\<^sub>R, p\<^sub>1\<^sub>R) (fst (hd xs\<^sub>R))
                ys))",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 23, template_var 0)),
        template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_hole 20,
                template_app (template_hole 19, template_hole 18)))
            )],
       template_equation
        (template_app (template_hole 16, template_var 0),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_var 1),
                   template_app
                    (template_hole 20,
                     template_app (template_hole 12, template_hole 18)))),
               template_var 0)),
           template_app (template_hole 11, t_empty))))),
    ("Closest_Pair_Alternative.find_closest_pair_code_eq",
     "[| ?\<delta> =
         dist (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y));
         ?\<delta>' = dist_code ?c\<^sub>0 ?c\<^sub>1;
         (?C\<^sub>0, ?C\<^sub>1) =
         find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps;
         (?\<Delta>', ?C\<^sub>0', ?C\<^sub>1') =
         find_closest_pair_code (?\<delta>', ?c\<^sub>0, ?c\<^sub>1) ?ps |]
      ==> ?C\<^sub>0 = ?C\<^sub>0' & ?C\<^sub>1 = ?C\<^sub>1'",
     template_implication
      ([template_equation
         (template_var 9,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, t_empty), template_var 8)),
            template_app
             (template_app (template_hole 12, t_empty), template_var 7))),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 8, template_var 8),
            template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 5), template_var 4),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 6, template_var 8),
                template_var 7)),
            template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 6),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_var 7))),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("Closest_Pair_Alternative.time_closest_pair_rec_tm_simps_2",
     "~ length ?xs <= 3 ==>
      time (closest_pair_rec_tm ?xs) =
      1 +
      (let (xs\<^sub>L, xs\<^sub>R) =
             Time_Monad.val (split_at_tm (length ?xs div 2) ?xs);
           (ys\<^sub>L, p\<^sub>L) =
             Time_Monad.val (closest_pair_rec_tm xs\<^sub>L);
           (ys\<^sub>R, p\<^sub>R) =
             Time_Monad.val (closest_pair_rec_tm xs\<^sub>R);
           ys = Time_Monad.val (merge_tm snd ys\<^sub>L ys\<^sub>R)
       in time (length_tm ?xs) + time (split_at_tm (length ?xs div 2) ?xs) +
          time (closest_pair_rec_tm xs\<^sub>L) +
          time (closest_pair_rec_tm xs\<^sub>R) +
          time (merge_tm snd ys\<^sub>L ys\<^sub>R) +
          time (combine_tm p\<^sub>L p\<^sub>R (fst (hd xs\<^sub>R)) ys))",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_app (template_hole 29, template_var 0),
              template_app
               (template_hole 28,
                template_app (template_hole 27, template_hole 26)))
            )],
       template_equation
        (template_app
          (template_hole 24,
           template_app (template_hole 23, template_var 0)),
         template_app
          (template_app (template_hole 22, template_hole 21),
           template_app
            (template_app
              (template_hole 20,
               template_app
                (template_hole 19,
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app (template_hole 29, template_var 0)),
                       template_app
                        (template_hole 28,
                         template_app
                          (template_hole 16, template_hole 26)))),
                   template_var 0))),
             template_app (template_hole 15, t_empty)))))),
    ("Closest_Pair_Alternative.combine_dist",
     "[| distinct ?ps; sorted_snd ?ps; set ?ps = ?ps\<^sub>L Un ?ps\<^sub>R;
         ALL p:?ps\<^sub>L. fst p <= ?l; ALL p:?ps\<^sub>R. ?l <= fst p;
         sparse
          (dist
            (case ?p\<^sub>0\<^sub>L of
             (x, y) => (real_of_int x, real_of_int y))
            (case ?p\<^sub>1\<^sub>L of
             (x, y) => (real_of_int x, real_of_int y)))
          ?ps\<^sub>L;
         sparse
          (dist
            (case ?p\<^sub>0\<^sub>R of
             (x, y) => (real_of_int x, real_of_int y))
            (case ?p\<^sub>1\<^sub>R of
             (x, y) => (real_of_int x, real_of_int y)))
          ?ps\<^sub>R;
         (?c\<^sub>0, ?c\<^sub>1) =
         combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps |]
      ==> sparse
           (dist
             (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)))
           (set ?ps)",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 9)),
        template_predicate
         (template_app (template_hole 14, template_var 9)),
        template_equation
         (template_app (template_hole 12, template_var 9),
          template_app
           (template_app (template_hole 11, template_var 8),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 8), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, t_empty),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 5, t_empty),
                    template_var 4))),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, t_empty),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 5, t_empty),
                    template_var 2))),
              template_var 7)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4)),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 6),
            template_var 9))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 5, t_empty),
                   template_var 0))),
             template_app (template_hole 12, template_var 9))
           ))),
    ("Closest_Pair_Alternative.core_argument",
     "[| distinct (?p\<^sub>0 # ?ps); sorted_snd (?p\<^sub>0 # ?ps);
         0 <= ?\<delta>;
         set (?p\<^sub>0 # ?ps) = ?ps\<^sub>L Un ?ps\<^sub>R;
         ALL p:set (?p\<^sub>0 # ?ps).
            real_of_int ?l - ?\<delta> <= real_of_int (fst p) &
            real_of_int (fst p) <= real_of_int ?l + ?\<delta>;
         ALL p:?ps\<^sub>L. fst p <= ?l; ALL p:?ps\<^sub>R. ?l <= fst p;
         sparse ?\<delta> ?ps\<^sub>L; sparse ?\<delta> ?ps\<^sub>R;
         ?p\<^sub>1 : set ?ps;
         dist (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?p\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
         < ?\<delta> |]
      ==> ?p\<^sub>1 : set (take 7 ?ps)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 24,
              template_app
               (template_app (template_hole 23, template_var 6),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 22,
              template_app
               (template_app (template_hole 23, template_var 6),
                template_var 5))
            ),
        template_inequation (less_equals, template_hole 20, template_var 4),
        template_equation
         (template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 23, template_var 6),
              template_var 5)),
          template_app
           (template_app (template_hole 17, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 18,
                  template_app
                   (template_app (template_hole 23, template_var 6),
                    template_var 5))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 18, template_var 5))
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, t_empty), template_var 6)),
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)),
          template_var 4)],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app (template_hole 1, template_hole 0)))),
                 template_var 5)))
           ))),
    ("Closest_Pair_Alternative.find_closest_pair_dist",
     "[| sorted_snd ?ps; distinct ?ps; set ?ps = ?ps\<^sub>L Un ?ps\<^sub>R;
         0 <= ?\<delta>;
         ALL p:set ?ps.
            real_of_int ?l - ?\<delta> <= real_of_int (fst p) &
            real_of_int (fst p) <= real_of_int ?l + ?\<delta>;
         ALL p:?ps\<^sub>L. fst p <= ?l; ALL p:?ps\<^sub>R. ?l <= fst p;
         sparse ?\<delta> ?ps\<^sub>L; sparse ?\<delta> ?ps\<^sub>R;
         dist (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
         <= ?\<delta>;
         (?C\<^sub>0, ?C\<^sub>1) =
         find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps |]
      ==> sparse
           (dist
             (case ?C\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case ?C\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)))
           (set ?ps)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 8)),
        template_predicate
         (template_app (template_hole 19, template_var 8)),
        template_equation
         (template_app (template_hole 17, template_var 8),
          template_app
           (template_app (template_hole 16, template_var 7),
            template_var 6)),
        template_inequation (less_equals, template_hole 14, template_var 5),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 17, template_var 8)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 6), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 6)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 3)),
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)),
          template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2)),
            template_var 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, t_empty),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_var 0))),
             template_app (template_hole 17, template_var 8))
           ))),
    ("Closest_Pair_Alternative.find_closest_bf_dist_take_7",
     "[| EX p\<^sub>1:set ?ps.
            dist
             (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case p\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
            < ?\<delta>;
         distinct (?p\<^sub>0 # ?ps); sorted_snd (?p\<^sub>0 # ?ps);
         0 < length ?ps; 0 <= ?\<delta>;
         set (?p\<^sub>0 # ?ps) = ?ps\<^sub>L Un ?ps\<^sub>R;
         ALL p:set (?p\<^sub>0 # ?ps).
            real_of_int ?l - ?\<delta> <= real_of_int (fst p) &
            real_of_int (fst p) <= real_of_int ?l + ?\<delta>;
         ALL p:?ps\<^sub>L. fst p <= ?l; ALL p:?ps\<^sub>R. ?l <= fst p;
         sparse ?\<delta> ?ps\<^sub>L; sparse ?\<delta> ?ps\<^sub>R |]
      ==> ALL p\<^sub>1:set ?ps.
             dist
              (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
              (case find_closest_bf ?p\<^sub>0 (take 7 ?ps) of
               (x, y) => (real_of_int x, real_of_int y))
             <= dist
                 (case ?p\<^sub>0 of
                  (x, y) => (real_of_int x, real_of_int y))
                 (case p\<^sub>1 of
                  (x, y) => (real_of_int x, real_of_int y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 28,
                template_app (template_hole 27, template_var 5)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app
               (template_app (template_hole 20, template_var 4),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 19,
              template_app
               (template_app (template_hole 20, template_var 4),
                template_var 5))
            ),
        template_inequation
         (less_than, template_hole 17,
          template_app (template_hole 16, template_var 5)),
        template_inequation (less_equals, template_hole 14, template_var 3),
        template_equation
         (template_app
           (template_hole 27,
            template_app
             (template_app (template_hole 20, template_var 4),
              template_var 5)),
          template_app
           (template_app (template_hole 12, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 27,
                  template_app
                   (template_app (template_hole 20, template_var 4),
                    template_var 5))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 27, template_var 5)),
             t_empty)
           )))]
