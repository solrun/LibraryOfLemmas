   [("Common.mergesort_recurrence_nonneg", "0 <= mergesort_recurrence ?n",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Common.length_conv_length_it", "length ?xs = length_it ?xs",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Common.rev_conv_rev_it", "rev ?xs = rev_it ?xs",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Common.length_eq_val_length_tm",
     "Time_Monad.val (length_tm ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Common.merge_xs_Nil", "Common.merge ?f ?xs [] = ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Common.time_simps", "tick ?v = ??.Time_Monad.tm.TM ?v 1",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Common.closest_pair_bf_eq_val_closest_pair_bf_tm",
     "Time_Monad.val (closest_pair_bf_tm ?ps) = closest_pair_bf ?ps",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Common.length_mergesort", "length (mergesort ?f ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Common.set_mergesort", "set (mergesort ?f ?xs) = set ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Common.filter_conv_filter_it", "filter ?P ?xs = filter_it ?P ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Common.split_at_conv_split_at_it",
     "split_at ?n ?xs = split_at_it ?n ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Common.time_length_tm", "time (length_tm ?xs) = length ?xs + 1",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Common.length_conv_length_it'",
     "length ?xs + ?acc = length_it' ?acc ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Common.rev_conv_rev_it'", "rev ?xs @ ?acc = rev_it' ?acc ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Common.filter_eq_val_filter_tm",
     "Time_Monad.val (filter_tm ?P ?xs) = filter ?P ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Common.mergesort_eq_val_mergesort_tm",
     "Time_Monad.val (mergesort_tm ?f ?xs) = mergesort ?f ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Common.take_eq_val_take_tm",
     "Time_Monad.val (take_tm ?n ?xs) = take ?n ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Common.find_closest_bf_eq_val_find_closest_bf_tm",
     "Time_Monad.val (find_closest_bf_tm ?p ?ps) = find_closest_bf ?p ?ps",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Common.split_at_eq_val_split_at_tm",
     "Time_Monad.val (split_at_tm ?n ?xs) = split_at ?n ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Common.distinct_mergesort",
     "distinct ?xs ==> distinct (mergesort ?f ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Common.time_filter_tm", "time (filter_tm ?P ?xs) = length ?xs + 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Common.merge_conv_merge_it",
     "Common.merge ?f ?xs ?ys = merge_it ?f ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Common.time_find_closest_bf_tm",
     "time (find_closest_bf_tm ?p ?ps) <= length ?ps + 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Common.time_mergesort_conv_mergesort_recurrence",
     "real (time (mergesort_tm ?f ?xs))
      <= mergesort_recurrence (length ?xs)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Common.merge_eq_val_merge_tm",
     "Time_Monad.val (merge_tm ?f ?xs ?ys) = Common.merge ?f ?xs ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Common.time_take_tm",
     "time (take_tm ?n ?xs) = min ?n (length ?xs) + 1",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Common.time_split_at_tm",
     "time (split_at_tm ?n ?xs) = min ?n (length ?xs) + 1",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Common.length_merge",
     "length (Common.merge ?f ?xs ?ys) = length ?xs + length ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Common.set_merge",
     "set (Common.merge ?f ?xs ?ys) = set ?xs Un set ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Common.filter_conv_filter_it'",
     "rev ?acc @ filter ?P ?xs = filter_it' ?acc ?P ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Common.split_at_take_drop_conv",
     "split_at ?n ?xs = (take ?n ?xs, drop ?n ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Common.sorted_wrt_mergesort",
     "sorted_wrt (%x y. ?f x <= ?f y) (mergesort ?f ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Common.time_closest_pair_bf_tm",
     "time (closest_pair_bf_tm ?ps) <= length ?ps * length ?ps + 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Common.time_distrib_bind",
     "time (?tm >>= ?f) = time ?tm + time (?f (Time_Monad.val ?tm))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_var 0,
             template_app (template_hole 0, template_var 1)))))),
    ("Common.set_take_drop",
     "set ?xs = set (take ?n ?xs) Un set (drop ?n ?xs)",
     template_equation
      (template_app (template_hole 3, template_var 1),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Common.find_closest_bf_set",
     "0 < length ?ps ==> find_closest_bf ?p ?ps : set ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Common.merge_conv_merge_it'",
     "rev ?acc @ Common.merge ?f ?xs ?ys = merge_it' ?f ?acc ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("Common.time_merge_tm",
     "time (merge_tm ?f ?xs ?ys) <= length ?xs + length ?ys + 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Common.sparse_mono",
     "[| sparse ?\<Delta> ?P; ?\<delta> <= ?\<Delta> |]
      ==> sparse ?\<delta> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Common.card_le_1_if_pairwise_eq",
     "ALL x:?S. ALL y:?S. x = y ==> card ?S <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0), t_empty)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_hole 0))),
    ("Common.card_Int_Un_le_Sum_card_Int",
     "finite ?S ==>
      card (?A Int \<Union> ?S) <= (SUM B:?S. card (?A Int B))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Common.set_take_drop_i_le_j",
     "?i <= ?j ==> set ?xs = set (take ?j ?xs) Un set (drop ?i ?xs)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Common.sorted_fst_hd_drop_less_drop",
     "sorted_fst ?ps ==>
      ALL p:set (drop ?n ?ps). fst (hd (drop ?n ?ps)) <= fst p",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Common.closest_pair_bf_c0",
     "[| 1 < length ?ps; (?c\<^sub>0, ?c\<^sub>1) = closest_pair_bf ?ps |]
      ==> ?c\<^sub>0 : set ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Common.closest_pair_bf_c1",
     "[| 1 < length ?ps; (?c\<^sub>0, ?c\<^sub>1) = closest_pair_bf ?ps |]
      ==> ?c\<^sub>1 : set ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Common.length_filter_P_impl_Q",
     "(!!x. ?P x ==> ?Q x) ==>
      length (filter ?P ?xs) <= length (filter ?Q ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Common.sorted_wrt_take_drop",
     "sorted_wrt ?f ?xs ==>
      ALL x:set (take ?n ?xs). ALL y:set (drop ?n ?xs). ?f x y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Common.sorted_wrt_hd_less",
     "[| sorted_wrt ?f ?xs; !!x. ?f x x |]
      ==> ALL x:set ?xs. ?f (hd ?xs) x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("Common.find_closest_bf_code_dist_eq",
     "[| 0 < length ?ps; (?\<delta>, ?c) = find_closest_bf_code ?p ?ps |]
      ==> ?\<delta> = dist_code ?p ?c",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 3))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Common.time_mergesort_tm_bigo",
     "(%x. real (time (mergesort_tm ?f x)))
      : O[length going_to
          sequentially]((%n. real n * ln (real n)) o length)",
     template_predicate
      (
         template_app
          (template_app (template_hole 11, t_empty),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_hole 4),
                 template_hole 3)),
             template_app
              (template_app (template_hole 2, t_empty), template_hole 5)))
         )),
    ("Common.closest_pair_bf_code_dist_eq",
     "[| 1 < length ?ps;
         (?\<delta>, ?c\<^sub>0, ?c\<^sub>1) = closest_pair_bf_code ?ps |]
      ==> ?\<delta> = dist_code ?c\<^sub>0 ?c\<^sub>1",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Common.split_at_conv_split_at_it'",
     "[| (?ts, ?ds) = split_at ?n ?xs;
         (?ts', ?ds') = split_at_it' ?acc ?n ?xs |]
      ==> ?ds = ?ds'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 6), template_var 5),
          template_app
           (template_app (template_hole 2, template_var 4),
            template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4),
            template_var 3))],
       template_equation (template_var 5, template_var 1))),
    ("Common.closest_pair_bf_c0_ne_c1",
     "[| 1 < length ?ps; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) = closest_pair_bf ?ps |]
      ==> ?c\<^sub>0 ~= ?c\<^sub>1",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Common.distinct_merge",
     "[| set ?xs Int set ?ys = {}; distinct ?xs; distinct ?ys |]
      ==> distinct (Common.merge ?f ?xs ?ys)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_app (template_hole 3, template_var 1)),
          template_hole 2),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Common.sorted_wrt_take_less_hd_drop",
     "[| sorted_wrt ?f ?xs; ?n < length ?xs |]
      ==> ALL x:set (take ?n ?xs). ?f x (hd (drop ?n ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Common.sorted_fst_take_less_hd_drop",
     "[| sorted_fst ?ps; ?n < length ?ps |]
      ==> ALL p:set (take ?n ?ps). fst p <= fst (hd (drop ?n ?ps))",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Common.sorted_wrt_hd_drop_less_drop",
     "[| sorted_wrt ?f ?xs; !!x. ?f x x |]
      ==> ALL x:set (drop ?n ?xs). ?f (hd (drop ?n ?xs)) x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Common.dist_eq_sqrt_dist_code",
     "dist (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
       (case ?p\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)) =
      sqrt (real_of_int (dist_code ?p\<^sub>0 ?p\<^sub>1))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 4, t_empty), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Common.sorted_merge",
     "?P = (%x y. ?f x <= ?f y) ==>
      sorted_wrt ?P (Common.merge ?f ?xs ?ys) =
      (sorted_wrt ?P ?xs & sorted_wrt ?P ?ys)",
     template_implication
      ([template_equation (template_var 3, t_empty)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0))))),
    ("Common.sorted_wrt_hd_less_take",
     "[| sorted_wrt ?f (?x # ?xs); !!x. ?f x x |]
      ==> ALL y:set (take ?n (?x # ?xs)). ?f ?x y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1)))),
             t_empty)
           ))),
    ("Common.split_at_conv_split_at_it_prod",
     "[| (?ts, ?ds) = split_at ?n ?xs; (?ts', ?ds') = split_at_it ?n ?xs |]
      ==> (?ts, ?ds) = (?ts', ?ds')",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 1, template_var 3),
            template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 0, template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 5), template_var 4),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Common.split_at_conv_split_at_it'",
     "[| (?ts, ?ds) = split_at ?n ?xs;
         (?ts', ?ds') = split_at_it' ?acc ?n ?xs |]
      ==> rev ?acc @ ?ts = ?ts'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 6), template_var 5),
          template_app
           (template_app (template_hole 4, template_var 4),
            template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 0),
              template_var 4),
            template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 6),
         template_var 2))),
    ("Common.find_closest_bf_code_eq",
     "[| 0 < length ?ps; ?c = find_closest_bf ?p ?ps;
         (?\<delta>', ?c') = find_closest_bf_code ?p ?ps |]
      ==> ?c = ?c'",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 4)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 4))],
       template_equation (template_var 3, template_var 0))),
    ("Common.cbox_2D",
     "cbox (?x\<^sub>0, ?y\<^sub>0) (?x\<^sub>1, ?y\<^sub>1) =
      {(x, y).
       ?x\<^sub>0 <= x &
       x <= ?x\<^sub>1 & ?y\<^sub>0 <= y & y <= ?y\<^sub>1}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("Common.mem_cbox_2D",
     "(?x\<^sub>0 <= ?x &
       ?x <= ?x\<^sub>1 & ?y\<^sub>0 <= ?y & ?y <= ?y\<^sub>1) =
      ((?x, ?y) : cbox (?x\<^sub>0, ?y\<^sub>0) (?x\<^sub>1, ?y\<^sub>1))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("Common.card_Int_if_either_in",
     "ALL x:?S. ALL y:?S. x = y | x ~: ?T | y ~: ?T ==>
      card (?S Int ?T) <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Common.bind_tm_cong",
     "[| !!v. v = Time_Monad.val ?n ==> ?f v = ?g v; ?m = ?n |]
      ==> ?m >>= ?f = ?n >>= ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation (template_var 0, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Common.dist_fst_abs",
     "dist (case ?p of (x, y) => (real_of_int x, real_of_int y))
       (case (?l, snd ?p) of (x, y) => (real_of_int x, real_of_int y)) =
      real_of_int \<bar>fst ?p - ?l\<bar>",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 3, template_var 1)))),
       template_app
        (template_hole 5,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Common.filter_Un",
     "set ?xs = ?A Un ?B ==>
      set (filter ?P ?xs) = {x: ?A. ?P x} Un {x: ?B. ?P x}",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 2, t_empty)),
           template_app (template_hole 2, t_empty))))),
    ("Common.closest_pair_bf_code_eq",
     "[| 1 < length ?ps; (?c\<^sub>0, ?c\<^sub>1) = closest_pair_bf ?ps;
         (?\<delta>', ?c\<^sub>0', ?c\<^sub>1') =
         closest_pair_bf_code ?ps |]
      ==> ?c\<^sub>0 = ?c\<^sub>0' & ?c\<^sub>1 = ?c\<^sub>1'",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app (template_hole 5, template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app (template_hole 2, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Common.dist_eq_dist_code_abs_lt",
     "(\<bar>real_of_int ?c\<bar>
       < dist (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?p\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))) =
      (?c\<^sup>2 < dist_code ?p\<^sub>0 ?p\<^sub>1)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 2))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 7, t_empty), template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Common.dist_eq_dist_code_abs_le",
     "(dist (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
        (case ?p\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
       <= \<bar>real_of_int ?c\<bar>) =
      (dist_code ?p\<^sub>0 ?p\<^sub>1 <= ?c\<^sup>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, t_empty), template_var 2)),
             template_app
              (template_app (template_hole 9, t_empty), template_var 1))),
         template_app
          (template_hole 6,
           template_app (template_hole 7, template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Common.cbox_right_un",
     "[| ?x\<^sub>0 <= ?x\<^sub>1; ?x\<^sub>1 <= ?x\<^sub>2 |]
      ==> cbox (?x\<^sub>0, ?y\<^sub>0) (?x\<^sub>1, ?y\<^sub>1) Un
          cbox (?x\<^sub>1, ?y\<^sub>0) (?x\<^sub>2, ?y\<^sub>1) =
          cbox (?x\<^sub>0, ?y\<^sub>0) (?x\<^sub>2, ?y\<^sub>1)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Common.cbox_top_un",
     "[| ?y\<^sub>0 <= ?y\<^sub>1; ?y\<^sub>1 <= ?y\<^sub>2 |]
      ==> cbox (?x\<^sub>0, ?y\<^sub>0) (?x\<^sub>1, ?y\<^sub>1) Un
          cbox (?x\<^sub>0, ?y\<^sub>1) (?x\<^sub>1, ?y\<^sub>2) =
          cbox (?x\<^sub>0, ?y\<^sub>0) (?x\<^sub>1, ?y\<^sub>2)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 4)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Common.closest_pair_bf_dist",
     "[| 1 < length ?ps; (?c\<^sub>0, ?c\<^sub>1) = closest_pair_bf ?ps |]
      ==> sparse
           (dist
             (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)))
           (set ?ps)",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, t_empty),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 0))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Common.pigeonhole",
     "[| finite ?T; ?S <= \<Union> ?T; card ?T < card ?S |]
      ==> EX x:?S. EX y:?S. EX X:?T. x ~= y & x : X & y : X",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0), t_empty)
           ))),
    ("Common.sparse_identity",
     "[| sparse ?\<delta> (set ?ps);
         ALL p:set ?ps.
            ?\<delta>
            <= dist
                (case ?p\<^sub>0 of
                 (x, y) => (real_of_int x, real_of_int y))
                (case p of (x, y) => (real_of_int x, real_of_int y)) |]
      ==> sparse ?\<delta> (set (?p\<^sub>0 # ?ps))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 7, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Common.dist_transform",
     "(dist (case ?p of (x, y) => (real_of_int x, real_of_int y))
        (case (?l, snd ?p) of (x, y) => (real_of_int x, real_of_int y))
       < ?\<delta>) =
      (real_of_int ?l - ?\<delta> < real_of_int (fst ?p) &
       real_of_int (fst ?p) < real_of_int ?l + ?\<delta>)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, t_empty), template_var 2)),
             template_app
              (template_app (template_hole 8, t_empty),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app (template_hole 4, template_var 2))))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 6, template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 6,
               template_app (template_hole 1, template_var 2)))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 6,
               template_app (template_hole 1, template_var 2))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 6, template_var 1)),
             template_var 0))))),
    ("Common.max_points_square",
     "[| ALL p:?ps.
            (case p of (x, y) => (real_of_int x, real_of_int y))
            : cbox (?x, ?y) (?x + ?\<delta>, ?y + ?\<delta>);
         sparse ?\<delta> ?ps; 0 <= ?\<delta> |]
      ==> card ?ps <= 4",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            ),
        template_inequation (less_equals, template_hole 5, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 3),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_hole 0)))))),
    ("Common.find_closest_bf_dist",
     "ALL q:set ?ps.
         dist (case ?p of (x, y) => (real_of_int x, real_of_int y))
          (case find_closest_bf ?p ?ps of
           (x, y) => (real_of_int x, real_of_int y))
         <= dist (case ?p of (x, y) => (real_of_int x, real_of_int y))
             (case q of (x, y) => (real_of_int x, real_of_int y))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           t_empty)
         )),
    ("Common.bigo_measure_trans",
     "[| !!x. x : ?A ==> ?t x <= (?t' o ?m) x; ?t' : O(?f);
         !!x. x : ?A ==> 0 <= ?t x |]
      ==> ?t : O[?m going_to sequentially within ?A](?f o ?m)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_hole 4),
                   template_var 4)),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_var 1)))
           ))),
    ("Common.dist_eq_dist_code_lt",
     "(dist (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
        (case ?p\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
       < dist (case ?p\<^sub>2 of (x, y) => (real_of_int x, real_of_int y))
          (case ?p\<^sub>3 of (x, y) => (real_of_int x, real_of_int y))) =
      (dist_code ?p\<^sub>0 ?p\<^sub>1 < dist_code ?p\<^sub>2 ?p\<^sub>3)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_var 3)),
             template_app
              (template_app (template_hole 4, t_empty), template_var 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Common.dist_eq_dist_code_le",
     "(dist (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
        (case ?p\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
       <= dist (case ?p\<^sub>2 of (x, y) => (real_of_int x, real_of_int y))
           (case ?p\<^sub>3 of (x, y) => (real_of_int x, real_of_int y))) =
      (dist_code ?p\<^sub>0 ?p\<^sub>1 <= dist_code ?p\<^sub>2 ?p\<^sub>3)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_var 3)),
             template_app
              (template_app (template_hole 4, t_empty), template_var 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Common.cbox_max_dist",
     "[| ?p\<^sub>0 = (?x, ?y);
         ?p\<^sub>1 = (?x + ?\<delta>, ?y + ?\<delta>);
         (?x\<^sub>0, ?y\<^sub>0) : cbox ?p\<^sub>0 ?p\<^sub>1;
         (?x\<^sub>1, ?y\<^sub>1) : cbox ?p\<^sub>0 ?p\<^sub>1;
         0 <= ?\<delta> |]
      ==> dist (?x\<^sub>0, ?y\<^sub>0) (?x\<^sub>1, ?y\<^sub>1)
          <= sqrt 2 * ?\<delta>",
     template_implication
      ([template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 11, template_var 7),
            template_var 6)),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 7),
                template_var 4)),
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 4))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 8, template_var 8),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 8, template_var 8),
                template_var 5))
            ),
        template_inequation (less_equals, template_hole 6, template_var 4)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 11, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 11, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_var 4)))),
    ("Common.sparse_update",
     "[| sparse ?\<delta> (set ?ps);
         dist (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          ?p\<^sub>1
         <= ?\<delta>;
         ALL p:set ?ps.
            dist
             (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             ?p\<^sub>1
            <= dist
                (case ?p\<^sub>0 of
                 (x, y) => (real_of_int x, real_of_int y))
                (case p of (x, y) => (real_of_int x, real_of_int y)) |]
      ==> sparse
           (dist
             (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             ?p\<^sub>1)
           (set (?p\<^sub>0 # ?ps))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 1)),
            template_var 0),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, t_empty),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("Common.set_band_filter_aux",
     "[| ?p\<^sub>0 : ?ps\<^sub>L; ?p\<^sub>1 : ?ps\<^sub>R;
         ?p\<^sub>0 ~= ?p\<^sub>1;
         dist (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?p\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
         < ?\<delta>;
         set ?ps = ?ps\<^sub>L Un ?ps\<^sub>R;
         ALL p:?ps\<^sub>L. fst p <= ?l; ALL p:?ps\<^sub>R. ?l <= fst p;
         ?ps' =
         filter
          (%p. real_of_int ?l - ?\<delta> < real_of_int (fst p) &
               real_of_int (fst p) < real_of_int ?l + ?\<delta>)
          ?ps |]
      ==> ?p\<^sub>0 : set ?ps' & ?p\<^sub>1 : set ?ps'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 5),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 7, template_var 5)),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, t_empty), template_var 7)),
            template_app
             (template_app (template_hole 13, t_empty), template_var 5)),
          template_var 3),
        template_equation
         (template_app (template_hole 9, template_var 2),
          template_app
           (template_app (template_hole 8, template_var 6),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4), t_empty)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, t_empty), template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 18, template_var 7),
                 template_app (template_hole 9, template_var 0))),
             template_app
              (template_app (template_hole 18, template_var 5),
               template_app (template_hole 9, template_var 0)))
           ))),
    ("Common.set_band_filter",
     "[| ?p\<^sub>0 : set ?ps; ?p\<^sub>1 : set ?ps;
         ?p\<^sub>0 ~= ?p\<^sub>1;
         dist (case ?p\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?p\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
         < ?\<delta>;
         set ?ps = ?ps\<^sub>L Un ?ps\<^sub>R; sparse ?\<delta> ?ps\<^sub>L;
         sparse ?\<delta> ?ps\<^sub>R; ALL p:?ps\<^sub>L. fst p <= ?l;
         ALL p:?ps\<^sub>R. ?l <= fst p;
         ?ps' =
         filter
          (%p. real_of_int ?l - ?\<delta> < real_of_int (fst p) &
               real_of_int (fst p) < real_of_int ?l + ?\<delta>)
          ?ps |]
      ==> ?p\<^sub>0 : set ?ps' & ?p\<^sub>1 : set ?ps'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 7),
              template_app (template_hole 18, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 5),
              template_app (template_hole 18, template_var 6))
            ),
        template_negation
         (template_equation (template_var 7, template_var 5)),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, t_empty), template_var 7)),
            template_app
             (template_app (template_hole 13, t_empty), template_var 5)),
          template_var 4),
        template_equation
         (template_app (template_hole 18, template_var 6),
          template_app
           (template_app (template_hole 9, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2), t_empty)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, t_empty), template_var 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 19, template_var 7),
                 template_app (template_hole 18, template_var 0))),
             template_app
              (template_app (template_hole 19, template_var 5),
               template_app (template_hole 18, template_var 0)))
           )))]
