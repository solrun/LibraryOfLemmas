Loading theory "Pure-ex.Guess" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi" via "Akra_Bazzi.Akra_Bazzi_Real" via "Akra_Bazzi.Akra_Bazzi_Asymptotics" via "Akra_Bazzi.Akra_Bazzi_Library")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Root_Balanced_Tree.Time_Monad" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Decision_Procs.Dense_Linear_Order" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Decision_Procs.Approximation_Bounds")
### ML warning (line 99 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
### ML warning (line 150 of "~~/src/Pure/ex/Guess.thy"):
### Matches are not exhaustive.
### ML warning (line 157 of "~~/src/Pure/ex/Guess.thy"):
### Pattern is not exhaustive.
signature GUESS =
  sig
    val guess:
       (binding * typ option * mixfix) list ->
         bool -> Proof.state -> Proof.state
    val guess_cmd:
       (binding * string option * mixfix) list ->
         bool -> Proof.state -> Proof.state
  end
structure Guess: GUESS
### theory "Pure-ex.Guess"
### 0.071s elapsed time, 0.263s cpu time, 0.037s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi" via "Akra_Bazzi.Akra_Bazzi_Real" via "Akra_Bazzi.Akra_Bazzi_Asymptotics" via "Akra_Bazzi.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs" via "Landau_Symbols.Landau_Real_Products" via "Landau_Symbols.Group_Sort" via "HOL-Library.Multiset")
### ML warning (line 98 of "~~/src/HOL/Decision_Procs/langford_data.ML"):
### Pattern is not exhaustive.
### ML warning (line 99 of "~~/src/HOL/Decision_Procs/langford_data.ML"):
### Pattern is not exhaustive.
signature LANGFORD_DATA =
  sig
    val add: entry -> attribute
    val del: attribute
    type entry
    val get: Proof.context -> simpset * (thm * entry) list
    val match: Proof.context -> cterm -> entry option
  end
structure Langford_Data: LANGFORD_DATA
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.116s elapsed time, 0.473s cpu time, 0.037s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Root_Balanced_Tree.Time_Monad")
### theory "HOL-Combinatorics.Transposition"
### 0.141s elapsed time, 0.576s cpu time, 0.037s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Library.Code_Target_Numeral_Float" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
### theory "HOL-Library.Monad_Syntax"
### 0.038s elapsed time, 0.157s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Library.Code_Target_Numeral_Float" via "HOL-Library.Code_Target_Numeral")
signature FERRANTE_RACKOF_DATA =
  sig
    val add: entry -> attribute
    val del: attribute
    type entry
    val funs:
       thm ->
         {isolate_conv:
          morphism -> Proof.context -> cterm list -> cterm -> thm,
          simpset: morphism -> Proof.context -> simpset,
          whatis: morphism -> cterm -> cterm -> ord}
           -> declaration
    val get: Proof.context -> (thm * entry) list
    val match: Proof.context -> cterm -> entry option
    datatype ord = Eq | Ge | Gt | Le | Lt | NEq | Nox
  end
structure Ferrante_Rackoff_Data: FERRANTE_RACKOF_DATA
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### theory "HOL-Library.Code_Abstract_Nat"
### 0.063s elapsed time, 0.253s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Library.Code_Target_Numeral_Float" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### theory "HOL-Library.Code_Target_Int"
### 0.148s elapsed time, 0.578s cpu time, 0.026s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### theory "HOL-Library.Code_Target_Nat"
### 0.125s elapsed time, 0.486s cpu time, 0.026s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Library.Code_Target_Numeral_Float")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Code_Target_Numeral"
### 0.109s elapsed time, 0.428s cpu time, 0.037s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Closest_PairMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.433s elapsed time, 1.735s cpu time, 0.063s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi" via "Akra_Bazzi.Akra_Bazzi_Real" via "Akra_Bazzi.Akra_Bazzi_Asymptotics" via "Akra_Bazzi.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs" via "Landau_Symbols.Landau_Real_Products" via "Landau_Symbols.Group_Sort")
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.453s cpu time, 0.075s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.FuncSet"
### 0.375s elapsed time, 1.448s cpu time, 0.177s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Indicator_Function")
consts
  enumerate :: "'a set => nat => 'a"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Infinite_Set"
### 0.382s elapsed time, 1.390s cpu time, 0.449s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Closest_PairMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### ML warning (file "~~/src/HOL/Decision_Procs/langford.ML"):
### Matches are not exhaustive.
### ML warning (line 24 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Pattern is not exhaustive.
### ML warning (line 90 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Value identifier (q) has not been referenced.
### ML warning (line 90 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Value identifier (p) has not been referenced.
### ML warning (file "~~/src/HOL/Decision_Procs/langford.ML"):
### Matches are not exhaustive.
### ML warning (line 100 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Matches are not exhaustive.
### ML warning (line 136 of "~~/src/HOL/Decision_Procs/langford.ML"):
### Pattern is not exhaustive.
signature LANGFORD =
  sig
    val dlo_conv: Proof.context -> cterm -> thm
    val dlo_tac: Proof.context -> int -> tactic
  end
structure Langford: LANGFORD
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Disjoint_Sets"
### 0.380s elapsed time, 1.392s cpu time, 0.422s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
locale linorder_stupid_syntax
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
  assumes "linorder_stupid_syntax less_eq less"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.235s cpu time, 0.144s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Closest_PairMoreTemplates" via "Draft.ExtrEqs")
locale linorder_no_ub
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
  assumes "linorder_no_ub (\<sqsubseteq>) (\<sqsubset>)"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
locale linorder_no_lb
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
  assumes "linorder_no_lb (\<sqsubseteq>) (\<sqsubset>)"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.384s elapsed time, 1.508s cpu time, 0.185s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
locale constr_dense_linorder
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and between :: "'a => 'a => 'a"
  assumes "constr_dense_linorder (\<sqsubseteq>) (\<sqsubset>) between"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### ML warning (line 33 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Value identifier (simpset) has not been referenced.
### ML warning (line 32 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Value identifier (atoms) has not been referenced.
### ML warning (line 31 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Value identifier (entr) has not been referenced.
### ML warning (line 35 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Value identifier (vs) has not been referenced.
### ML warning (line 35 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 63 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 90 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (file "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 113 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 115 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 117 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 119 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 121 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 149 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 147 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 149 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Matches are not exhaustive.
### ML warning (line 147 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Decision_Procs/ferrante_rackoff.ML"):
### Pattern is not exhaustive.
signature FERRANTE_RACKOFF =
  sig
    val dlo_conv: Proof.context -> conv
    val dlo_tac: Proof.context -> int -> tactic
  end
structure FerranteRackoff: FERRANTE_RACKOFF
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### Partially applied constant "Orderings.ord_class.less_eq" on left hand side of equation, in theorem:
### linorder.Min (<=) (set (?x # ?xs)) == fold (ord.min (<=)) ?xs ?x
### Partially applied constant "Orderings.ord_class.less_eq" on left hand side of equation, in theorem:
### linorder.Max (<=) (set (?x # ?xs)) == fold (ord.max (<=)) ?xs ?x
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.Phantom_Type"
### 0.845s elapsed time, 3.116s cpu time, 1.106s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
consts
  flat :: "'a list stream => 'a stream"
consts
  mset :: "'a list => 'a multiset"
### Additional type variable(s) in locale specification "CARD_1": 'a
### theory "HOL-Decision_Procs.Dense_Linear_Order"
### 2.355s elapsed time, 8.948s cpu time, 1.954s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Analysis.Product_Vector")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Product_Plus"
### 0.129s elapsed time, 0.523s cpu time, 0.073s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Ordered_Euclidean_Space")
### theory "HOL-Library.Stream"
### 1.230s elapsed time, 4.651s cpu time, 1.258s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Closest_PairMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### Additional type variable(s) in locale specification "card2": 'a
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
### theory "HOL-Library.Product_Order"
### 0.207s elapsed time, 0.819s cpu time, 0.082s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Closest_PairMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Set_Algebras"
### 0.251s elapsed time, 0.995s cpu time, 0.082s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Countable_Set")
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.780s elapsed time, 3.099s cpu time, 0.308s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Numeral_Type"
### 0.765s elapsed time, 3.025s cpu time, 0.254s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.301s elapsed time, 5.127s cpu time, 0.476s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
Proofs for inductive predicate(s) "pred_mset"
### theory "HOL-Analysis.Metric_Arith"
### 0.664s elapsed time, 2.623s cpu time, 0.239s GC time
Loading theory "Akra_Bazzi.Eval_Numeral" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method")
  Proving monotonicity ...
### theory "HOL-Library.Countable_Set"
### 0.489s elapsed time, 1.932s cpu time, 0.169s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
signature EVAL_NUMERAL =
  sig val eval_numeral_tac: Proof.context -> int -> tactic end
structure Eval_Numeral: EVAL_NUMERAL
Found termination order: "size <*mlex*> {}"
### theory "Akra_Bazzi.Eval_Numeral"
### 0.171s elapsed time, 0.678s cpu time, 0.072s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
### theory "HOL-Library.Multiset"
### 4.147s elapsed time, 16.036s cpu time, 2.651s GC time
Loading theory "HOL-Analysis.Continuum_Not_Denumerable" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy")
### theory "HOL-Library.Tree"
### 2.149s elapsed time, 8.479s cpu time, 0.796s GC time
Loading theory "Draft.Templates" (required by "Draft.Closest_PairMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.269s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Library.Set_Idioms"
### 0.230s elapsed time, 0.907s cpu time, 0.079s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Analysis.Continuum_Not_Denumerable"
### 0.290s elapsed time, 1.145s cpu time, 0.079s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
### theory "HOL-Analysis.L2_Norm"
### 0.124s elapsed time, 0.489s cpu time, 0.111s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Operator_Norm"
### 0.098s elapsed time, 0.386s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.050s elapsed time, 4.171s cpu time, 0.299s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Closest_PairMoreTemplates" via "Draft.ExtrEqs")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 0.940s elapsed time, 3.725s cpu time, 0.286s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.256s elapsed time, 8.936s cpu time, 0.758s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
### theory "HOL-Library.BigO"
### 0.826s elapsed time, 3.273s cpu time, 0.308s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Closest_PairMoreTemplates")
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.718s elapsed time, 2.835s cpu time, 0.341s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
### theory "HOL-Analysis.Abstract_Topology"
### 2.637s elapsed time, 10.450s cpu time, 0.948s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.197s elapsed time, 0.778s cpu time, 0.128s GC time
Loading theory "HOL-Library.Going_To_Filter" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common")
### theory "HOL-Library.Going_To_Filter"
### 0.103s elapsed time, 0.413s cpu time, 0.000s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
### theory "HOL-Analysis.Abstract_Limits"
### 0.253s elapsed time, 1.005s cpu time, 0.128s GC time
Loading theory "HOL-Library.Landau_Symbols" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi")
locale landau_symbol
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
  assumes "landau_symbol L L' Lr"
### theory "HOL-Library.Indicator_Function"
### 1.024s elapsed time, 3.769s cpu time, 2.182s GC time
Loading theory "HOL-Library.Lattice_Algebras" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Decision_Procs.Approximation_Bounds" via "HOL-Library.Interval_Float" via "HOL-Library.Interval")
### theory "HOL-Analysis.Elementary_Topology"
### 2.673s elapsed time, 10.281s cpu time, 2.861s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
locale landau_pair
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and l :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and l' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
    and lr :: "'a filter => ('a => real) => ('a => real) set"
    and R :: "real => real => bool"
  assumes "landau_pair L l L' l' Lr lr R"
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
locale landau_pair
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and l :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and l' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
    and lr :: "'a filter => ('a => real) => ('a => real) set"
    and R :: "real => real => bool"
  assumes "landau_pair L l L' l' Lr lr R"
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale landau_pair
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and l :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and l' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
    and lr :: "'a filter => ('a => real) => ('a => real) set"
    and R :: "real => real => bool"
  assumes "landau_pair L l L' l' Lr lr R"
### theory "HOL-Analysis.Euclidean_Space"
### 2.431s elapsed time, 9.309s cpu time, 2.800s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
locale landau_symbol
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
  assumes "landau_symbol L L' Lr"
locale landau_symbol
  fixes L :: "'a filter => ('a => 'b) => ('a => 'b) set"
    and L' :: "'c filter => ('c => 'b) => ('c => 'b) set"
    and Lr :: "'a filter => ('a => real) => ('a => real) set"
  assumes "landau_symbol L L' Lr"
bundle asymp_equiv_notation
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.289s elapsed time, 5.109s cpu time, 0.331s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
### theory "HOL-Library.Landau_Symbols"
### 2.386s elapsed time, 9.143s cpu time, 2.606s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
### theory "HOL-Analysis.Connected"
### 0.323s elapsed time, 1.283s cpu time, 0.123s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.697s elapsed time, 6.715s cpu time, 0.681s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
### theory "HOL-Analysis.Linear_Algebra"
### 1.067s elapsed time, 4.218s cpu time, 0.561s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment" via "HOL-Analysis.Convex")
### theory "HOL-Analysis.Function_Topology"
### 1.446s elapsed time, 5.451s cpu time, 2.979s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Affine"
### 1.267s elapsed time, 4.733s cpu time, 2.924s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment")
class lattice_ab_group_add_abs = abs + lattice_ab_group_add +
  assumes "abs_lattice": "!!a. \<bar>a\<bar> = sup a (- a)"
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
### theory "HOL-Analysis.Convex"
### 1.025s elapsed time, 4.048s cpu time, 0.640s GC time
Loading theory "HOL-Analysis.Product_Topology" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy" via "HOL-Analysis.Path_Connected" via "HOL-Analysis.T1_Spaces")
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 2.800s elapsed time, 10.779s cpu time, 3.861s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real")
### theory "HOL-Analysis.Cartesian_Space"
### 1.742s elapsed time, 6.874s cpu time, 0.997s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
### theory "HOL-Analysis.Product_Topology"
### 0.278s elapsed time, 1.089s cpu time, 0.142s GC time
Loading theory "HOL-Analysis.T1_Spaces" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy" via "HOL-Analysis.Path_Connected")
### theory "HOL-Library.Lattice_Algebras"
### 5.282s elapsed time, 20.604s cpu time, 4.839s GC time
Loading theory "HOL-Library.Interval" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Decision_Procs.Approximation_Bounds" via "HOL-Library.Interval_Float")
### theory "HOL-Analysis.T1_Spaces"
### 0.289s elapsed time, 1.141s cpu time, 0.149s GC time
Loading theory "HOL-Library.Log_Nat" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Decision_Procs.Approximation_Bounds" via "HOL-Library.Interval_Float" via "HOL-Library.Float")
### theory "HOL-Library.Liminf_Limsup"
### 0.534s elapsed time, 2.107s cpu time, 0.299s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Log_Nat"
### 0.160s elapsed time, 0.627s cpu time, 0.150s GC time
Loading theory "HOL-Library.Float" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Decision_Procs.Approximation_Bounds" via "HOL-Library.Interval_Float")
instantiation
  float :: {equal,linordered_idom}
  sgn_float == sgn :: float => float
  abs_float == abs :: float => float
  uminus_float == uminus :: float => float
  one_float == one_class.one :: float
  times_float == times :: float => float => float
  zero_float == zero_class.zero :: float
  minus_float == minus :: float => float => float
  less_eq_float == less_eq :: float => float => bool
  less_float == less :: float => float => bool
  plus_float == plus :: float => float => float
  equal_float == equal_class.equal :: float => float => bool
instantiation
  interval :: ({equal,preorder}) equal
  equal_interval == equal_class.equal :: 'a interval => 'a interval => bool
instantiation
  interval :: (preorder) ord
  less_eq_interval == less_eq :: 'a interval => 'a interval => bool
  less_interval == less :: 'a interval => 'a interval => bool
### theory "HOL-Library.Order_Continuity"
### 0.601s elapsed time, 2.386s cpu time, 0.265s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real" via "HOL-Library.Extended_Real")
instantiation
  interval :: (lattice) semilattice_sup
  sup_interval == sup :: 'a interval => 'a interval => 'a interval
instantiation
  float :: lattice_ab_group_add
  inf_float == inf :: float => float => float
  sup_float == sup :: float => float => float
instantiation
  float :: exhaustive
  exhaustive_float == exhaustive_class.exhaustive ::
    (float => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  interval :: (ordered_ab_semigroup_add) ab_semigroup_add
  plus_interval == plus :: 'a interval => 'a interval => 'a interval
instantiation
  float :: full_exhaustive
  full_exhaustive_float == full_exhaustive_class.full_exhaustive ::
    (float * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  interval :: ({zero,preorder}) zero
  zero_interval == zero_class.zero :: 'a interval
instantiation
  float :: random
  random_float == random_class.random ::
    natural
    => natural * natural => (float * (unit => term)) * natural * natural
class infinity = type +
  fixes infinity :: "'a"
instantiation
  interval :: (ordered_ab_group_add) uminus
  uminus_interval == uminus :: 'a interval => 'a interval
instantiation
  interval :: (ordered_ab_group_add) minus
  minus_interval == minus :: 'a interval => 'a interval => 'a interval
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
instantiation
  interval :: (linordered_semiring) times
  times_interval == times :: 'a interval => 'a interval => 'a interval
Proofs for inductive predicate(s) "rec_set_enat"
instantiation
  interval :: ({one,preorder}) one
  one_interval == one_class.one :: 'a interval
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 1.409s elapsed time, 5.560s cpu time, 0.804s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.821s elapsed time, 3.225s cpu time, 0.583s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra" via "HOL-Library.Extended_Nonnegative_Real")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  interval :: ({preorder,topological_space}) topological_space
  open_interval == open :: 'a interval set => bool
instantiation
  interval :: ({preorder,exhaustive}) exhaustive
  exhaustive_interval == exhaustive_class.exhaustive ::
    ('a interval => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  interval :: ({preorder,full_exhaustive}) full_exhaustive
  full_exhaustive_interval == full_exhaustive_class.full_exhaustive ::
    ('a interval * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  interval :: ({preorder,random}) random
  random_interval == random_class.random ::
    natural
    => natural * natural
       => ('a interval * (unit => term)) * natural * natural
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Interval"
### 3.128s elapsed time, 11.994s cpu time, 4.894s GC time
Loading theory "Landau_Symbols.Group_Sort" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi" via "Akra_Bazzi.Akra_Bazzi_Real" via "Akra_Bazzi.Akra_Bazzi_Asymptotics" via "Akra_Bazzi.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs" via "Landau_Symbols.Landau_Real_Products")
locale groupsort
  fixes f :: "'a => 'b"
    and merge :: "'a => 'a => 'a"
    and g :: "'a list => 'c"
  assumes "groupsort f merge g"
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
### theory "HOL-Library.Float"
### 3.117s elapsed time, 11.965s cpu time, 4.834s GC time
Loading theory "HOL-Library.Code_Target_Numeral_Float" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation")
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
### theory "HOL-Library.Code_Target_Numeral_Float"
### 0.307s elapsed time, 1.201s cpu time, 0.200s GC time
Loading theory "HOL-Library.Interval_Float" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation" via "HOL-Decision_Procs.Approximation_Bounds")
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 2.549s elapsed time, 9.699s cpu time, 4.529s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
Found termination order: "length <*mlex*> {}"
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 0.292s elapsed time, 1.161s cpu time, 0.110s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
### theory "Landau_Symbols.Group_Sort"
### 1.081s elapsed time, 4.267s cpu time, 0.497s GC time
Loading theory "Landau_Symbols.Landau_Real_Products" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi" via "Akra_Bazzi.Akra_Bazzi_Real" via "Akra_Bazzi.Akra_Bazzi_Asymptotics" via "Akra_Bazzi.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More" via "Landau_Symbols.Landau_Simprocs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
### theory "HOL-Library.Interval_Float"
### 1.026s elapsed time, 4.047s cpu time, 0.413s GC time
Loading theory "HOL-Decision_Procs.Approximation_Bounds" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation" via "HOL-Decision_Procs.Approximation")
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
consts
  horner ::
    "(nat => nat)
     => (nat => nat => nat) => nat => nat => nat => real => real"
consts
  bigtheta_pow :: "'a filter => ('a => 'b) set => nat => ('a => 'b) set"
locale landau_function_family
  fixes F :: "'a filter"
    and H :: "('a => real) set"
  assumes "landau_function_family F H"
### theory "HOL-Library.Extended_Real"
### 3.948s elapsed time, 15.221s cpu time, 5.119s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable" via "HOL-Analysis.Sigma_Algebra")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale landau_function_family_pair
  fixes F :: "'a filter"
    and G :: "('a => real) set"
    and H :: "('a => real) set"
    and g :: "'a => real"
  assumes "landau_function_family_pair F G H g"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  landau_dominating_chain' :: "'a filter => ('a => real) list => bool"
consts
  nonneg_list :: "'a list => bool"
consts
  pos_list :: "'a list => bool"
locale landau_function_family_chain
  fixes F :: "'b filter"
    and gs :: "'a list"
    and get_param :: "'a => real"
    and get_fun :: "'a => 'b => real"
  assumes "landau_function_family_chain F gs get_fun"
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*> {}"
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
instantiation
  primfun :: linorder
  less_eq_primfun == less_eq :: primfun => primfun => bool
  less_primfun == less :: primfun => primfun => bool
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 2.252s elapsed time, 8.851s cpu time, 1.174s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
Found termination order: "{}"
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
Found termination order: "{}"
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
Found termination order: "{}"
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
Found termination order: "{}"
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Extended_Nonnegative_Real"
### 1.719s elapsed time, 6.744s cpu time, 1.013s GC time
Loading theory "HOL-Analysis.Sigma_Algebra" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space" via "HOL-Analysis.Measurable")
locale subset_class
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "subset_class \<Omega> M"
locale semiring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "semiring_of_sets \<Omega> M"
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 1.201s elapsed time, 4.682s cpu time, 0.853s GC time
Loading theory "HOL-Analysis.Ordered_Euclidean_Space" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space")
locale ring_of_sets
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "ring_of_sets \<Omega> M"
locale algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "algebra \<Omega> M"
### Ignoring duplicate rewrite rule:
### pos_primfun_list [] == False
### Ignoring duplicate rewrite rule:
### pos_primfun_list ((?uu1, ?x1) # ?xs1) ==
### (0::?'b1) < ?x1 | ?x1 = (0::?'b1) & pos_primfun_list ?xs1
### Ignoring duplicate rewrite rule:
### nonneg_primfun_list [] == True
### Ignoring duplicate rewrite rule:
### nonneg_primfun_list ((?uu1, ?x1) # ?xs1) ==
### (0::?'b1) < ?x1 | ?x1 = (0::?'b1) & nonneg_primfun_list ?xs1
### Ignoring duplicate rewrite rule:
### iszero_primfun_list [] == True
### Ignoring duplicate rewrite rule:
### iszero_primfun_list ((?uu1, ?x1) # ?xs1) ==
### ?x1 = (0::?'b1) & iszero_primfun_list ?xs1
### theory "Landau_Symbols.Landau_Real_Products"
### 3.355s elapsed time, 13.164s cpu time, 1.929s GC time
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
locale sigma_algebra
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "sigma_algebra \<Omega> M"
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "sigma_setsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "smallest_ccdi_setsp"
  Proving monotonicity ...
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*> {}"
locale Dynkin_system
  fixes \<Omega> :: "'a set"
    and M :: "'a set set"
  assumes "Dynkin_system \<Omega> M"
### theory "HOL-Decision_Procs.Approximation_Bounds"
### 3.971s elapsed time, 15.528s cpu time, 2.368s GC time
Loading theory "HOL-Decision_Procs.Approximation" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Approximation")
### theory "HOL-Analysis.Extended_Real_Limits"
### 1.163s elapsed time, 4.516s cpu time, 0.661s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
class ordered_euclidean_space = Inf + Sup + euclidean_space + abs + inf +
  sup + ord +
  assumes
    "eucl_le":
      "!!x y. (x <= y) = (ALL i:Basis. x \<bullet> i <= y \<bullet> i)"
  assumes "eucl_less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
  assumes
    "eucl_inf":
      "!!x y.
          inf x y =
          (SUM i:Basis. inf (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_sup":
      "!!x y.
          sup x y =
          (SUM i:Basis. sup (x \<bullet> i) (y \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Inf":
      "!!X. Inf X = (SUM i:Basis. (INF x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_Sup":
      "!!X. Sup X = (SUM i:Basis. (SUP x\<in>X. x \<bullet> i) *\<^sub>R i)"
  assumes
    "eucl_abs":
      "!!x. \<bar>x\<bar> =
            (SUM i:Basis. \<bar>x \<bullet> i\<bar> *\<^sub>R i)"
### theory "HOL-Analysis.Sigma_Algebra"
### 1.735s elapsed time, 6.760s cpu time, 0.974s GC time
Loading theory "HOL-Analysis.Measurable" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Measure_Space")
signature MEASURABLE =
  sig
    val add_del_cong_thm: bool -> thm -> Context.generic -> Context.generic
    val add_local_cong: thm -> Proof.context -> Proof.context
    val add_preprocessor:
       string -> preprocessor -> Context.generic -> Context.generic
    val cong_thm_attr: attribute context_parser
    val del_preprocessor: string -> Context.generic -> Context.generic
    val dest_thm_attr: attribute context_parser
    val get_all: Context.generic -> thm list
    val get_cong: Context.generic -> thm list
    val get_dest: Context.generic -> thm list
    datatype level = Concrete | Generic
    val measurable_tac: Proof.context -> thm list -> tactic
    val measurable_thm_attr: bool * (bool * level) -> attribute
    val prepare_facts: Proof.context -> thm list -> thm list * Proof.context
    type preprocessor = thm -> Proof.context -> thm list * Proof.context
    val simproc: Proof.context -> cterm -> thm option
  end
structure Measurable: MEASURABLE
### theory "HOL-Analysis.Measurable"
### 0.616s elapsed time, 2.384s cpu time, 0.410s GC time
Loading theory "HOL-Analysis.Measure_Space" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
### theory "HOL-Analysis.Summation_Tests"
### 0.999s elapsed time, 3.862s cpu time, 0.712s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Uniform_Limit"
### 2.098s elapsed time, 7.925s cpu time, 5.620s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
locale sigma_finite_measure
  fixes M :: "'a measure"
  assumes "sigma_finite_measure M"
locale finite_measure
  fixes M :: "'a measure"
  assumes "finite_measure M"
instantiation
  prod :: (abs, abs) abs
  abs_prod == abs :: 'a * 'b => 'a * 'b
instantiation
  vec :: (ordered_euclidean_space, finite) ordered_euclidean_space
  abs_vec == abs :: ('a, 'b) vec => ('a, 'b) vec
  inf_vec == inf :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  sup_vec == sup :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
  Inf_vec == Inf :: ('a, 'b) vec set => ('a, 'b) vec
  Sup_vec == Sup :: ('a, 'b) vec set => ('a, 'b) vec
instantiation
  measure :: (type) order_bot
  bot_measure == bot :: 'a measure
  less_eq_measure == less_eq :: 'a measure => 'a measure => bool
  less_measure == less :: 'a measure => 'a measure => bool
Proofs for inductive predicate(s) "less_eq_measure"
  Proving monotonicity ...
### theory "HOL-Analysis.Ordered_Euclidean_Space"
### 5.332s elapsed time, 20.513s cpu time, 7.533s GC time
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space" via "HOL-Analysis.Derivative")
instantiation
  measure :: (type) semilattice_sup
  sup_measure == sup :: 'a measure => 'a measure => 'a measure
instantiation
  measure :: (type) complete_lattice
  Inf_measure == Inf :: 'a measure set => 'a measure
  Sup_measure == Sup :: 'a measure set => 'a measure
  top_measure == top :: 'a measure
  inf_measure == inf :: 'a measure => 'a measure => 'a measure
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
### theory "HOL-Analysis.Measure_Space"
### 3.458s elapsed time, 13.264s cpu time, 6.244s GC time
Loading theory "HOL-Analysis.Caratheodory" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "HOL-Analysis.Caratheodory"
### 0.433s elapsed time, 1.684s cpu time, 0.305s GC time
Loading theory "HOL-Analysis.Tagged_Division" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Henstock_Kurzweil_Integration")
### theory "HOL-Analysis.Line_Segment"
### 1.034s elapsed time, 4.032s cpu time, 0.621s GC time
Loading theory "HOL-Analysis.Starlike" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy" via "HOL-Analysis.Path_Connected")
### theory "HOL-Analysis.Bounded_Linear_Function"
### 2.088s elapsed time, 8.135s cpu time, 1.209s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration" via "HOL-Analysis.Borel_Space")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
locale operative
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
    and g :: "'b set => 'a"
  assumes "operative (\<^bold>*) \<^bold>1 g"
Found termination order: "{}"
locale operative_real
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
    and g :: "real set => 'a"
  assumes "operative_real (\<^bold>*) \<^bold>1 g"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Analysis.Tagged_Division"
### 1.121s elapsed time, 4.293s cpu time, 0.926s GC time
Loading theory "Landau_Symbols.Landau_Simprocs" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi" via "Akra_Bazzi.Akra_Bazzi_Real" via "Akra_Bazzi.Akra_Bazzi_Asymptotics" via "Akra_Bazzi.Akra_Bazzi_Library" via "Landau_Symbols.Landau_More")
### ML warning (line 63 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (dest_bigtheta) has not been referenced.
### ML warning (line 176 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (x_name2) has not been referenced.
### ML warning (line 185 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (rest2) has not been referenced.
### ML warning (line 185 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Value identifier (rest1) has not been referenced.
### ML warning (line 318 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Pattern is not exhaustive.
### ML warning (line 373 of "$AFP/Landau_Symbols/landau_simprocs.ML"):
### Pattern is not exhaustive.
signature LANDAU =
  sig
    val cancel_factor_conv: Proof.context -> cterm -> thm
    val cancel_factor_simproc: Proof.context -> cterm -> thm option
    val dest_landau: term -> term * term * term
    val landau_const_names: string list
    val landau_sum_limit: int Config.T
    val lift_landau_conv: conv -> conv
    val lift_landau_simproc:
       (Proof.context -> cterm -> thm option) ->
         Proof.context -> cterm -> thm option
    val simplify_landau_product_conv: Proof.context -> conv
    val simplify_landau_product_simproc:
       Proof.context -> cterm -> thm option
    val simplify_landau_real_prod_prop_conv: Proof.context -> conv
    val simplify_landau_real_prod_prop_simproc:
       Proof.context -> cterm -> thm option
    val simplify_landau_sum_conv: Proof.context -> conv
    val simplify_landau_sum_simproc: Proof.context -> cterm -> thm option
  end
structure Landau: LANDAU
### theory "Landau_Symbols.Landau_Simprocs"
### 21.498s elapsed time, 72.283s cpu time, 70.653s GC time
Loading theory "Landau_Symbols.Landau_More" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi" via "Akra_Bazzi.Akra_Bazzi_Real" via "Akra_Bazzi.Akra_Bazzi_Asymptotics" via "Akra_Bazzi.Akra_Bazzi_Library")
### theory "Landau_Symbols.Landau_More"
### 0.204s elapsed time, 0.798s cpu time, 0.115s GC time
Loading theory "Akra_Bazzi.Akra_Bazzi_Library" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi" via "Akra_Bazzi.Akra_Bazzi_Real" via "Akra_Bazzi.Akra_Bazzi_Asymptotics")
### theory "Akra_Bazzi.Akra_Bazzi_Library"
### 0.322s elapsed time, 1.276s cpu time, 0.095s GC time
Loading theory "Akra_Bazzi.Akra_Bazzi_Asymptotics" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi" via "Akra_Bazzi.Akra_Bazzi_Real")
locale akra_bazzi_asymptotics_bep
  fixes b :: "real"
    and e :: "real"
    and p :: "real"
    and hb :: "real"
  assumes "akra_bazzi_asymptotics_bep b e hb"
### theory "HOL-Analysis.Starlike"
### 23.101s elapsed time, 78.505s cpu time, 71.747s GC time
Loading theory "HOL-Analysis.Path_Connected" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism" via "HOL-Analysis.Homotopy")
### theory "Akra_Bazzi.Akra_Bazzi_Asymptotics"
### 0.328s elapsed time, 1.291s cpu time, 0.278s GC time
Loading theory "Akra_Bazzi.Akra_Bazzi_Real" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Akra_Bazzi")
### theory "HOL-Analysis.Derivative"
### 23.218s elapsed time, 78.976s cpu time, 71.759s GC time
Loading theory "HOL-Analysis.Borel_Space" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure" via "HOL-Analysis.Nonnegative_Lebesgue_Integration")
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*>
   case_sum (%x. 0) (%x. Suc 0) <*mlex*> {}"
locale akra_bazzi_integral
  fixes integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
  assumes "akra_bazzi_integral integrable integral"
locale akra_bazzi_params
  fixes k :: "nat"
    and as :: "real list"
    and bs :: "real list"
  assumes "akra_bazzi_params k as bs"
locale akra_bazzi_params_nonzero
  fixes k :: "nat"
    and as :: "real list"
    and bs :: "real list"
  assumes "akra_bazzi_params_nonzero k as bs"
locale akra_bazzi_real_recursion
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
  assumes "akra_bazzi_real_recursion as bs hs k x\<^sub>0 x\<^sub>1 hb e p"
locale akra_bazzi_real
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and f :: "real => real"
    and g :: "real => real"
    and C :: "real"
  assumes
    "akra_bazzi_real as bs hs k x\<^sub>0 x\<^sub>1 hb e p integrable
      integral f g C"
locale akra_bazzi_nat_to_real
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and f :: "nat => real"
    and g :: "real => real"
  assumes "akra_bazzi_nat_to_real as bs hs k x\<^sub>0 x\<^sub>1 hb e p f g"
locale akra_bazzi_real_lower
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and f :: "real => real"
    and g :: "real => real"
    and C :: "real"
    and fb2 :: "real"
    and gb2 :: "real"
    and c2 :: "real"
  assumes
    "akra_bazzi_real_lower as bs hs k x\<^sub>0 x\<^sub>1 hb e p integrable
      integral f g C fb2 gb2 c2"
locale akra_bazzi_real_upper
  fixes as :: "real list"
    and bs :: "real list"
    and hs :: "(real => real) list"
    and k :: "nat"
    and x\<^sub>0 :: "real"
    and x\<^sub>1 :: "real"
    and hb :: "real"
    and e :: "real"
    and p :: "real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and f :: "real => real"
    and g :: "real => real"
    and C :: "real"
    and fb1 :: "real"
    and c1 :: "real"
  assumes
    "akra_bazzi_real_upper as bs hs k x\<^sub>0 x\<^sub>1 hb e p integrable
      integral f g C fb1 c1"
### theory "Akra_Bazzi.Akra_Bazzi_Real"
### 0.696s elapsed time, 2.758s cpu time, 0.265s GC time
Loading theory "HOL-Analysis.Cartesian_Euclidean_Space" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Cartesian_Euclidean_Space"
### 0.372s elapsed time, 1.465s cpu time, 0.244s GC time
Loading theory "Akra_Bazzi.Akra_Bazzi" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method")
locale akra_bazzi_recursion
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
  assumes "akra_bazzi_recursion x\<^sub>0 x\<^sub>1 k as bs ts"
locale akra_bazzi_function
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
  assumes
    "akra_bazzi_function x\<^sub>0 x\<^sub>1 k as bs ts f integrable
      integral g"
locale akra_bazzi_lower
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
    and g' :: "real => real"
  assumes
    "akra_bazzi_lower x\<^sub>0 x\<^sub>1 k as bs ts f integrable integral g
      g'"
locale akra_bazzi_upper
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
    and g' :: "real => real"
  assumes
    "akra_bazzi_upper x\<^sub>0 x\<^sub>1 k as bs ts f integrable integral g
      g'"
### theory "HOL-Analysis.Path_Connected"
### 1.926s elapsed time, 7.618s cpu time, 1.002s GC time
Loading theory "HOL-Analysis.Homotopy" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Homeomorphism")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale akra_bazzi
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and integrable :: "(real => real) => real => real => bool"
    and integral :: "(real => real) => real => real => real"
    and g :: "nat => real"
    and g' :: "real => real"
  assumes
    "akra_bazzi x\<^sub>0 x\<^sub>1 k as bs ts f integrable integral g g'"
### theory "HOL-Analysis.Borel_Space"
### 2.156s elapsed time, 8.517s cpu time, 1.120s GC time
Loading theory "HOL-Analysis.Nonnegative_Lebesgue_Integration" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure" via "HOL-Analysis.Binary_Product_Measure")
### theory "Akra_Bazzi.Akra_Bazzi"
### 1.249s elapsed time, 4.917s cpu time, 0.732s GC time
Loading theory "HOL-Analysis.Regularity" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
### theory "HOL-Analysis.Regularity"
### 0.694s elapsed time, 2.747s cpu time, 0.339s GC time
Loading theory "Root_Balanced_Tree.Time_Monad" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common")
locale Retracts
  fixes s :: "'a set"
    and h :: "'a => 'b"
    and t :: "'b set"
    and k :: "'b => 'a"
  assumes "Retracts s h t k"
Found termination order: "{}"
Found termination order: "{}"
### theory "Root_Balanced_Tree.Time_Monad"
### 0.585s elapsed time, 2.295s cpu time, 0.376s GC time
"- \<infinity>"
  :: "ereal"
"\<infinity>"
  :: "ereal"
### theory "HOL-Analysis.Nonnegative_Lebesgue_Integration"
### 1.794s elapsed time, 7.150s cpu time, 1.025s GC time
Loading theory "HOL-Analysis.Binary_Product_Measure" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Finite_Product_Measure")
### theory "HOL-Analysis.Homotopy"
### 2.239s elapsed time, 8.892s cpu time, 1.183s GC time
Loading theory "HOL-Analysis.Homeomorphism" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
"ereal (13 / 4)"
  :: "ereal"
locale pair_sigma_finite
  fixes M1 :: "'a measure"
    and M2 :: "'b measure"
  assumes "pair_sigma_finite M1 M2"
### theory "HOL-Analysis.Binary_Product_Measure"
### 0.645s elapsed time, 2.517s cpu time, 0.526s GC time
Loading theory "HOL-Analysis.Finite_Product_Measure" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
### theory "HOL-Analysis.Homeomorphism"
### 0.649s elapsed time, 2.527s cpu time, 0.496s GC time
val it =
   "(%x. 5 * (ln (ln x))\<^sup>2 / (2 * x) powr (15 / 10) * inverse 2)
    : \<omega>(%x. 3 * ln x * ln x / x * ln (ln (ln (ln x)))) ==
    3 = 0 |
    5 * inverse (2 powr (15 / 10)) * inverse 2 ~= 0 &
    pos_primfun_list
     (group_primfuns
       [(LnChain 1, - 1), (LnChain 1, - 1), (LnChain 0, 1),
        (LnChain 4, - 1), (LnChain 2, real 2), (LnChain 0, - (15 / 10))])":
   thm
"True"
  :: "bool"
"True"
  :: "bool"
?a : affine hull ?S ==> aff_dim ?S = int (dim ((+) (- ?a) ` ?S))
locale product_sigma_finite
  fixes M :: "'i => 'a measure"
  assumes "product_sigma_finite M"
locale finite_product_sigma_finite
  fixes M :: "'i => 'a measure"
    and I :: "'i set"
  assumes "finite_product_sigma_finite M I"
### theory "HOL-Analysis.Finite_Product_Measure"
### 0.912s elapsed time, 2.924s cpu time, 0.384s GC time
Loading theory "HOL-Analysis.Bochner_Integration" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure" via "HOL-Analysis.Complete_Measure")
Proofs for inductive predicate(s) "simple_bochner_integrable"
  Proving monotonicity ...
Proofs for inductive predicate(s) "has_bochner_integral"
  Proving monotonicity ...
Proofs for inductive predicate(s) "integrable"
  Proving monotonicity ...
### theory "HOL-Analysis.Bochner_Integration"
### 1.190s elapsed time, 2.577s cpu time, 0.477s GC time
Loading theory "HOL-Analysis.Complete_Measure" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Lebesgue_Measure")
Loading theory "HOL-Analysis.Radon_Nikodym" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" via "HOL-Analysis.Set_Integral")
locale complete_measure
  fixes M :: "'a measure"
  assumes "complete_measure M"
locale semifinite_measure
  fixes M :: "'a measure"
  assumes "semifinite_measure M"
locale locally_determined_measure
  fixes M :: "'a measure"
  assumes "locally_determined_measure M"
locale cld_measure
  fixes M :: "'a measure"
  assumes "cld_measure M"
### theory "HOL-Analysis.Radon_Nikodym"
### 2.048s elapsed time, 7.452s cpu time, 6.601s GC time
Loading theory "HOL-Analysis.Set_Integral" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Complete_Measure"
### 2.219s elapsed time, 7.970s cpu time, 6.651s GC time
Loading theory "HOL-Analysis.Lebesgue_Measure" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### theory "HOL-Analysis.Set_Integral"
### 0.562s elapsed time, 1.717s cpu time, 0.215s GC time
Proofs for inductive predicate(s) "fsigma"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gdelta"
  Proving monotonicity ...
### theory "HOL-Analysis.Lebesgue_Measure"
### 1.339s elapsed time, 3.165s cpu time, 0.326s GC time
Loading theory "HOL-Analysis.Henstock_Kurzweil_Integration" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem" via "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration")
### Cannot skip proof of schematic goal statement
Found termination order:
  "case_sum (%p. size (fst (snd p))) (%p. size (fst (snd p))) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*>
   case_sum (%p. size (fst (snd (snd p))))
    (%p. size_list size (snd (snd (snd p)))) <*mlex*>
   {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### theory "HOL-Analysis.Henstock_Kurzweil_Integration"
### 2.199s elapsed time, 4.746s cpu time, 0.644s GC time
Loading theory "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method" via "Akra_Bazzi.Master_Theorem")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Analysis.Equivalence_Lebesgue_Henstock_Integration"
### 1.913s elapsed time, 4.273s cpu time, 0.666s GC time
Loading theory "Akra_Bazzi.Master_Theorem" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common" via "Akra_Bazzi.Akra_Bazzi_Method")
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
locale master_theorem_function
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and g :: "nat => real"
  assumes "master_theorem_function x\<^sub>0 x\<^sub>1 k as bs ts f g"
### theory "Akra_Bazzi.Master_Theorem"
### 0.590s elapsed time, 1.285s cpu time, 0.185s GC time
Loading theory "Akra_Bazzi.Akra_Bazzi_Method" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common")
locale master_theorem_function
  fixes x\<^sub>0 :: "nat"
    and x\<^sub>1 :: "nat"
    and k :: "nat"
    and as :: "real list"
    and bs :: "real list"
    and ts :: "(nat => nat) list"
    and f :: "nat => real"
    and g :: "nat => real"
  assumes "master_theorem_function x\<^sub>0 x\<^sub>1 k as bs ts f g"
### ML warning (line 369 of "$AFP/Akra_Bazzi/Akra_Bazzi_Method.thy"):
### Pattern is not exhaustive.
val generalize_master_thm = fn: Proof.context -> thm -> thm
val generalize_master_thm' = fn:
   binding * thm -> Proof.context -> local_theory
signature AKRA_BAZZI =
  sig
    val akra_bazzi_measure_tac: Proof.context -> int -> tactic
    val akra_bazzi_relation_tac: Proof.context -> int -> tactic
    val akra_bazzi_sum_tac: Proof.context -> int -> tactic
    val akra_bazzi_term_tac: Proof.context -> int -> tactic
    val akra_bazzi_termination_tac: Proof.context -> int -> tactic
    val master_theorem_function_tac: bool -> Proof.context -> int -> tactic
    val master_theorem_tac:
       string option ->
         bool ->
           thm option ->
             term option ->
               term option -> term option -> Proof.context -> int -> tactic
    val setup_master_theorem:
       Context.generic * Token.T list ->
         (Proof.context -> Method.method) * (Context.generic * Token.T list)
  end
structure Akra_Bazzi: AKRA_BAZZI
### theory "Akra_Bazzi.Akra_Bazzi_Method"
### 0.751s elapsed time, 2.065s cpu time, 0.176s GC time
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
signature APPROXIMATION_COMPUTATION =
  sig
    val approx_arith: Proof.context -> term -> term
    val approx_bool: Proof.context -> term -> term
    val approx_conv: Proof.context -> conv
    val approx_form_eval: Proof.context -> term -> term
  end
structure Approximation_Computation: APPROXIMATION_COMPUTATION
signature APPROXIMATION =
  sig
    val approx: int -> Proof.context -> term -> term
    val approximate: Proof.context -> term -> term
    val approximation_tac:
       int ->
         (string * int) list -> int option -> Proof.context -> int -> tactic
    val reify_form: Proof.context -> term -> term
  end
structure Approximation:
  sig
    val apply_reify_form: Proof.context -> term -> term
    val apply_tactic: Proof.context -> term -> tactic -> term
    val approx: int -> Proof.context -> term -> term
    val approx_arith: int -> Proof.context -> term -> term
    val approx_form: int -> Proof.context -> term -> term
    val approximate: Proof.context -> term -> term
    val approximate_cmd: string list -> string -> Toplevel.state -> unit
    val approximation_tac:
       int ->
         (string * int) list -> int option -> Proof.context -> int -> tactic
    val calculated_subterms: term -> term list
    val dest_float: term -> int * int
    val dest_interpret: term -> term * term
    val dest_interpret_env: term -> term
    val dest_interpret_form: term -> term * term
    val dest_ivl: term -> ((int * int) * (int * int)) option
    val float2_float10: int -> bool -> int * int -> int * int
    val mk_approx': int -> term -> term
    val mk_approx_form_eval: int -> term -> term -> term
    val mk_result: int -> ((int * int) * (int * int)) option -> term
    val opt_modes: Token.T list -> string list * Token.T list
    val prepare_form: Proof.context -> term -> term
    val prepare_form_tac: Proof.context -> int -> tactic
    val preproc_form_conv: Proof.context -> conv
    val realify: term -> term
    val reify_form: Proof.context -> term -> term
    val reify_form_conv: Proof.context -> cterm -> thm
    val reify_form_tac: Proof.context -> int -> tactic
    val reorder_bounds_tac: Proof.context -> thm list -> int -> tactic
    val rewrite_interpret_form_tac:
       Proof.context ->
         int ->
           (string * int) list -> int option -> int -> thm -> thm Seq.seq
  end
### ML warning (line 201 of "~~/src/HOL/Decision_Procs/approximation_generator.ML"):
### Matches are not exhaustive.
signature APPROXIMATION_GENERATOR =
  sig
    val approximation_generator:
       Proof.context ->
         (term * term list) list ->
           bool ->
             int list ->
               (bool * term list) option * Quickcheck.report option
    val custom_seed: int Config.T
    val epsilon: real Config.T
    val precision: int Config.T
    val setup: theory -> theory
  end
structure Approximation_Generator: APPROXIMATION_GENERATOR
bundle floatarith_notation
bundle no_floatarith_notation
### theory "HOL-Decision_Procs.Approximation"
### 53.036s elapsed time, 161.454s cpu time, 99.087s GC time
Loading theory "Akra_Bazzi.Akra_Bazzi_Approximation" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair" via "Draft.Common")
locale akra_bazzi_params_nonzero
  fixes k :: "nat"
    and as :: "real list"
    and bs :: "real list"
  assumes "akra_bazzi_params_nonzero k as bs"
signature AKRA_BAZZI_APPROXIMATION =
  sig
    val akra_bazzi_approximate_tac: int -> Proof.context -> int -> tactic
  end
structure Akra_Bazzi_Approximation: AKRA_BAZZI_APPROXIMATION
### theory "Akra_Bazzi.Akra_Bazzi_Approximation"
### 0.481s elapsed time, 0.692s cpu time, 0.074s GC time
Loading theory "Draft.Common" (required by "Draft.Closest_PairMoreTemplates" via "Draft.Closest_Pair")
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. (nat o abs) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. (nat o abs) (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "size_list (%p. (nat o abs) (snd p)) <*mlex*> {}"
### theory "Draft.Common"
### 4.350s elapsed time, 4.765s cpu time, 0.465s GC time
Loading theory "Draft.Closest_Pair" (required by "Draft.Closest_PairMoreTemplates")
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. (nat o abs) (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
See theory exports
### theory "Draft.Closest_Pair"
### 4.226s elapsed time, 4.624s cpu time, 0.489s GC time
Loading theory "Draft.Closest_PairMoreTemplates"
val templateLemmas =
   [("Closest_Pair.closest_pair_recurrence_nonneg",
     "0 <= closest_pair_recurrence ?n",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Closest_Pair.closest_pair_code_eq",
     "closest_pair ?ps = closest_pair_code ?ps",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Closest_Pair.closest_pair_rec_eq_val_closest_pair_rec_tm",
     "Time_Monad.val (closest_pair_rec_tm ?xs) = closest_pair_rec ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Closest_Pair.closest_pair_eq_val_closest_pair_tm",
     "Time_Monad.val (closest_pair_tm ?ps) = closest_pair ?ps",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Closest_Pair.t_find_closest_eq_time_find_closest_tm",
     "t_find_closest ?p ?\<delta> ?ps =
      time (find_closest_tm ?p ?\<delta> ?ps)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Closest_Pair.find_closest_eq_val_find_closest_tm",
     "Time_Monad.val (find_closest_tm ?p ?\<delta> ?ps) =
      find_closest ?p ?\<delta> ?ps",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Closest_Pair.t_find_closest_pair_eq_time_find_closest_pair_tm",
     "t_find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps =
      time (find_closest_pair_tm (?c\<^sub>0, ?c\<^sub>1) ?ps)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Closest_Pair.find_closest_pair_eq_val_find_closest_pair_tm",
     "Time_Monad.val (find_closest_pair_tm (?c\<^sub>0, ?c\<^sub>1) ?ps) =
      find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Closest_Pair.time_closest_pair_conv_closest_pair_recurrence",
     "distinct ?ps ==>
      real (time (closest_pair_tm ?ps)) <= closest_pair_time (length ?ps)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Closest_Pair.find_closest_set",
     "0 < length ?ps ==> find_closest ?p ?\<delta> ?ps : set ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Closest_Pair.t_find_closest_mono",
     "?\<delta>' <= ?\<delta> ==>
      t_find_closest ?p ?\<delta>' ?ps <= t_find_closest ?p ?\<delta> ?ps",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Closest_Pair.closest_pair_rec_distinct",
     "[| distinct ?xs; (?ys, ?p) = closest_pair_rec ?xs |]
      ==> distinct ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app (template_hole 0, template_var 2))],
       template_predicate
        (template_app (template_hole 3, template_var 1)))),
    ("Closest_Pair.time_closest_pair_rec_conv_closest_pair_recurrence",
     "[| distinct ?ps; sorted_fst ?ps |]
      ==> real (time (closest_pair_rec_tm ?ps))
          <= closest_pair_recurrence (length ?ps)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Closest_Pair.closest_pair_simps",
     "1 < length ?ps ==>
      closest_pair ?ps =
      (let (uu_, p) = closest_pair_rec (mergesort fst ?ps) in p)",
     template_implication
      ([template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0))),
           template_app (template_hole 0, t_empty))))),
    ("Closest_Pair.t_find_closest_cnt",
     "t_find_closest ?p ?\<delta> ?ps
      <= 1 +
         length
          (filter (%q. real_of_int (snd q - snd ?p) <= ?\<delta>) ?ps)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0))))),
    ("Closest_Pair.t_combine_eq_time_combine_tm",
     "t_combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
       (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps =
      time
       (combine_tm (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
         (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4)),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)))),
    ("Closest_Pair.combine_eq_val_combine_tm",
     "Time_Monad.val
       (combine_tm (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
         (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps) =
      combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
       (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Closest_Pair.find_closest_code_dist_eq",
     "[| 0 < length ?ps;
         (?\<delta>\<^sub>c, ?c) = find_closest_code ?p ?\<delta> ?ps |]
      ==> ?\<delta>\<^sub>c = dist_code ?p ?c",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0),
            template_var 4))],
       template_equation
        (template_var 3,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Closest_Pair.closest_pair_rec_set_length_sorted_snd",
     "(?ys, ?p) = closest_pair_rec ?xs ==>
      set ?ys = set ?xs & length ?ys = length ?xs & sorted_snd ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_app (template_hole 1, template_var 0))),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Closest_Pair.closest_pair_c0_c1",
     "[| 1 < length ?ps; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) = closest_pair ?ps |]
      ==> ?c\<^sub>0 ~= ?c\<^sub>1",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Closest_Pair.closest_pair_c0_c1",
     "[| 1 < length ?ps; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) = closest_pair ?ps |]
      ==> ?c\<^sub>0 : set ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Closest_Pair.closest_pair_c0_c1",
     "[| 1 < length ?ps; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) = closest_pair ?ps |]
      ==> ?c\<^sub>1 : set ?ps",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Closest_Pair.closest_pair_rec_code_dist_eq",
     "[| 1 < length ?xs;
         (?ys, ?\<delta>, ?c\<^sub>0, ?c\<^sub>1) =
         closest_pair_rec_code ?xs |]
      ==> ?\<delta> = dist_code ?c\<^sub>0 ?c\<^sub>1",
     template_implication
      ([template_inequation
         (less_than, template_hole 8,
          template_app (template_hole 7, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))),
          template_app (template_hole 2, template_var 4))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Closest_Pair.find_closest_pair_c0_ne_c1",
     "[| ?c\<^sub>0 ~= ?c\<^sub>1; distinct ?ps;
         (?C\<^sub>0, ?C\<^sub>1) =
         find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps |]
      ==> ?C\<^sub>0 ~= ?C\<^sub>1",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3)),
            template_var 2))],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Closest_Pair.time_closest_pair_rec_tm_simps_1",
     "length ?xs <= 3 ==>
      time (closest_pair_rec_tm ?xs) =
      1 + time (length_tm ?xs) + time (mergesort_tm snd ?xs) +
      time (closest_pair_bf_tm ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 15, template_var 0),
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)))],
       template_equation
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0)))),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Closest_Pair.find_closest_pair_code_dist_eq",
     "[| ?\<delta> = dist_code ?c\<^sub>0 ?c\<^sub>1;
         (?\<Delta>, ?C\<^sub>0, ?C\<^sub>1) =
         find_closest_pair_code (?\<delta>, ?c\<^sub>0, ?c\<^sub>1) ?ps |]
      ==> ?\<Delta> = dist_code ?C\<^sub>0 ?C\<^sub>1",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 4, template_var 5),
            template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_app
           (template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 2, template_var 6),
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4))),
            template_var 0))],
       template_equation
        (template_var 3,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 1)))),
    ("Closest_Pair.find_closest_pair_set",
     "(?C\<^sub>0, ?C\<^sub>1) =
      find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps ==>
      ?C\<^sub>0 : set ?ps & ?C\<^sub>1 : set ?ps |
      ?C\<^sub>0 = ?c\<^sub>0 & ?C\<^sub>1 = ?c\<^sub>1",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1)),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_app (template_hole 1, template_var 0))),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)))
           ))),
    ("Closest_Pair.closest_pair_rec_ys_eq",
     "[| 1 < length ?xs;
         (?ys, ?c\<^sub>0, ?c\<^sub>1) = closest_pair_rec ?xs;
         (?ys', ?\<delta>', ?c\<^sub>0', ?c\<^sub>1') =
         closest_pair_rec_code ?xs |]
      ==> ?ys = ?ys'",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 6),
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4)),
          template_app (template_hole 5, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))),
          template_app (template_hole 1, template_var 7))],
       template_equation (template_var 6, template_var 3))),
    ("Closest_Pair.closest_pair_rec_c0_c1",
     "[| 1 < length ?xs; distinct ?xs;
         (?ys, ?c\<^sub>0, ?c\<^sub>1) = closest_pair_rec ?xs |]
      ==> ?c\<^sub>0 : set ?xs &
          ?c\<^sub>1 : set ?xs & ?c\<^sub>0 ~= ?c\<^sub>1",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app (template_hole 5, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_var 3))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 2, template_var 3))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("Closest_Pair.closest_pair_rec_code_eq",
     "[| 1 < length ?xs;
         (?ys, ?c\<^sub>0, ?c\<^sub>1) = closest_pair_rec ?xs;
         (?ys', ?\<delta>', ?c\<^sub>0', ?c\<^sub>1') =
         closest_pair_rec_code ?xs |]
      ==> ?c\<^sub>0 = ?c\<^sub>0' & ?c\<^sub>1 = ?c\<^sub>1'",
     template_implication
      ([template_inequation
         (less_than, template_hole 11,
          template_app (template_hole 10, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 6),
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 4)),
          template_app (template_hole 6, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))),
          template_app (template_hole 2, template_var 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("Closest_Pair.combine_c0_ne_c1",
     "[| ?p\<^sub>0\<^sub>L ~= ?p\<^sub>1\<^sub>L;
         ?p\<^sub>0\<^sub>R ~= ?p\<^sub>1\<^sub>R; distinct ?ps;
         (?c\<^sub>0, ?c\<^sub>1) =
         combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps |]
      ==> ?c\<^sub>0 ~= ?c\<^sub>1",
     template_implication
      ([template_negation
         (template_equation (template_var 7, template_var 6)),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 1, template_var 7),
                    template_var 6)),
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4)),
              template_var 0),
            template_var 3))],
       template_negation
        (template_equation (template_var 2, template_var 1)))),
    ("Closest_Pair.closest_pair_dist",
     "[| 1 < length ?ps; (?c\<^sub>0, ?c\<^sub>1) = closest_pair ?ps |]
      ==> sparse
           (dist
             (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)))
           (set ?ps)",
     template_implication
      ([template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, t_empty),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 0))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Closest_Pair.find_closest_pair_dist",
     "[| sorted_snd ?ps;
         (?C\<^sub>0, ?C\<^sub>1) =
         find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps |]
      ==> sparse
           (dist
             (case ?C\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case ?C\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)))
           (set ?ps)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0)),
            template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, t_empty),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 2))),
             template_app (template_hole 0, template_var 4))
           ))),
    ("Closest_Pair.combine_set",
     "(?c\<^sub>0, ?c\<^sub>1) =
      combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
       (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps ==>
      ?c\<^sub>0 : set ?ps & ?c\<^sub>1 : set ?ps |
      ?c\<^sub>0 = ?p\<^sub>0\<^sub>L & ?c\<^sub>1 = ?p\<^sub>1\<^sub>L |
      ?c\<^sub>0 = ?p\<^sub>0\<^sub>R & ?c\<^sub>1 = ?p\<^sub>1\<^sub>R",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 7), template_var 6),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4)),
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 7),
                     template_app (template_hole 1, template_var 0))),
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 7),
                       template_var 5)),
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 4))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 2))))
           ))),
    ("Closest_Pair.combine_code_dist_eq",
     "[| ?\<delta>\<^sub>L =
         dist_code ?p\<^sub>0\<^sub>L ?p\<^sub>1\<^sub>L;
         ?\<delta>\<^sub>R =
         dist_code ?p\<^sub>0\<^sub>R ?p\<^sub>1\<^sub>R;
         (?\<delta>, ?c\<^sub>0, ?c\<^sub>1) =
         combine_code
          (?\<delta>\<^sub>L, ?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?\<delta>\<^sub>R, ?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l
          ?ps |]
      ==> ?\<delta> = dist_code ?c\<^sub>0 ?c\<^sub>1",
     template_implication
      ([template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 4, template_var 9),
            template_var 8)),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 4, template_var 6),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4),
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 2, template_var 10),
                    template_app
                     (template_app (template_hole 1, template_var 9),
                      template_var 8))),
                template_app
                 (template_app (template_hole 2, template_var 7),
                  template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 5))),
              template_var 1),
            template_var 0))],
       template_equation
        (template_var 4,
         template_app
          (template_app (template_hole 4, template_var 3),
           template_var 2)))),
    ("Closest_Pair.closest_pair_rec_dist",
     "[| 1 < length ?xs; sorted_fst ?xs;
         (?ys, ?c\<^sub>0, ?c\<^sub>1) = closest_pair_rec ?xs |]
      ==> sparse
           (dist
             (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)))
           (set ?xs)",
     template_implication
      ([template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 3)),
        template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)),
          template_app (template_hole 6, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, t_empty),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 0))),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Closest_Pair.find_closest_pair_dist_mono",
     "(?C\<^sub>0, ?C\<^sub>1) =
      find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps ==>
      dist (case ?C\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
       (case ?C\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))
      <= dist (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1)),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 4)),
           template_app
            (template_app (template_hole 2, t_empty), template_var 3)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 2, t_empty), template_var 1))))),
    ("Closest_Pair.closest_pair_rec_code_simps",
     "[| ?n = length ?xs; ~ ?n <= 3 |]
      ==> closest_pair_rec_code ?xs =
          (let (xs\<^sub>L, xs\<^sub>R) = split_at (?n div 2) ?xs;
               l = fst (hd xs\<^sub>R);
               (ys\<^sub>L, p\<^sub>L) = closest_pair_rec_code xs\<^sub>L;
               (ys\<^sub>R, p\<^sub>R) = closest_pair_rec_code xs\<^sub>R;
               ys = Common.merge snd ys\<^sub>L ys\<^sub>R
           in (ys, combine_code p\<^sub>L p\<^sub>R l ys))",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 22, template_var 0)),
        template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_hole 19,
                template_app (template_hole 18, template_hole 17)))
            )],
       template_equation
        (template_app (template_hole 15, template_var 0),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 1),
                   template_app
                    (template_hole 19,
                     template_app (template_hole 11, template_hole 17)))),
               template_var 0)),
           template_app (template_hole 10, t_empty))))),
    ("Closest_Pair.combine_code_eq",
     "[| ?\<delta>\<^sub>L' =
         dist_code ?p\<^sub>0\<^sub>L ?p\<^sub>1\<^sub>L;
         ?\<delta>\<^sub>R' =
         dist_code ?p\<^sub>0\<^sub>R ?p\<^sub>1\<^sub>R;
         sorted_snd ?ps;
         (?c\<^sub>0, ?c\<^sub>1) =
         combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps;
         (?\<delta>', ?c\<^sub>0', ?c\<^sub>1') =
         combine_code
          (?\<delta>\<^sub>L', ?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?\<delta>\<^sub>R', ?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l
          ?ps |]
      ==> ?c\<^sub>0 = ?c\<^sub>0' & ?c\<^sub>1 = ?c\<^sub>1'",
     template_implication
      ([template_equation
         (template_var 12,
          template_app
           (template_app (template_hole 9, template_var 11),
            template_var 10)),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 9, template_var 8),
            template_var 7)),
        template_predicate (template_app (template_hole 8, template_var 6)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 5), template_var 4),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 6, template_var 11),
                    template_var 10)),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_var 7)),
              template_var 3),
            template_var 6)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 3, template_var 12),
                    template_app
                     (template_app (template_hole 6, template_var 11),
                      template_var 10))),
                template_app
                 (template_app (template_hole 3, template_var 9),
                  template_app
                   (template_app (template_hole 6, template_var 8),
                    template_var 7))),
              template_var 3),
            template_var 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("Closest_Pair.closest_pair_rec_simps",
     "[| ?n = length ?xs; ~ ?n <= 3 |]
      ==> closest_pair_rec ?xs =
          (let (xs\<^sub>L, xs\<^sub>R) = split_at (?n div 2) ?xs;
               (ys\<^sub>L, p\<^sub>0\<^sub>L, p\<^sub>1\<^sub>L) =
                 closest_pair_rec xs\<^sub>L;
               (ys\<^sub>R, p\<^sub>0\<^sub>R, p\<^sub>1\<^sub>R) =
                 closest_pair_rec xs\<^sub>R;
               ys = Common.merge snd ys\<^sub>L ys\<^sub>R
           in (ys,
               combine (p\<^sub>0\<^sub>L, p\<^sub>1\<^sub>L)
                (p\<^sub>0\<^sub>R, p\<^sub>1\<^sub>R) (fst (hd xs\<^sub>R))
                ys))",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 23, template_var 0)),
        template_negation
         (
            template_inequation
             (less_equals, template_var 1,
              template_app
               (template_hole 20,
                template_app (template_hole 19, template_hole 18)))
            )],
       template_equation
        (template_app (template_hole 16, template_var 0),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_var 1),
                   template_app
                    (template_hole 20,
                     template_app (template_hole 12, template_hole 18)))),
               template_var 0)),
           template_app (template_hole 11, t_empty))))),
    ("Closest_Pair.find_closest_code_eq",
     "[| 0 < length ?ps;
         ?\<delta> =
         dist (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y));
         ?\<delta>' = dist_code ?c\<^sub>0 ?c\<^sub>1;
         sorted_snd (?p # ?ps); ?c = find_closest ?p ?\<delta> ?ps;
         (?\<delta>\<^sub>c', ?c') = find_closest_code ?p ?\<delta>' ?ps |]
      ==> ?c = ?c'",
     template_implication
      ([template_inequation
         (less_than, template_hole 15,
          template_app (template_hole 14, template_var 8)),
        template_equation
         (template_var 7,
          template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, t_empty), template_var 6)),
            template_app
             (template_app (template_hole 11, t_empty), template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 7, template_var 6),
            template_var 5)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 8))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 7),
            template_var 8)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app (template_hole 0, template_var 3),
              template_var 4),
            template_var 8))],
       template_equation (template_var 2, template_var 0))),
    ("Closest_Pair.find_closest_pair_code_eq",
     "[| ?\<delta> =
         dist (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y));
         ?\<delta>' = dist_code ?c\<^sub>0 ?c\<^sub>1; sorted_snd ?ps;
         (?C\<^sub>0, ?C\<^sub>1) =
         find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps;
         (?\<Delta>', ?C\<^sub>0', ?C\<^sub>1') =
         find_closest_pair_code (?\<delta>', ?c\<^sub>0, ?c\<^sub>1) ?ps |]
      ==> ?C\<^sub>0 = ?C\<^sub>0' & ?C\<^sub>1 = ?C\<^sub>1'",
     template_implication
      ([template_equation
         (template_var 9,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, t_empty), template_var 8)),
            template_app
             (template_app (template_hole 13, t_empty), template_var 7))),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 9, template_var 8),
            template_var 7)),
        template_predicate (template_app (template_hole 8, template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 6, template_var 8),
                template_var 7)),
            template_var 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 6),
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_var 7))),
            template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Closest_Pair.find_closest_dist",
     "[| sorted_snd (?p # ?ps);
         EX q:set ?ps.
            dist (case ?p of (x, y) => (real_of_int x, real_of_int y))
             (case q of (x, y) => (real_of_int x, real_of_int y))
            < ?\<delta> |]
      ==> ALL q:set ?ps.
             dist (case ?p of (x, y) => (real_of_int x, real_of_int y))
              (case find_closest ?p ?\<delta> ?ps of
               (x, y) => (real_of_int x, real_of_int y))
             <= dist (case ?p of (x, y) => (real_of_int x, real_of_int y))
                 (case q of (x, y) => (real_of_int x, real_of_int y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 8, template_var 1)),
             t_empty)
           ))),
    ("Closest_Pair.time_closest_pair_rec_tm_simps_2",
     "~ length ?xs <= 3 ==>
      time (closest_pair_rec_tm ?xs) =
      1 +
      (let (xs\<^sub>L, xs\<^sub>R) =
             Time_Monad.val (split_at_tm (length ?xs div 2) ?xs);
           (ys\<^sub>L, p\<^sub>L) =
             Time_Monad.val (closest_pair_rec_tm xs\<^sub>L);
           (ys\<^sub>R, p\<^sub>R) =
             Time_Monad.val (closest_pair_rec_tm xs\<^sub>R);
           ys = Time_Monad.val (merge_tm snd ys\<^sub>L ys\<^sub>R)
       in time (length_tm ?xs) + time (split_at_tm (length ?xs div 2) ?xs) +
          time (closest_pair_rec_tm xs\<^sub>L) +
          time (closest_pair_rec_tm xs\<^sub>R) +
          time (merge_tm snd ys\<^sub>L ys\<^sub>R) +
          t_combine p\<^sub>L p\<^sub>R (fst (hd xs\<^sub>R)) ys)",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_app (template_hole 28, template_var 0),
              template_app
               (template_hole 27,
                template_app (template_hole 26, template_hole 25)))
            )],
       template_equation
        (template_app
          (template_hole 23,
           template_app (template_hole 22, template_var 0)),
         template_app
          (template_app (template_hole 21, template_hole 20),
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_hole 18,
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app
                        (template_hole 16,
                         template_app (template_hole 28, template_var 0)),
                       template_app
                        (template_hole 27,
                         template_app
                          (template_hole 15, template_hole 25)))),
                   template_var 0))),
             template_app (template_hole 14, t_empty)))))),
    ("Closest_Pair.t_find_closest_bound",
     "[| distinct (?p # ?ps); sorted_snd (?p # ?ps); 0 <= ?\<delta>;
         set (?p # ?ps) = ?ps\<^sub>L Un ?ps\<^sub>R;
         ALL p':set (?p # ?ps).
            real_of_int ?l - ?\<delta> < real_of_int (fst p') &
            real_of_int (fst p') < real_of_int ?l + ?\<delta>;
         ALL p:?ps\<^sub>L. fst p <= ?l; ALL p:?ps\<^sub>R. ?l <= fst p;
         sparse ?\<delta> ?ps\<^sub>L; sparse ?\<delta> ?ps\<^sub>R |]
      ==> t_find_closest ?p ?\<delta> ?ps <= 8",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 21,
              template_app
               (template_app (template_hole 20, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 19,
              template_app
               (template_app (template_hole 20, template_var 5),
                template_var 4))
            ),
        template_inequation (less_equals, template_hole 17, template_var 3),
        template_equation
         (template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 20, template_var 5),
              template_var 4)),
          template_app
           (template_app (template_hole 14, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 20, template_var 5),
                    template_var 4))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 3),
           template_var 4),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 1,
               template_app (template_hole 1, template_hole 0))))))),
    ("Closest_Pair.core_argument",
     "[| distinct (?p # ?ps); sorted_snd (?p # ?ps); 0 <= ?\<delta>;
         set (?p # ?ps) = ?ps\<^sub>L Un ?ps\<^sub>R;
         ALL q:set (?p # ?ps).
            real_of_int ?l - ?\<delta> < real_of_int (fst q) &
            real_of_int (fst q) < real_of_int ?l + ?\<delta>;
         ALL q:?ps\<^sub>L. fst q <= ?l; ALL q:?ps\<^sub>R. ?l <= fst q;
         sparse ?\<delta> ?ps\<^sub>L; sparse ?\<delta> ?ps\<^sub>R |]
      ==> length
           (filter (%q. real_of_int (snd q - snd ?p) <= ?\<delta>) ?ps)
          <= 7",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 24,
              template_app
               (template_app (template_hole 23, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 22,
              template_app
               (template_app (template_hole 23, template_var 5),
                template_var 4))
            ),
        template_inequation (less_equals, template_hole 20, template_var 3),
        template_equation
         (template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 23, template_var 5),
              template_var 4)),
          template_app
           (template_app (template_hole 17, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 18,
                  template_app
                   (template_app (template_hole 23, template_var 5),
                    template_var 4))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty), template_var 4)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_hole 0)))))),
    ("Closest_Pair.t_combine_bound",
     "[| distinct ?ps; sorted_snd ?ps; set ?ps = ?ps\<^sub>L Un ?ps\<^sub>R;
         ALL p:?ps\<^sub>L. fst p <= ?l; ALL p:?ps\<^sub>R. ?l <= fst p;
         sparse
          (dist
            (case ?p\<^sub>0\<^sub>L of
             (x, y) => (real_of_int x, real_of_int y))
            (case ?p\<^sub>1\<^sub>L of
             (x, y) => (real_of_int x, real_of_int y)))
          ?ps\<^sub>L;
         sparse
          (dist
            (case ?p\<^sub>0\<^sub>R of
             (x, y) => (real_of_int x, real_of_int y))
            (case ?p\<^sub>1\<^sub>R of
             (x, y) => (real_of_int x, real_of_int y)))
          ?ps\<^sub>R |]
      ==> t_combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
           (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps
          <= 10 * length ?ps + 3",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 7)),
        template_predicate
         (template_app (template_hole 21, template_var 7)),
        template_equation
         (template_app (template_hole 19, template_var 7),
          template_app
           (template_app (template_hole 18, template_var 6),
            template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 6), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 5), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, t_empty),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 12, t_empty),
                    template_var 2))),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, t_empty),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 12, t_empty),
                    template_var 0))),
              template_var 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 0)),
             template_var 4),
           template_var 7),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_hole 1))))),
               template_app (template_hole 0, template_var 7))),
           template_app
            (template_hole 4,
             template_app (template_hole 2, template_hole 1)))))),
    ("Closest_Pair.t_find_closest_pair_bound",
     "[| distinct ?ps; sorted_snd ?ps;
         ?\<delta> =
         dist (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
          (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y));
         set ?ps = ?ps\<^sub>L Un ?ps\<^sub>R;
         ALL p:set ?ps.
            real_of_int ?l - ?\<Delta> < real_of_int (fst p) &
            real_of_int (fst p) < real_of_int ?l + ?\<Delta>;
         ALL p:?ps\<^sub>L. fst p <= ?l; ALL p:?ps\<^sub>R. ?l <= fst p;
         sparse ?\<Delta> ?ps\<^sub>L; sparse ?\<Delta> ?ps\<^sub>R;
         ?\<delta> <= ?\<Delta> |]
      ==> t_find_closest_pair (?c\<^sub>0, ?c\<^sub>1) ?ps
          <= 9 * length ?ps + 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 29, template_var 7)),
        template_predicate
         (template_app (template_hole 28, template_var 7)),
        template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 26,
              template_app
               (template_app (template_hole 25, t_empty), template_var 5)),
            template_app
             (template_app (template_hole 25, t_empty), template_var 4))),
        template_equation
         (template_app (template_hole 21, template_var 7),
          template_app
           (template_app (template_hole 20, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 21, template_var 7)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 6, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 5),
               template_var 4)),
           template_var 7),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 3, template_hole 2))))),
               template_app (template_hole 1, template_var 7))),
           template_hole 0)))),
    ("Closest_Pair.combine_dist",
     "[| sorted_snd ?ps; set ?ps = ?ps\<^sub>L Un ?ps\<^sub>R;
         ALL p:?ps\<^sub>L. fst p <= ?l; ALL p:?ps\<^sub>R. ?l <= fst p;
         sparse
          (dist
            (case ?p\<^sub>0\<^sub>L of
             (x, y) => (real_of_int x, real_of_int y))
            (case ?p\<^sub>1\<^sub>L of
             (x, y) => (real_of_int x, real_of_int y)))
          ?ps\<^sub>L;
         sparse
          (dist
            (case ?p\<^sub>0\<^sub>R of
             (x, y) => (real_of_int x, real_of_int y))
            (case ?p\<^sub>1\<^sub>R of
             (x, y) => (real_of_int x, real_of_int y)))
          ?ps\<^sub>R;
         (?c\<^sub>0, ?c\<^sub>1) =
         combine (?p\<^sub>0\<^sub>L, ?p\<^sub>1\<^sub>L)
          (?p\<^sub>0\<^sub>R, ?p\<^sub>1\<^sub>R) ?l ?ps |]
      ==> sparse
           (dist
             (case ?c\<^sub>0 of (x, y) => (real_of_int x, real_of_int y))
             (case ?c\<^sub>1 of (x, y) => (real_of_int x, real_of_int y)))
           (set ?ps)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 9)),
        template_equation
         (template_app (template_hole 12, template_var 9),
          template_app
           (template_app (template_hole 11, template_var 8),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 8), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 7), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, t_empty),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 5, t_empty),
                    template_var 4))),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, t_empty),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 5, t_empty),
                    template_var 2))),
              template_var 7)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4)),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 6),
            template_var 9))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 5, t_empty),
                   template_var 0))),
             template_app (template_hole 12, template_var 9))
           )))]:
   (string * thm * template) list
### theory "Draft.Closest_PairMoreTemplates"
### 1.258s elapsed time, 1.782s cpu time, 0.219s GC time
val it = (): unit
