   [("Coinductive_Regular_Set.in_language_Zero", "~ in_language Zero ?xs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)
             )
         )),
    ("Coinductive_Regular_Set.to_language_Neg",
     "to_language (- ?A) = Coinductive_Language.Not (to_language ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Regular_Set.to_language_star",
     "to_language (star ?A) = Star (to_language ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Regular_Set.in_language_One",
     "in_language One ?xs ==> ?xs = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Coinductive_Regular_Set.to_language_singleton",
     "to_language {[?a]} = Atom ?a",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_Regular_Set.to_language_Int",
     "to_language (?A Int ?B) =
      Coinductive_Language.Inter (to_language ?A) (to_language ?B)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Regular_Set.to_language_Un",
     "to_language (?A Un ?B) = Plus (to_language ?A) (to_language ?B)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Regular_Set.to_language_shuffle",
     "to_language (?A \<parallel> ?B) =
      Coinductive_Language.Shuffle (to_language ?A) (to_language ?B)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Regular_Set.to_language_conc",
     "to_language (?A @@ ?B) = Times (to_language ?A) (to_language ?B)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Regular_Set.to_language_Diff",
     "to_language (?A - ?B) =
      Coinductive_Language.Inter (to_language ?A)
       (Coinductive_Language.Not (to_language ?B))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("Coinductive_Regular_Set.in_language_Atom",
     "in_language (Atom ?a) ?xs ==> ?xs = [?a]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0))))]
