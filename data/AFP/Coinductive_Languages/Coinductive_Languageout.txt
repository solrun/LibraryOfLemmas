Loading theory "Draft.Coinductive_Language" (required by "Draft.Coinductive_LanguageMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Coinductive_LanguageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Coinductive_LanguageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Coinductive_LanguageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.553s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Coinductive_LanguageMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.260s elapsed time, 1.055s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Coinductive_LanguageMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.367s elapsed time, 1.470s cpu time, 0.129s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Coinductive_LanguageMoreTemplates" via "Draft.ExtrEqs")
consts
  Zero :: "'a language"
consts
  One :: "'a language"
consts
  Atom :: "'a => 'a language"
consts
  Plus :: "'a language => 'a language => 'a language"
consts
  TimesLR :: "'a language => 'a language => ('a * bool) language"
consts
  Times_Plus :: "('a * bool) language => 'a language"
Proofs for inductive predicate(s) "Plus_cong"
  Proving monotonicity ...
consts
  StarLR :: "'a language => 'a language => 'a language"
consts
  Inter :: "'a language => 'a language => 'a language"
consts
  Not :: "'a language => 'a language"
consts
  Full :: "'a language"
consts
  ShuffleLR :: "'a language => 'a language => ('a * bool) language"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "regular_cong"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  language :: (type) {order,semiring_1}
  zero_language == zero_class.zero :: 'a language
  plus_language == plus :: 'a language => 'a language => 'a language
  one_language == one_class.one :: 'a language
  times_language == times :: 'a language => 'a language => 'a language
  less_eq_language == less_eq :: 'a language => 'a language => bool
  less_language == less :: 'a language => 'a language => bool
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Plus_Times_pre_cong"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  tails :: "'a list => 'a list list"
consts
  cycle :: "'a list => 'a stream"
consts
  in_language :: "'a language => 'a list => bool"
consts
  to_language :: "'a list set => 'a language"
### theory "Draft.Coinductive_Language"
### 1.246s elapsed time, 4.766s cpu time, 0.929s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.009s elapsed time, 3.785s cpu time, 0.883s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.073s elapsed time, 3.732s cpu time, 0.800s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.930s elapsed time, 5.378s cpu time, 0.997s GC time
Loading theory "Draft.Templates" (required by "Draft.Coinductive_LanguageMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.069s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Coinductive_LanguageMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.447s elapsed time, 0.496s cpu time, 0.058s GC time
Loading theory "Draft.Coinductive_LanguageMoreTemplates"
val templateLemmas =
   [("Coinductive_Language.\<oo>_Star", "\<oo> (Star ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Coinductive_Language.le_Star", "?s <= Star ?s",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_Language.Inter_FullL",
     "Coinductive_Language.Inter \<Sigma>\<^sup>* ?r = ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Coinductive_Language.Inter_ZeroL",
     "Coinductive_Language.Inter Zero ?r = Zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Coinductive_Language.Inter_FullR",
     "Coinductive_Language.Inter ?r \<Sigma>\<^sup>* = ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Coinductive_Language.Inter_ZeroR",
     "Coinductive_Language.Inter ?r Zero = Zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Coinductive_Language.Inter_idem",
     "Coinductive_Language.Inter ?r ?r = ?r",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Coinductive_Language.Not_Not",
     "Coinductive_Language.Not (Coinductive_Language.Not ?r) = ?r",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Coinductive_Language.Plus_FullL",
     "Plus \<Sigma>\<^sup>* ?r = \<Sigma>\<^sup>*",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Coinductive_Language.Plus_ZeroL", "Plus Zero ?r = ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Coinductive_Language.Plus_FullR",
     "Plus ?r \<Sigma>\<^sup>* = \<Sigma>\<^sup>*",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Coinductive_Language.Plus_ZeroR", "Plus ?r Zero = ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Coinductive_Language.Plus_idem", "Plus ?r ?r = ?r",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Coinductive_Language.Shuffle_OneL", "Shuffle One ?r = ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Coinductive_Language.Shuffle_ZeroL", "Shuffle Zero ?r = Zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Coinductive_Language.Shuffle_OneR", "Shuffle ?r One = ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Coinductive_Language.Shuffle_ZeroR", "Shuffle ?r Zero = Zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Coinductive_Language.StarLR_Zero",
     "Coinductive_Language.StarLR Zero ?r = Zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Coinductive_Language.Times_OneL", "Times One ?r = ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Coinductive_Language.Times_ZeroL", "Times Zero ?r = Zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Coinductive_Language.Times_OneR", "Times ?r One = ?r",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Coinductive_Language.Times_ZeroR", "Times ?r Zero = Zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Coinductive_Language.ShuffleLR_ZeroL",
     "Coinductive_Language.ShuffleLR Zero ?r = Zero",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Coinductive_Language.ShuffleLR_ZeroR",
     "Coinductive_Language.ShuffleLR ?r Zero = Zero",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Coinductive_Language.TimesLR_ZeroL",
     "Coinductive_Language.TimesLR Zero ?r = Zero",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Coinductive_Language.TimesLR_ZeroR",
     "Coinductive_Language.TimesLR ?r Zero = Zero",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Coinductive_Language.le_PlusL", "?r <= Plus ?r ?s",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Coinductive_Language.le_PlusR", "?s <= Plus ?r ?s",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Coinductive_Language.in_language_to_language",
     "Collect (in_language (to_language ?L)) = ?L",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_var 0)),
    ("Coinductive_Language.ge_One", "(One <= ?r) = \<oo> ?r",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_Language.Star_Star", "Star (Star ?r) = Star ?r",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_Language.Shuffle_Plus_ShuffleLR_One",
     "Coinductive_Language.Times_Plus
       (Coinductive_Language.ShuffleLR ?r One) =
      ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("Coinductive_Language.Times_Plus_TimesLR_One",
     "Coinductive_Language.Times_Plus
       (Coinductive_Language.TimesLR ?r One) =
      ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("Coinductive_Language.to_language_in_language",
     "to_language (Collect (in_language ?L)) = ?L",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_var 0)),
    ("Coinductive_Language.length_tails",
     "length (tails ?xs) = Suc (length ?xs)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Language.Inter_comm",
     "Coinductive_Language.Inter ?r ?s = Coinductive_Language.Inter ?s ?r",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Coinductive_Language.Plus_comm", "Plus ?r ?s = Plus ?s ?r",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Coinductive_Language.Shuffle_comm", "Shuffle ?r ?s = Shuffle ?s ?r",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Coinductive_Language.Times_Star",
     "Times (Star ?r) (Star ?r) = Star ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_Language.Star_unfoldL",
     "Star ?r = Plus One (Times ?r (Star ?r))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 3, template_var 0))))),
    ("Coinductive_Language.Star_unfoldR",
     "Star ?r = Plus One (Times (Star ?r) ?r)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)),
           template_var 0)))),
    ("Coinductive_Language.Plus_idem_assoc",
     "Plus ?r (Plus ?r ?s) = Plus ?r ?s",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Coinductive_Language.TIMES_snoc_One",
     "TIMES (?xs @ [One]) = TIMES ?xs",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))),
       template_app (template_hole 4, template_var 0))),
    ("Coinductive_Language.le_StarL",
     "Plus One (Times ?r (Star ?r)) <= Star ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_Language.le_StarR",
     "Plus One (Times (Star ?r) ?r) <= Star ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Coinductive_Language.Plus_OneL", "\<oo> ?r ==> Plus One ?r = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_var 0))),
    ("Coinductive_Language.Plus_OneR", "\<oo> ?r ==> Plus ?r One = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 0))),
    ("Coinductive_Language.le_TimesR", "\<oo> ?r ==> ?s <= Times ?r ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.le_TimesL", "\<oo> ?s ==> ?r <= Times ?r ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Coinductive_Language.\<oo>_PLUS",
     "\<oo> (PLUS ?xs) = (EX x:set ?xs. \<oo> x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Coinductive_Language.\<oo>_TIMES",
     "\<oo> (TIMES ?xs) = (ALL x:set ?xs. \<oo> x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Coinductive_Language.\<oo>_Shuffle",
     "\<oo> (Shuffle ?r ?s) = (\<oo> ?r & \<oo> ?s)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Language.\<oo>_Times",
     "\<oo> (Times ?r ?s) = (\<oo> ?r & \<oo> ?s)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Language.Not_Inter",
     "Coinductive_Language.Not (Coinductive_Language.Inter ?r ?s) =
      Plus (Coinductive_Language.Not ?r) (Coinductive_Language.Not ?s)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Language.Not_Plus",
     "Coinductive_Language.Not (Plus ?r ?s) =
      Coinductive_Language.Inter (Coinductive_Language.Not ?r)
       (Coinductive_Language.Not ?s)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Language.Times_Plus_Plus",
     "Coinductive_Language.Times_Plus (Plus ?r ?s) =
      Plus (Coinductive_Language.Times_Plus ?r)
       (Coinductive_Language.Times_Plus ?s)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Coinductive_Language.Not_antimono",
     "?r <= ?s ==>
      Coinductive_Language.Not ?s <= Coinductive_Language.Not ?r",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Coinductive_Language.Star_mono", "?r <= ?s ==> Star ?r <= Star ?s",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Language.\<dd>_Star",
     "\<dd> (Star ?r) = (%a. Times (\<dd> ?r a) (Star ?r))",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("Coinductive_Language.Inter_assoc",
     "Coinductive_Language.Inter (Coinductive_Language.Inter ?r ?s) ?t =
      Coinductive_Language.Inter ?r (Coinductive_Language.Inter ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.Plus_rotate",
     "Plus ?r (Plus ?s ?t) = Plus ?s (Plus ?r ?t)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Coinductive_Language.Plus_assoc",
     "Plus (Plus ?r ?s) ?t = Plus ?r (Plus ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.Shuffle_assoc",
     "Shuffle (Shuffle ?r ?s) ?t = Shuffle ?r (Shuffle ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.StarLR_Times",
     "Coinductive_Language.StarLR (Times ?r ?s) ?t =
      Times ?r (Coinductive_Language.StarLR ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.Times_assoc",
     "Times (Times ?r ?s) ?t = Times ?r (Times ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.StarLR_Times_Plus_One",
     "Coinductive_Language.StarLR (Times ?r (Plus One ?s)) ?s =
      Coinductive_Language.StarLR ?r ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("Coinductive_Language.\<oo>_mono",
     "[| ?r <= ?s; \<oo> ?r |] ==> \<oo> ?s",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Coinductive_Language.\<dd>_PLUS",
     "\<dd> (PLUS ?xs) ?a = PLUS (map (%r. \<dd> r ?a) ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Coinductive_Language.\<dd>_mono",
     "?r <= ?s ==> \<dd> ?r ?a <= \<dd> ?s ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.Plus_le_iff",
     "(Plus ?r ?s <= ?t) = (?r <= ?t & ?s <= ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.denesting",
     "Star (Plus ?r ?s) = Times (Star ?r) (Star (Times ?s (Star ?r)))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 2, template_var 1)))))),
    ("Coinductive_Language.Shuffle_PlusR",
     "Shuffle ?r (Plus ?s ?t) = Plus (Shuffle ?r ?s) (Shuffle ?r ?t)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Coinductive_Language.Shuffle_PlusL",
     "Shuffle (Plus ?r ?s) ?t = Plus (Shuffle ?r ?t) (Shuffle ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.StarLR_Plus",
     "Coinductive_Language.StarLR (Plus ?r ?s) ?t =
      Plus (Coinductive_Language.StarLR ?r ?t)
       (Coinductive_Language.StarLR ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.Times_PlusR",
     "Times ?r (Plus ?s ?t) = Plus (Times ?r ?s) (Times ?r ?t)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Coinductive_Language.Times_PlusL",
     "Times (Plus ?r ?s) ?t = Plus (Times ?r ?t) (Times ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.sliding",
     "Times (Star (Times ?r ?s)) ?r = Times ?r (Star (Times ?s ?r))",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_var 1),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Coinductive_Language.ShuffleLR_PlusR",
     "Coinductive_Language.ShuffleLR ?r (Plus ?s ?t) =
      Plus (Coinductive_Language.ShuffleLR ?r ?s)
       (Coinductive_Language.ShuffleLR ?r ?t)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Coinductive_Language.ShuffleLR_PlusL",
     "Coinductive_Language.ShuffleLR (Plus ?r ?s) ?t =
      Plus (Coinductive_Language.ShuffleLR ?r ?t)
       (Coinductive_Language.ShuffleLR ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.TimesLR_PlusR",
     "Coinductive_Language.TimesLR ?r (Plus ?s ?t) =
      Plus (Coinductive_Language.TimesLR ?r ?s)
       (Coinductive_Language.TimesLR ?r ?t)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Coinductive_Language.TimesLR_PlusL",
     "Coinductive_Language.TimesLR (Plus ?r ?s) ?t =
      Plus (Coinductive_Language.TimesLR ?r ?t)
       (Coinductive_Language.TimesLR ?s ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.\<oo>_foldr_Plus",
     "\<oo> (foldr Plus ?xs ?s) = (EX x:set (?s # ?xs). \<oo> x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         t_empty))),
    ("Coinductive_Language.\<oo>_foldr_Times",
     "\<oo> (foldr Times ?xs ?s) = (ALL x:set (?s # ?xs). \<oo> x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         t_empty))),
    ("Coinductive_Language.ardenL",
     "Plus ?r (Times ?s ?x) <= ?x ==> Times (Star ?s) ?r <= ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 2),
         template_var 0))),
    ("Coinductive_Language.ardenR",
     "Plus ?r (Times ?x ?s) <= ?x ==> Times ?r (Star ?s) <= ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Coinductive_Language.Plus_upper",
     "[| ?r1.0 <= ?s; ?r2.0 <= ?s |] ==> Plus ?r1.0 ?r2.0 <= ?s",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Coinductive_Language.Shuffle_Plus_ShuffleLR_PlusR",
     "Coinductive_Language.Times_Plus
       (Coinductive_Language.ShuffleLR ?r (Plus ?s ?t)) =
      Plus
       (Coinductive_Language.Times_Plus
         (Coinductive_Language.ShuffleLR ?r ?s))
       (Coinductive_Language.Times_Plus
         (Coinductive_Language.ShuffleLR ?r ?t))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Coinductive_Language.Shuffle_Plus_ShuffleLR_PlusL",
     "Coinductive_Language.Times_Plus
       (Coinductive_Language.ShuffleLR (Plus ?r ?s) ?t) =
      Plus
       (Coinductive_Language.Times_Plus
         (Coinductive_Language.ShuffleLR ?r ?t))
       (Coinductive_Language.Times_Plus
         (Coinductive_Language.ShuffleLR ?s ?t))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Coinductive_Language.Times_Plus_TimesLR_PlusR",
     "Coinductive_Language.Times_Plus
       (Coinductive_Language.TimesLR ?r (Plus ?s ?t)) =
      Plus
       (Coinductive_Language.Times_Plus
         (Coinductive_Language.TimesLR ?r ?s))
       (Coinductive_Language.Times_Plus
         (Coinductive_Language.TimesLR ?r ?t))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Coinductive_Language.Times_Plus_TimesLR_PlusL",
     "Coinductive_Language.Times_Plus
       (Coinductive_Language.TimesLR (Plus ?r ?s) ?t) =
      Plus
       (Coinductive_Language.Times_Plus
         (Coinductive_Language.TimesLR ?r ?t))
       (Coinductive_Language.Times_Plus
         (Coinductive_Language.TimesLR ?s ?t))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Coinductive_Language.\<dd>_Shuffle",
     "\<dd> (Shuffle ?r ?s) =
      (%a. Plus (Shuffle (\<dd> ?r a) ?s) (Shuffle ?r (\<dd> ?s a)))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       t_empty)),
    ("Coinductive_Language.Inter_mono",
     "[| ?r1.0 <= ?s1.0; ?r2.0 <= ?s2.0 |]
      ==> Coinductive_Language.Inter ?r1.0 ?r2.0
          <= Coinductive_Language.Inter ?s1.0 ?s2.0",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Coinductive_Language.Plus_mono",
     "[| ?r1.0 <= ?s1.0; ?r2.0 <= ?s2.0 |]
      ==> Plus ?r1.0 ?r2.0 <= Plus ?s1.0 ?s2.0",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Coinductive_Language.Times_mono",
     "[| ?r1.0 <= ?s1.0; ?r2.0 <= ?s2.0 |]
      ==> Times ?r1.0 ?r2.0 <= Times ?s1.0 ?s2.0",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Coinductive_Language.\<dd>_foldr_Plus",
     "\<dd> (foldr Plus ?xs ?s) ?a =
      foldr Plus (map (%r. \<dd> r ?a) ?xs) (\<dd> ?s ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Coinductive_Language.bisimulation",
     "Times ?r ?s = Times ?s ?t ==>
      Times (Star ?r) ?s = Times ?s (Star ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Coinductive_Language.tails_snoc",
     "tails (?xs @ [?x]) = map (%ys. ys @ [?x]) (tails ?xs) @ [[]]",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 7, template_var 1))),
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_hole 0)))),
    ("Coinductive_Language.Plus_Times_pre_cong_mono",
     "[| ?L' <= ?L; ?K <= ?K'; Plus_Times_pre_cong ?R ?L ?K |]
      ==> Plus_Times_pre_cong ?R ?L' ?K'",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4),
             template_var 1)
           ))),
    ("Coinductive_Language.\<dd>_Times",
     "\<dd> (Times ?r ?s) =
      (%a. if \<oo> ?r then Plus (Times (\<dd> ?r a) ?s) (\<dd> ?s a)
           else Times (\<dd> ?r a) ?s)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       t_empty)),
    ("Coinductive_Language.\<dd>_TIMES",
     "\<dd> (TIMES ?xs) ?a =
      (let n = length (takeWhile \<oo> ?xs)
       in PLUS
           (map (%zs. TIMES (\<dd> (hd zs) ?a # tl zs))
             (take (Suc n) (tails (?xs @ [One])))))",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app (template_hole 15, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_var 1))),
         t_empty))),
    ("Coinductive_Language.\<dd>_foldr_Times",
     "\<dd> (foldr Times ?xs ?s) ?a =
      (let n = length (takeWhile \<oo> ?xs)
       in PLUS
           (map (%zs. TIMES (\<dd> (hd zs) ?a # tl zs))
             (take (Suc n) (tails (?xs @ [?s])))))",
     template_equation
      (template_app
        (template_app
          (template_hole 17,
           template_app
            (template_app
              (template_app (template_hole 16, template_hole 15),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_var 2))),
         t_empty))),
    ("Coinductive_Language.language_simulation_coinduction",
     "[| ?R ?L ?K;
         !!L K.
            ?R L K ==>
            \<oo> L <= \<oo> K & (ALL x. ?R (\<dd> L x) (\<dd> K x)) |]
      ==> ?L <= ?K",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Coinductive_Language.language_coinduct_upto_Plus",
     "[| ?R ?L ?K;
         !!L K.
            ?R L K ==>
            \<oo> L = \<oo> K &
            (ALL x. Plus_cong ?R (\<dd> L x) (\<dd> K x)) |]
      ==> ?L = ?K",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Coinductive_Language.language_coinduct_upto_regular",
     "[| ?R ?L ?K;
         !!L K.
            ?R L K ==>
            \<oo> L = \<oo> K &
            (ALL x. regular_cong ?R (\<dd> L x) (\<dd> K x)) |]
      ==> ?L = ?K",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Coinductive_Language.language_simulation_coinduction_upto_Plus_Times",
     "[| ?R ?L ?K;
         !!L K.
            ?R L K ==>
            \<oo> L <= \<oo> K &
            (ALL x. Plus_Times_pre_cong ?R (\<dd> L x) (\<dd> K x)) |]
      ==> ?L <= ?K",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Coinductive_LanguageMoreTemplates"
### 0.305s elapsed time, 0.397s cpu time, 0.000s GC time
val it = (): unit
