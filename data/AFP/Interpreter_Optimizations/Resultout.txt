Loading theory "Draft.Result" (required by "Draft.ResultTemplates")
Loading theory "Draft.Templates" (required by "Draft.ResultTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.153s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ResultTemplates")
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.528s elapsed time, 1.087s cpu time, 0.099s GC time
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Result"
### 0.679s elapsed time, 1.332s cpu time, 0.099s GC time
Loading theory "Draft.ResultTemplates"
val templateLemmas =
   [("Result.bind_Ok", "?x >>= Ok = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Result.to_option_Some",
     "(Result.to_option ?r = Some ?x) = (?r = Ok ?x)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Result.of_option_eq_Ok",
     "(Result.of_option ?x ?y = Ok ?z) = (?y = Some ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Result.of_option_injective",
     "(Result.of_option ?e ?x = Result.of_option ?e ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Result.bind_eq_ErrorI", "?x = Error ?z ==> ?x >>= ?f = Error ?z",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Result.if_then_else_Ok",
     "((if ?a then ?b else Error ?c) = Ok ?d) = (?a & ?b = Ok ?d)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Result.if_then_else_Error",
     "((if ?a then ?c else Ok ?b) = Error ?d) = (?a & ?c = Error ?d)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Result.if_then_else_Ok",
     "((if ?a then Error ?c else ?b) = Ok ?d) = (~ ?a & ?b = Ok ?d)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("Result.if_then_else_Error",
     "((if ?a then Ok ?b else ?c) = Error ?d) = (~ ?a & ?c = Error ?d)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("Result.bind_eq_Ok_conv",
     "(?x >>= ?f = Ok ?z) = (EX y. ?x = Ok y & ?f y = Ok ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Result.map_eq_Error_conv",
     "(map_result ?f ?g ?x = Error ?y) =
      (EX x'. ?x = Error x' & ?y = ?f x')",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Result.map_eq_Ok_conv",
     "(map_result ?f ?g ?x = Ok ?y) = (EX x'. ?x = Ok x' & ?y = ?g x')",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Result.bind_eq_ErrorI",
     "[| ?x = Ok ?y; ?f ?y = Error ?z |] ==> ?x >>= ?f = Error ?z",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app (template_var 1, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Result.bind_eq_OkI",
     "[| ?x = Ok ?y; ?f ?y = Ok ?z |] ==> ?x >>= ?f = Ok ?z",
     template_implication
      ([template_equation
         (template_var 3, template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app (template_var 1, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Result.bind_eq_OkD",
     "?x >>= ?f = Ok ?z ==> EX y. ?x = Ok y & ?f y = Ok ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Result.map_eq_ErrorD",
     "map_result ?f ?g ?x = Error ?y ==> EX x'. ?x = Error x' & ?y = ?f x'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Result.map_eq_OkD",
     "map_result ?f ?g ?x = Ok ?y ==> EX x'. ?x = Ok x' & ?y = ?g x'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Result.bind_eq_Error_conv",
     "(?x >>= ?f = Error ?z) =
      (?x = Error ?z | (EX y. ?x = Ok y & ?f y = Error ?z))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 3, template_var 0))),
             template_app (template_hole 2, t_empty))
           ))),
    ("Result.bind_eq_ErrorD",
     "?x >>= ?f = Error ?z ==>
      ?x = Error ?z | (EX y. ?x = Ok y & ?f y = Error ?z)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 3, template_var 0))),
             template_app (template_hole 2, t_empty))
           ))),
    ("Result.bind_eq_OkE",
     "[| ?x >>= ?f = Ok ?z; !!x. ?x = Ok x & ?f x = Ok ?z ==> ?Q |] ==> ?Q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Result.those_Cons_OkD",
     "Result.those (?x # ?xs) = Ok ?ys ==>
      EX y ys'. ?ys = y # ys' & ?x = Ok y & Result.those ?xs = Ok ys'",
     template_implication
      ([template_equation
         (template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)),
          template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Result.bind_eq_ErrorE",
     "[| ?x >>= ?f = Error ?z; ?x = Error ?z ==> ?R;
         EX y. ?x = Ok y & ?f y = Error ?z ==> ?R |]
      ==> ?R",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_implication
         ([template_equation
            (template_var 3,
             template_app (template_hole 3, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_app (template_hole 2, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ResultTemplates"
### 0.338s elapsed time, 0.484s cpu time, 0.057s GC time
val it = (): unit
