Loading theory "Draft.List_util" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx" via "Draft.Unboxed" via "Draft.Global")
Loading theory "Draft.Dynamic" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx" via "Draft.Unboxed")
Loading theory "Draft.Option_Extra" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx" via "Draft.Unboxed" via "Draft.Global")
Loading theory "Draft.Op" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx" via "Draft.OpInl")
Proofs for inductive predicate(s) "same_length"
locale dynval
  fixes uninitialized :: "'dyn"
    and is_true :: "'dyn => bool"
    and is_false :: "'dyn => bool"
  assumes "dynval is_true is_false"
locale nary_operations
  fixes \<OO>\<pp> :: "'op => 'a list => 'a"
    and \<AA>\<rr>\<ii>\<tt>\<yy> :: "'op => nat"
  assumes "nary_operations \<OO>\<pp> \<AA>\<rr>\<ii>\<tt>\<yy>"
  Proving monotonicity ...
### theory "Draft.Op"
### 0.032s elapsed time, 0.159s cpu time, 0.000s GC time
Loading theory "Draft.OpInl" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx")
### theory "Draft.Dynamic"
### 0.035s elapsed time, 0.171s cpu time, 0.000s GC time
Loading theory "Draft.Result" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx" via "Draft.Unboxed" via "Draft.Global")
locale nary_operations_inl
  fixes \<OO>\<pp> :: "'op => 'a list => 'a"
    and \<AA>\<rr>\<ii>\<tt>\<yy> :: "'op => nat"
    and \<II>\<nn>\<ll>\<OO>\<pp> :: "'opinl => 'a list => 'a"
    and \<II>\<nn>\<ll> :: "'op => 'a list => 'opinl option"
    and \<II>\<ss>\<II>\<nn>\<ll> :: "'opinl => 'a list => bool"
    and \<DD>\<ee>\<II>\<nn>\<ll> :: "'opinl => 'op"
  assumes
    "nary_operations_inl \<OO>\<pp> \<AA>\<rr>\<ii>\<tt>\<yy>
      \<II>\<nn>\<ll>\<OO>\<pp> \<II>\<nn>\<ll> \<II>\<ss>\<II>\<nn>\<ll>
      \<DD>\<ee>\<II>\<nn>\<ll>"
### theory "Draft.OpInl"
### 0.051s elapsed time, 0.212s cpu time, 0.000s GC time
Loading theory "Draft.Templates" (required by "Draft.OpUbxTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.244s cpu time, 0.032s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OpUbxTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Option_Extra"
### 0.212s elapsed time, 0.860s cpu time, 0.032s GC time
Loading theory "Draft.Env" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx" via "Draft.Unboxed" via "Draft.Global")
locale env
  fixes empty :: "'env"
    and get :: "'env => 'key => 'val option"
    and add :: "'env => 'key => 'val => 'env"
    and to_list :: "'env => ('key * 'val) list"
  assumes "env empty get add to_list"
### theory "Draft.List_util"
### 0.321s elapsed time, 1.269s cpu time, 0.103s GC time
Loading theory "Draft.AList_Extra" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx" via "Draft.Unboxed" via "Draft.Global")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.AList_Extra"
### 0.140s elapsed time, 0.559s cpu time, 0.000s GC time
Loading theory "Draft.Map_Extra" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx" via "Draft.Unboxed" via "Draft.Global")
### theory "Draft.Env"
### 0.261s elapsed time, 1.011s cpu time, 0.071s GC time
### theory "Draft.Map_Extra"
### 0.098s elapsed time, 0.315s cpu time, 0.064s GC time
Found termination order: "{}"
find_theorems
  "_ &&& _"
found 3 theorem(s):
HOL.induct_rulify(3): HOL.induct_conj ?A ?B == (?A &&& ?B)
HOL.atomize_conj: (?A &&& ?B) == ?A & ?B
HOL.induct_conj_eq: (?A &&& ?B) == HOL.induct_conj ?A ?B
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.586s elapsed time, 2.085s cpu time, 0.135s GC time
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Result"
### 0.809s elapsed time, 2.664s cpu time, 0.209s GC time
Loading theory "Draft.Global" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx" via "Draft.Unboxed")
Default parameters for Sledgehammer:
compress = smart
debug = false
fact_filter = smart
fact_thresholds = 0.45 0.85
induction_rules = smart
isar_proofs = smart
lam_trans = smart
learn = true
max_facts = smart
max_mono_iters = smart
max_new_mono_instances = smart
minimize = true
overlord = false
preplay_timeout = 1
provers = cvc4 vampire verit e
slice = true
smt_proofs = true
spy = false
strict = false
timeout = 30
try0 = true
type_enc = smart
uncurried_aliases = smart
verbose = false
Default parameters for Sledgehammer:
compress = smart
debug = false
fact_filter = smart
fact_thresholds = 0.45 0.85
induction_rules = smart
isar_proofs = smart
lam_trans = smart
learn = true
max_facts = smart
max_mono_iters = smart
max_new_mono_instances = smart
minimize = true
overlord = false
preplay_timeout = 1
provers = cvc4 e spass vampire z3 zipperposition
slice = true
smt_proofs = true
spy = false
strict = false
timeout = 30
try0 = true
type_enc = smart
uncurried_aliases = smart
verbose = false
Proofs for inductive predicate(s) "final"
  Proving monotonicity ...
Proofs for inductive predicate(s) "load"
  Proving monotonicity ...
[| rel_fundef (=) ?R ?fd1.0 ?fd2.0; ?R ?i1.0 ?i2.0 |]
==> rel_fundef (=) ?R (rewrite_fundef_body ?fd1.0 ?l ?pc ?i1.0)
     (rewrite_fundef_body ?fd2.0 ?l ?pc ?i2.0)
### theory "Draft.Global"
### 5.423s elapsed time, 6.456s cpu time, 1.442s GC time
Loading theory "Draft.Unboxed" (required by "Draft.OpUbxTemplates" via "Draft.OpUbx")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale unboxedval
  fixes uninitialized :: "'dyn"
    and is_true :: "'dyn => bool"
    and is_false :: "'dyn => bool"
    and box_ubx1 :: "'ubx1 => 'dyn"
    and unbox_ubx1 :: "'dyn => 'ubx1 option"
    and box_ubx2 :: "'ubx2 => 'dyn"
    and unbox_ubx2 :: "'dyn => 'ubx2 option"
  assumes
    "unboxedval is_true is_false box_ubx1 unbox_ubx1 box_ubx2 unbox_ubx2"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Unboxed"
### 2.006s elapsed time, 2.142s cpu time, 0.169s GC time
Loading theory "Draft.OpUbx" (required by "Draft.OpUbxTemplates")
locale nary_operations_ubx
  fixes \<OO>\<pp> :: "'op => 'dyn list => 'dyn"
    and \<AA>\<rr>\<ii>\<tt>\<yy> :: "'op => nat"
    and \<II>\<nn>\<ll>\<OO>\<pp> :: "'opinl => 'dyn list => 'dyn"
    and \<II>\<nn>\<ll> :: "'op => 'dyn list => 'opinl option"
    and \<II>\<ss>\<II>\<nn>\<ll> :: "'opinl => 'dyn list => bool"
    and \<DD>\<ee>\<II>\<nn>\<ll> :: "'opinl => 'op"
    and unitialized :: "'dyn"
    and is_true :: "'dyn => bool"
    and is_false :: "'dyn => bool"
    and box_ubx1 :: "'ubx1 => 'dyn"
    and unbox_ubx1 :: "'dyn => 'ubx1 option"
    and box_ubx2 :: "'ubx2 => 'dyn"
    and unbox_ubx2 :: "'dyn => 'ubx2 option"
    and
    \<UU>\<bb>\<xx>\<OO>\<pp> ::
      "'opubx
       => ('dyn, 'ubx1, 'ubx2) unboxed list
          => ('dyn, 'ubx1, 'ubx2) unboxed option"
    and
    \<UU>\<bb>\<xx> :: "'opinl => Unboxed.type option list => 'opubx option"
    and \<BB>\<oo>\<xx> :: "'opubx => 'opinl"
    and
    \<TT>\<yy>\<pp>\<ee>\<OO>\<ff>\<OO>\<pp> ::
      "'opubx => Unboxed.type option list * Unboxed.type option"
  assumes
    "nary_operations_ubx \<OO>\<pp> \<AA>\<rr>\<ii>\<tt>\<yy>
      \<II>\<nn>\<ll>\<OO>\<pp> \<II>\<nn>\<ll> \<II>\<ss>\<II>\<nn>\<ll>
      \<DD>\<ee>\<II>\<nn>\<ll> is_true is_false box_ubx1 unbox_ubx1
      box_ubx2 unbox_ubx2 \<UU>\<bb>\<xx>\<OO>\<pp> \<UU>\<bb>\<xx>
      \<BB>\<oo>\<xx> \<TT>\<yy>\<pp>\<ee>\<OO>\<ff>\<OO>\<pp>"
### theory "Draft.OpUbx"
### 1.507s elapsed time, 1.621s cpu time, 0.150s GC time
Loading theory "Draft.OpUbxTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.OpUbxTemplates"
### 1.433s elapsed time, 1.766s cpu time, 0.240s GC time
val it = (): unit
