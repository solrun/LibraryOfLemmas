   [("Bit_Operations.possible_bit_int", "possible_bit TYPE(int) ?n",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Bit_Operations.possible_bit_nat", "possible_bit TYPE(nat) ?n",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Option.inj_Some", "inj_on Some ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Option.is_none_simps", "~ Option.is_none (Some ?x)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Bit_Operations.mask_nonnegative_int", "0 <= mask ?n",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Bit_Operations.less_eq_mask", "?n <= mask ?n",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Bit_Operations.not_mask_negative_int", "~ mask ?n < 0",
     template_negation
      (
         template_inequation
          (less_than, template_app (template_hole 1, template_var 0),
           template_hole 0)
         )),
    ("Option.is_none_code", "Option.is_none (Some ?x) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Option.bind_runit", "Option.bind ?x Some = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Bit_Operations.take_bit_num_simps", "take_bit_num 0 ?m = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Bit_Operations.take_bit_nonnegative", "0 <= take_bit ?n ?k",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Bit_Operations.set_bit_greater_eq", "?k <= set_bit ?n ?k",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bit_Operations.unset_bit_less_eq", "unset_bit ?n ?k <= ?k",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 0)),
    ("Bit_Operations.take_bit_nat_less_eq_self", "take_bit ?n ?m <= ?m",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 0)),
    ("Bit_Operations.not_bit_Suc_0_Suc", "~ bit (Suc 0) (Suc ?n)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)),
               template_app (template_hole 1, template_var 0))
             )
         )),
    ("Bit_Operations.not_bit_Suc_0_numeral", "~ bit (Suc 0) (numeral ?n)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Bit_Operations.not_take_bit_negative", "~ take_bit ?n ?k < 0",
     template_negation
      (
         template_inequation
          (less_than,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Option.None_notin_image_Some", "None ~: Some ` ?A",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("Bit_Operations.concat_bit_0", "concat_bit 0 ?k ?l = ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 0)),
    ("Bit_Operations.nat_mask_eq", "nat (mask ?n) = mask ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Option.these_image_Some_eq", "Option.these (Some ` ?A) = ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Option.equal_None_code_unfold",
     "equal_class.equal ?x None = Option.is_none ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Option.bind_rzero", "Option.bind ?x Map.empty = None",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_hole 0)),
    ("Option.combine_options_simps", "combine_options ?f None ?y = ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 0)),
    ("Option.combine_options_simps", "combine_options ?f ?x None = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Bit_Operations.drop_bit_minus_one", "drop_bit ?n (- 1) = - 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Option.these_insert_None",
     "Option.these (insert None ?A) = Option.these ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Option.is_none_map_option",
     "Option.is_none (map_option ?f ?x) = Option.is_none ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Bit_Operations.take_bit_num_simps",
     "take_bit_num (Suc ?n) num.One = Some num.One",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("Bit_Operations.take_bit_num_simps",
     "take_bit_num (numeral ?r) num.One = Some num.One",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_hole 1))),
    ("Bit_Operations.not_exp_less_eq_0_int", "~ 2 ^ ?n <= 0",
     template_negation
      (
         template_inequation
          (less_equals,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0),
           template_hole 0)
         )),
    ("Bit_Operations.concat_bit_of_zero_1",
     "concat_bit ?n 0 ?l = push_bit ?n ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Bit_Operations.concat_bit_of_zero_2",
     "concat_bit ?n ?k 0 = take_bit ?n ?k",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Bit_Operations.and_not_numerals",
     "and 1 (not (numeral (num.Bit0 ?n))) = 1",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_hole 3)),
    ("Bit_Operations.and_not_numerals",
     "and 1 (not (numeral (num.Bit1 ?n))) = 0",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_hole 0)),
    ("Bit_Operations.and_minus_numerals",
     "and 1 (- numeral (num.Bit0 ?n)) = 0",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_hole 0)),
    ("Bit_Operations.and_minus_numerals",
     "and 1 (- numeral (num.Bit1 ?n)) = 1",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_hole 3)),
    ("Bit_Operations.and_minus_numerals",
     "and (- numeral (num.Bit0 ?n)) 1 = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)))),
         template_hole 1),
       template_hole 0)),
    ("Bit_Operations.and_minus_numerals",
     "and (- numeral (num.Bit1 ?n)) 1 = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_hole 0),
       template_hole 0)),
    ("Bit_Operations.and_nat_numerals",
     "and (Suc 0) (numeral (num.Bit0 ?y)) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_hole 2)),
    ("Bit_Operations.and_nat_numerals",
     "and (Suc 0) (numeral (num.Bit1 ?y)) = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Bit_Operations.and_nat_numerals",
     "and (numeral (num.Bit0 ?x)) (Suc 0) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, template_hole 0)),
       template_hole 0)),
    ("Bit_Operations.and_nat_numerals",
     "and (numeral (num.Bit1 ?x)) (Suc 0) = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("Bit_Operations.bit_Suc_0_iff", "bit (Suc 0) ?n = (?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Option.set_empty_eq", "(set_option ?xo = {}) = (?xo = None)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Option.rel_option_None1", "rel_option ?P None ?x = (?x = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Option.rel_option_None2", "rel_option ?P ?x None = (?x = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Bit_Operations.not_negative_int_iff", "(not ?k < 0) = (0 <= ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Bit_Operations.mask_nat_positive_iff", "(0 < mask ?n) = (0 < ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Bit_Operations.not_nonnegative_int_iff", "(0 <= not ?k) = (?k < 0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 2))),
    ("Bit_Operations.mask_nat_less_exp", "mask ?n < 2 ^ ?n",
     template_inequation
      (less_than, template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Bit_Operations.concat_bit_take_bit_eq",
     "concat_bit ?n (take_bit ?n ?b) = concat_bit ?n ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Bit_Operations.or_not_numerals",
     "or (numeral (num.Bit0 ?m)) (not 1) = not 1",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Bit_Operations.or_not_numerals",
     "or (numeral (num.Bit1 ?m)) (not 1) = not 0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 2, template_hole 0))),
    ("Bit_Operations.Suc_mask_eq_exp", "Suc (mask ?n) = 2 ^ ?n",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Bit_Operations.drop_bit_nat_eq",
     "drop_bit ?n (nat ?k) = nat (drop_bit ?n ?k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.drop_bit_of_Suc_0",
     "drop_bit ?n (Suc 0) = of_bool (?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 1))
           ))),
    ("Bit_Operations.push_bit_nat_eq",
     "push_bit ?n (nat ?k) = nat (push_bit ?n ?k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.take_bit_of_Suc_0",
     "take_bit ?n (Suc 0) = of_bool (0 < ?n)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app (template_hole 3, template_hole 2)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Bit_Operations.bit_not_int_iff", "bit (not ?k) ?n = (~ bit ?k ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Option.elem_set", "(?x : set_option ?xo) = (?xo = Some ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Option.in_these_eq", "(?x : Option.these ?A) = (Some ?x : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Option.None_eq_map_option_iff",
     "(None = map_option ?f ?x) = (?x = None)",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Option.map_option_is_None",
     "(map_option ?f ?opt = None) = (?opt = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Bit_Operations.take_bit_int_greater_self_iff",
     "(?k < take_bit ?n ?k) = (?k < 0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 2, template_var 1), template_hole 0))),
    ("Bit_Operations.signed_take_bit_negative_iff",
     "(signed_take_bit ?n ?k < 0) = bit ?k ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Bit_Operations.drop_bit_negative_int_iff",
     "(drop_bit ?n ?k < 0) = (?k < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Bit_Operations.flip_bit_negative_int_iff",
     "(flip_bit ?n ?k < 0) = (?k < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Bit_Operations.push_bit_negative_int_iff",
     "(push_bit ?n ?k < 0) = (?k < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Bit_Operations.set_bit_negative_int_iff",
     "(set_bit ?n ?k < 0) = (?k < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Bit_Operations.unset_bit_negative_int_iff",
     "(unset_bit ?n ?k < 0) = (?k < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Bit_Operations.drop_bit_nonnegative_int_iff",
     "(0 <= drop_bit ?n ?k) = (0 <= ?k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Bit_Operations.flip_bit_nonnegative_int_iff",
     "(0 <= flip_bit ?n ?k) = (0 <= ?k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Bit_Operations.push_bit_nonnegative_int_iff",
     "(0 <= push_bit ?n ?k) = (0 <= ?k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Bit_Operations.set_bit_nonnegative_int_iff",
     "(0 <= set_bit ?n ?k) = (0 <= ?k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Bit_Operations.unset_bit_nonnegative_int_iff",
     "(0 <= unset_bit ?n ?k) = (0 <= ?k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Bit_Operations.take_bit_int_less_eq_self_iff",
     "(take_bit ?n ?k <= ?k) = (0 <= ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 0), template_var 0))),
    ("Option.map_conv_bind_option",
     "map_option ?f ?x = Option.bind ?x (Some o ?f)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Bit_Operations.signed_take_bit_int_less_exp",
     "signed_take_bit ?n ?k < 2 ^ ?n",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 1))),
    ("Bit_Operations.take_bit_int_less_exp", "take_bit ?n ?k < 2 ^ ?n",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 1))),
    ("Bit_Operations.take_bit_nat_less_exp", "take_bit ?n ?m < 2 ^ ?n",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 1))),
    ("Option.pred_option_parametric",
     "rel_fun (rel_fun ?A (=)) (rel_fun (rel_option ?A) (=)) pred_option
       pred_option",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 4)),
             template_hole 1),
           template_hole 0)
         )),
    ("Option.rel_option_inf",
     "inf (rel_option ?A) (rel_option ?B) = rel_option (inf ?A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.and_not_numerals",
     "and (numeral (num.Bit0 ?m)) (not 1) = numeral (num.Bit0 ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, template_hole 0)),
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)))),
    ("Bit_Operations.and_not_numerals",
     "and (numeral (num.Bit1 ?m)) (not 1) = numeral (num.Bit0 ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_hole 4, template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.and_Suc_0_eq", "and ?n (Suc 0) = ?n mod 2",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app (template_hole 5, template_hole 4)),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bit_Operations.Suc_0_and_eq", "and (Suc 0) ?n = ?n mod 2",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app (template_hole 5, template_hole 4)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bit_Operations.push_bit_of_Suc_0", "push_bit ?n (Suc 0) = 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app (template_hole 5, template_hole 4)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Bit_Operations.or_nat_numerals",
     "or (Suc 0) (numeral (num.Bit0 ?y)) = numeral (num.Bit1 ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.or_nat_numerals",
     "or (Suc 0) (numeral (num.Bit1 ?y)) = numeral (num.Bit1 ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.or_nat_numerals",
     "or (numeral (num.Bit0 ?x)) (Suc 0) = numeral (num.Bit1 ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_hole 4, template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.or_nat_numerals",
     "or (numeral (num.Bit1 ?x)) (Suc 0) = numeral (num.Bit1 ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, template_hole 0)),
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)))),
    ("Bit_Operations.xor_nat_numerals",
     "xor (Suc 0) (numeral (num.Bit0 ?y)) = numeral (num.Bit1 ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.xor_nat_numerals",
     "xor (Suc 0) (numeral (num.Bit1 ?y)) = numeral (num.Bit0 ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.xor_nat_numerals",
     "xor (numeral (num.Bit0 ?x)) (Suc 0) = numeral (num.Bit1 ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_hole 4, template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.xor_nat_numerals",
     "xor (numeral (num.Bit1 ?x)) (Suc 0) = numeral (num.Bit0 ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_hole 4, template_app (template_hole 0, template_var 0)))),
    ("Option.these_insert_Some",
     "Option.these (insert (Some ?x) ?A) = insert ?x (Option.these ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, template_var 0)))),
    ("Bit_Operations.signed_take_bit_nonnegative_iff",
     "(0 <= signed_take_bit ?n ?k) = (~ bit ?k ?n)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Option.notin_range_Some", "(?x ~: range Some) = (?x = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2)))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Bit_Operations.concat_bit_negative_iff",
     "(concat_bit ?n ?k ?l < 0) = (?l < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Bit_Operations.concat_bit_nonnegative_iff",
     "(0 <= concat_bit ?n ?k ?l) = (0 <= ?l)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Bit_Operations.signed_take_bit_int_greater_eq_minus_exp",
     "- (2 ^ ?n) <= signed_take_bit ?n ?k",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Bit_Operations.and_less_eq", "?l < 0 ==> and ?k ?l <= ?k",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("Bit_Operations.or_greater_eq", "0 <= ?l ==> ?k <= or ?k ?l",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Bit_Operations.AND_lower", "0 <= ?x ==> 0 <= and ?x ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.AND_upper1", "0 <= ?x ==> and ?x ?y <= ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Bit_Operations.AND_upper2", "0 <= ?y ==> and ?x ?y <= ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Bit_Operations.less_mask", "Suc 0 < ?n ==> ?n < mask ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 2, template_hole 1),
          template_var 0)],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.push_bit_minus_one", "push_bit ?n (- 1) = - (2 ^ ?n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0),
         template_app (template_hole 5, template_hole 4)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Bit_Operations.signed_take_bit_minus",
     "signed_take_bit ?n (- signed_take_bit ?n ?k) =
      signed_take_bit ?n (- ?k)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.or_not_numerals",
     "or 1 (not (numeral (num.Bit0 ?n))) = not (numeral (num.Bit0 ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Bit_Operations.or_not_numerals",
     "or 1 (not (numeral (num.Bit1 ?n))) = not (numeral (num.Bit0 ?n))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Bit_Operations.or_minus_numerals",
     "or 1 (- numeral (num.Bit1 ?n)) = - numeral (num.Bit1 ?n)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Bit_Operations.or_minus_numerals",
     "or (- numeral (num.Bit1 ?n)) 1 = - numeral (num.Bit1 ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_hole 0),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Bit_Operations.take_bit_minus",
     "take_bit ?n (- take_bit ?n ?k) = take_bit ?n (- ?k)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.mask_half_int", "mask ?n div 2 = mask (?n - 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2))),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Bit_Operations.plus_and_or", "and ?x ?y + or ?x ?y = ?x + ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Bit_Operations.minus_1_div_exp_eq_int", "- 1 div 2 ^ ?n = - 1",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app (template_hole 5, template_hole 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)),
       template_app (template_hole 5, template_hole 4))),
    ("Bit_Operations.bit_minus_int_iff",
     "bit (- ?k) ?n = bit (not (?k - 1)) ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_var 0))),
    ("Option.not_None_eq", "(?x ~= None) = (EX y. ?x = Some y)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("Bit_Operations.bit_not_int_iff'", "bit (- ?k - 1) ?n = (~ bit ?k ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_hole 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Option.not_Some_eq", "(ALL y. ?x ~= Some y) = (?x = None)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Bit_Operations.half_negative_int_iff", "(?k div 2 < 0) = (?k < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_hole 0),
       template_app
        (template_app (template_hole 5, template_var 0), template_hole 0))),
    ("Bit_Operations.half_nonnegative_int_iff",
     "(0 <= ?k div 2) = (0 <= ?k)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))),
       template_app
        (template_app (template_hole 5, template_hole 4), template_var 0))),
    ("Option.map_option_case",
     "map_option ?f ?y = (case ?y of None => None | Some x => Some (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_var 0))),
    ("Option.bind_map_option",
     "Option.bind (map_option ?f ?x) ?g = Option.bind ?x (?g o ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Option.combine_options_simps",
     "combine_options ?f (Some ?a) (Some ?b) = Some (?f ?a ?b)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_var 2, template_var 1),
           template_var 0)))),
    ("Option.option_bind_transfer",
     "rel_fun (rel_option ?A)
       (rel_fun (rel_fun ?A (rel_option ?B)) (rel_option ?B)) Option.bind
       Option.bind",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_hole 0)
         )),
    ("Bit_Operations.signed_take_bit_eq_concat_bit",
     "signed_take_bit ?n ?k = concat_bit ?n ?k (- of_bool (bit ?k ?n))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Bit_Operations.concat_bit_eq",
     "concat_bit ?n ?k ?l = take_bit ?n ?k + push_bit ?n ?l",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bit_Operations.numeral_or_not_num_eq",
     "numeral (or_not_num_neg ?m ?n) =
      - or (numeral ?m) (not (numeral ?n))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 0)))))),
    ("Bit_Operations.xor_minus_numerals",
     "xor ?k (- numeral ?n) =
      not (xor ?k (neg_numeral_class.sub ?n num.One))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Bit_Operations.xor_minus_numerals",
     "xor (- numeral ?n) ?k =
      not (xor (neg_numeral_class.sub ?n num.One) ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)))),
    ("Bit_Operations.int_numeral_or_not_num_neg",
     "or (numeral ?m) (not (numeral ?n)) =
      - numeral (or_not_num_neg ?m ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Bit_Operations.int_numeral_not_or_num_neg",
     "or (not (numeral ?m)) (numeral ?n) =
      - numeral (or_not_num_neg ?n ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Option.set_bind_option",
     "set_option (Option.bind ?x ?f) =
      \<Union> ((set_option o ?f) ` set_option ?x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 5),
               template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Bit_Operations.bit_nat_iff",
     "bit (nat ?k) ?n = (0 <= ?k & bit ?k ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Option.is_none_bind",
     "Option.is_none (Option.bind ?f ?g) =
      (Option.is_none ?f | Option.is_none (?g (the ?f)))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_var 0,
             template_app (template_hole 0, template_var 1)))))),
    ("Option.map_option_bind",
     "map_option ?f (Option.bind ?x ?g) =
      Option.bind ?x (map_option ?f o ?g)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 2)),
           template_var 0)))),
    ("Option.bind_option_cong_code",
     "?x = ?y ==> Option.bind ?x ?f = Option.bind ?y ?f",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.take_bit_tightened_less_eq_int",
     "?m <= ?n ==> take_bit ?m ?k <= take_bit ?n ?k",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.take_bit_tightened_less_eq_nat",
     "?m <= ?n ==> take_bit ?m ?q <= take_bit ?n ?q",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Option.case_map_option",
     "(case map_option ?f ?x of None => ?g | Some x => ?h x) =
      (case ?x of None => ?g | Some x => (?h o ?f) x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Bit_Operations.or_minus_numerals",
     "or 1 (- numeral (num.Bit0 ?n)) =
      - numeral (or_not_num_neg num.One (Num.BitM ?n))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Bit_Operations.or_minus_numerals",
     "or (- numeral (num.Bit0 ?n)) 1 =
      - numeral (or_not_num_neg num.One (Num.BitM ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)))),
         template_hole 3),
       template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Bit_Operations.not_int_div_2", "not ?k div 2 = not (?k div 2)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Bit_Operations.drop_bit_Suc_minus_bit0",
     "drop_bit (Suc ?n) (- numeral (num.Bit0 ?k)) =
      drop_bit ?n (- numeral ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Bit_Operations.or_Suc_0_eq", "or ?n (Suc 0) = ?n + of_bool (even ?n)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 0),
         template_app (template_hole 7, template_hole 6)),
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Bit_Operations.Suc_0_or_eq", "or (Suc 0) ?n = ?n + of_bool (even ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app (template_hole 7, template_hole 6)),
         template_var 0),
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Option.split_option_all",
     "(ALL x. ?P x) = (?P None & (ALL x. ?P (Some x)))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 0, template_hole 2)),
         template_app (template_hole 1, t_empty)))),
    ("Option.split_option_ex",
     "(EX x. ?P x) = (?P None | (EX x. ?P (Some x)))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 0, template_hole 2)),
         template_app (template_hole 1, t_empty)))),
    ("Bit_Operations.bit_and_int_iff",
     "bit (and ?k ?l) ?n = (bit ?k ?n & bit ?l ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Bit_Operations.bit_or_int_iff",
     "bit (or ?k ?l) ?n = (bit ?k ?n | bit ?l ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Bit_Operations.take_bit_nat_eq_self_iff",
     "(take_bit ?n ?m = ?m) = (?m < 2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1)))),
    ("Bit_Operations.signed_take_bit_int_less_self_iff",
     "(signed_take_bit ?n ?k < ?k) = (2 ^ ?n <= ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 0))),
    ("Bit_Operations.and_negative_int_iff",
     "(and ?k ?l < 0) = (?k < 0 & ?l < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Bit_Operations.or_negative_int_iff",
     "(or ?k ?l < 0) = (?k < 0 | ?l < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Bit_Operations.take_bit_int_less_self_iff",
     "(take_bit ?n ?k < ?k) = (2 ^ ?n <= ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 0))),
    ("Bit_Operations.take_bit_nat_less_self_iff",
     "(take_bit ?n ?m < ?m) = (2 ^ ?n <= ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1)),
         template_var 0))),
    ("Bit_Operations.and_nonnegative_int_iff",
     "(0 <= and ?k ?l) = (0 <= ?k | 0 <= ?l)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Bit_Operations.or_nonnegative_int_iff",
     "(0 <= or ?k ?l) = (0 <= ?k & 0 <= ?l)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Bit_Operations.xor_nonnegative_int_iff",
     "(0 <= xor ?k ?l) = ((0 <= ?k) = (0 <= ?l))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Bit_Operations.signed_take_bit_int_greater_eq_self_iff",
     "(?k <= signed_take_bit ?n ?k) = (?k < 2 ^ ?n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Bit_Operations.take_bit_int_greater_eq_self_iff",
     "(?k <= take_bit ?n ?k) = (?k < 2 ^ ?n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Bit_Operations.even_not_iff_int", "even (not ?k) = odd ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Bit_Operations.bit_minus_numeral_Bit0_Suc_iff",
     "bit (- numeral (num.Bit0 ?w)) (Suc ?n) = bit (- numeral ?w) ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0))),
    ("Bit_Operations.bit_minus_numeral_Bit1_Suc_iff",
     "bit (- numeral (num.Bit1 ?w)) (Suc ?n) = (~ bit (numeral ?w) ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 3, template_var 1)),
           template_var 0)))),
    ("Option.bind_assoc",
     "Option.bind (Option.bind ?x ?f) ?g =
      Option.bind ?x (%y. Option.bind (?f y) ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Bit_Operations.horner_sum_of_bool_2_less",
     "horner_sum of_bool 2 ?bs < 2 ^ length ?bs",
     template_inequation
      (less_than,
       template_app
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app (template_hole 0, template_var 0)))),
    ("Option.the_map_option",
     "~ Option.is_none ?x ==> the (map_option ?f ?x) = ?f (the ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 1))))),
    ("Bit_Operations.drop_bit_Suc_minus_bit1",
     "drop_bit (Suc ?n) (- numeral (num.Bit1 ?k)) =
      drop_bit ?n (- numeral (Num.inc ?k))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0)))))),
    ("Bit_Operations.drop_bit_numeral_minus_bit0",
     "drop_bit (numeral ?l) (- numeral (num.Bit0 ?k)) =
      drop_bit (pred_numeral ?l) (- numeral ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Bit_Operations.or_minus_numerals",
     "or (numeral ?m) (- numeral (num.Bit0 ?n)) =
      - numeral (or_not_num_neg ?m (Num.BitM ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 4,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Bit_Operations.or_minus_numerals",
     "or (numeral ?m) (- numeral (num.Bit1 ?n)) =
      - numeral (or_not_num_neg ?m (num.Bit0 ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 4,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Bit_Operations.or_minus_numerals",
     "or (- numeral (num.Bit0 ?n)) (numeral ?m) =
      - numeral (or_not_num_neg ?m (Num.BitM ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("Bit_Operations.or_minus_numerals",
     "or (- numeral (num.Bit1 ?n)) (numeral ?m) =
      - numeral (or_not_num_neg ?m (num.Bit0 ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("Option.these_empty_eq",
     "(Option.these ?B = {}) = (?B = {} | ?B = {None})",
     template_bimplication
      (template_equation
        (template_app (template_hole 6, template_var 0), template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 2)))
           ))),
    ("Bit_Operations.bit_xor_int_iff",
     "bit (xor ?k ?l) ?n = (bit ?k ?n ~= bit ?l ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Bit_Operations.and_not_num_eq_None_iff",
     "(and_not_num ?m ?n = None) =
      (and (numeral ?m) (not (numeral ?n)) = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0))),
         template_hole 0))),
    ("Bit_Operations.signed_take_bit_int_greater_self_iff",
     "(?k < signed_take_bit ?n ?k) = (?k < - (2 ^ ?n))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_app (template_hole 5, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Bit_Operations.xor_negative_int_iff",
     "(xor ?k ?l < 0) = ((?k < 0) ~= (?l < 0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Bit_Operations.signed_take_bit_int_less_eq_self_iff",
     "(signed_take_bit ?n ?k <= ?k) = (- (2 ^ ?n) <= ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 1))),
         template_var 0))),
    ("Bit_Operations.take_bit_eq_mask_iff",
     "(take_bit ?n ?k = mask ?n) = (take_bit ?n (?k + 1) = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app (template_hole 3, template_var 1)),
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Bit_Operations.bit_minus_numeral_int",
     "bit (- numeral (num.Bit0 ?w)) (numeral ?n) =
      bit (- numeral ?w) (pred_numeral ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)))),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("Bit_Operations.bit_minus_numeral_int",
     "bit (- numeral (num.Bit1 ?w)) (numeral ?n) =
      (~ bit (numeral ?w) (pred_numeral ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Bit_Operations.take_bit_nat_eq",
     "0 <= ?k ==> take_bit ?n (nat ?k) = nat (take_bit ?n ?k)",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Bit_Operations.nat_take_bit_eq",
     "0 <= ?k ==> nat (take_bit ?n ?k) = take_bit ?n (nat ?k)",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Bit_Operations.take_bit_nat_eq_self",
     "?m < 2 ^ ?n ==> take_bit ?n ?m = ?m",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Bit_Operations.drop_bit_push_bit_int",
     "drop_bit ?m (push_bit ?n ?k) =
      drop_bit (?m - ?n) (push_bit (?n - ?m) ?k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Bit_Operations.signed_take_bit_Suc_bit0",
     "signed_take_bit (Suc ?n) (numeral (num.Bit0 ?k)) =
      signed_take_bit ?n (numeral ?k) * 2",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 0))))),
    ("Bit_Operations.int_numeral_and_not_num",
     "and (numeral ?m) (not (numeral ?n)) =
      (case and_not_num ?m ?n of None => 0 | Some n' => numeral n')",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.int_numeral_not_and_num",
     "and (not (numeral ?m)) (numeral ?n) =
      (case and_not_num ?n ?m of None => 0 | Some n' => numeral n')",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Bit_Operations.drop_bit_numeral_minus_bit1",
     "drop_bit (numeral ?l) (- numeral (num.Bit1 ?k)) =
      drop_bit (pred_numeral ?l) (- numeral (Num.inc ?k))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0)))))),
    ("Bit_Operations.signed_take_bit_diff",
     "signed_take_bit ?n (signed_take_bit ?n ?k - signed_take_bit ?n ?l) =
      signed_take_bit ?n (?k - ?l)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.signed_take_bit_add",
     "signed_take_bit ?n (signed_take_bit ?n ?k + signed_take_bit ?n ?l) =
      signed_take_bit ?n (?k + ?l)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.signed_take_bit_mult",
     "signed_take_bit ?n (signed_take_bit ?n ?k * signed_take_bit ?n ?l) =
      signed_take_bit ?n (?k * ?l)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.take_bit_diff",
     "take_bit ?n (take_bit ?n ?k - take_bit ?n ?l) =
      take_bit ?n (?k - ?l)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.take_bit_mult",
     "take_bit ?n (take_bit ?n ?k * take_bit ?n ?l) =
      take_bit ?n (?k * ?l)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Option.Some_image_these_eq",
     "Some ` Option.these ?A = {x: ?A. x ~= None}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Bit_Operations.bit_push_bit_iff_int",
     "bit (push_bit ?m ?k) ?n = (?m <= ?n & bit ?k (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Bit_Operations.bit_push_bit_iff_nat",
     "bit (push_bit ?m ?q) ?n = (?m <= ?n & bit ?q (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Option.bind_eq_None_conv",
     "(Option.bind ?a ?f = None) = (?a = None | ?f (the ?a) = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_var 0,
                   template_app (template_hole 0, template_var 1))),
               template_hole 4))
           ))),
    ("Bit_Operations.take_bit_num_simps",
     "take_bit_num (Suc ?n) (num.Bit0 ?m) =
      (case take_bit_num ?n ?m of None => None
       | Some q => Some (num.Bit0 q))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("Bit_Operations.take_bit_num_simps",
     "take_bit_num (Suc ?n) (num.Bit1 ?m) =
      Some
       (case take_bit_num ?n ?m of None => num.One | Some q => num.Bit1 q)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0), t_empty),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("Bit_Operations.bit_imp_take_bit_positive",
     "[| ?n < ?m; bit ?k ?n |] ==> 0 < take_bit ?m ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.OR_lower", "[| 0 <= ?x; 0 <= ?y |] ==> 0 <= or ?x ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.XOR_lower",
     "[| 0 <= ?x; 0 <= ?y |] ==> 0 <= xor ?x ?y",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.AND_upper2''",
     "[| 0 <= ?y; ?y < ?z |] ==> and ?x ?y < ?z",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Bit_Operations.AND_upper1''",
     "[| 0 <= ?y; ?y < ?z |] ==> and ?y ?ya < ?z",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 2),
        template_inequation (less_than, template_var 2, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Bit_Operations.AND_upper2'",
     "[| 0 <= ?y; ?y <= ?z |] ==> and ?x ?y <= ?z",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Bit_Operations.AND_upper1'",
     "[| 0 <= ?y; ?y <= ?z |] ==> and ?y ?ya <= ?z",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Option.map_option_o_case_sum",
     "map_option ?f o case_sum ?g ?h =
      case_sum (map_option ?f o ?g) (map_option ?f o ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 2)),
           template_var 0)))),
    ("Bit_Operations.unset_bit_eq",
     "unset_bit ?n ?k = ?k - of_bool (bit ?k ?n) * 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("Bit_Operations.signed_take_bit_numeral_bit0",
     "signed_take_bit (numeral ?l) (numeral (num.Bit0 ?k)) =
      signed_take_bit (pred_numeral ?l) (numeral ?k) * 2",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 0))))),
    ("Option.option_rel_Some2",
     "rel_option ?A ?x (Some ?y) = (EX x'. ?x = Some x' & ?A x' ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Option.option_rel_Some1",
     "rel_option ?A (Some ?x) ?y = (EX y'. ?y = Some y' & ?A ?x y')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Bit_Operations.take_bit_eq_mask_iff_exp_dvd",
     "(take_bit ?n ?k = mask ?n) = (2 ^ ?n dvd ?k + 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         template_app (template_hole 7, template_var 1)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Bit_Operations.and_not_num_eq_Some_iff",
     "(and_not_num ?m ?n = Some ?q) =
      (and (numeral ?m) (not (numeral ?n)) = numeral ?q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 1, template_var 0)))),
    ("Bit_Operations.take_bit_num_simps",
     "take_bit_num (numeral ?r) (num.Bit0 ?m) =
      (case take_bit_num (pred_numeral ?r) ?m of None => None
       | Some q => Some (num.Bit0 q))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Bit_Operations.take_bit_num_simps",
     "take_bit_num (numeral ?r) (num.Bit1 ?m) =
      Some
       (case take_bit_num (pred_numeral ?r) ?m of None => num.One
        | Some q => num.Bit1 q)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1), t_empty),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Bit_Operations.take_bit_int_greater_eq",
     "?k < 0 ==> ?k + 2 ^ ?n <= take_bit ?n ?k",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 7)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Option.ospec",
     "[| ALL x:set_option ?A. ?P x; ?A = Some ?x |] ==> ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_var 2, template_app (template_hole 0, template_var 0))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Bit_Operations.set_bit_eq",
     "set_bit ?n ?k = ?k + of_bool (~ bit ?k ?n) * 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("Bit_Operations.signed_take_bit_Suc_bit1",
     "signed_take_bit (Suc ?n) (numeral (num.Bit1 ?k)) =
      signed_take_bit ?n (numeral ?k) * 2 + 1",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app (template_hole 6, template_var 0))),
             template_app
              (template_hole 6,
               template_app (template_hole 2, template_hole 1)))),
         template_hole 0))),
    ("Bit_Operations.take_bit_concat_bit_eq",
     "take_bit ?m (concat_bit ?n ?k ?l) =
      concat_bit (min ?m ?n) ?k (take_bit (?m - ?n) ?l)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Bit_Operations.concat_bit_assoc",
     "concat_bit ?n ?k (concat_bit ?m ?l ?r) =
      concat_bit (?m + ?n) (concat_bit ?n ?k ?l) ?r",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1)),
         template_var 0))),
    ("Bit_Operations.signed_take_bit_Suc_minus_bit0",
     "signed_take_bit (Suc ?n) (- numeral (num.Bit0 ?k)) =
      signed_take_bit ?n (- numeral ?k) * 2",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 0))))),
    ("Bit_Operations.and_minus_numerals",
     "and (numeral ?m) (- numeral (num.Bit0 ?n)) =
      (case and_not_num ?m (Num.BitM ?n) of None => 0
       | Some n' => numeral n')",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 6,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Bit_Operations.and_minus_numerals",
     "and (numeral ?m) (- numeral (num.Bit1 ?n)) =
      (case and_not_num ?m (num.Bit0 ?n) of None => 0
       | Some n' => numeral n')",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 6,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Bit_Operations.and_minus_numerals",
     "and (- numeral (num.Bit0 ?n)) (numeral ?m) =
      (case and_not_num ?m (Num.BitM ?n) of None => 0
       | Some n' => numeral n')",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)))),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Bit_Operations.and_minus_numerals",
     "and (- numeral (num.Bit1 ?n)) (numeral ?m) =
      (case and_not_num ?m (num.Bit0 ?n) of None => 0
       | Some n' => numeral n')",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)))),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Bit_Operations.take_bit_Suc_minus_bit0",
     "take_bit (Suc ?n) (- numeral (num.Bit0 ?k)) =
      take_bit ?n (- numeral ?k) * 2",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 0))))),
    ("Option.these_not_empty_eq",
     "(Option.these ?B ~= {}) = (?B ~= {} & ?B ~= {None})",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app (template_hole 6, template_var 0),
             template_hole 5)
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_hole 2))))
           ))),
    ("Bit_Operations.take_bit_int_eq_self_iff",
     "(take_bit ?n ?k = ?k) = (0 <= ?k & ?k < 2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 1))))),
    ("Option.rel_option_reflI",
     "(!!x. x : set_option ?y ==> ?P x x) ==> rel_option ?P ?y ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 1)
           ))),
    ("Bit_Operations.signed_take_bit_numeral_bit1",
     "signed_take_bit (numeral ?l) (numeral (num.Bit1 ?k)) =
      signed_take_bit (pred_numeral ?l) (numeral ?k) * 2 + 1",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 3, template_var 1)),
                 template_app (template_hole 7, template_var 0))),
             template_app
              (template_hole 7,
               template_app (template_hole 2, template_hole 1)))),
         template_hole 0))),
    ("Bit_Operations.signed_take_bit_numeral_minus_bit0",
     "signed_take_bit (numeral ?l) (- numeral (num.Bit0 ?k)) =
      signed_take_bit (pred_numeral ?l) (- numeral ?k) * 2",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 0))))),
    ("Bit_Operations.and_minus_minus_numerals",
     "and (- numeral ?m) (- numeral ?n) =
      not (or (numeral ?m - 1) (numeral ?n - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 1)),
               template_hole 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 0)),
             template_hole 0))))),
    ("Bit_Operations.or_minus_minus_numerals",
     "or (- numeral ?m) (- numeral ?n) =
      not (and (numeral ?m - 1) (numeral ?n - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 1)),
               template_hole 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 0)),
             template_hole 0))))),
    ("Bit_Operations.take_bit_numeral_minus_bit0",
     "take_bit (numeral ?l) (- numeral (num.Bit0 ?k)) =
      take_bit (pred_numeral ?l) (- numeral ?k) * 2",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 0))))),
    ("Option.map_option_eq_Some",
     "(map_option ?f ?xo = Some ?y) = (EX z. ?xo = Some z & ?f z = ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Bit_Operations.take_bit_Suc_from_most",
     "take_bit (Suc ?n) ?k = 2 ^ ?n * of_bool (bit ?k ?n) + take_bit ?n ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))),
         template_app
          (template_app (template_hole 9, template_var 1),
           template_var 0)))),
    ("Bit_Operations.concat_bit_assoc_sym",
     "concat_bit ?m (concat_bit ?n ?k ?l) ?r =
      concat_bit (min ?m ?n) ?k (concat_bit (?m - ?n) ?l ?r)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_var 1),
           template_var 0)))),
    ("Bit_Operations.and_not_numerals",
     "and (numeral (num.Bit0 ?m)) (not (numeral (num.Bit0 ?n))) =
      2 * and (numeral ?m) (not (numeral ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 0)))))),
    ("Bit_Operations.and_not_numerals",
     "and (numeral (num.Bit0 ?m)) (not (numeral (num.Bit1 ?n))) =
      2 * and (numeral ?m) (not (numeral ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 5,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)))))),
    ("Bit_Operations.and_not_numerals",
     "and (numeral (num.Bit1 ?m)) (not (numeral (num.Bit1 ?n))) =
      2 * and (numeral ?m) (not (numeral ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 5,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)))))),
    ("Bit_Operations.or_not_numerals",
     "or (numeral (num.Bit0 ?m)) (not (numeral (num.Bit1 ?n))) =
      2 * or (numeral ?m) (not (numeral ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 5,
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)))))),
    ("Option.bind_eq_Some_conv",
     "(Option.bind ?f ?g = Some ?x) = (EX y. ?f = Some y & ?g y = Some ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Bit_Operations.even_and_iff_int",
     "even (and ?k ?l) = (even ?k | even ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_var 0)))),
    ("Bit_Operations.take_bit_decr_eq",
     "take_bit ?n ?k ~= 0 ==> take_bit ?n (?k - 1) = take_bit ?n ?k - 1",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Option.map_option_idI",
     "(!!y. y : set_option ?x ==> ?f y = y) ==> map_option ?f ?x = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Bit_Operations.take_bit_int_eq_self",
     "[| 0 <= ?k; ?k < 2 ^ ?n |] ==> take_bit ?n ?k = ?k",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Bit_Operations.not_int_rec",
     "not ?k = of_bool (even ?k) + 2 * not (?k div 2)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))))))),
    ("Bit_Operations.signed_take_bit_eq_take_bit_minus",
     "signed_take_bit ?n ?k =
      take_bit (Suc ?n) ?k - 2 ^ Suc ?n * of_bool (bit ?k ?n)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app (template_hole 7, template_var 1))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Bit_Operations.signed_take_bit_eq_take_bit_shift",
     "signed_take_bit ?n ?k = take_bit (Suc ?n) (?k + 2 ^ ?n) - 2 ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 1)))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1)))),
    ("Bit_Operations.take_bit_Suc_minus_bit1",
     "take_bit (Suc ?n) (- numeral (num.Bit1 ?k)) =
      take_bit ?n (- numeral (Num.inc ?k)) * 2 + 1",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 3, template_var 0))))),
             template_app
              (template_hole 7,
               template_app (template_hole 2, template_hole 1)))),
         template_hole 0))),
    ("Bit_Operations.signed_take_bit_Suc_minus_bit1",
     "signed_take_bit (Suc ?n) (- numeral (num.Bit1 ?k)) =
      signed_take_bit ?n (- numeral ?k - 1) * 2 + 1",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_var 0))),
                   template_hole 2))),
             template_app
              (template_hole 7,
               template_app (template_hole 1, template_hole 0)))),
         template_hole 2))),
    ("Bit_Operations.take_bit_numeral_minus_bit1",
     "take_bit (numeral ?l) (- numeral (num.Bit1 ?k)) =
      take_bit (pred_numeral ?l) (- numeral (Num.inc ?k)) * 2 + 1",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 4, template_var 1)),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 3, template_var 0))))),
             template_app
              (template_hole 8,
               template_app (template_hole 2, template_hole 1)))),
         template_hole 0))),
    ("Bit_Operations.and_not_numerals",
     "and (numeral (num.Bit1 ?m)) (not (numeral (num.Bit0 ?n))) =
      1 + 2 * and (numeral ?m) (not (numeral ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_app
          (template_hole 5,
           template_app
            (template_hole 7,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 7,
               template_app (template_hole 4, template_hole 0))),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 1)),
             template_app
              (template_hole 5,
               template_app (template_hole 7, template_var 0))))))),
    ("Bit_Operations.or_not_numerals",
     "or (numeral (num.Bit0 ?m)) (not (numeral (num.Bit0 ?n))) =
      1 + 2 * or (numeral ?m) (not (numeral ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)))),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 0))),
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1)),
             template_app
              (template_hole 4,
               template_app (template_hole 6, template_var 0))))))),
    ("Bit_Operations.or_not_numerals",
     "or (numeral (num.Bit1 ?m)) (not (numeral (num.Bit0 ?n))) =
      1 + 2 * or (numeral ?m) (not (numeral ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_app
          (template_hole 5,
           template_app
            (template_hole 7,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 7,
               template_app (template_hole 4, template_hole 0))),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 1)),
             template_app
              (template_hole 5,
               template_app (template_hole 7, template_var 0))))))),
    ("Bit_Operations.or_not_numerals",
     "or (numeral (num.Bit1 ?m)) (not (numeral (num.Bit1 ?n))) =
      1 + 2 * or (numeral ?m) (not (numeral ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_app
          (template_hole 5,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)))),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 7,
               template_app (template_hole 1, template_hole 0))),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 1)),
             template_app
              (template_hole 5,
               template_app (template_hole 7, template_var 0))))))),
    ("Bit_Operations.xor_Suc_0_eq",
     "xor ?n (Suc 0) = ?n + of_bool (even ?n) - of_bool (odd ?n)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 0),
         template_app (template_hole 9, template_hole 8)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0)))),
         template_app
          (template_hole 5,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)))))),
    ("Bit_Operations.Suc_0_xor_eq",
     "xor (Suc 0) ?n = ?n + of_bool (even ?n) - of_bool (odd ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_hole 8)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0)))),
         template_app
          (template_hole 5,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 0)))))),
    ("Bit_Operations.concat_bit_eq_iff",
     "(concat_bit ?n ?k ?l = concat_bit ?n ?r ?s) =
      (take_bit ?n ?k = take_bit ?n ?r & ?l = ?s)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1))),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Bit_Operations.signed_take_bit_int_less_eq",
     "2 ^ ?n <= ?k ==> signed_take_bit ?n ?k <= ?k - 2 ^ Suc ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_app (template_hole 0, template_var 1)))))),
    ("Bit_Operations.signed_take_bit_code",
     "signed_take_bit ?n ?a =
      (let l = take_bit (Suc ?n) ?a
       in if bit l ?n then l + push_bit (Suc ?n) (- (1::?'a)) else l)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1)),
             template_var 0)),
         t_empty))),
    ("Bit_Operations.signed_take_bit_numeral_minus_bit1",
     "signed_take_bit (numeral ?l) (- numeral (num.Bit1 ?k)) =
      signed_take_bit (pred_numeral ?l) (- numeral ?k - 1) * 2 + 1",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 4, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_var 0))),
                   template_hole 2))),
             template_app
              (template_hole 8,
               template_app (template_hole 1, template_hole 0)))),
         template_hole 2))),
    ("Option.bind_split",
     "?P (Option.bind ?m ?f) =
      ((?m = None --> ?P None) & (ALL v. ?m = Some v --> ?P (?f v)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 3)),
                 template_app (template_var 2, template_hole 2))),
             template_app (template_hole 1, t_empty))
           ))),
    ("Bit_Operations.signed_take_bit_int_eq_self_iff",
     "(signed_take_bit ?n ?k = ?k) = (- (2 ^ ?n) <= ?k & ?k < 2 ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_var 1))),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 1))))),
    ("Bit_Operations.signed_take_bit_int_greater_eq",
     "?k < - (2 ^ ?n) ==> ?k + 2 ^ Suc ?n <= signed_take_bit ?n ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 8,
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4))),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Option.combine_options_commute",
     "(!!x y. ?f x y = ?f y x) ==>
      combine_options ?f ?x ?y = combine_options ?f ?y ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("Bit_Operations.concat_bit_Suc",
     "concat_bit (Suc ?n) ?k ?l =
      ?k mod 2 + 2 * concat_bit ?n (?k div 2) ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_app (template_hole 8, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_var 0))))),
    ("Option.rel_option_unfold",
     "rel_option ?R ?x ?y =
      (Option.is_none ?x = Option.is_none ?y &
       (~ Option.is_none ?x -->
        ~ Option.is_none ?y --> ?R (the ?x) (the ?y)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 5, template_var 1)),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 5, template_var 1))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 4, template_var 0))),
                 template_app
                  (template_app
                    (template_var 2,
                     template_app (template_hole 1, template_var 1)),
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("Bit_Operations.bit_concat_bit_iff",
     "bit (concat_bit ?m ?k ?l) ?n =
      (?n < ?m & bit ?k ?n | ?m <= ?n & bit ?l (?n - ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 3)),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)))))),
    ("Bit_Operations.signed_take_bit_int_eq_self",
     "[| - (2 ^ ?n) <= ?k; ?k < 2 ^ ?n |] ==> signed_take_bit ?n ?k = ?k",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 1)),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3))),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Option.bind_split_asm",
     "?P (Option.bind ?m ?f) =
      (~ (?m = None & ~ ?P None | (EX x. ?m = Some x & ~ ?P (?f x))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_hole 3)),
                     template_app
                      (template_hole 7,
                       template_app (template_var 2, template_hole 2)))),
                 template_app (template_hole 1, t_empty))
               )
           ))),
    ("Bit_Operations.take_bit_incr_eq",
     "take_bit ?n ?k ~= 2 ^ ?n - 1 ==>
      take_bit ?n (?k + 1) = 1 + take_bit ?n ?k",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_hole 2))),
                    template_var 1)),
                template_hole 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))))),
    ("Bit_Operations.take_bit_int_less_eq",
     "[| 2 ^ ?n <= ?k; 0 < ?n |] ==> take_bit ?n ?k <= ?k - 2 ^ ?n",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1),
          template_var 0),
        template_inequation (less_than, template_hole 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))),
             template_var 1))))),
    ("Bit_Operations.take_bit_numeral_minus_numeral_int",
     "take_bit (numeral ?m) (- numeral ?n) =
      (case take_bit_num (numeral ?m) ?n of None => 0
       | Some q => take_bit (numeral ?m) (2 ^ numeral ?m - numeral q))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_app
          (template_hole 8,
           template_app (template_hole 7, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 6, template_hole 5), t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 9, template_var 1)),
           template_var 0)))),
    ("Option.rel_option_iff",
     "rel_option ?R ?x ?y =
      (case (?x, ?y) of (None, None) => True | (None, Some a) => False
       | (Some x, None) => False | (Some x, Some y) => ?R x y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.take_bit_minus_small_eq",
     "[| 0 < ?k; ?k <= 2 ^ ?n |] ==> take_bit ?n (- ?k) = 2 ^ ?n - ?k",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_hole 4))),
               template_var 0)),
           template_var 1)))),
    ("Option.bind_option_cong_simp",
     "[| ?x = ?y; !!z. z : set_option ?y =simp=> ?f z = ?g z |]
      ==> Option.bind ?x ?f = Option.bind ?y ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Option.map_option_cong",
     "[| ?x = ?y; !!a. ?y = Some a ==> ?f a = ?g a |]
      ==> map_option ?f ?x = map_option ?g ?y",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Option.bind_cong",
     "[| ?x = ?y; !!a. ?y = Some a ==> ?f a = ?g a |]
      ==> Option.bind ?x ?f = Option.bind ?y ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Option.bind_option_cong",
     "[| ?x = ?y; !!z. z : set_option ?y ==> ?f z = ?g z |]
      ==> Option.bind ?x ?f = Option.bind ?y ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Option.rel_optionI",
     "[| Option.is_none ?x = Option.is_none ?y;
         [| ~ Option.is_none ?x; ~ Option.is_none ?y |]
         ==> ?P (the ?x) (the ?y) |]
      ==> rel_option ?P ?x ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_hole 5, template_var 2))
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (template_app (template_hole 4, template_var 1))
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 0,
                    template_app (template_hole 2, template_var 2)),
                  template_app (template_hole 1, template_var 1))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Bit_Operations.OR_upper",
     "[| 0 <= ?x; ?x < 2 ^ ?n; ?y < 2 ^ ?n |] ==> or ?x ?y < 2 ^ ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 1)))),
    ("Bit_Operations.XOR_upper",
     "[| 0 <= ?x; ?x < 2 ^ ?n; ?y < 2 ^ ?n |] ==> xor ?x ?y < 2 ^ ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 1))],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 1)))),
    ("Bit_Operations.and_int_rec",
     "and ?k ?l =
      of_bool (odd ?k & odd ?l) + 2 * and (?k div 2) (?l div 2)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2))),
                     template_var 1))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 0))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))))))),
    ("Bit_Operations.or_int_rec",
     "or ?k ?l = of_bool (odd ?k | odd ?l) + 2 * or (?k div 2) (?l div 2)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2))),
                     template_var 1))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 0))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))))))),
    ("Bit_Operations.and_nat_rec",
     "and ?m ?n =
      of_bool (odd ?m & odd ?n) + 2 * and (?m div 2) (?n div 2)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2))),
                     template_var 1))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 0))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))))))),
    ("Bit_Operations.or_nat_rec",
     "or ?m ?n = of_bool (odd ?m | odd ?n) + 2 * or (?m div 2) (?n div 2)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2))),
                     template_var 1))),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 0))))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))))))),
    ("Option.combine_options_assoc",
     "(!!x y z. ?f (?f x y) z = ?f x (?f y z)) ==>
      combine_options ?f (combine_options ?f ?x ?y) ?z =
      combine_options ?f ?x (combine_options ?f ?y ?z)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0))))),
    ("Bit_Operations.xor_int_rec",
     "xor ?k ?l =
      of_bool (odd ?k ~= odd ?l) + 2 * xor (?k div 2) (?l div 2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2))),
                           template_var 1))),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2))),
                         template_var 0)))))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2)))),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))))))
           ))),
    ("Bit_Operations.xor_nat_rec",
     "xor ?m ?n =
      of_bool (odd ?m ~= odd ?n) + 2 * xor (?m div 2) (?n div 2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2))),
                           template_var 1))),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2))),
                         template_var 0)))))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2)))),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))))))
           ))),
    ("Option.case_optionE",
     "[| case ?x of None => ?P | Some y => ?Q y;
         [| ?x = None; ?P |] ==> ?thesis;
         !!y. [| ?x = Some y; ?Q y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3), t_empty),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_implication
           ([template_predicate (template_var 3)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Bit_Operations.take_bit_num_code",
     "take_bit_num ?n ?m =
      (case (?n, ?m) of (0, x) => None | (Suc n, num.One) => Some num.One
       | (Suc n, num.Bit0 m) =>
           case take_bit_num n m of None => None
           | Some q => Some (num.Bit0 q)
       | (Suc n, num.Bit1 m) =>
           Some
            (case take_bit_num n m of None => num.One
             | Some q => num.Bit1 q))",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 10, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bit_Operations.int_bit_bound",
     "(!!n. [| !!m. n <= m ==> bit ?k m = bit ?k n;
               0 < n ==> bit ?k (n - 1) ~= bit ?k n |]
            ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Bit_Operations.and_nat_unfold",
     "and ?m ?n =
      (if ?m = 0 | ?n = 0 then 0
       else ?m mod 2 * (?n mod 2) + 2 * and (?m div 2) (?n div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 11, template_var 1),
                       template_hole 7)),
                   template_app
                    (template_app (template_hole 11, template_var 0),
                     template_hole 7))),
               template_hole 7),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1)))),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1)))),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))))))
           ))),
    ("Bit_Operations.nat_bit_induct",
     "[| ?P 0; !!n. [| ?P n; 0 < n |] ==> ?P (2 * n);
         !!n. ?P n ==> ?P (Suc (2 * n)) |]
      ==> ?P ?n",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 7)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Bit_Operations.or_nat_unfold",
     "or ?m ?n =
      (if ?m = 0 then ?n
       else if ?n = 0 then ?m
            else max (?m mod 2) (?n mod 2) + 2 * or (?m div 2) (?n div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 11, template_var 1),
                   template_hole 8)),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 11, template_var 0),
                     template_hole 8)),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2)))),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3, template_hole 2))))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2)))),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3, template_hole 2))))))))
           ))),
    ("Option.combine_options_cases",
     "[| ?x = None ==> ?P ?x ?y; ?y = None ==> ?P ?x ?y;
         !!a b. [| ?x = Some a; ?y = Some b |] ==> ?P ?x ?y |]
      ==> ?P ?x ?y",
     template_implication
      ([template_implication
         ([template_equation (template_var 2, template_hole 6)],
          template_predicate
           (
              template_app
               (template_app (template_var 1, template_var 2),
                template_var 0)
              )),
        template_implication
         ([template_equation (template_var 0, template_hole 4)],
          template_predicate
           (
              template_app
               (template_app (template_var 1, template_var 2),
                template_var 0)
              )),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 2), template_var 0)
           ))),
    ("Bit_Operations.xor_nat_unfold",
     "xor ?m ?n =
      (if ?m = 0 then ?n
       else if ?n = 0 then ?m
            else (?m mod 2 + ?n mod 2) mod 2 +
                 2 * xor (?m div 2) (?n div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 10, template_var 1),
                   template_hole 7)),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 10, template_var 0),
                     template_hole 7)),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 5, template_var 1),
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2)))),
                         template_app
                          (template_app (template_hole 5, template_var 0),
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2))))),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2)))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2)))),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3, template_hole 2))))))))
           ))),
    ("Option.combine_options_left_commute",
     "[| !!x y. ?f x y = ?f y x; !!x y z. ?f (?f x y) z = ?f x (?f y z) |]
      ==> combine_options ?f ?y (combine_options ?f ?x ?z) =
          combine_options ?f ?x (combine_options ?f ?y ?z)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Bit_Operations.and_int_unfold",
     "and ?k ?l =
      (if ?k = 0 | ?l = 0 then 0
       else if ?k = - 1 then ?l
            else if ?l = - 1 then ?k
                 else ?k mod 2 * (?l mod 2) +
                      2 * and (?k div 2) (?l div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 13, template_var 1),
                       template_hole 9)),
                   template_app
                    (template_app (template_hole 13, template_var 0),
                     template_hole 9))),
               template_hole 9),
             template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 13, template_var 1),
                     template_app (template_hole 8, template_hole 7))),
                 template_var 0),
               template_app
                (template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 13, template_var 0),
                       template_app (template_hole 8, template_hole 7))),
                   template_var 1),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 1),
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_hole 1)))),
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1))))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1))),
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_app (template_hole 0, template_var 1),
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_hole 1)))),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1)))))))))
           ))),
    ("Bit_Operations.or_int_unfold",
     "or ?k ?l =
      (if ?k = - 1 | ?l = - 1 then - 1
       else if ?k = 0 then ?l
            else if ?l = 0 then ?k
                 else max (?k mod 2) (?l mod 2) +
                      2 * or (?k div 2) (?l div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 14, template_var 1),
                       template_app (template_hole 10, template_hole 9))),
                   template_app
                    (template_app (template_hole 14, template_var 0),
                     template_app (template_hole 10, template_hole 9)))),
               template_app (template_hole 10, template_hole 9)),
             template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 14, template_var 1),
                     template_hole 8)),
                 template_var 0),
               template_app
                (template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 14, template_var 0),
                       template_hole 8)),
                   template_var 1),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 1),
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2)))),
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2))))),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2))),
                     template_app
                      (template_app
                        (template_hole 13,
                         template_app
                          (template_app (template_hole 0, template_var 1),
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2)))),
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2)))))))))
           ))),
    ("Bit_Operations.int_bit_induct",
     "[| ?P 0; ?P (- 1); !!k. [| ?P k; k ~= 0 |] ==> ?P (k * 2);
         !!k. [| ?P k; k ~= - 1 |] ==> ?P (1 + k * 2) |]
      ==> ?P ?k",
     template_implication
      ([template_predicate
         (template_app (template_var 1, template_hole 10)),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app (template_hole 9, template_hole 8))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Bit_Operations.xor_int_unfold",
     "xor ?k ?l =
      (if ?k = - 1 then not ?l
       else if ?l = - 1 then not ?k
            else if ?k = 0 then ?l
                 else if ?l = 0 then ?k
                      else \<bar>?k mod 2 - ?l mod 2\<bar> +
                           2 * xor (?k div 2) (?l div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 15, template_var 1),
                   template_app (template_hole 12, template_hole 11))),
               template_app (template_hole 10, template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 15, template_var 0),
                     template_app (template_hole 12, template_hole 11))),
                 template_app (template_hole 10, template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 15, template_var 1),
                       template_hole 9)),
                   template_var 0),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app (template_hole 15, template_var 0),
                         template_hole 9)),
                     template_var 1),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_var 1),
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3, template_hole 2)))),
                           template_app
                            (template_app (template_hole 5, template_var 0),
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2)))))),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2))),
                       template_app
                        (template_app
                          (template_hole 14,
                           template_app
                            (template_app (template_hole 0, template_var 1),
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2)))),
                         template_app
                          (template_app (template_hole 0, template_var 0),
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2))))))))))
           )))]
