Loading theory "Draft.Dynamic" (required by "Draft.StdTemplates" via "Draft.Std")
Loading theory "Draft.Op" (required by "Draft.StdTemplates" via "Draft.Std")
Loading theory "Draft.List_util" (required by "Draft.StdTemplates" via "Draft.Std")
Loading theory "Draft.Option_Extra" (required by "Draft.StdTemplates" via "Draft.Std" via "Draft.Global")
locale dynval
  fixes uninitialized :: "'dyn"
    and is_true :: "'dyn => bool"
    and is_false :: "'dyn => bool"
  assumes "dynval is_true is_false"
### theory "Draft.Dynamic"
### 0.033s elapsed time, 0.158s cpu time, 0.000s GC time
Proofs for inductive predicate(s) "same_length"
Loading theory "Draft.Result" (required by "Draft.StdTemplates" via "Draft.Std" via "Draft.Global")
locale nary_operations
  fixes \<OO>\<pp> :: "'op => 'a list => 'a"
    and \<AA>\<rr>\<ii>\<tt>\<yy> :: "'op => nat"
  assumes "nary_operations \<OO>\<pp> \<AA>\<rr>\<ii>\<tt>\<yy>"
### theory "Draft.Op"
### 0.037s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.Templates" (required by "Draft.StdTemplates" via "Draft.ExtrEqs")
  Proving monotonicity ...
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.088s elapsed time, 0.323s cpu time, 0.033s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StdTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Option_Extra"
### 0.231s elapsed time, 0.926s cpu time, 0.033s GC time
Loading theory "Draft.Env" (required by "Draft.StdTemplates" via "Draft.Std" via "Draft.Global")
### theory "Draft.List_util"
### 0.274s elapsed time, 1.100s cpu time, 0.033s GC time
Loading theory "Draft.AList_Extra" (required by "Draft.StdTemplates" via "Draft.Std" via "Draft.Global")
locale env
  fixes empty :: "'env"
    and get :: "'env => 'key => 'val option"
    and add :: "'env => 'key => 'val => 'env"
    and to_list :: "'env => ('key * 'val) list"
  assumes "env empty get add to_list"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.AList_Extra"
### 0.159s elapsed time, 0.616s cpu time, 0.076s GC time
Loading theory "Draft.Map_Extra" (required by "Draft.StdTemplates" via "Draft.Std" via "Draft.Global")
### theory "Draft.Env"
### 0.242s elapsed time, 0.948s cpu time, 0.076s GC time
### theory "Draft.Map_Extra"
### 0.094s elapsed time, 0.328s cpu time, 0.064s GC time
Found termination order: "{}"
Found termination order: "{}"
find_theorems
  "_ &&& _"
found 3 theorem(s):
HOL.induct_rulify(3): HOL.induct_conj ?A ?B == (?A &&& ?B)
HOL.atomize_conj: (?A &&& ?B) == ?A & ?B
HOL.induct_conj_eq: (?A &&& ?B) == HOL.induct_conj ?A ?B
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.580s elapsed time, 2.087s cpu time, 0.140s GC time
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Result"
### 0.750s elapsed time, 2.549s cpu time, 0.216s GC time
Loading theory "Draft.Global" (required by "Draft.StdTemplates" via "Draft.Std")
Default parameters for Sledgehammer:
compress = smart
debug = false
fact_filter = smart
fact_thresholds = 0.45 0.85
induction_rules = smart
isar_proofs = smart
lam_trans = smart
learn = true
max_facts = smart
max_mono_iters = smart
max_new_mono_instances = smart
minimize = true
overlord = false
preplay_timeout = 1
provers = cvc4 vampire verit e
slice = true
smt_proofs = true
spy = false
strict = false
timeout = 30
try0 = true
type_enc = smart
uncurried_aliases = smart
verbose = false
Default parameters for Sledgehammer:
compress = smart
debug = false
fact_filter = smart
fact_thresholds = 0.45 0.85
induction_rules = smart
isar_proofs = smart
lam_trans = smart
learn = true
max_facts = smart
max_mono_iters = smart
max_new_mono_instances = smart
minimize = true
overlord = false
preplay_timeout = 1
provers = cvc4 e spass vampire z3 zipperposition
slice = true
smt_proofs = true
spy = false
strict = false
timeout = 30
try0 = true
type_enc = smart
uncurried_aliases = smart
verbose = false
Proofs for inductive predicate(s) "final"
  Proving monotonicity ...
Proofs for inductive predicate(s) "load"
  Proving monotonicity ...
[| rel_fundef (=) ?R ?fd1.0 ?fd2.0; ?R ?i1.0 ?i2.0 |]
==> rel_fundef (=) ?R (rewrite_fundef_body ?fd1.0 ?l ?pc ?i1.0)
     (rewrite_fundef_body ?fd2.0 ?l ?pc ?i2.0)
### theory "Draft.Global"
### 5.039s elapsed time, 5.970s cpu time, 1.306s GC time
Loading theory "Draft.Std" (required by "Draft.StdTemplates")
locale std
  fixes F_empty :: "'fenv"
    and
    F_get ::
      "'fenv
       => 'fun
          => ('label, ('dyn, 'var, 'fun, 'label, 'op) instr) fundef option"
    and
    F_add ::
      "'fenv
       => 'fun
          => ('label, ('dyn, 'var, 'fun, 'label, 'op) instr) fundef
             => 'fenv"
    and
    F_to_list ::
      "'fenv
       => ('fun *
           ('label, ('dyn, 'var, 'fun, 'label, 'op) instr) fundef) list"
    and heap_empty :: "'henv"
    and heap_get :: "'henv => 'var * 'dyn => 'dyn option"
    and heap_add :: "'henv => 'var * 'dyn => 'dyn => 'henv"
    and heap_to_list :: "'henv => (('var * 'dyn) * 'dyn) list"
    and uninitialized :: "'dyn"
    and is_true :: "'dyn => bool"
    and is_false :: "'dyn => bool"
    and \<OO>\<pp> :: "'op => 'dyn list => 'dyn"
    and \<AA>\<rr>\<ii>\<tt>\<yy> :: "'op => nat"
  assumes
    "std F_empty F_get F_add F_to_list heap_empty heap_get heap_add
      heap_to_list is_true is_false \<OO>\<pp> \<AA>\<rr>\<ii>\<tt>\<yy>"
### Ambiguous input (line 44 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" IPush) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>FuncSet.funcset"
###       ("_applC" ("_position" State)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" H)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" R) ("_position" \<Sigma>))))))
###               ("_position" st)))))
###       ("_applC" ("_position" State)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" H)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_applC" ("_position" Suc) ("_position" pc))
###                       ("_cargs" ("_position" R)
###                         ("\<^const>List.list.Cons" ("_position" d)
###                           ("_position" \<Sigma>)))))))
###               ("_position" st))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" IPush) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("_applC" ("_position" State)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" H)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" R) ("_position" \<Sigma>))))))
###               ("_position" st)))))
###       ("_applC" ("_position" State)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" H)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_applC" ("_position" Suc) ("_position" pc))
###                       ("_cargs" ("_position" R)
###                         ("\<^const>List.list.Cons" ("_position" d)
###                           ("_position" \<Sigma>)))))))
###               ("_position" st))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some) ("_position" IPop))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>FuncSet.funcset"
###       ("_applC" ("_position" State)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" H)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" R)
###                         ("\<^const>List.list.Cons" ("_position" d)
###                           ("_position" \<Sigma>)))))))
###               ("_position" st)))))
###       ("_applC" ("_position" State)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" H)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_applC" ("_position" Suc) ("_position" pc))
###                       ("_cargs" ("_position" R) ("_position" \<Sigma>))))))
###               ("_position" st))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some) ("_position" IPop))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>step"
###       ("_applC" ("_position" State)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" H)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" R)
###                         ("\<^const>List.list.Cons" ("_position" d)
###                           ("_position" \<Sigma>)))))))
###               ("_position" st)))))
###       ("_applC" ("_position" State)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" H)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_applC" ("_position" Suc) ("_position" pc))
###                       ("_cargs" ("_position" R) ("_position" \<Sigma>))))))
###               ("_position" st))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" IGet) ("_position" n)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" n)
###         ("_applC" ("_position" length) ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" d)
###           ("\<^const>List.nth" ("_position" R) ("_position" n))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>FuncSet.funcset"
###           ("_applC" ("_position" State)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" H)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Frame)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l)
###                         ("_cargs" ("_position" pc)
###                           ("_cargs" ("_position" R)
###                             ("_position" \<Sigma>))))))
###                   ("_position" st)))))
###           ("_applC" ("_position" State)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" H)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Frame)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l)
###                         ("_cargs"
###                           ("_applC" ("_position" Suc) ("_position" pc))
###                           ("_cargs" ("_position" R)
###                             ("\<^const>List.list.Cons" ("_position" d)
###                               ("_position" \<Sigma>)))))))
###                   ("_position" st))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" IGet) ("_position" n)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" n)
###         ("_applC" ("_position" length) ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" d)
###           ("\<^const>List.nth" ("_position" R) ("_position" n))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>step"
###           ("_applC" ("_position" State)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" H)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Frame)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l)
###                         ("_cargs" ("_position" pc)
###                           ("_cargs" ("_position" R)
###                             ("_position" \<Sigma>))))))
###                   ("_position" st)))))
###           ("_applC" ("_position" State)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" H)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Frame)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l)
###                         ("_cargs"
###                           ("_applC" ("_position" Suc) ("_position" pc))
###                           ("_cargs" ("_position" R)
###                             ("\<^const>List.list.Cons" ("_position" d)
###                               ("_position" \<Sigma>)))))))
###                   ("_position" st))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" ISet) ("_position" n)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" n)
###         ("_applC" ("_position" length) ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" R')
###           ("_LUpdate" ("_position" R)
###             ("_lupdbind" ("_position" n) ("_position" d)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>FuncSet.funcset"
###           ("_applC" ("_position" State)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" H)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Frame)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l)
###                         ("_cargs" ("_position" pc)
###                           ("_cargs" ("_position" R)
###                             ("\<^const>List.list.Cons" ("_position" d)
###                               ("_position" \<Sigma>)))))))
###                   ("_position" st)))))
###           ("_applC" ("_position" State)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" H)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Frame)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l)
###                         ("_cargs"
###                           ("_applC" ("_position" Suc) ("_position" pc))
###                           ("_cargs" ("_position" R')
###                             ("_position" \<Sigma>))))))
###                   ("_position" st))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" ISet) ("_position" n)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" n)
###         ("_applC" ("_position" length) ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" R')
###           ("_LUpdate" ("_position" R)
###             ("_lupdbind" ("_position" n) ("_position" d)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>step"
###           ("_applC" ("_position" State)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" H)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Frame)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l)
###                         ("_cargs" ("_position" pc)
###                           ("_cargs" ("_position" R)
###                             ("\<^const>List.list.Cons" ("_position" d)
###                               ("_position" \<Sigma>)))))))
###                   ("_position" st)))))
###           ("_applC" ("_position" State)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" H)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Frame)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" l)
###                         ("_cargs"
###                           ("_applC" ("_position" Suc) ("_position" pc))
###                           ("_cargs" ("_position" R')
###                             ("_position" \<Sigma>))))))
###                   ("_position" st))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" ILoad) ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" heap_get)
###           ("_cargs" ("_position" H)
###             ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))))
###         ("_applC" ("_position" Some) ("_position" d))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FuncSet.funcset"
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" pc)
###                         ("_cargs" ("_position" R)
###                           ("\<^const>List.list.Cons" ("_position" y)
###                             ("_position" \<Sigma>)))))))
###                 ("_position" st)))))
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs"
###                         ("_applC" ("_position" Suc) ("_position" pc))
###                         ("_cargs" ("_position" R)
###                           ("\<^const>List.list.Cons" ("_position" d)
###                             ("_position" \<Sigma>)))))))
###                 ("_position" st)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" ILoad) ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" heap_get)
###           ("_cargs" ("_position" H)
###             ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))))
###         ("_applC" ("_position" Some) ("_position" d))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>step"
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" pc)
###                         ("_cargs" ("_position" R)
###                           ("\<^const>List.list.Cons" ("_position" y)
###                             ("_position" \<Sigma>)))))))
###                 ("_position" st)))))
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs"
###                         ("_applC" ("_position" Suc) ("_position" pc))
###                         ("_cargs" ("_position" R)
###                           ("\<^const>List.list.Cons" ("_position" d)
###                             ("_position" \<Sigma>)))))))
###                 ("_position" st)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" IStore) ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" heap_add)
###           ("_cargs" ("_position" H)
###             ("_cargs"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###               ("_position" d))))
###         ("_position" H')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FuncSet.funcset"
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" pc)
###                         ("_cargs" ("_position" R)
###                           ("\<^const>List.list.Cons" ("_position" y)
###                             ("\<^const>List.list.Cons" ("_position" d)
###                               ("_position" \<Sigma>))))))))
###                 ("_position" st)))))
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H')
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs"
###                         ("_applC" ("_position" Suc) ("_position" pc))
###                         ("_cargs" ("_position" R)
###                           ("_position" \<Sigma>))))))
###                 ("_position" st)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" IStore) ("_position" x)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" heap_add)
###           ("_cargs" ("_position" H)
###             ("_cargs"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###               ("_position" d))))
###         ("_position" H')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>step"
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" pc)
###                         ("_cargs" ("_position" R)
###                           ("\<^const>List.list.Cons" ("_position" y)
###                             ("\<^const>List.list.Cons" ("_position" d)
###                               ("_position" \<Sigma>))))))))
###                 ("_position" st)))))
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H')
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs"
###                         ("_applC" ("_position" Suc) ("_position" pc))
###                         ("_cargs" ("_position" R)
###                           ("_position" \<Sigma>))))))
###                 ("_position" st)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 72 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" IOp) ("_position" op)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<AA>\<rr>\<ii>\<tt>\<yy>) ("_position" op))
###         ("_position" ar)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" ar)
###           ("_applC" ("_position" length) ("_position" \<Sigma>))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" \<OO>\<pp>)
###               ("_cargs" ("_position" op)
###                 ("_applC" ("_position" take)
###                   ("_cargs" ("_position" ar) ("_position" \<Sigma>)))))
###             ("_position" x)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>FuncSet.funcset"
###             ("_applC" ("_position" State)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" H)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Frame)
###                       ("_cargs" ("_position" f)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" R)
###                               ("_position" \<Sigma>))))))
###                     ("_position" st)))))
###             ("_applC" ("_position" State)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" H)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Frame)
###                       ("_cargs" ("_position" f)
###                         ("_cargs" ("_position" l)
###                           ("_cargs"
###                             ("_applC" ("_position" Suc) ("_position" pc))
###                             ("_cargs" ("_position" R)
###                               ("\<^const>List.list.Cons" ("_position" x)
###                                 ("_applC" ("_position" drop)
###                                   ("_cargs" ("_position" ar)
###                                     ("_position" \<Sigma>)))))))))
###                     ("_position" st)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" IOp) ("_position" op)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" \<AA>\<rr>\<ii>\<tt>\<yy>) ("_position" op))
###         ("_position" ar)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" ar)
###           ("_applC" ("_position" length) ("_position" \<Sigma>))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" \<OO>\<pp>)
###               ("_cargs" ("_position" op)
###                 ("_applC" ("_position" take)
###                   ("_cargs" ("_position" ar) ("_position" \<Sigma>)))))
###             ("_position" x)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>step"
###             ("_applC" ("_position" State)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" H)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Frame)
###                       ("_cargs" ("_position" f)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" R)
###                               ("_position" \<Sigma>))))))
###                     ("_position" st)))))
###             ("_applC" ("_position" State)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" H)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Frame)
###                       ("_cargs" ("_position" f)
###                         ("_cargs" ("_position" l)
###                           ("_cargs"
###                             ("_applC" ("_position" Suc) ("_position" pc))
###                             ("_cargs" ("_position" R)
###                               ("\<^const>List.list.Cons" ("_position" x)
###                                 ("_applC" ("_position" drop)
###                                   ("_cargs" ("_position" ar)
###                                     ("_position" \<Sigma>)))))))))
###                     ("_position" st)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" ICJump)
###           ("_cargs" ("_position" l\<^sub>t) ("_position" l\<^sub>f))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_true) ("_position" d))
###           ("\<^const>HOL.eq" ("_position" l') ("_position" l\<^sub>t)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_false) ("_position" d))
###           ("\<^const>HOL.eq" ("_position" l') ("_position" l\<^sub>f)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>FuncSet.funcset"
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" pc)
###                         ("_cargs" ("_position" R)
###                           ("\<^const>List.list.Cons" ("_position" d)
###                             ("_position" \<Sigma>)))))))
###                 ("_position" st)))))
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l')
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_cargs" ("_position" R)
###                           ("_position" \<Sigma>))))))
###                 ("_position" st)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" ICJump)
###           ("_cargs" ("_position" l\<^sub>t) ("_position" l\<^sub>f))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_true) ("_position" d))
###           ("\<^const>HOL.eq" ("_position" l') ("_position" l\<^sub>t)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_false) ("_position" d))
###           ("\<^const>HOL.eq" ("_position" l') ("_position" l\<^sub>f)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>step"
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l)
###                       ("_cargs" ("_position" pc)
###                         ("_cargs" ("_position" R)
###                           ("\<^const>List.list.Cons" ("_position" d)
###                             ("_position" \<Sigma>)))))))
###                 ("_position" st)))))
###         ("_applC" ("_position" State)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" H)
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Frame)
###                   ("_cargs" ("_position" f)
###                     ("_cargs" ("_position" l')
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_cargs" ("_position" R)
###                           ("_position" \<Sigma>))))))
###                 ("_position" st)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" ICall) ("_position" g)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" F_get)
###           ("_cargs" ("_position" F) ("_position" g)))
###         ("_applC" ("_position" Some) ("_position" gd))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" arity) ("_position" gd))
###           ("_applC" ("_position" length) ("_position" \<Sigma>))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" frame\<^sub>g)
###             ("_applC" ("_position" allocate_frame)
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" gd)
###                   ("_cargs"
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("_applC" ("_position" arity) ("_position" gd))
###                         ("_position" \<Sigma>)))
###                     ("_position" uninitialized)))))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>FuncSet.funcset"
###             ("_applC" ("_position" State)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" H)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Frame)
###                       ("_cargs" ("_position" f)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" R)
###                               ("_position" \<Sigma>))))))
###                     ("_position" st)))))
###             ("_applC" ("_position" State)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" H)
###                   ("\<^const>List.list.Cons" ("_position" frame\<^sub>g)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Frame)
###                         ("_cargs" ("_position" f)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" pc)
###                               ("_cargs" ("_position" R)
###                                 ("_position" \<Sigma>))))))
###                       ("_position" st))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" f)
###             ("_cargs" ("_position" l) ("_position" pc)))))
###       ("_applC" ("_position" Some)
###         ("_applC" ("_position" ICall) ("_position" g)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" F_get)
###           ("_cargs" ("_position" F) ("_position" g)))
###         ("_applC" ("_position" Some) ("_position" gd))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" arity) ("_position" gd))
###           ("_applC" ("_position" length) ("_position" \<Sigma>))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" frame\<^sub>g)
###             ("_applC" ("_position" allocate_frame)
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" gd)
###                   ("_cargs"
###                     ("_applC" ("_position" take)
###                       ("_cargs"
###                         ("_applC" ("_position" arity) ("_position" gd))
###                         ("_position" \<Sigma>)))
###                     ("_position" uninitialized)))))))
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>step"
###             ("_applC" ("_position" State)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" H)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Frame)
###                       ("_cargs" ("_position" f)
###                         ("_cargs" ("_position" l)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" R)
###                               ("_position" \<Sigma>))))))
###                     ("_position" st)))))
###             ("_applC" ("_position" State)
###               ("_cargs" ("_position" F)
###                 ("_cargs" ("_position" H)
###                   ("\<^const>List.list.Cons" ("_position" frame\<^sub>g)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Frame)
###                         ("_cargs" ("_position" f)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" pc)
###                               ("_cargs" ("_position" R)
###                                 ("_position" \<Sigma>))))))
###                       ("_position" st))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 88 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" l\<^sub>g) ("_position" pc\<^sub>g)))))
###       ("_applC" ("_position" Some) ("_position" IReturn))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" F_get)
###           ("_cargs" ("_position" F) ("_position" g)))
###         ("_applC" ("_position" Some) ("_position" gd))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" arity) ("_position" gd))
###           ("_applC" ("_position" length) ("_position" \<Sigma>\<^sub>f))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" \<Sigma>\<^sub>g))
###             ("_applC" ("_position" return) ("_position" gd))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" frame\<^sub>f')
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l\<^sub>f)
###                     ("_cargs"
###                       ("_applC" ("_position" Suc) ("_position" pc\<^sub>f))
###                       ("_cargs" ("_position" R\<^sub>f)
###                         ("\<^const>List.append"
###                           ("_position" \<Sigma>\<^sub>g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("_applC" ("_position" arity)
###                                 ("_position" gd))
###                               ("_position" \<Sigma>\<^sub>f)))))))))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>FuncSet.funcset"
###               ("_applC" ("_position" State)
###                 ("_cargs" ("_position" F)
###                   ("_cargs" ("_position" H)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Frame)
###                         ("_cargs" ("_position" g)
###                           ("_cargs" ("_position" l\<^sub>g)
###                             ("_cargs" ("_position" pc\<^sub>g)
###                               ("_cargs" ("_position" R\<^sub>g)
###                                 ("_position" \<Sigma>\<^sub>g))))))
###                       ("\<^const>List.list.Cons"
###                         ("_applC" ("_position" Frame)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l\<^sub>f)
###                               ("_cargs" ("_position" pc\<^sub>f)
###                                 ("_cargs" ("_position" R\<^sub>f)
###                                   ("_position" \<Sigma>\<^sub>f))))))
###                         ("_position" st))))))
###               ("_applC" ("_position" State)
###                 ("_cargs" ("_position" F)
###                   ("_cargs" ("_position" H)
###                     ("\<^const>List.list.Cons" ("_position" frame\<^sub>f')
###                       ("_position" st))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" next_instr)
###         ("_cargs" ("_applC" ("_position" F_get) ("_position" F))
###           ("_cargs" ("_position" g)
###             ("_cargs" ("_position" l\<^sub>g) ("_position" pc\<^sub>g)))))
###       ("_applC" ("_position" Some) ("_position" IReturn))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" F_get)
###           ("_cargs" ("_position" F) ("_position" g)))
###         ("_applC" ("_position" Some) ("_position" gd))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" arity) ("_position" gd))
###           ("_applC" ("_position" length) ("_position" \<Sigma>\<^sub>f))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" \<Sigma>\<^sub>g))
###             ("_applC" ("_position" return) ("_position" gd))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" frame\<^sub>f')
###               ("_applC" ("_position" Frame)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" l\<^sub>f)
###                     ("_cargs"
###                       ("_applC" ("_position" Suc) ("_position" pc\<^sub>f))
###                       ("_cargs" ("_position" R\<^sub>f)
###                         ("\<^const>List.append"
###                           ("_position" \<Sigma>\<^sub>g)
###                           ("_applC" ("_position" drop)
###                             ("_cargs"
###                               ("_applC" ("_position" arity)
###                                 ("_position" gd))
###                               ("_position" \<Sigma>\<^sub>f)))))))))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>step"
###               ("_applC" ("_position" State)
###                 ("_cargs" ("_position" F)
###                   ("_cargs" ("_position" H)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Frame)
###                         ("_cargs" ("_position" g)
###                           ("_cargs" ("_position" l\<^sub>g)
###                             ("_cargs" ("_position" pc\<^sub>g)
###                               ("_cargs" ("_position" R\<^sub>g)
###                                 ("_position" \<Sigma>\<^sub>g))))))
###                       ("\<^const>List.list.Cons"
###                         ("_applC" ("_position" Frame)
###                           ("_cargs" ("_position" f)
###                             ("_cargs" ("_position" l\<^sub>f)
###                               ("_cargs" ("_position" pc\<^sub>f)
###                                 ("_cargs" ("_position" R\<^sub>f)
###                                   ("_position" \<Sigma>\<^sub>f))))))
###                         ("_position" st))))))
###               ("_applC" ("_position" State)
###                 ("_cargs" ("_position" F)
###                   ("_cargs" ("_position" H)
###                     ("\<^const>List.list.Cons" ("_position" frame\<^sub>f')
###                       ("_position" st))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
### Ambiguous input (line 95 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>FuncSet.funcset" ("_position" s1) ("_position" s2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.step" ("_position" s1) ("_position" s2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/Interpreter_Optimizations/Std.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>FuncSet.funcset" ("_position" s1) ("_position" s3)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.step" ("_position" s1) ("_position" s3)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Std"
### 3.324s elapsed time, 4.056s cpu time, 1.040s GC time
Loading theory "Draft.StdTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.StdTemplates"
### 1.339s elapsed time, 1.620s cpu time, 0.146s GC time
val it = (): unit
