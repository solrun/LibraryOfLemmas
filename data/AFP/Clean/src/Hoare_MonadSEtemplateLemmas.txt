   [("Hoare_MonadSE.fail",
     "\<lbrace>?P\<rbrace> fail\<^sub>S\<^sub>E\<dagger>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Hoare_MonadSE.skip",
     "\<lbrace>?P\<rbrace> skip\<^sub>S\<^sub>E \<lbrace>%_. ?P\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           t_empty)
         )),
    ("Hoare_MonadSE.assert",
     "\<lbrace>?P\<rbrace> assert\<^sub>S\<^sub>E ?P
      \<lbrace>%_ _. True\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 0)),
           t_empty)
         )),
    ("Hoare_MonadSE.consequence_mt_swap",
     "(\<lbrace>%_. False\<rbrace> ?M\<dagger>) =
      (\<lbrace>%_. False\<rbrace> ?M \<lbrace>?P\<rbrace>)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 1),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0))),
    ("Hoare_MonadSE.sequence_irpt_l'",
     "\<lbrace>?P\<rbrace> ?M\<dagger> ==>
      \<lbrace>?P\<rbrace> ?M ;- ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Hoare_MonadSE.sequence_irpt_l",
     "\<lbrace>?P\<rbrace> ?M\<dagger> ==>
      \<lbrace>?P\<rbrace> bind\<^sub>S\<^sub>E ?M ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("Hoare_MonadSE.assume_conseq",
     "EX \<sigma>. ?Q \<sigma> ==>
      \<lbrace>?P\<rbrace> assume\<^sub>S\<^sub>E ?Q
      \<lbrace>%_. ?Q\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("Hoare_MonadSE.assert_conseq",
     "Collect ?P <= Collect ?Q ==>
      \<lbrace>?P\<rbrace> assert\<^sub>S\<^sub>E ?Q
      \<lbrace>%_ _. True\<rbrace>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("Hoare_MonadSE.consequence_irpt",
     "[| Collect ?P <= Collect ?P'; \<lbrace>?P'\<rbrace> ?M\<dagger> |]
      ==> \<lbrace>?P\<rbrace> ?M\<dagger>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Hoare_MonadSE.sequence_irpt_r'",
     "[| \<lbrace>?P\<rbrace> ?M \<lbrace>%_. ?Q\<rbrace>;
         \<lbrace>?Q\<rbrace> ?M'\<dagger> |]
      ==> \<lbrace>?P\<rbrace> ?M ;- ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Hoare_MonadSE.sequence'",
     "[| \<lbrace>?P\<rbrace> ?M \<lbrace>%_. ?Q\<rbrace>;
         \<lbrace>?Q\<rbrace> ?M' \<lbrace>?R\<rbrace> |]
      ==> \<lbrace>?P\<rbrace> ?M ;- ?M' \<lbrace>?R\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Hoare_MonadSE.cond_irpt",
     "[| \<lbrace>%\<sigma>. ?P \<sigma> & ?cond \<sigma>\<rbrace> ?M
         \<dagger>;
         \<lbrace>%\<sigma>. ?P \<sigma> & ~ ?cond \<sigma>\<rbrace> ?M'
         \<dagger> |]
      ==> \<lbrace>?P\<rbrace> _if_SE ?cond ?M ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Hoare_MonadSE.cond",
     "[| \<lbrace>%\<sigma>. ?P \<sigma> & ?cond \<sigma>\<rbrace> ?M
         \<lbrace>?Q\<rbrace>;
         \<lbrace>%\<sigma>. ?P \<sigma> & ~ ?cond \<sigma>\<rbrace> ?M'
         \<lbrace>?Q\<rbrace> |]
      ==> \<lbrace>?P\<rbrace> _if_SE ?cond ?M ?M' \<lbrace>?Q\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Hoare_MonadSE.sequence_irpt_r",
     "[| \<lbrace>?P\<rbrace> ?M
         \<lbrace>%x \<sigma>. x : ?A & ?Q x \<sigma>\<rbrace>;
         ALL x:?A. \<lbrace>?Q x\<rbrace> ?M' x\<dagger> |]
      ==> \<lbrace>?P\<rbrace> bind\<^sub>S\<^sub>E ?M ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 3), t_empty))
           ))),
    ("Hoare_MonadSE.sequence",
     "[| \<lbrace>?P\<rbrace> ?M
         \<lbrace>%x \<sigma>. x : ?A & ?Q x \<sigma>\<rbrace>;
         ALL x:?A. \<lbrace>?Q x\<rbrace> ?M' x \<lbrace>?R\<rbrace> |]
      ==> \<lbrace>?P\<rbrace> bind\<^sub>S\<^sub>E ?M ?M'
          \<lbrace>?R\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_app
                (template_app (template_hole 0, template_var 4), t_empty)),
             template_var 0)
           ))),
    ("Hoare_MonadSE.consequence_unit",
     "[| !!\<sigma>. ?P \<sigma> --> ?P' \<sigma>;
         \<lbrace>?P'\<rbrace> ?M \<lbrace>%x. ?Q'\<rbrace>;
         !!\<sigma>. ?Q' \<sigma> --> ?Q \<sigma> |]
      ==> \<lbrace>?P\<rbrace> ?M \<lbrace>%x. ?Q\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              t_empty)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             t_empty)
           ))),
    ("Hoare_MonadSE.consequence",
     "[| Collect ?P <= Collect ?P';
         \<lbrace>?P'\<rbrace> ?M
         \<lbrace>%x \<sigma>. x : ?A & ?Q' x \<sigma>\<rbrace>;
         ALL x:?A. Collect (?Q' x) <= Collect (?Q x) |]
      ==> \<lbrace>?P\<rbrace> ?M
          \<lbrace>%x \<sigma>. x : ?A & ?Q x \<sigma>\<rbrace>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 5),
          template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 3),
             t_empty)
           ))),
    ("Hoare_MonadSE.while",
     "[| \<lbrace>%\<sigma>. ?cond \<sigma> & ?P \<sigma>\<rbrace> ?M
         \<lbrace>%_. ?P\<rbrace>;
         ALL \<sigma>.
            ?cond \<sigma> & ?P \<sigma> -->
            ?M \<sigma> ~= None &
            ?f (snd (the (?M \<sigma>))) < ?f \<sigma> |]
      ==> \<lbrace>?P\<rbrace> _while_SE ?cond ?M
          \<lbrace>%_ \<sigma>. ~ ?cond \<sigma> & ?P \<sigma>\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, t_empty), template_var 1),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             t_empty)
           ))),
    ("Hoare_MonadSE.while_irpt",
     "[| \<lbrace>%\<sigma>. ?cond \<sigma> & ?P \<sigma>\<rbrace> ?M
         \<lbrace>%_. ?P\<rbrace> |
         \<lbrace>%\<sigma>. ?cond \<sigma> & ?P \<sigma>\<rbrace> ?M
         \<dagger>;
         ALL \<sigma>.
            ?cond \<sigma> & ?P \<sigma> -->
            ?M \<sigma> = None | ?f (snd (the (?M \<sigma>))) < ?f \<sigma>;
         ALL \<sigma>. ?P \<sigma> --> ?cond \<sigma> |]
      ==> \<lbrace>?P\<rbrace> _while_SE ?cond ?M\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, t_empty),
                    template_var 1),
                  t_empty)),
              template_app
               (template_app (template_hole 8, t_empty), template_var 1))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           )))]
