Loading theory "Draft.MonadSE" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.Hoare_MonadSE" via "Draft.Symbex_MonadSE" via "Draft.Seq_MonadSE")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.100s elapsed time, 0.416s cpu time, 0.016s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.191s elapsed time, 0.777s cpu time, 0.016s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.294s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.MonadSE"
### 0.432s elapsed time, 1.714s cpu time, 0.213s GC time
Loading theory "Draft.Seq_MonadSE" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.Hoare_MonadSE" via "Draft.Symbex_MonadSE")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Seq_MonadSE"
### 0.670s elapsed time, 2.499s cpu time, 0.695s GC time
Loading theory "Draft.Symbex_MonadSE" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.Hoare_MonadSE")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.969s elapsed time, 3.678s cpu time, 0.832s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
"_if_SE P B\<^sub>1 B\<^sub>2"
  :: "'a => ('b * 'a) option"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.106s elapsed time, 4.007s cpu time, 0.916s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Symbex_MonadSE"
### 0.389s elapsed time, 1.198s cpu time, 0.127s GC time
Loading theory "Draft.Hoare_MonadSE" (required by "Draft.Hoare_MonadSEMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Hoare_MonadSE"
### 0.126s elapsed time, 0.286s cpu time, 0.067s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.951s elapsed time, 5.800s cpu time, 1.146s GC time
Loading theory "Draft.Templates" (required by "Draft.Hoare_MonadSEMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Hoare_MonadSEMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.469s elapsed time, 0.518s cpu time, 0.062s GC time
Loading theory "Draft.Hoare_MonadSEMoreTemplates"
val templateLemmas =
   [("Hoare_MonadSE.fail",
     "\<lbrace>?P\<rbrace> fail\<^sub>S\<^sub>E\<dagger>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Hoare_MonadSE.skip",
     "\<lbrace>?P\<rbrace> skip\<^sub>S\<^sub>E \<lbrace>%_. ?P\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           t_empty)
         )),
    ("Hoare_MonadSE.assert",
     "\<lbrace>?P\<rbrace> assert\<^sub>S\<^sub>E ?P
      \<lbrace>%_ _. True\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 0)),
           t_empty)
         )),
    ("Hoare_MonadSE.consequence_mt_swap",
     "(\<lbrace>%_. False\<rbrace> ?M\<dagger>) =
      (\<lbrace>%_. False\<rbrace> ?M \<lbrace>?P\<rbrace>)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 1),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0))),
    ("Hoare_MonadSE.sequence_irpt_l'",
     "\<lbrace>?P\<rbrace> ?M\<dagger> ==>
      \<lbrace>?P\<rbrace> ?M ;- ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Hoare_MonadSE.sequence_irpt_l",
     "\<lbrace>?P\<rbrace> ?M\<dagger> ==>
      \<lbrace>?P\<rbrace> bind\<^sub>S\<^sub>E ?M ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1), t_empty))
           ))),
    ("Hoare_MonadSE.assume_conseq",
     "EX \<sigma>. ?Q \<sigma> ==>
      \<lbrace>?P\<rbrace> assume\<^sub>S\<^sub>E ?Q
      \<lbrace>%_. ?Q\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)),
             t_empty)
           ))),
    ("Hoare_MonadSE.assert_conseq",
     "Collect ?P <= Collect ?Q ==>
      \<lbrace>?P\<rbrace> assert\<^sub>S\<^sub>E ?Q
      \<lbrace>%_ _. True\<rbrace>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("Hoare_MonadSE.consequence_irpt",
     "[| Collect ?P <= Collect ?P'; \<lbrace>?P'\<rbrace> ?M\<dagger> |]
      ==> \<lbrace>?P\<rbrace> ?M\<dagger>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Hoare_MonadSE.sequence_irpt_r'",
     "[| \<lbrace>?P\<rbrace> ?M \<lbrace>%_. ?Q\<rbrace>;
         \<lbrace>?Q\<rbrace> ?M'\<dagger> |]
      ==> \<lbrace>?P\<rbrace> ?M ;- ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Hoare_MonadSE.sequence'",
     "[| \<lbrace>?P\<rbrace> ?M \<lbrace>%_. ?Q\<rbrace>;
         \<lbrace>?Q\<rbrace> ?M' \<lbrace>?R\<rbrace> |]
      ==> \<lbrace>?P\<rbrace> ?M ;- ?M' \<lbrace>?R\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Hoare_MonadSE.cond_irpt",
     "[| \<lbrace>%\<sigma>. ?P \<sigma> & ?cond \<sigma>\<rbrace> ?M
         \<dagger>;
         \<lbrace>%\<sigma>. ?P \<sigma> & ~ ?cond \<sigma>\<rbrace> ?M'
         \<dagger> |]
      ==> \<lbrace>?P\<rbrace> _if_SE ?cond ?M ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Hoare_MonadSE.cond",
     "[| \<lbrace>%\<sigma>. ?P \<sigma> & ?cond \<sigma>\<rbrace> ?M
         \<lbrace>?Q\<rbrace>;
         \<lbrace>%\<sigma>. ?P \<sigma> & ~ ?cond \<sigma>\<rbrace> ?M'
         \<lbrace>?Q\<rbrace> |]
      ==> \<lbrace>?P\<rbrace> _if_SE ?cond ?M ?M' \<lbrace>?Q\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Hoare_MonadSE.sequence_irpt_r",
     "[| \<lbrace>?P\<rbrace> ?M
         \<lbrace>%x \<sigma>. x : ?A & ?Q x \<sigma>\<rbrace>;
         ALL x:?A. \<lbrace>?Q x\<rbrace> ?M' x\<dagger> |]
      ==> \<lbrace>?P\<rbrace> bind\<^sub>S\<^sub>E ?M ?M'\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 3), t_empty))
           ))),
    ("Hoare_MonadSE.sequence",
     "[| \<lbrace>?P\<rbrace> ?M
         \<lbrace>%x \<sigma>. x : ?A & ?Q x \<sigma>\<rbrace>;
         ALL x:?A. \<lbrace>?Q x\<rbrace> ?M' x \<lbrace>?R\<rbrace> |]
      ==> \<lbrace>?P\<rbrace> bind\<^sub>S\<^sub>E ?M ?M'
          \<lbrace>?R\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_app
                (template_app (template_hole 0, template_var 4), t_empty)),
             template_var 0)
           ))),
    ("Hoare_MonadSE.consequence_unit",
     "[| !!\<sigma>. ?P \<sigma> --> ?P' \<sigma>;
         \<lbrace>?P'\<rbrace> ?M \<lbrace>%x. ?Q'\<rbrace>;
         !!\<sigma>. ?Q' \<sigma> --> ?Q \<sigma> |]
      ==> \<lbrace>?P\<rbrace> ?M \<lbrace>%x. ?Q\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              t_empty)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             t_empty)
           ))),
    ("Hoare_MonadSE.consequence",
     "[| Collect ?P <= Collect ?P';
         \<lbrace>?P'\<rbrace> ?M
         \<lbrace>%x \<sigma>. x : ?A & ?Q' x \<sigma>\<rbrace>;
         ALL x:?A. Collect (?Q' x) <= Collect (?Q x) |]
      ==> \<lbrace>?P\<rbrace> ?M
          \<lbrace>%x \<sigma>. x : ?A & ?Q x \<sigma>\<rbrace>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 5),
          template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 3),
             t_empty)
           ))),
    ("Hoare_MonadSE.while",
     "[| \<lbrace>%\<sigma>. ?cond \<sigma> & ?P \<sigma>\<rbrace> ?M
         \<lbrace>%_. ?P\<rbrace>;
         ALL \<sigma>.
            ?cond \<sigma> & ?P \<sigma> -->
            ?M \<sigma> ~= None &
            ?f (snd (the (?M \<sigma>))) < ?f \<sigma> |]
      ==> \<lbrace>?P\<rbrace> _while_SE ?cond ?M
          \<lbrace>%_ \<sigma>. ~ ?cond \<sigma> & ?P \<sigma>\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, t_empty), template_var 1),
              t_empty)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             t_empty)
           ))),
    ("Hoare_MonadSE.while_irpt",
     "[| \<lbrace>%\<sigma>. ?cond \<sigma> & ?P \<sigma>\<rbrace> ?M
         \<lbrace>%_. ?P\<rbrace> |
         \<lbrace>%\<sigma>. ?cond \<sigma> & ?P \<sigma>\<rbrace> ?M
         \<dagger>;
         ALL \<sigma>.
            ?cond \<sigma> & ?P \<sigma> -->
            ?M \<sigma> = None | ?f (snd (the (?M \<sigma>))) < ?f \<sigma>;
         ALL \<sigma>. ?P \<sigma> --> ?cond \<sigma> |]
      ==> \<lbrace>?P\<rbrace> _while_SE ?cond ?M\<dagger>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, t_empty),
                    template_var 1),
                  t_empty)),
              template_app
               (template_app (template_hole 8, t_empty), template_var 1))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Hoare_MonadSEMoreTemplates"
### 0.320s elapsed time, 0.438s cpu time, 0.058s GC time
val it = (): unit
