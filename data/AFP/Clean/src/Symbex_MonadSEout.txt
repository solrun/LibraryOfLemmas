Loading theory "Draft.MonadSE" (required by "Draft.Symbex_MonadSEMoreTemplates" via "Draft.Symbex_MonadSE" via "Draft.Seq_MonadSE")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Symbex_MonadSEMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Symbex_MonadSEMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Symbex_MonadSEMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.108s elapsed time, 0.458s cpu time, 0.021s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Symbex_MonadSEMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.193s elapsed time, 0.796s cpu time, 0.021s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Symbex_MonadSEMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.383s cpu time, 0.112s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Symbex_MonadSEMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.MonadSE"
### 0.439s elapsed time, 1.744s cpu time, 0.191s GC time
Loading theory "Draft.Seq_MonadSE" (required by "Draft.Symbex_MonadSEMoreTemplates" via "Draft.Symbex_MonadSE")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Seq_MonadSE"
### 0.693s elapsed time, 2.531s cpu time, 0.723s GC time
Loading theory "Draft.Symbex_MonadSE" (required by "Draft.Symbex_MonadSEMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.046s elapsed time, 3.913s cpu time, 0.935s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
"_if_SE P B\<^sub>1 B\<^sub>2"
  :: "'a => ('b * 'a) option"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.120s elapsed time, 4.021s cpu time, 0.932s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Symbex_MonadSE"
### 0.390s elapsed time, 1.225s cpu time, 0.130s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.971s elapsed time, 5.722s cpu time, 1.115s GC time
Loading theory "Draft.Templates" (required by "Draft.Symbex_MonadSEMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.046s elapsed time, 0.060s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Symbex_MonadSEMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.447s elapsed time, 0.494s cpu time, 0.059s GC time
Loading theory "Draft.Symbex_MonadSEMoreTemplates"
val templateLemmas =
   [("Symbex_MonadSE.exec_fail_SE'",
     "~ (?\<sigma>\<^sub>0 \<Turnstile> Map.empty)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 0), t_empty)
             )
         )),
    ("Symbex_MonadSE.exec_fail_SE",
     "(?\<sigma> \<Turnstile> fail\<^sub>S\<^sub>E) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Symbex_MonadSE.exec_unit_SE",
     "(?\<sigma> \<Turnstile> unit\<^sub>S\<^sub>E ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Symbex_MonadSE.assert_simp",
     "(?\<sigma> \<Turnstile> assert\<^sub>S\<^sub>E ?P) = ?P ?\<sigma>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 0, template_var 1))),
    ("Symbex_MonadSE.assert_disch4",
     "?P ?\<sigma> ==> ?\<sigma> \<Turnstile> assert\<^sub>S\<^sub>E ?P",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Symbex_MonadSE.assert_D",
     "?\<sigma> \<Turnstile> assert\<^sub>S\<^sub>E ?P ==> ?P ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Symbex_MonadSE.exec_skip",
     "(?\<sigma> \<Turnstile> skip\<^sub>S\<^sub>E ;- ?M) =
      (?\<sigma> \<Turnstile> ?M)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Symbex_MonadSE.assert_disch3",
     "~ ?P ?\<sigma> ==>
      ~ (?\<sigma> \<Turnstile> assert\<^sub>S\<^sub>E ?P)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Symbex_MonadSE.exec_skipD",
     "?\<sigma> \<Turnstile> skip\<^sub>S\<^sub>E ;- ?M ==>
      ?\<sigma> \<Turnstile> ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1), template_var 0)
           ))),
    ("Symbex_MonadSE.exec_unit_SE'",
     "(?\<sigma>\<^sub>0 \<Turnstile>
       (%\<sigma>. Some (?f \<sigma>, \<sigma>))) =
      ?f ?\<sigma>\<^sub>0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app (template_var 0, template_var 1))),
    ("Symbex_MonadSE.exec_bind_SE_failure2",
     "?A ?\<sigma> = None ==> ~ (?\<sigma> \<Turnstile> ?A ;- ?M)",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))
               )
           ))),
    ("Symbex_MonadSE.valid_mbind_mt",
     "(?\<sigma> \<Turnstile>
       _bind_SE s
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
          [] ?f)
        (unit\<^sub>S\<^sub>E (?P s))) =
      ?P []",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           t_empty)),
       template_app (template_var 0, template_hole 0))),
    ("Symbex_MonadSE.valid_mbind'_mt",
     "(?\<sigma> \<Turnstile>
       _bind_SE s
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
          [] ?f)
        (unit\<^sub>S\<^sub>E (?P s))) =
      ?P []",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           t_empty)),
       template_app (template_var 0, template_hole 0))),
    ("Symbex_MonadSE.valid_mbind''_mt",
     "(?\<sigma> \<Turnstile>
       _bind_SE s
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>P\<^sub>u\<^sub>r\<^sub>g\<^sub>e
          [] ?f)
        (unit\<^sub>S\<^sub>E (?P s))) =
      ?P []",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           t_empty)),
       template_app (template_var 0, template_hole 0))),
    ("Symbex_MonadSE.if_SE_D1",
     "?P ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2) =
      (?\<sigma> \<Turnstile> ?B\<^sub>1)",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("Symbex_MonadSE.assert_disch2",
     "~ ?P ?\<sigma> ==>
      ~ (?\<sigma> \<Turnstile>
         _bind_SE x (assert\<^sub>S\<^sub>E ?P) (?M ?s))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   t_empty))
               )
           ))),
    ("Symbex_MonadSE.exec_bind_SE_failure",
     "?A ?\<sigma> = None ==>
      ~ (?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M)",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 2), t_empty))
               )
           ))),
    ("Symbex_MonadSE.if_SE_D2",
     "~ ?P ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2) =
      (?\<sigma> \<Turnstile> ?B\<^sub>2)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symbex_MonadSE.assert_bind_simp",
     "(?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (assert\<^sub>S\<^sub>E ?P) ?M) =
      (?P ?\<sigma> & (?\<sigma> \<Turnstile> ?M True))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           t_empty)),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 1, template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app (template_var 0, template_hole 0))))),
    ("Symbex_MonadSE.exec_bind_SE_success'",
     "?M ?\<sigma> = Some (?f ?\<sigma>, ?\<sigma>) ==>
      (?\<sigma> \<Turnstile> ?M) = ?f ?\<sigma>",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_hole 2,
                template_app (template_var 0, template_var 1)),
              template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Symbex_MonadSE.assert_disch1",
     "?P ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (assert\<^sub>S\<^sub>E ?P) ?M) =
      (?\<sigma> \<Turnstile> ?M True)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             t_empty)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_var 0, template_hole 0))))),
    ("Symbex_MonadSE.assume_D",
     "?\<sigma> \<Turnstile> _bind_SE _ (assume\<^sub>S\<^sub>E ?P) ?M ==>
      EX \<sigma>. ?P \<sigma> & (\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                t_empty))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Symbex_MonadSE.assert_bindD",
     "?\<sigma> \<Turnstile>
      bind\<^sub>S\<^sub>E (assert\<^sub>S\<^sub>E ?P) ?M ==>
      ?P ?\<sigma> & (?\<sigma> \<Turnstile> ?M True)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_var 0, template_hole 0)))
           ))),
    ("Symbex_MonadSE.if_SE_D1'",
     "?P ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M) =
      (?\<sigma> \<Turnstile> ?B\<^sub>1 ;- ?M)",
     template_implication
      ([template_predicate (template_app (template_var 4, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Symbex_MonadSE.valid_bind'_cong",
     "?f ?\<sigma> = ?g ?\<sigma> ==>
      (?\<sigma> \<Turnstile> ?f ;- ?M) =
      (?\<sigma> \<Turnstile> ?g ;- ?M)",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Symbex_MonadSE.exec_bind_SE_success2",
     "?A ?\<sigma> = Some (?b, ?\<sigma>') ==>
      (?\<sigma> \<Turnstile> ?A ;- ?M) = (?\<sigma>' \<Turnstile> ?M)",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Symbex_MonadSE.if_SE_D2'",
     "~ ?P ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M) =
      (?\<sigma> \<Turnstile> ?B\<^sub>2 ;- ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Symbex_MonadSE.exec_mbindFStop_failure",
     "?ioprog ?a ?\<sigma> = None ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
          (?a # ?S) ?ioprog)
        ?M) =
      False",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 4, template_var 3), template_var 2),
          template_hole 6)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)),
                 template_var 4)),
             t_empty)),
         template_hole 0))),
    ("Symbex_MonadSE.valid_mbind_mtE",
     "[| ?\<sigma> \<Turnstile>
         _bind_SE s
          (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
            [] ?f)
          (unit\<^sub>S\<^sub>E (?P s));
         ?P [] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 2)),
                t_empty))
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 1, template_hole 0))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.valid_mbind'_mtE",
     "[| ?\<sigma> \<Turnstile>
         _bind_SE s
          (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
            [] ?f)
          (unit\<^sub>S\<^sub>E (?P s));
         ?P [] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 2)),
                t_empty))
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 1, template_hole 0))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.valid_mbind''_mtE",
     "[| ?\<sigma> \<Turnstile>
         _bind_SE s
          (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>P\<^sub>u\<^sub>r\<^sub>g\<^sub>e
            [] ?f)
          (unit\<^sub>S\<^sub>E (?P s));
         ?P [] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 2)),
                t_empty))
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 1, template_hole 0))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.if_SE_split",
     "(?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2) =
      ((?P ?\<sigma> --> (?\<sigma> \<Turnstile> ?B\<^sub>1)) &
       (~ ?P ?\<sigma> --> (?\<sigma> \<Turnstile> ?B\<^sub>2)))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_var 3)),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 3))),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0))))),
    ("Symbex_MonadSE.if_SE_split_asm",
     "(?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2) =
      (?P ?\<sigma> & (?\<sigma> \<Turnstile> ?B\<^sub>1) |
       ~ ?P ?\<sigma> & (?\<sigma> \<Turnstile> ?B\<^sub>2))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_var 3)),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 3))),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0))))),
    ("Symbex_MonadSE.exec_while",
     "(?\<sigma> \<Turnstile> _while_SE ?b ?c ;- ?M) =
      (?\<sigma> \<Turnstile>
       _if_SE ?b (?c ;- _while_SE ?b ?c) (unit\<^sub>S\<^sub>E ()) ;- ?M)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1))),
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Symbex_MonadSE.exec_bind_SE_success",
     "?A ?\<sigma> = Some (?b, ?\<sigma>') ==>
      (?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M) =
      (?\<sigma>' \<Turnstile> ?M ?b)",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 4), t_empty)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_var 0, template_var 2))))),
    ("Symbex_MonadSE.valid_bind_cong",
     "?f ?\<sigma> = ?g ?\<sigma> ==>
      (?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?f ?M) =
      (?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?g ?M)",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3), t_empty)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1), t_empty))))),
    ("Symbex_MonadSE.exec_whileD",
     "?\<sigma> \<Turnstile> _while_SE ?b ?c ;- ?M ==>
      ?\<sigma> \<Turnstile>
      _if_SE ?b (?c ;- _while_SE ?b ?c) (unit\<^sub>S\<^sub>E ()) ;- ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         template_var 1))),
                   template_app (template_hole 1, template_hole 0))),
               template_var 0))
           ))),
    ("Symbex_MonadSE.exec_mbindFSave_failure",
     "?ioprog ?a ?\<sigma> = None ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
          (?a # ?S) ?ioprog)
        ?M) =
      (?\<sigma> \<Turnstile> ?M [])",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 4, template_var 3), template_var 2),
          template_hole 6)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)),
                 template_var 4)),
             t_empty)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app (template_var 0, template_hole 0))))),
    ("Symbex_MonadSE.exec_bind_SE_success'''",
     "?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M ==>
      EX a. ?A ?\<sigma> = Some a & (snd a \<Turnstile> ?M (fst a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1), t_empty))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Symbex_MonadSE.assume_E'",
     "[| ?\<sigma> \<Turnstile> assume\<^sub>S\<^sub>E ?P ;- ?M;
         !!\<sigma>. [| ?P \<sigma>; \<sigma> \<Turnstile> ?M |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.mbind'_concat",
     "bind\<^sub>S\<^sub>E
       (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
         (?S @ ?T) ?f)
       ?P =
      _bind_SE os
       (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
         ?S ?f)
       (_bind_SE os'
         (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
           ?T ?f)
         (?P (os @ os')))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         t_empty))),
    ("Symbex_MonadSE.assume_E",
     "[| ?\<sigma> \<Turnstile> _bind_SE _ (assume\<^sub>S\<^sub>E ?P) ?M;
         !!\<sigma>. [| ?P \<sigma>; \<sigma> \<Turnstile> ?M |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.exec_bind_SE_success''''",
     "?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M ==>
      EX v \<sigma>'.
         ?A ?\<sigma> = Some (v, \<sigma>') &
         (\<sigma>' \<Turnstile> ?M v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1), t_empty))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Symbex_MonadSE.exec_bind_SE_success''",
     "?\<sigma> \<Turnstile> bind\<^sub>S\<^sub>E ?A ?M ==>
      EX v \<sigma>'.
         the (?A ?\<sigma>) = (v, \<sigma>') &
         (\<sigma>' \<Turnstile> ?M v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1), t_empty))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Symbex_MonadSE.if_SE_split'",
     "(?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M) =
      ((?P ?\<sigma> --> (?\<sigma> \<Turnstile> ?B\<^sub>1 ;- ?M)) &
       (~ ?P ?\<sigma> --> (?\<sigma> \<Turnstile> ?B\<^sub>2 ;- ?M)))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 4),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 3, template_var 4)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 3, template_var 4))),
           template_app
            (template_app (template_hole 5, template_var 4),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))))),
    ("Symbex_MonadSE.if_SE_split_asm'",
     "(?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M) =
      (?P ?\<sigma> & (?\<sigma> \<Turnstile> ?B\<^sub>1 ;- ?M) |
       ~ ?P ?\<sigma> & (?\<sigma> \<Turnstile> ?B\<^sub>2 ;- ?M))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 4),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 3, template_var 4)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 3, template_var 4))),
           template_app
            (template_app (template_hole 5, template_var 4),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))))),
    ("Symbex_MonadSE.exec_mbindFPurge_failure",
     "?ioprog ?a ?\<sigma> = None ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>P\<^sub>u\<^sub>r\<^sub>g\<^sub>e
          (?a # ?S) ?ioprog)
        ?M) =
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>P\<^sub>u\<^sub>r\<^sub>g\<^sub>e
          ?S ?ioprog)
        ?M)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 4, template_var 3), template_var 2),
          template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_var 4)),
             t_empty)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)),
             t_empty))))),
    ("Symbex_MonadSE.mbindFSave_vs_mbindFStop",
     "(?\<sigma> \<Turnstile>
       _bind_SE os
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
          ?\<iota>s ?ioprog)
        (unit\<^sub>S\<^sub>E
          (length ?\<iota>s = length os & ?P ?\<iota>s os))) =
      (?\<sigma> \<Turnstile>
       _bind_SE os
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
          ?\<iota>s ?ioprog)
        (unit\<^sub>S\<^sub>E (?P ?\<iota>s os)))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 3),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           t_empty)),
       template_app
        (template_app (template_hole 8, template_var 3),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           t_empty)))),
    ("Symbex_MonadSE.mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e_vs_mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p",
     "ALL \<iota> \<sigma>. ?ioprog \<iota> \<sigma> ~= None ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
          ?\<iota>s ?ioprog)
        ?P) =
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
          ?\<iota>s ?ioprog)
        ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             t_empty)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             t_empty))))),
    ("Symbex_MonadSE.exec_mbindFSave_success",
     "?ioprog ?a ?\<sigma> = Some (?b, ?\<sigma>') ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
          (?a # ?S) ?ioprog)
        ?M) =
      (?\<sigma>' \<Turnstile>
       _bind_SE s
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
          ?S ?ioprog)
        (?M (?b # s)))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 6, template_var 5), template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 1)),
                 template_var 6)),
             t_empty)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 6)),
             t_empty))))),
    ("Symbex_MonadSE.exec_mbindFStop_success",
     "?ioprog ?a ?\<sigma> = Some (?b, ?\<sigma>') ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
          (?a # ?S) ?ioprog)
        ?M) =
      (?\<sigma>' \<Turnstile>
       _bind_SE s
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
          ?S ?ioprog)
        (?M (?b # s)))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 6, template_var 5), template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 1)),
                 template_var 6)),
             t_empty)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 6)),
             t_empty))))),
    ("Symbex_MonadSE.exec_mbindFPurge_success",
     "?ioprog ?a ?\<sigma> = Some (?b, ?\<sigma>') ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>P\<^sub>u\<^sub>r\<^sub>g\<^sub>e
          (?a # ?S) ?ioprog)
        ?M) =
      (?\<sigma>' \<Turnstile>
       _bind_SE s
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>P\<^sub>u\<^sub>r\<^sub>g\<^sub>e
          ?S ?ioprog)
        (?M (?b # s)))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_var 6, template_var 5), template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 1)),
                 template_var 6)),
             t_empty)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 6)),
             t_empty))))),
    ("Symbex_MonadSE.if_SE_execE",
     "[| ?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2;
         [| ?P ?\<sigma>; ?\<sigma> \<Turnstile> ?B\<^sub>1 |] ==> ?Q;
         [| ~ ?P ?\<sigma>; ?\<sigma> \<Turnstile> ?B\<^sub>2 |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 4))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 2)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_var 3, template_var 4))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.mbind_eq_sexec'",
     "(!!b \<sigma>'.
          ?f ?a ?\<sigma> = Some (b, \<sigma>') ==>
          ?P b \<sigma>' = ?P' b \<sigma>') ==>
      bind\<^sub>S\<^sub>E (?f ?a) ?P ?\<sigma> =
      bind\<^sub>S\<^sub>E (?f ?a) ?P' ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_var 4, template_var 3)),
             t_empty),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_var 4, template_var 3)),
             t_empty),
           template_var 2)))),
    ("Symbex_MonadSE.exec_mbindFSave",
     "(?\<sigma> \<Turnstile>
       _bind_SE s
        (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
          (?a # ?S) ?ioprog)
        (?return (?P s))) =
      (case ?ioprog ?a ?\<sigma> of
       None => ?\<sigma> \<Turnstile> ?return (?P [])
       | Some (b, \<sigma>') =>
           \<sigma>' \<Turnstile>
           _bind_SE s
            (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
              ?S ?ioprog)
            (?return (?P (b # s))))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 5),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3)),
               template_var 2)),
           t_empty)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 7, template_var 5),
               template_app
                (template_var 1,
                 template_app (template_var 0, template_hole 2)))),
           t_empty),
         template_app
          (template_app (template_var 2, template_var 4),
           template_var 5)))),
    ("Symbex_MonadSE.assert_suffix_inv",
     "[| ?\<sigma> \<Turnstile>
         _bind_SE _
          (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
            ?xs ?istep)
          (assert\<^sub>S\<^sub>E ?P);
         ALL \<sigma>.
            ?P \<sigma> -->
            (\<sigma> \<Turnstile>
             _bind_SE _ (?istep ?x) (assert\<^sub>S\<^sub>E ?P)) |]
      ==> ?\<sigma> \<Turnstile>
          _bind_SE _
           (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
             (?xs @ [?x]) ?istep)
           (assert\<^sub>S\<^sub>E ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 4),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_hole 0))),
                   template_var 2)),
               t_empty))
           ))),
    ("Symbex_MonadSE.if_SE_execE''_pos",
     "[| ?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M;
         [| ?P ?\<sigma>; ?\<sigma> \<Turnstile> ?B\<^sub>1 ;- ?M |] ==> ?Q;
         opaque
          (?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M) ==>
         ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 4, template_var 5))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 1))
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 4),
                           template_var 3),
                         template_var 2)),
                     template_var 1)))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.if_SE_execE'",
     "[| ?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M;
         [| ?P ?\<sigma>; ?\<sigma> \<Turnstile> ?B\<^sub>1 ;- ?M |] ==> ?Q;
         [| ~ ?P ?\<sigma>; ?\<sigma> \<Turnstile> ?B\<^sub>2 ;- ?M |]
         ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 4, template_var 5))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 1))
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_var 4, template_var 5))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.exec_mbindFStop_E",
     "[| ?\<sigma> \<Turnstile>
         bind\<^sub>S\<^sub>E
          (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
            (?a # ?S) ?ioprog)
          ?P;
         !!b \<sigma>'.
            [| ?ioprog ?a ?\<sigma> = Some (b, \<sigma>');
               \<sigma>' \<Turnstile>
               _bind_SE s
                (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
                  ?S ?ioprog)
                (?P (b # s)) |]
            ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 4),
                        template_var 3)),
                    template_var 2)),
                t_empty))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.exec_mbindFSave_E",
     "[| ?\<sigma> \<Turnstile>
         bind\<^sub>S\<^sub>E
          (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
            (?a # ?S) ?ioprog)
          ?P;
         [| ?ioprog ?a ?\<sigma> = None; ?\<sigma> \<Turnstile> ?P [] |]
         ==> ?Q;
         !!b \<sigma>'.
            [| ?ioprog ?a ?\<sigma> = Some (b, \<sigma>');
               \<sigma>' \<Turnstile>
               _bind_SE s
                (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>a\<^sub>v\<^sub>e
                  ?S ?ioprog)
                (?P (b # s)) |]
            ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 5),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 4),
                        template_var 3)),
                    template_var 2)),
                t_empty))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_var 2, template_var 4),
               template_var 5),
             template_hole 6)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 11, template_var 5),
                   template_app (template_var 1, template_hole 5))
                 )],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Symbex_MonadSE.mbind_eq_sexec",
     "(!!b \<sigma>'.
          ?f ?a ?\<sigma> = Some (b, \<sigma>') ==>
          _bind_SE os
           (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
             ?S ?f)
           (?P (b # os)) =
          _bind_SE os
           (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
             ?S ?f)
           (?P' (b # os))) ==>
      (_bind_SE a (?f ?a)
        (_bind_SE x
          (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
            ?S ?f)
          (?P (a # x))))
       ?\<sigma> =
      (_bind_SE a (?f ?a)
        (_bind_SE x
          (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>S\<^sub>t\<^sub>o\<^sub>p
            ?S ?f)
          (?P' (a # x))))
       ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_var 5, template_var 4)),
             t_empty),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_var 5, template_var 4)),
             t_empty),
           template_var 3)))),
    ("Symbex_MonadSE.exec_mbindFPurge_E",
     "[| ?\<sigma> \<Turnstile>
         bind\<^sub>S\<^sub>E
          (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>P\<^sub>u\<^sub>r\<^sub>g\<^sub>e
            (?a # ?S) ?ioprog)
          ?P;
         [| ?ioprog ?a ?\<sigma> = None;
            ?\<sigma> \<Turnstile>
            bind\<^sub>S\<^sub>E
             (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>P\<^sub>u\<^sub>r\<^sub>g\<^sub>e
               ?S ?ioprog)
             ?P |]
         ==> ?Q;
         !!b \<sigma>'.
            [| ?ioprog ?a ?\<sigma> = Some (b, \<sigma>');
               \<sigma>' \<Turnstile>
               _bind_SE s
                (mbind\<^sub>F\<^sub>a\<^sub>i\<^sub>l\<^sub>P\<^sub>u\<^sub>r\<^sub>g\<^sub>e
                  ?S ?ioprog)
                (?P (b # s)) |]
            ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 4),
                        template_var 3)),
                    template_var 2)),
                t_empty))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_var 2, template_var 4),
               template_var 5),
             template_hole 5)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 10, template_var 5),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_var 3),
                         template_var 2)),
                     t_empty))
                 )],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Symbex_MonadSEMoreTemplates"
### 0.303s elapsed time, 0.395s cpu time, 0.000s GC time
val it = (): unit
