   [("Hoare_Clean.break1",
     "\<lbrace>%\<sigma>. ?P (\<sigma>(| break_status := True |))\<rbrace>
      break
      \<lbrace>%r \<sigma>. ?P \<sigma> & break_status \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_hole 2),
           t_empty)
         )),
    ("Hoare_Clean.set_return1",
     "\<lbrace>%\<sigma>. ?P (\<sigma>(| return_status := True |))\<rbrace>
      set_return_status
      \<lbrace>%r \<sigma>. ?P \<sigma> & return_status \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_hole 2),
           t_empty)
         )),
    ("Hoare_Clean.assign_clean_skip",
     "\<lbrace>%\<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>
      assign ?tr
      \<lbrace>%r \<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 0, template_var 0)),
           t_empty)
         )),
    ("Hoare_Clean.unset_break1",
     "\<lbrace>%\<sigma>. ?P (\<sigma>(| break_status := False |))\<rbrace>
      unset_break_status
      \<lbrace>%r \<sigma>. ?P \<sigma> & ~ break_status \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty), template_hole 3),
           t_empty)
         )),
    ("Hoare_Clean.unset_return1",
     "\<lbrace>%\<sigma>. ?P (\<sigma>(| return_status := False |))\<rbrace>
      unset_return_status
      \<lbrace>%r \<sigma>.
                  ?P \<sigma> & ~ return_status \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty), template_hole 3),
           t_empty)
         )),
    ("Hoare_Clean.if_opcall_skip",
     "\<lbrace>%\<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>
      call\<^sub>C ?M ?A\<^sub>1
      \<lbrace>%r \<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Hoare_Clean.assign_global_skip",
     "\<lbrace>%\<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>
      ?upd :==\<^sub>G ?rhs
      \<lbrace>%r \<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Hoare_Clean.assign_local_skip",
     "\<lbrace>%\<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>
      ?upd :==\<^sub>L ?rhs
      \<lbrace>%r \<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Hoare_Clean.return_skip",
     "\<lbrace>%\<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>
      return\<^bsub>?upd\<^esub> ?rhs
      \<lbrace>%r \<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Hoare_Clean.while_clean_skip",
     "\<lbrace>%\<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>
      _while_C ?cond ?body
      \<lbrace>%r \<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Hoare_Clean.if_clean_skip",
     "\<lbrace>%\<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>
      _if_SECLEAN ?C ?E ?F
      \<lbrace>%r \<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Hoare_Clean.if_funcall_skip'",
     "\<lbrace>%\<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>
      _bind_SE p\<^sub>t\<^sub>m\<^sub>p (call\<^sub>C ?fun ?E)
       (?upd :==\<^sub>G (%\<sigma>. p\<^sub>t\<^sub>m\<^sub>p))
      \<lbrace>%r \<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               t_empty)),
           t_empty)
         )),
    ("Hoare_Clean.if_funcall_skip",
     "\<lbrace>%\<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>
      _bind_SE p\<^sub>t\<^sub>m\<^sub>p (call\<^sub>C ?fun ?E)
       (?upd :==\<^sub>L (%\<sigma>. p\<^sub>t\<^sub>m\<^sub>p))
      \<lbrace>%r \<sigma>. exec_stop \<sigma> & ?P \<sigma>\<rbrace>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               t_empty)),
           t_empty)
         )),
    ("Hoare_Clean.assign_global",
     "\<sharp> ?upd ==>
      \<lbrace>%\<sigma>.
                  \<triangleright> \<sigma> &
                  ?P (?upd (%_. ?rhs \<sigma>) \<sigma>)\<rbrace>
      ?upd :==\<^sub>G ?rhs
      \<lbrace>%r \<sigma>.
                  \<triangleright> \<sigma> & ?P \<sigma>\<rbrace>",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Hoare_Clean.assign_local",
     "\<sharp> (?upd o upd_hd) ==>
      \<lbrace>%\<sigma>.
                  \<triangleright> \<sigma> &
                  ?P ((?upd o upd_hd) (%_. ?rhs \<sigma>) \<sigma>)\<rbrace>
      ?upd :==\<^sub>L ?rhs
      \<lbrace>%r \<sigma>.
                  \<triangleright> \<sigma> & ?P \<sigma>\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Hoare_Clean.return_assign",
     "\<sharp> (?upd o upd_hd) ==>
      \<lbrace>%\<sigma>.
                  \<triangleright> \<sigma> &
                  ?P ((?upd o upd_hd) (%_. ?rhs \<sigma>)
                       (\<sigma>(| return_status := True |)))\<rbrace>
      return\<^bsub>?upd\<^esub> ?rhs
      \<lbrace>%r \<sigma>. ?P \<sigma> & return_status \<sigma>\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 2),
                template_hole 8))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Hoare_Clean.cond_clean",
     "[| \<lbrace>%\<sigma>.
                     \<triangleright> \<sigma> &
                     ?P \<sigma> & ?cond \<sigma>\<rbrace>
         ?M \<lbrace>?Q\<rbrace>;
         \<lbrace>%\<sigma>.
                     \<triangleright> \<sigma> &
                     ?P \<sigma> & ~ ?cond \<sigma>\<rbrace>
         ?M' \<lbrace>?Q\<rbrace> |]
      ==> \<lbrace>%\<sigma>.
                      \<triangleright> \<sigma> & ?P \<sigma>\<rbrace>
          _if_SECLEAN ?cond ?M ?M' \<lbrace>?Q\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty), template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, t_empty), template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Hoare_Clean.while_clean_no_break",
     "[| \<lbrace>%\<sigma>.
                     ~ break_status \<sigma> &
                     ?cond \<sigma> & ?P \<sigma>\<rbrace>
         ?M \<lbrace>%_ \<sigma>.
                        ~ break_status \<sigma> & ?P \<sigma>\<rbrace>;
         ALL \<sigma>.
            \<triangleright> \<sigma> & ?cond \<sigma> & ?P \<sigma> -->
            ?M \<sigma> ~= None &
            ?f (snd (the (?M \<sigma>))) < ?f \<sigma> |]
      ==> \<lbrace>%\<sigma>.
                      \<triangleright> \<sigma> & ?P \<sigma>\<rbrace>
          _while_C ?cond ?M
          \<lbrace>%_ \<sigma>.
                      (return_status \<sigma> | ~ ?cond \<sigma>) &
                      ~ break_status \<sigma> & ?P \<sigma>\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, t_empty), template_var 1),
              t_empty)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 14, t_empty),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             t_empty)
           ))),
    ("Hoare_Clean.while_clean'",
     "[| \<lbrace>%\<sigma>.
                     \<triangleright> \<sigma> &
                     ?cond \<sigma> & ?P \<sigma>\<rbrace>
         ?M \<lbrace>%_. ?P\<rbrace>;
         ALL x \<sigma>.
            ?cond (\<sigma>(| break_status := x |)) = ?cond \<sigma>;
         ALL x \<sigma>. ?P (\<sigma>(| break_status := x |)) = ?P \<sigma>;
         ALL \<sigma>.
            \<triangleright> \<sigma> & ?cond \<sigma> & ?P \<sigma> -->
            ?M \<sigma> ~= None &
            ?f (snd (the (?M \<sigma>))) < ?f \<sigma> |]
      ==> \<lbrace>%\<sigma>.
                      \<triangleright> \<sigma> & ?P \<sigma>\<rbrace>
          _while_C ?cond ?M
          \<lbrace>%_ \<sigma>.
                      ~ break_status \<sigma> & ?P \<sigma>\<rbrace>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, t_empty), template_var 1),
              t_empty)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 15, t_empty),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             t_empty)
           )))]
