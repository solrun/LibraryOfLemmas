   [("MonadSE.single_valued_Mon2Rel", "single_valued (Mon2Rel ?B)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("MonadSE.cont_\<Gamma>", "cont (\<Gamma> ?c ?b)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MonadSE.bind_left_fail_SE'",
     "(fail\<^sub>S\<^sub>E ;- ?P) = fail\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("MonadSE.bind_left_unit'", "(unit\<^sub>S\<^sub>E ?c ;- ?P) = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 0)),
    ("MonadSE.Rel2Mon_Id", "(Rel2Mon o Mon2Rel) ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("MonadSE.bind_right_unit'", "(?m ;- unit\<^sub>S\<^sub>E ()) = ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("MonadSE.while\<^sub>S\<^sub>E_skip",
     "_while_SE (%x. False) ?c = skip\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_hole 0)),
    ("MonadSE.single_valued_lfp_Mon2Rel",
     "single_valued (lfp (\<Gamma> ?c (Mon2Rel ?B)))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))))
         )),
    ("MonadSE.mono_if_cont", "cont ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("MonadSE.bind_right_unit",
     "bind\<^sub>S\<^sub>E ?m unit\<^sub>S\<^sub>E = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("MonadSE.bind_left_fail_SE",
     "bind\<^sub>S\<^sub>E fail\<^sub>S\<^sub>E ?P = fail\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("MonadSE.if\<^sub>S\<^sub>E_False", "_if_SE (%x. False) ?c ?d = ?d",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 0)),
    ("MonadSE.if\<^sub>S\<^sub>E_True", "_if_SE (%x. True) ?c ?d = ?c",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("MonadSE.malt_SE_cons",
     "\<Sqinter>\<^sub>S\<^sub>E (?a # ?S) =
      (?a \<sqinter>\<^sub>S\<^sub>E \<Sqinter>\<^sub>S\<^sub>E ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("MonadSE.bind_left_unit",
     "bind\<^sub>S\<^sub>E (unit\<^sub>S\<^sub>E ?c) ?P = ?P ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_app (template_var 0, template_var 1))),
    ("MonadSE.chain_iterates", "mono ?f ==> chain (%n. (?f ^^ n) {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MonadSE.Mon2Rel_Rel2Mon_id",
     "single_valued ?R ==> (Mon2Rel o Rel2Mon) ?R = ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0),
         template_var 0))),
    ("MonadSE.bind_assoc'", "((?m ;- ?k) ;- ?h) = (?m ;- ?k ;- ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("MonadSE.while_SE_unfold",
     "_while_SE ?b ?c =
      _if_SE ?b (?c ;- _while_SE ?b ?c) (unit\<^sub>S\<^sub>E ())",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_hole 0)))),
    ("MonadSE.chain_total", "chain ?S ==> ?S ?i <= ?S ?j | ?S ?j <= ?S ?i",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_var 2, template_var 1)),
                 template_app (template_var 2, template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 0)),
               template_app (template_var 2, template_var 1)))
           ))),
    ("MonadSE.lfp_if_cont", "cont ?f ==> lfp ?f = (UN n. (?f ^^ n) {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0))))),
    ("MonadSE.bind'_cong",
     "?f ?\<sigma> = ?g ?\<sigma> ==>
      (?f ;- ?M) ?\<sigma> = (?g ;- ?M) ?\<sigma>",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("MonadSE.if\<^sub>S\<^sub>E_cond_cong",
     "?f ?\<sigma> = ?g ?\<sigma> ==>
      (_if_SE ?f ?c ?d) ?\<sigma> = (_if_SE ?g ?c ?d) ?\<sigma>",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_var 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3)))),
    ("MonadSE.single_valued_UN_chain",
     "[| chain ?S; !!n. single_valued (?S n) |]
      ==> single_valued (\<Union> (range ?S))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_hole 0)))
           ))),
    ("MonadSE.single_valued_lfp",
     "[| cont ?f; !!r. single_valued r ==> single_valued (?f r) |]
      ==> single_valued (lfp ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("MonadSE.Rel2Mon_homomorphism",
     "[| single_valued ?X; single_valued ?Y |]
      ==> Rel2Mon (?X O ?Y) = (Rel2Mon ?X ;- Rel2Mon ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("MonadSE.bind_assoc",
     "bind\<^sub>S\<^sub>E (bind\<^sub>S\<^sub>E ?m ?k) ?h =
      _bind_SE x ?m (bind\<^sub>S\<^sub>E (?k x) ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("MonadSE.bind_cong",
     "?f ?\<sigma> = ?g ?\<sigma> ==>
      bind\<^sub>S\<^sub>E ?f ?M ?\<sigma> =
      bind\<^sub>S\<^sub>E ?g ?M ?\<sigma>",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3), t_empty),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1), t_empty),
           template_var 2)))),
    ("MonadSE.Rel2Mon_if",
     "Rel2Mon
       {(s, t).
        if ?b s then (s, t) : Mon2Rel ?c O lfp (\<Gamma> ?b (Mon2Rel ?c))
        else s = t}
       ?\<sigma> =
      (if ?b ?\<sigma>
       then Rel2Mon (Mon2Rel ?c O lfp (\<Gamma> ?b (Mon2Rel ?c))) ?\<sigma>
       else Some ((), ?\<sigma>))",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_hole 13, template_app (template_hole 12, t_empty))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app (template_hole 7, template_var 1))))),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)))))]
