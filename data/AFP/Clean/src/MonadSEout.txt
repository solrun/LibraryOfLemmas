Loading theory "Draft.MonadSE" (required by "Draft.MonadSEMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MonadSEMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MonadSEMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MonadSEMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.517s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MonadSEMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.816s cpu time, 0.036s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MonadSEMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.322s cpu time, 0.142s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MonadSEMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.MonadSE"
### 0.389s elapsed time, 1.561s cpu time, 0.142s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.755s elapsed time, 2.478s cpu time, 0.356s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.991s elapsed time, 2.906s cpu time, 0.789s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.852s elapsed time, 4.472s cpu time, 0.990s GC time
Loading theory "Draft.Templates" (required by "Draft.MonadSEMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MonadSEMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.474s elapsed time, 0.528s cpu time, 0.067s GC time
Loading theory "Draft.MonadSEMoreTemplates"
val templateLemmas =
   [("MonadSE.single_valued_Mon2Rel", "single_valued (Mon2Rel ?B)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("MonadSE.cont_\<Gamma>", "cont (\<Gamma> ?c ?b)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("MonadSE.bind_left_fail_SE'",
     "(fail\<^sub>S\<^sub>E ;- ?P) = fail\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("MonadSE.bind_left_unit'", "(unit\<^sub>S\<^sub>E ?c ;- ?P) = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 0)),
    ("MonadSE.Rel2Mon_Id", "(Rel2Mon o Mon2Rel) ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("MonadSE.bind_right_unit'", "(?m ;- unit\<^sub>S\<^sub>E ()) = ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("MonadSE.while\<^sub>S\<^sub>E_skip",
     "_while_SE (%x. False) ?c = skip\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_hole 0)),
    ("MonadSE.single_valued_lfp_Mon2Rel",
     "single_valued (lfp (\<Gamma> ?c (Mon2Rel ?B)))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))))
         )),
    ("MonadSE.mono_if_cont", "cont ?f ==> mono ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("MonadSE.bind_right_unit",
     "bind\<^sub>S\<^sub>E ?m unit\<^sub>S\<^sub>E = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("MonadSE.bind_left_fail_SE",
     "bind\<^sub>S\<^sub>E fail\<^sub>S\<^sub>E ?P = fail\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("MonadSE.if\<^sub>S\<^sub>E_False", "_if_SE (%x. False) ?c ?d = ?d",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 0)),
    ("MonadSE.if\<^sub>S\<^sub>E_True", "_if_SE (%x. True) ?c ?d = ?c",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("MonadSE.malt_SE_cons",
     "\<Sqinter>\<^sub>S\<^sub>E (?a # ?S) =
      (?a \<sqinter>\<^sub>S\<^sub>E \<Sqinter>\<^sub>S\<^sub>E ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("MonadSE.bind_left_unit",
     "bind\<^sub>S\<^sub>E (unit\<^sub>S\<^sub>E ?c) ?P = ?P ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_app (template_var 0, template_var 1))),
    ("MonadSE.chain_iterates", "mono ?f ==> chain (%n. (?f ^^ n) {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MonadSE.Mon2Rel_Rel2Mon_id",
     "single_valued ?R ==> (Mon2Rel o Rel2Mon) ?R = ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0),
         template_var 0))),
    ("MonadSE.bind_assoc'", "((?m ;- ?k) ;- ?h) = (?m ;- ?k ;- ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("MonadSE.while_SE_unfold",
     "_while_SE ?b ?c =
      _if_SE ?b (?c ;- _while_SE ?b ?c) (unit\<^sub>S\<^sub>E ())",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_hole 0)))),
    ("MonadSE.chain_total", "chain ?S ==> ?S ?i <= ?S ?j | ?S ?j <= ?S ?i",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_var 2, template_var 1)),
                 template_app (template_var 2, template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 0)),
               template_app (template_var 2, template_var 1)))
           ))),
    ("MonadSE.lfp_if_cont", "cont ?f ==> lfp ?f = (UN n. (?f ^^ n) {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 0))))),
    ("MonadSE.bind'_cong",
     "?f ?\<sigma> = ?g ?\<sigma> ==>
      (?f ;- ?M) ?\<sigma> = (?g ;- ?M) ?\<sigma>",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("MonadSE.if\<^sub>S\<^sub>E_cond_cong",
     "?f ?\<sigma> = ?g ?\<sigma> ==>
      (_if_SE ?f ?c ?d) ?\<sigma> = (_if_SE ?g ?c ?d) ?\<sigma>",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_var 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3)))),
    ("MonadSE.single_valued_UN_chain",
     "[| chain ?S; !!n. single_valued (?S n) |]
      ==> single_valued (\<Union> (range ?S))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_hole 0)))
           ))),
    ("MonadSE.single_valued_lfp",
     "[| cont ?f; !!r. single_valued r ==> single_valued (?f r) |]
      ==> single_valued (lfp ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("MonadSE.Rel2Mon_homomorphism",
     "[| single_valued ?X; single_valued ?Y |]
      ==> Rel2Mon (?X O ?Y) = (Rel2Mon ?X ;- Rel2Mon ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("MonadSE.bind_assoc",
     "bind\<^sub>S\<^sub>E (bind\<^sub>S\<^sub>E ?m ?k) ?h =
      _bind_SE x ?m (bind\<^sub>S\<^sub>E (?k x) ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("MonadSE.bind_cong",
     "?f ?\<sigma> = ?g ?\<sigma> ==>
      bind\<^sub>S\<^sub>E ?f ?M ?\<sigma> =
      bind\<^sub>S\<^sub>E ?g ?M ?\<sigma>",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3), t_empty),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1), t_empty),
           template_var 2)))),
    ("MonadSE.Rel2Mon_if",
     "Rel2Mon
       {(s, t).
        if ?b s then (s, t) : Mon2Rel ?c O lfp (\<Gamma> ?b (Mon2Rel ?c))
        else s = t}
       ?\<sigma> =
      (if ?b ?\<sigma>
       then Rel2Mon (Mon2Rel ?c O lfp (\<Gamma> ?b (Mon2Rel ?c))) ?\<sigma>
       else Some ((), ?\<sigma>))",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_hole 13, template_app (template_hole 12, t_empty))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app (template_hole 7, template_var 1))))),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.MonadSEMoreTemplates"
### 0.304s elapsed time, 0.405s cpu time, 0.000s GC time
val it = (): unit
