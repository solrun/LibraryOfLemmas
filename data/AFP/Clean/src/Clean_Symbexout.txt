Loading theory "Draft.MonadSE" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.Clean_Symbex" via "Draft.Clean" via "Draft.Symbex_MonadSE" via "Draft.Seq_MonadSE")
Loading theory "Draft.Lens_Laws" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.Clean_Symbex" via "Draft.Clean" via "Draft.Optics")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.529s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale weak_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "weak_lens x"
### theory "HOL-Library.Set_Algebras"
### 0.198s elapsed time, 0.775s cpu time, 0.066s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.364s elapsed time, 1.458s cpu time, 0.150s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.ExtrEqs")
locale wb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "wb_lens x"
locale mwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "mwb_lens x"
locale vwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "vwb_lens x"
### theory "Draft.MonadSE"
### 0.420s elapsed time, 1.677s cpu time, 0.150s GC time
Loading theory "Draft.Seq_MonadSE" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.Clean_Symbex" via "Draft.Clean" via "Draft.Symbex_MonadSE")
locale ief_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "ief_lens x"
locale bij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "bij_lens x"
locale lens_indep
  fixes X :: "'a \<Longrightarrow> 'c"
    and Y :: "'b \<Longrightarrow> 'c"
  assumes "lens_indep X Y"
### theory "Draft.Lens_Laws"
### 0.481s elapsed time, 1.923s cpu time, 0.150s GC time
Loading theory "Draft.Optics" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.Clean_Symbex" via "Draft.Clean")
Found termination order: "{}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Optics"
### 0.134s elapsed time, 0.517s cpu time, 0.110s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Seq_MonadSE"
### 0.695s elapsed time, 2.562s cpu time, 0.734s GC time
consts
  left :: "'a tree => 'a tree"
Loading theory "Draft.Symbex_MonadSE" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.Clean_Symbex" via "Draft.Clean")
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.127s elapsed time, 4.266s cpu time, 0.857s GC time
"_if_SE P B\<^sub>1 B\<^sub>2"
  :: "'a => ('b * 'a) option"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Symbex_MonadSE"
### 0.440s elapsed time, 1.692s cpu time, 0.222s GC time
Loading theory "Draft.Clean" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.Clean_Symbex")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.021s elapsed time, 3.733s cpu time, 0.846s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
val t =
   Const ("Clean.control_state.break_status_update",
          "(bool => bool)
           => 'a control_state_scheme => 'a control_state_scheme") $
     Abs ("uu_", "bool", Const ("HOL.False", "bool")) $
     Free ("\<sigma>", "'a control_state_scheme"):
   term
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### ML warning (line 451 of "$AFP/Clean/src/Clean.thy"):
### Value identifier (extend) has not been referenced.
### ML warning (line 467 of "$AFP/Clean/src/Clean.thy"):
### Pattern is not exhaustive.
### ML warning (line 486 of "$AFP/Clean/src/Clean.thy"):
### Pattern is not exhaustive.
### ML warning (line 492 of "$AFP/Clean/src/Clean.thy"):
### Pattern is not exhaustive.
structure StateMgt_core:
  sig
    structure Data: GENERIC_DATA
    val MON_SE_T: typ -> typ -> typ
    val control_stateS: typ
    val control_stateT: typ
    val declare_state_variable_global:
       (typ -> var_kind) -> string -> theory -> theory
    val declare_state_variable_local:
       (typ -> var_kind) -> string -> Context.generic -> Context.generic
    val fetch_state_field: string * 'a -> (string * string) * 'a
    val filter_attr_of:
       string -> theory -> ((string * string) * var_kind) list
    val filter_name:
       string -> string * 'a -> ((string * string) * 'a) option
    val get_data: Proof.context -> Data.T
    val get_data_global: theory -> Data.T
    val get_state_field_tab: Proof.context -> state_field_tab
    val get_state_field_tab_global: theory -> state_field_tab
    val get_state_type: Proof.context -> typ
    val get_state_type_global: theory -> typ
    val is_global_program_variable: Symtab.key -> theory -> bool
    val is_local_program_variable: Symtab.key -> theory -> bool
    val is_program_variable: Symtab.key -> theory -> bool
    val map_data: (Data.T -> Data.T) -> Context.generic -> Context.generic
    val map_data_global: (Data.T -> Data.T) -> theory -> theory
    val merge_control_stateS: typ * typ -> typ
    val optionT: typ -> typ
    type state_field_tab = var_kind Symtab.table
    val type_of: var_kind -> typ
    val upd_state_type: (typ -> typ) -> Context.generic -> Context.generic
    val upd_state_type_global: (typ -> typ) -> theory -> theory
    datatype var_kind = global_var of typ | local_var of typ
  end
### ML warning (line 592 of "$AFP/Clean/src/Clean.thy"):
### Matches are not exhaustive.
val mk_None = fn: typ -> term
val mk_Some = fn: term -> term
val dest_listTy = fn: typ -> typ
val mk_hdT = fn: term -> term
val mk_tlT = fn: term -> term
val mk_undefined = fn: typ -> term
val meta_eq_const = fn: typ -> term
val mk_meta_eq = fn: term * term -> term
val mk_pat_tupleabs = fn: (string * typ) list -> term -> term
val read_constname = fn: Proof.context -> string -> string
val wfrecT = fn: term -> term -> term
val mk_lens_type = fn: typ -> typ -> typ
### ML warning (line 651 of "$AFP/Clean/src/Clean.thy"):
### Pattern is not exhaustive.
structure StateMgt:
  sig
    structure Data: GENERIC_DATA
    val MON_SE_T: typ -> typ -> typ
    val add_record_cmd:
       {overloaded: bool} ->
         bool ->
           (string * string option) list ->
             binding ->
               string option ->
                 (binding * string * mixfix) list -> theory -> theory
    val add_record_cmd':
       {overloaded: bool} ->
         bool ->
           (string * string option) list ->
             binding ->
               string option ->
                 (binding * typ * mixfix) list -> theory -> theory
    val add_record_cmd0:
       ('a ->
          Proof.context -> (binding * typ * mixfix) list * Proof.context)
         ->
         {overloaded: bool} ->
           bool ->
             (string * string option) list ->
               binding -> string option -> 'a -> theory -> theory
    val cmd:
       (binding * typ option * mixfix) option * (Attrib.binding * term) *
       term list * (binding * typ option * mixfix) list
         -> local_theory -> local_theory
    val construct_update: bool -> binding -> typ -> theory -> term
    val control_stateS: typ
    val control_stateT: typ
    val declare_state_variable_global:
       (typ -> var_kind) -> string -> theory -> theory
    val declare_state_variable_local:
       (typ -> var_kind) -> string -> Context.generic -> Context.generic
    val define_lense:
       binding -> typ -> binding * typ * 'a -> Proof.context -> local_theory
    val fetch_state_field: string * 'a -> (string * string) * 'a
    val filter_attr_of:
       string -> theory -> ((string * string) * var_kind) list
    val filter_name:
       string -> string * 'a -> ((string * string) * 'a) option
    val get_data: Proof.context -> Data.T
    val get_data_global: theory -> Data.T
    val get_result_value_conf:
       string -> theory -> (string * string) * var_kind
    val get_state_field_tab: Proof.context -> state_field_tab
    val get_state_field_tab_global: theory -> state_field_tab
    val get_state_type: Proof.context -> typ
    val get_state_type_global: theory -> typ
    val is_global_program_variable: Symtab.key -> theory -> bool
    val is_local_program_variable: Symtab.key -> theory -> bool
    val is_program_variable: Symtab.key -> theory -> bool
    val map_data: (Data.T -> Data.T) -> Context.generic -> Context.generic
    val map_data_global: (Data.T -> Data.T) -> theory -> theory
    val map_to_update:
       typ -> bool -> theory -> (string * string) * var_kind -> term -> term
    val merge_control_stateS: typ * typ -> typ
    val mk_global_state_name: binding -> binding
    val mk_lense_name: binding -> binding
    val mk_local_state_name: binding -> binding
    val mk_lookup_result_value_term: string -> typ -> theory -> term
    val mk_pop_def: binding -> typ -> typ -> Proof.context -> local_theory
    val mk_pop_name: binding -> binding
    val mk_push_def: binding -> typ -> Proof.context -> local_theory
    val mk_push_name: binding -> binding
    val new_state_record:
       bool ->
         (((string * string option) list * binding) * string option) *
         (binding * string * mixfix) list
           -> theory -> theory
    val new_state_record':
       bool ->
         (((string * string option) list * binding) * typ option) *
         (binding * typ * mixfix) list
           -> theory -> theory
    val new_state_record0:
       ({overloaded: bool} ->
          bool ->
            'a ->
              binding ->
                string option ->
                  (binding * 'b * mixfix) list -> theory -> theory)
         ->
         bool ->
           (('a * binding) * 'b option) * (binding * 'b * mixfix) list ->
             theory -> theory
    val optionT: typ -> typ
    val parse_typ_'a: Proof.context -> binding -> typ
    val pop_eq: binding -> string -> typ -> typ -> Proof.context -> term
    val push_eq: binding -> string -> typ -> typ -> Proof.context -> term
    val read_fields:
       ('a * string * 'b) list ->
         Proof.context -> ('a * typ * 'b) list * Proof.context
    val read_parent:
       string option ->
         Proof.context -> (typ list * string) option * Proof.context
    val result_name: string
    type state_field_tab = var_kind Symtab.table
    val typ_2_string_raw: typ -> string
    val type_of: var_kind -> typ
    val upd_state_type: (typ -> typ) -> Context.generic -> Context.generic
    val upd_state_type_global: (typ -> typ) -> theory -> theory
    datatype var_kind = global_var of typ | local_var of typ
  end
structure Clean_Syntax_Lift:
  sig
    type T = {is_global: string -> bool, is_local: string -> bool}
    val app_sigma: int -> term -> Proof.context -> term
    val app_sigma0: T -> int -> term -> term
    val assign_update: string -> string
    val init:
       Proof.context ->
         {is_global: Symtab.key -> bool, is_local: Symtab.key -> bool}
    val scope_var:
       {is_global: 'a -> bool, is_local: 'a -> bool} -> 'a -> bool option
    val string_tr:
       Proof.context ->
         (string * Position.T -> Symbol_Pos.T list) -> term list -> term
    val transform_term: T -> typ -> term -> term
    val transform_term': T -> term -> term
    val transform_term0:
       (term -> term) -> (string -> bool option) -> term -> term
  end
Found termination order: "size <*mlex*> {}"
### ML warning (line 1031 of "$AFP/Clean/src/Clean.thy"):
### Pattern is not exhaustive.
### ML warning (line 1161 of "$AFP/Clean/src/Clean.thy"):
### Value identifier (t_opt) has not been referenced.
### ML warning (line 1168 of "$AFP/Clean/src/Clean.thy"):
### Value identifier (X) has not been referenced.
### ML warning (line 1189 of "$AFP/Clean/src/Clean.thy"):
### Value identifier (body) has not been referenced.
### ML warning (line 1224 of "$AFP/Clean/src/Clean.thy"):
### Value identifier (expected_type) has not been referenced.
structure Function_Specification_Parser:
  sig
    val checkNsem_function_spec:
       {recursive: bool} -> funct_spec_src -> theory -> theory
    val checkNsem_function_spec_gen:
       {recursive: bool} -> funct_spec_sem -> theory -> theory
    val check_absence_old: term -> bool
    val define_body_core:
       binding ->
         typ ->
           typ ->
             (binding * typ) list -> term -> local_theory -> local_theory
    val define_body_main:
       {recursive: bool} ->
         binding ->
           typ ->
             typ ->
               (binding * typ) list ->
                 (Proof.context -> term) option ->
                   'a -> Proof.context -> local_theory
    val define_cond:
       binding ->
         (typ -> typ) ->
           ('a -> term) ->
             (term -> 'b) ->
               string ->
                 (binding * typ) list ->
                   (local_theory -> 'a) -> local_theory -> local_theory
    val define_postcond:
       binding ->
         typ ->
           typ ->
             (binding * typ) list ->
               (local_theory -> term) -> local_theory -> local_theory
    val define_precond:
       binding ->
         typ ->
           (binding * typ) list ->
             (local_theory -> term) -> local_theory -> local_theory
    type funct_spec_sem =
       {binding: binding,
        locals: (binding * string * mixfix) list,
        params: (binding * string) list,
        read_body: Proof.context -> typ -> term,
        read_post: Proof.context -> term,
        read_pre: Proof.context -> term,
        read_variant_opt: (Proof.context -> term) option, ret_type: string}
    type funct_spec_sem_old =
       {params: (binding * typ) list,
        post: term, pre: term, ret_ty: typ, variant: term option}
    type funct_spec_src =
       {binding: binding,
        body_src: string * Position.T,
        locals: (binding * string * mixfix) list,
        params: (binding * string) list,
        post_src: string,
        pre_src: string, ret_type: string, variant_src: string option}
    val locals_clause:
       Token.T list ->
         (string * (binding * string * mixfix) list) * Token.T list
    val parse_arg_decl: Token.T list -> (binding * string) * Token.T list
    val parse_param_decls: (binding * string) list parser
    val parse_proc_spec: Token.T list -> funct_spec_src * Token.T list
    val parse_returns_clause: Token.T list -> string * Token.T list
    val read_function_spec:
       ('a * string) list * string * (Proof.context -> 'b) option ->
         Proof.context ->
           (('a * typ) list * typ * 'b option) * Proof.context
    val read_params:
       ('a * string) list -> Proof.context -> typ list * Proof.context
    val read_result: string -> Proof.context -> typ * Proof.context
    val transform_old: typ -> term -> term
  end
overloading
  nth\<^sub>C \<equiv> nth\<^sub>C :: 'a list => nat => 'a
overloading
  nth\<^sub>C \<equiv> nth\<^sub>C :: 'a list => int => 'a
structure Clean_Term_interface:
  sig
    val mk_assign_global_C: term -> term -> term
    val mk_assign_local_C: term -> term -> term
    val mk_block_C: term -> term -> term -> term
    val mk_break: typ -> term
    val mk_call_C: term -> term -> term
    val mk_if_C: term -> term -> term -> term
    val mk_return_C: term -> term -> term
    val mk_seq_C: term -> term -> term
    val mk_skip_C: typ -> term
    val mk_while_C: term -> term -> term
    val mk_while_anno_C: term -> term -> term -> term -> term
  end
### theory "Draft.Clean"
### 0.736s elapsed time, 1.622s cpu time, 0.181s GC time
Loading theory "Draft.Clean_Symbex" (required by "Draft.Clean_SymbexMoreTemplates")
[| exec_stop ?\<sigma>; ?\<sigma> \<Turnstile> _bind_SE _ (assign ?f) ?M |]
==> ?\<sigma> \<Turnstile> ?M
[| exec_stop ?\<sigma>; ?\<sigma> \<Turnstile> assign ?f ;- ?M |]
==> ?\<sigma> \<Turnstile> ?M
[| exec_stop ?\<sigma>;
   ?\<sigma> \<Turnstile> _bind_SE _ (?upd :==\<^sub>L ?rhs) ?M |]
==> ?\<sigma> \<Turnstile> ?M
### theory "HOL-Library.Tree"
### 2.082s elapsed time, 6.522s cpu time, 1.265s GC time
Loading theory "Draft.Templates" (required by "Draft.Clean_SymbexMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Clean_SymbexMoreTemplates")
### theory "Draft.Clean_Symbex"
### 0.158s elapsed time, 0.332s cpu time, 0.045s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.473s elapsed time, 0.559s cpu time, 0.063s GC time
Loading theory "Draft.Clean_SymbexMoreTemplates"
val templateLemmas =
   [("Clean_Symbex.while_k_SE", "while_C = while_k ?k",
     template_equation
      (template_hole 1, template_app (template_hole 0, template_var 0))),
    ("Clean_Symbex.while\<^sub>C_skip",
     "_while_C (%x. False) ?c = skip\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_hole 0)),
    ("Clean_Symbex.break_assign_skip", "(break ;- assign ?f) = break",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_hole 1)),
    ("Clean_Symbex.break_while_skip", "(break ;- _while_C ?b ?c) = break",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_hole 1)),
    ("Clean_Symbex.break_if_skip",
     "(break ;- _if_SECLEAN ?b ?c ?d) = break",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 1)),
    ("Clean_Symbex.unset_break_idem",
     "(unset_break_status ;- unset_break_status ;- ?M) =
      (unset_break_status ;- ?M)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Clean_Symbex.exec_call_0'",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> call_0\<^sub>C ?M ;- ?M') =
      (?\<sigma> \<Turnstile> ?M')",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Clean_Symbex.exec_assign'",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> assign ?f ;- ?M) =
      (?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Clean_Symbex.return_cancel1_idem",
     "(return\<^bsub>?X\<^esub> ?E ;- ?X :==\<^sub>G ?E' ;- ?M) =
      (return\<^bsub>?X\<^esub> ?E ;- ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_var 0))),
    ("Clean_Symbex.return_cancel2_idem",
     "(return\<^bsub>?X\<^esub> ?E ;- ?X :==\<^sub>L ?E' ;- ?M) =
      (return\<^bsub>?X\<^esub> ?E ;- ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_var 0))),
    ("Clean_Symbex.exec_call_0",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _bind_SE _ (call_0\<^sub>C ?M) ?M') =
      (?\<sigma> \<Turnstile> ?M')",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Clean_Symbex.exec_assign",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _bind_SE _ (assign ?f) ?M) =
      (?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Clean_Symbex.exec_call'",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> call\<^sub>C ?M ?A\<^sub>1 ;- ?M') =
      (?\<sigma> \<Turnstile> ?M')",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Clean_Symbex.exec_call_1'",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> call_1\<^sub>C ?M ?A\<^sub>1 ;- ?M') =
      (?\<sigma> \<Turnstile> ?M')",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Clean_Symbex.exec_assign_global'",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> ?upd :==\<^sub>G ?rhs ;- ?M) =
      (?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Clean_Symbex.exec_assign_local'",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> ?upd :==\<^sub>L ?rhs ;- ?M) =
      (?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Clean_Symbex.exec_While\<^sub>C'",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _while_C ?P ?B\<^sub>1 ;- ?M) =
      (?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Clean_Symbex.exec_assignD'",
     "[| exec_stop ?\<sigma>; ?\<sigma> \<Turnstile> assign ?f ;- ?M |]
      ==> ?\<sigma> \<Turnstile> ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("Clean_Symbex.exec_assign_global",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _bind_SE _ (?upd :==\<^sub>G ?rhs) ?M) =
      (?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Clean_Symbex.exec_assign_local",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _bind_SE _ (?upd :==\<^sub>L ?rhs) ?M) =
      (?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Clean_Symbex.exec_call_2'",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       call_2\<^sub>C ?M ?A\<^sub>1 ?A\<^sub>2 ;- ?M') =
      (?\<sigma> \<Turnstile> ?M')",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_var 0)))),
    ("Clean_Symbex.exec_If\<^sub>C'",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _if_SECLEAN ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M) =
      (?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_var 0)))),
    ("Clean_Symbex.non_exec_assign'",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> assign ?f ;- ?M) =
      (?f ?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 1, template_var 2)),
           template_var 0)))),
    ("Clean_Symbex.exec_If\<^sub>C_If\<^sub>S\<^sub>E",
     "\<triangleright> ?\<sigma> ==>
      (_if_SECLEAN ?P ?B\<^sub>1 ?B\<^sub>2) ?\<sigma> =
      (_if_SE ?P ?B\<^sub>1 ?B\<^sub>2) ?\<sigma>",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3)))),
    ("Clean_Symbex.exec_assignD",
     "[| exec_stop ?\<sigma>;
         ?\<sigma> \<Turnstile> _bind_SE _ (assign ?f) ?M |]
      ==> ?\<sigma> \<Turnstile> ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 1)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2), template_var 0)
           ))),
    ("Clean_Symbex.exec_assign_globalD'",
     "[| exec_stop ?\<sigma>;
         ?\<sigma> \<Turnstile> ?upd :==\<^sub>G ?rhs ;- ?M |]
      ==> ?\<sigma> \<Turnstile> ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3), template_var 0)
           ))),
    ("Clean_Symbex.exec_assign_localD'",
     "[| exec_stop ?\<sigma>;
         ?\<sigma> \<Turnstile> ?upd :==\<^sub>L ?rhs ;- ?M |]
      ==> ?\<sigma> \<Turnstile> ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3), template_var 0)
           ))),
    ("Clean_Symbex.exec_call_2",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       _bind_SE _ (call_2\<^sub>C ?M ?A\<^sub>1 ?A\<^sub>2) ?M') =
      (?\<sigma> \<Turnstile> ?M')",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_var 0)))),
    ("Clean_Symbex.non_exec_call_0'",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> call_0\<^sub>C ?M ;- ?M') =
      (?\<sigma> \<Turnstile> ?M ;- ?M')",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Clean_Symbex.non_exec_assign",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _bind_SE _ (assign ?f) ?M) =
      (?f ?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             t_empty)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 1, template_var 2)),
           template_var 0)))),
    ("Clean_Symbex.exec_assign_globalD",
     "[| exec_stop ?\<sigma>;
         ?\<sigma> \<Turnstile> _bind_SE _ (?upd :==\<^sub>G ?rhs) ?M |]
      ==> ?\<sigma> \<Turnstile> ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3), template_var 0)
           ))),
    ("Clean_Symbex.exec_assign_localD",
     "[| exec_stop ?\<sigma>;
         ?\<sigma> \<Turnstile> _bind_SE _ (?upd :==\<^sub>L ?rhs) ?M |]
      ==> ?\<sigma> \<Turnstile> ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3), template_var 0)
           ))),
    ("Clean_Symbex.exec_call",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (call\<^sub>C ?M ?A\<^sub>1) ?M') =
      (?\<sigma> \<Turnstile> ?M' undefined)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_var 0, template_hole 0))))),
    ("Clean_Symbex.exec_call_1",
     "exec_stop ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (call_1\<^sub>C ?M ?A\<^sub>1) ?M') =
      (?\<sigma> \<Turnstile> ?M' undefined)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_var 0, template_hole 0))))),
    ("Clean_Symbex.non_exec_call_0",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _bind_SE _ (call_0\<^sub>C ?M) ?M') =
      (?\<sigma> \<Turnstile> ?M ;- ?M')",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Clean_Symbex.if\<^sub>C_cond_cong",
     "?f ?\<sigma> = ?g ?\<sigma> ==>
      (_if_SECLEAN ?f ?c ?d) ?\<sigma> = (_if_SECLEAN ?g ?c ?d) ?\<sigma>",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_var 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3)))),
    ("Clean_Symbex.non_exec_assign_localD'",
     "[| \<triangleright> ?\<sigma>;
         ?\<sigma> \<Turnstile> _bind_SE _ (assign ?f) ?M |]
      ==> ?f ?\<sigma> \<Turnstile> ?M",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 1)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_var 1, template_var 2)),
             template_var 0)
           ))),
    ("Clean_Symbex.non_exec_call'",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> call\<^sub>C ?M ?A\<^sub>1 ;- ?M') =
      (?\<sigma> \<Turnstile> ?M (?A\<^sub>1 ?\<sigma>) ;- ?M')",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_var 2,
                 template_app (template_var 1, template_var 3))),
             template_var 0))))),
    ("Clean_Symbex.non_exec_call_1'",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> call_1\<^sub>C ?M ?A\<^sub>1 ;- ?M') =
      (?\<sigma> \<Turnstile> ?M (?A\<^sub>1 ?\<sigma>) ;- ?M')",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_var 2,
                 template_app (template_var 1, template_var 3))),
             template_var 0))))),
    ("Clean_Symbex.non_exec_assign_global'",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> ?upd :==\<^sub>G ?rhs ;- ?M) =
      (?upd (%_. ?rhs ?\<sigma>) ?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_var 2, t_empty), template_var 3)),
           template_var 0)))),
    ("Clean_Symbex.non_exec_assign_local'",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> ?upd :==\<^sub>L ?rhs ;- ?M) =
      (?upd (upd_hd (%_. ?rhs ?\<sigma>)) ?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_var 2, template_app (template_hole 0, t_empty)),
               template_var 3)),
           template_var 0)))),
    ("Clean_Symbex.non_exec_assign_global",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _bind_SE _ (?upd :==\<^sub>G ?rhs) ?M) =
      (?upd (%_. ?rhs ?\<sigma>) ?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_var 2, t_empty), template_var 3)),
           template_var 0)))),
    ("Clean_Symbex.exec_while\<^sub>C",
     "(?\<sigma> \<Turnstile> _while_C ?b ?c ;- ?M) =
      (?\<sigma> \<Turnstile>
       _if_SECLEAN ?b (?c ;- _while_C ?b ?c ;- unset_break_status)
        skip\<^sub>S\<^sub>E ;-
       ?M)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 4, template_var 2),
                         template_var 1)),
                     template_hole 1))),
               template_hole 0)),
           template_var 0)))),
    ("Clean_Symbex.non_exec_assign_local",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _bind_SE _ (?upd :==\<^sub>L ?rhs) ?M) =
      (?upd (upd_hd (%_. ?rhs ?\<sigma>)) ?\<sigma> \<Turnstile> ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_var 2, template_app (template_hole 0, t_empty)),
               template_var 3)),
           template_var 0)))),
    ("Clean_Symbex.valid_exec_If\<^sub>C",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile> _if_SECLEAN ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M) =
      (?\<sigma> \<Turnstile> _if_SE ?P ?B\<^sub>1 ?B\<^sub>2 ;- ?M)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Clean_Symbex.non_exec_call_2'",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       call_2\<^sub>C ?M ?A\<^sub>1 ?A\<^sub>2 ;- ?M') =
      (?\<sigma> \<Turnstile>
       ?M (?A\<^sub>1 ?\<sigma>) (?A\<^sub>2 ?\<sigma>) ;- ?M')",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_var 3,
                   template_app (template_var 2, template_var 4)),
                 template_app (template_var 1, template_var 4))),
             template_var 0))))),
    ("Clean_Symbex.non_exec_call",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (call\<^sub>C ?M ?A\<^sub>1) ?M') =
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (?M (?A\<^sub>1 ?\<sigma>)) ?M')",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_var 2,
                 template_app (template_var 1, template_var 3))),
             t_empty))))),
    ("Clean_Symbex.non_exec_call_1",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (call_1\<^sub>C ?M ?A\<^sub>1) ?M') =
      (?\<sigma> \<Turnstile>
       bind\<^sub>S\<^sub>E (?M (?A\<^sub>1 ?\<sigma>)) ?M')",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_var 2,
                 template_app (template_var 1, template_var 3))),
             t_empty))))),
    ("Clean_Symbex.non_exec_call_2",
     "\<triangleright> ?\<sigma> ==>
      (?\<sigma> \<Turnstile>
       _bind_SE _ (call_2\<^sub>C ?M ?A\<^sub>1 ?A\<^sub>2) ?M') =
      (?\<sigma> \<Turnstile>
       ?M (?A\<^sub>1 ?\<sigma>) (?A\<^sub>2 ?\<sigma>) ;- ?M')",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)),
             t_empty)),
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_var 3,
                   template_app (template_var 2, template_var 4)),
                 template_app (template_var 1, template_var 4))),
             template_var 0))))),
    ("Clean_Symbex.exec_while_k",
     "(?\<sigma> \<Turnstile> while_k (Suc ?n) ?b ?c ;- ?M) =
      (?\<sigma> \<Turnstile>
       _if_SECLEAN ?b (?c ;- while_k ?n ?b ?c ;- unset_break_status)
        skip\<^sub>S\<^sub>E ;-
       ?M)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 4),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 3)),
                 template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 7, template_var 4),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_var 3),
                           template_var 2),
                         template_var 1)),
                     template_hole 1))),
               template_hole 0)),
           template_var 0)))),
    ("Clean_Symbex.exec_while_kD",
     "?\<sigma> \<Turnstile> while_k (Suc ?n) ?b ?c ;- ?M ==>
      ?\<sigma> \<Turnstile>
      _if_SECLEAN ?b (?c ;- while_k ?n ?b ?c ;- unset_break_status)
       skip\<^sub>S\<^sub>E ;-
      ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 3)),
                      template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 4),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 5, template_var 3),
                               template_var 2),
                             template_var 1)),
                         template_hole 1))),
                   template_hole 0)),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Clean_SymbexMoreTemplates"
### 0.331s elapsed time, 0.447s cpu time, 0.054s GC time
val it = (): unit
