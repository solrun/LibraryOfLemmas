   [("MonadSE.bind_left_fail_SE'",
     "(fail\<^sub>S\<^sub>E ;- ?P) = fail\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("MonadSE.bind_left_unit'", "(unit\<^sub>S\<^sub>E ?c ;- ?P) = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 0)),
    ("MonadSE.Rel2Mon_Id", "(Rel2Mon o Mon2Rel) ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("MonadSE.bind_right_unit'", "(?m ;- unit\<^sub>S\<^sub>E ()) = ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("MonadSE.while\<^sub>S\<^sub>E_skip",
     "_while_SE (%x. False) ?c = skip\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_hole 0)),
    ("MonadSE.bind_right_unit",
     "bind\<^sub>S\<^sub>E ?m unit\<^sub>S\<^sub>E = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), t_empty),
       template_var 0)),
    ("MonadSE.bind_left_fail_SE",
     "bind\<^sub>S\<^sub>E fail\<^sub>S\<^sub>E ?P = fail\<^sub>S\<^sub>E",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("MonadSE.if\<^sub>S\<^sub>E_False", "_if_SE (%x. False) ?c ?d = ?d",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 0)),
    ("MonadSE.if\<^sub>S\<^sub>E_True", "_if_SE (%x. True) ?c ?d = ?c",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("MonadSE.malt_SE_cons",
     "\<Sqinter>\<^sub>S\<^sub>E (?a # ?S) =
      (?a \<sqinter>\<^sub>S\<^sub>E \<Sqinter>\<^sub>S\<^sub>E ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("MonadSE.bind_left_unit",
     "bind\<^sub>S\<^sub>E (unit\<^sub>S\<^sub>E ?c) ?P = ?P ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty),
       template_app (template_var 0, template_var 1))),
    ("MonadSE.bind_assoc'", "((?m ;- ?k) ;- ?h) = (?m ;- ?k ;- ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("MonadSE.while_SE_unfold",
     "_while_SE ?b ?c =
      _if_SE ?b (?c ;- _while_SE ?b ?c) (unit\<^sub>S\<^sub>E ())",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_hole 0)))),
    ("MonadSE.bind_assoc",
     "bind\<^sub>S\<^sub>E (bind\<^sub>S\<^sub>E ?m ?k) ?h =
      _bind_SE x ?m (bind\<^sub>S\<^sub>E (?k x) ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("MonadSE.Rel2Mon_if",
     "Rel2Mon
       {(s, t).
        if ?b s then (s, t) : Mon2Rel ?c O lfp (\<Gamma> ?b (Mon2Rel ?c))
        else s = t}
       ?\<sigma> =
      (if ?b ?\<sigma>
       then Rel2Mon (Mon2Rel ?c O lfp (\<Gamma> ?b (Mon2Rel ?c))) ?\<sigma>
       else Some ((), ?\<sigma>))",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_hole 13, template_app (template_hole 12, t_empty))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_app (template_hole 7, template_var 1))))),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)))))]
