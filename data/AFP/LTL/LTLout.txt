Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.LTLMoreTemplates" via "Draft.LTL" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.545s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.222s elapsed time, 0.906s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.311s elapsed time, 1.244s cpu time, 0.124s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.LTLMoreTemplates" via "Draft.LTL")
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.323s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.298s elapsed time, 1.173s cpu time, 0.096s GC time
Loading theory "Draft.LTL" (required by "Draft.LTLMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.040s elapsed time, 3.939s cpu time, 0.961s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.141s elapsed time, 4.160s cpu time, 0.957s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.068s elapsed time, 6.524s cpu time, 1.283s GC time
Loading theory "Draft.Templates" (required by "Draft.LTLMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LTLMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.762s elapsed time, 1.808s cpu time, 0.704s GC time
consts
  semantics_ltlc :: "(nat => 'a set) => 'a ltlc => bool"
consts
  semantics_ltln :: "(nat => 'a set) => 'a ltln => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  semantics_ltlr :: "(nat => 'a set) => 'a ltlr => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.LTL"
### 7.340s elapsed time, 12.602s cpu time, 3.097s GC time
Loading theory "Draft.LTLMoreTemplates"
val templateLemmas =
   [("LTL.atoms_finite", "finite (atoms_pltl ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL.subfrmlsn_finite", "finite (subfrmlsn ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL.subfrmlsr_finite", "finite (subfrmlsr ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LTL.pw_eq_on_refl", "pw_eq_on ?S ?w ?w",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("LTL.subfrmlsn_id", "?\<phi> : subfrmlsn ?\<phi>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("LTL.subfrmlsr_id", "?\<phi> : subfrmlsr ?\<phi>",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("LTL.semantics_pltl_sugar",
     "?w \<Turnstile>\<^sub>p true\<^sub>p = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("LTL.R_consts",
     "?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n true\<^sub>n",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("LTL.U_consts",
     "?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n true\<^sub>n",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("LTL.W_consts",
     "?w \<Turnstile>\<^sub>n true\<^sub>n W\<^sub>n ?\<phi>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("LTL.W_consts",
     "?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n true\<^sub>n",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("LTL.R_consts",
     "~ ?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n false\<^sub>n",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))
             )
         )),
    ("LTL.M_consts",
     "~ ?w \<Turnstile>\<^sub>n false\<^sub>n M\<^sub>n ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("LTL.M_consts",
     "~ ?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n false\<^sub>n",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))
             )
         )),
    ("LTL.U_consts",
     "~ ?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n false\<^sub>n",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0))
             )
         )),
    ("LTL.not\<^sub>n_size", "size (not\<^sub>n ?\<phi>) = size ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LTL.ltlc_to_ltln_atoms",
     "atoms_ltln (ltlc_to_ltln ?\<phi>) = atoms_ltlc ?\<phi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("LTL.atoms_pltl_sugar",
     "atoms_pltl (G\<^sub>p ?\<phi>) = atoms_pltl ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LTL.atoms_pltl_sugar",
     "atoms_pltl (F\<^sub>p ?\<phi>) = atoms_pltl ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LTL.atoms_pltl_sugar",
     "atoms_pltl (not\<^sub>p ?\<phi>) = atoms_pltl ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LTL.subfrmlsn_card", "card (subfrmlsn ?\<phi>) <= size ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("LTL.language_ltlc_negate",
     "language_ltlc (not\<^sub>c ?\<phi>) = - language_ltlc ?\<phi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("LTL.ltl_false_true_con",
     "?\<xi> \<Turnstile>\<^sub>c not\<^sub>c true\<^sub>c =
      ?\<xi> \<Turnstile>\<^sub>c false\<^sub>c",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app (template_hole 3, template_var 0), template_hole 0))),
    ("LTL.ltln_to_ltlc_semantics",
     "?w \<Turnstile>\<^sub>c ltln_to_ltlc ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.ltlc_to_ltln_semantics",
     "?w \<Turnstile>\<^sub>n ltlc_to_ltln ?\<phi> =
      ?w \<Turnstile>\<^sub>c ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.ltlr_to_ltln_semantics",
     "?w \<Turnstile>\<^sub>n ltlr_to_ltln ?\<phi> =
      ?w \<Turnstile>\<^sub>r ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.ltln_to_ltlr_semantics",
     "?w \<Turnstile>\<^sub>r ltln_to_ltlr ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.ltlc_to_pltl_semantics",
     "?w \<Turnstile>\<^sub>p ltlc_to_pltl ?\<phi> =
      ?w \<Turnstile>\<^sub>c ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.semantics_ltln_ite_simps",
     "?w \<Turnstile>\<^sub>n (if ?P then true\<^sub>n else false\<^sub>n) =
      ?P",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_hole 0)),
       template_var 0)),
    ("LTL.ltl_true_or_con",
     "?\<xi> \<Turnstile>\<^sub>c prop\<^sub>c(?p) or\<^sub>c not\<^sub>c prop\<^sub>c(?p)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 0))))
         )),
    ("LTL.not\<^sub>n_semantics",
     "?w \<Turnstile>\<^sub>n not\<^sub>n ?\<phi> =
      (~ ?w \<Turnstile>\<^sub>n ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("LTL.not\<^sub>r_semantics",
     "?w \<Turnstile>\<^sub>r not\<^sub>r ?\<phi> =
      (~ ?w \<Turnstile>\<^sub>r ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("LTL.semantics_pltl_sugar",
     "?w \<Turnstile>\<^sub>p not\<^sub>p ?\<phi> =
      (~ ?w \<Turnstile>\<^sub>p ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("LTL.ltlc_to_ltln'_correct",
     "?w \<Turnstile>\<^sub>n ltlc_to_ltln' False ?\<phi> =
      ?w \<Turnstile>\<^sub>c ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("LTL.R_consts",
     "?w \<Turnstile>\<^sub>n true\<^sub>n R\<^sub>n ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("LTL.M_consts",
     "?w \<Turnstile>\<^sub>n true\<^sub>n M\<^sub>n ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("LTL.U_consts",
     "?w \<Turnstile>\<^sub>n false\<^sub>n U\<^sub>n ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("LTL.W_consts",
     "?w \<Turnstile>\<^sub>n false\<^sub>n W\<^sub>n ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("LTL.semantics_ltln_ite_simps",
     "?w \<Turnstile>\<^sub>n (if ?P then false\<^sub>n else true\<^sub>n) =
      (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("LTL.atoms_pltl_sugar",
     "atoms_pltl (?\<phi> and\<^sub>p ?\<psi>) =
      atoms_pltl ?\<phi> Un atoms_pltl ?\<psi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("LTL.atoms_pltl_sugar",
     "atoms_pltl (?\<phi> or\<^sub>p ?\<psi>) =
      atoms_pltl ?\<phi> Un atoms_pltl ?\<psi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("LTL.semantics_ltlc_sugar",
     "?\<xi> \<Turnstile>\<^sub>c F\<^sub>c ?\<phi> =
      ?\<xi> \<Turnstile>\<^sub>c true\<^sub>c U\<^sub>c ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("LTL.semantics_ltlc_sugar",
     "?\<xi> \<Turnstile>\<^sub>c G\<^sub>c ?\<phi> =
      ?\<xi> \<Turnstile>\<^sub>c false\<^sub>c R\<^sub>c ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("LTL.ltlc_to_ltln'_correct",
     "?w \<Turnstile>\<^sub>n ltlc_to_ltln' True ?\<phi> =
      (~ ?w \<Turnstile>\<^sub>c ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("LTL.ltlc_to_ltln_size",
     "size (ltlc_to_ltln ?\<phi>) <= 2 * size ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)))),
    ("LTL.pw_eq_on_sym", "pw_eq_on ?S ?w ?w' ==> pw_eq_on ?S ?w' ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("LTL.ltl_Next_Neg_con",
     "?\<xi> \<Turnstile>\<^sub>c X\<^sub>c (not\<^sub>c ?\<phi>) =
      ?\<xi> \<Turnstile>\<^sub>c not\<^sub>c X\<^sub>c ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("LTL.M_consts",
     "?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n true\<^sub>n =
      ?w \<Turnstile>\<^sub>n F\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)))),
    ("LTL.W_consts",
     "?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n false\<^sub>n =
      ?w \<Turnstile>\<^sub>n G\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)))),
    ("LTL.ltlc_to_ltln'_correct",
     "size (ltlc_to_ltln' False ?\<phi>) <= 2 * size ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)))),
    ("LTL.ltlc_to_ltln'_correct",
     "size (ltlc_to_ltln' True ?\<phi>) <= 2 * size ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)))),
    ("LTL.subfrmlsn_subset",
     "?\<psi> : subfrmlsn ?\<phi> ==>
      subfrmlsn ?\<psi> <= subfrmlsn ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("LTL.subfrmlsr_subset",
     "?\<psi> : subfrmlsr ?\<phi> ==>
      subfrmlsr ?\<psi> <= subfrmlsr ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("LTL.suffix_comp", "(%i. ?f (suffix ?k ?w i)) = suffix ?k (?f o ?w)",
     template_equation
      (t_empty,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("LTL.semantics_pltl_sugar",
     "?w \<Turnstile>\<^sub>p G\<^sub>p ?\<phi> =
      (ALL i. suffix i ?w \<Turnstile>\<^sub>p ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("LTL.semantics_pltl_sugar",
     "?w \<Turnstile>\<^sub>p F\<^sub>p ?\<phi> =
      (EX i. suffix i ?w \<Turnstile>\<^sub>p ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("LTL.ltln_strong_to_weak",
     "?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n ?\<psi> ==>
      ?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.ltln_strong_to_weak",
     "?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n ?\<psi> ==>
      ?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.MOST_nat_add", "(MOST i. ?P i) = (MOST i. ?P (i + ?j))",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 1),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 1))),
    ("LTL.INFM_nat_add", "(INFM i. ?P i) = (INFM i. ?P (i + ?j))",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_hole 1),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 1))),
    ("LTL.semantics_ltlc_sugar",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> iff\<^sub>c ?\<psi> =
      (?\<xi> \<Turnstile>\<^sub>c ?\<phi> =
       ?\<xi> \<Turnstile>\<^sub>c ?\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("LTL.ltl_WeakUntil_Release_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> R\<^sub>c ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>c ?\<psi> W\<^sub>c (?\<phi> and\<^sub>c ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.ltl_StrongRelease_Until_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> M\<^sub>c ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>c ?\<psi> U\<^sub>c (?\<phi> and\<^sub>c ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.ltln_Release_to_WeakUntil",
     "?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n ?\<psi> W\<^sub>n (?\<phi> and\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.ltln_StrongRelease_to_Until",
     "?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n ?\<psi> U\<^sub>n (?\<phi> and\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.ltln_Until_to_StrongRelease",
     "?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n ?\<psi> M\<^sub>n (?\<phi> or\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.ltln_WeakUntil_to_Release",
     "?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n ?\<psi> R\<^sub>n (?\<phi> or\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.semantics_pltl_sugar",
     "?w \<Turnstile>\<^sub>p ?\<phi> and\<^sub>p ?\<psi> =
      (?w \<Turnstile>\<^sub>p ?\<phi> & ?w \<Turnstile>\<^sub>p ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("LTL.semantics_pltl_sugar",
     "?w \<Turnstile>\<^sub>p ?\<phi> or\<^sub>p ?\<psi> =
      (?w \<Turnstile>\<^sub>p ?\<phi> | ?w \<Turnstile>\<^sub>p ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("LTL.globally_release",
     "?w \<Turnstile>\<^sub>n G\<^sub>n (?\<phi> R\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n G\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("LTL.finally_until",
     "?w \<Turnstile>\<^sub>n F\<^sub>n (?\<phi> U\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n F\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("LTL.ltl_Until_Release_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> R\<^sub>c ?\<psi> =
      (~ ?\<xi> \<Turnstile>\<^sub>c not\<^sub>c ?\<phi> U\<^sub>c not\<^sub>c ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("LTL.ltl_Release_StrongRelease_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> R\<^sub>c ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>c ?\<phi> M\<^sub>c ?\<psi> or\<^sub>c G\<^sub>c ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("LTL.ltl_WeakUntil_StrongRelease_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> M\<^sub>c ?\<psi> =
      (~ ?\<xi> \<Turnstile>\<^sub>c not\<^sub>c ?\<phi> W\<^sub>c not\<^sub>c ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("LTL.ltl_Release_StrongRelease_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> M\<^sub>c ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>c ?\<phi> R\<^sub>c ?\<psi> and\<^sub>c F\<^sub>c ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("LTL.ltl_Until_Release_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> U\<^sub>c ?\<psi> =
      (~ ?\<xi> \<Turnstile>\<^sub>c not\<^sub>c ?\<phi> R\<^sub>c not\<^sub>c ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("LTL.ltl_Until_WeakUntil_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> U\<^sub>c ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>c ?\<phi> W\<^sub>c ?\<psi> and\<^sub>c F\<^sub>c ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("LTL.ltl_WeakUntil_StrongRelease_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> W\<^sub>c ?\<psi> =
      (~ ?\<xi> \<Turnstile>\<^sub>c not\<^sub>c ?\<phi> M\<^sub>c not\<^sub>c ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("LTL.ltl_Until_WeakUntil_con",
     "?\<xi> \<Turnstile>\<^sub>c ?\<phi> W\<^sub>c ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>c ?\<phi> U\<^sub>c ?\<psi> or\<^sub>c G\<^sub>c ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("LTL.next_release_distrib",
     "?w \<Turnstile>\<^sub>n X\<^sub>n (?\<phi> R\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n X\<^sub>n ?\<phi> R\<^sub>n X\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("LTL.next_strong_release_distrib",
     "?w \<Turnstile>\<^sub>n X\<^sub>n (?\<phi> M\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n X\<^sub>n ?\<phi> M\<^sub>n X\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("LTL.next_until_distrib",
     "?w \<Turnstile>\<^sub>n X\<^sub>n (?\<phi> U\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n X\<^sub>n ?\<phi> U\<^sub>n X\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("LTL.next_weak_until_distrib",
     "?w \<Turnstile>\<^sub>n X\<^sub>n (?\<phi> W\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n X\<^sub>n ?\<phi> W\<^sub>n X\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("LTL.pw_eq_on_suffix",
     "pw_eq_on ?S ?w ?w' ==> pw_eq_on ?S (suffix ?k ?w) (suffix ?k ?w')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("LTL.ltlc_eq_on",
     "pw_eq_on (atoms_ltlc ?\<phi>) ?w ?w' ==>
      ?w \<Turnstile>\<^sub>c ?\<phi> = ?w' \<Turnstile>\<^sub>c ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("LTL.ltln_weak_strong",
     "?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n G\<^sub>n ?\<psi> or\<^sub>n (?\<phi> M\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.ltln_strong_weak",
     "?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n F\<^sub>n ?\<phi> and\<^sub>n ?\<phi> R\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.ltln_strong_weak",
     "?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n F\<^sub>n ?\<psi> and\<^sub>n ?\<phi> W\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.ltln_weak_strong",
     "?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n G\<^sub>n ?\<phi> or\<^sub>n (?\<phi> U\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.globally_weak_until",
     "?w \<Turnstile>\<^sub>n G\<^sub>n (?\<phi> W\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n G\<^sub>n (?\<phi> or\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.finally_strong_release",
     "?w \<Turnstile>\<^sub>n F\<^sub>n (?\<phi> M\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n F\<^sub>n (?\<phi> and\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("LTL.subfrmlsn_size",
     "?\<psi> : subfrmlsn ?\<phi> ==>
      size ?\<psi> < size ?\<phi> | ?\<psi> = ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.subfrmlsr_size",
     "?\<psi> : subfrmlsr ?\<phi> ==>
      size ?\<psi> < size ?\<phi> | ?\<psi> = ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.pw_eq_on_subset",
     "[| ?S <= ?S'; pw_eq_on ?S' ?w ?w' |] ==> pw_eq_on ?S ?w ?w'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("LTL.ltlc_eq_on_aux",
     "[| pw_eq_on (atoms_ltlc ?\<phi>) ?w ?w';
         ?w \<Turnstile>\<^sub>c ?\<phi> |]
      ==> ?w' \<Turnstile>\<^sub>c ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("LTL.ltln_expand_Release",
     "?\<xi> \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>n ?\<psi> and\<^sub>n ?\<phi> or\<^sub>n X\<^sub>n (?\<phi> R\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))))))),
    ("LTL.ltln_expand_StrongRelease",
     "?\<xi> \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>n ?\<psi> and\<^sub>n ?\<phi> or\<^sub>n X\<^sub>n (?\<phi> M\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))))))),
    ("LTL.ltln_expand_Until",
     "?\<xi> \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>n ?\<psi> or\<^sub>n (?\<phi> and\<^sub>n X\<^sub>n (?\<phi> U\<^sub>n ?\<psi>))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))))))),
    ("LTL.ltln_expand_WeakUntil",
     "?\<xi> \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>n ?\<psi> or\<^sub>n (?\<phi> and\<^sub>n X\<^sub>n (?\<phi> W\<^sub>n ?\<psi>))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))))))),
    ("LTL.ltlr_expand_Release",
     "?\<xi> \<Turnstile>\<^sub>r ?\<phi> R\<^sub>r ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>r ?\<psi> and\<^sub>r ?\<phi> or\<^sub>r X\<^sub>r (?\<phi> R\<^sub>r ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))))))),
    ("LTL.ltlr_expand_Until",
     "?\<xi> \<Turnstile>\<^sub>r ?\<phi> U\<^sub>r ?\<psi> =
      ?\<xi> \<Turnstile>\<^sub>r ?\<psi> or\<^sub>r (?\<phi> and\<^sub>r X\<^sub>r (?\<phi> U\<^sub>r ?\<psi>))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))))))),
    ("LTL.GF_Inf_many",
     "?w \<Turnstile>\<^sub>n G\<^sub>n (F\<^sub>n ?\<phi>) =
      (INFM i. suffix i ?w \<Turnstile>\<^sub>n ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0))),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("LTL.FG_Alm_all",
     "?w \<Turnstile>\<^sub>n F\<^sub>n (G\<^sub>n ?\<phi>) =
      (MOST i. suffix i ?w \<Turnstile>\<^sub>n ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0))),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("LTL.suffix_range",
     "\<Union> (range ?\<xi>) <= ?APs ==>
      \<Union> (range (suffix ?k ?\<xi>)) <= ?APs",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_hole 1)),
         template_var 1))),
    ("LTL.pw_eq_on_trans",
     "[| pw_eq_on ?S ?w ?w'; pw_eq_on ?S ?w' ?w'' |]
      ==> pw_eq_on ?S ?w ?w''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("LTL.ltln_Release_alterdef",
     "?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n G\<^sub>n ?\<psi> or\<^sub>n (?\<psi> U\<^sub>n (?\<phi> and\<^sub>n ?\<psi>))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_hole 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("LTL.release_and_right_distrib",
     "?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n (?\<psi>\<^sub>1 and\<^sub>n ?\<psi>\<^sub>2) =
      ?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<psi>\<^sub>1 and\<^sub>n ?\<phi> R\<^sub>n ?\<psi>\<^sub>2",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("LTL.release_or_left_distrib",
     "?w \<Turnstile>\<^sub>n (?\<phi>\<^sub>1 or\<^sub>n ?\<phi>\<^sub>2) R\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n (?\<phi>\<^sub>1 R\<^sub>n ?\<psi>) or\<^sub>n (?\<phi>\<^sub>2 R\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("LTL.strong_release_and_right_distrib",
     "?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n (?\<psi>\<^sub>1 and\<^sub>n ?\<psi>\<^sub>2) =
      ?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n ?\<psi>\<^sub>1 and\<^sub>n ?\<phi> M\<^sub>n ?\<psi>\<^sub>2",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("LTL.strong_release_or_left_distrib",
     "?w \<Turnstile>\<^sub>n (?\<phi>\<^sub>1 or\<^sub>n ?\<phi>\<^sub>2) M\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n (?\<phi>\<^sub>1 M\<^sub>n ?\<psi>) or\<^sub>n (?\<phi>\<^sub>2 M\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("LTL.until_or_right_distrib",
     "?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n (?\<psi>\<^sub>1 or\<^sub>n ?\<psi>\<^sub>2) =
      ?w \<Turnstile>\<^sub>n (?\<phi> U\<^sub>n ?\<psi>\<^sub>1) or\<^sub>n (?\<phi> U\<^sub>n ?\<psi>\<^sub>2)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("LTL.until_and_left_distrib",
     "?w \<Turnstile>\<^sub>n (?\<phi>\<^sub>1 and\<^sub>n ?\<phi>\<^sub>2) U\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>\<^sub>1 U\<^sub>n ?\<psi> and\<^sub>n ?\<phi>\<^sub>2 U\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("LTL.weak_until_or_right_distrib",
     "?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n (?\<psi>\<^sub>1 or\<^sub>n ?\<psi>\<^sub>2) =
      ?w \<Turnstile>\<^sub>n (?\<phi> W\<^sub>n ?\<psi>\<^sub>1) or\<^sub>n (?\<phi> W\<^sub>n ?\<psi>\<^sub>2)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("LTL.weak_until_and_left_distrib",
     "?w \<Turnstile>\<^sub>n (?\<phi>\<^sub>1 and\<^sub>n ?\<phi>\<^sub>2) W\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>\<^sub>1 W\<^sub>n ?\<psi> and\<^sub>n ?\<phi>\<^sub>2 W\<^sub>n ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("LTL.GF_suffix",
     "suffix ?i ?w \<Turnstile>\<^sub>n G\<^sub>n (F\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n G\<^sub>n (F\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("LTL.FG_suffix",
     "suffix ?i ?w \<Turnstile>\<^sub>n F\<^sub>n (G\<^sub>n ?\<psi>) =
      ?w \<Turnstile>\<^sub>n F\<^sub>n (G\<^sub>n ?\<psi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("LTL.FG_suffix_G",
     "?w \<Turnstile>\<^sub>n F\<^sub>n (G\<^sub>n ?\<phi>) ==>
      MOST i. suffix i ?w \<Turnstile>\<^sub>n G\<^sub>n ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("LTL.ltln_weak_to_strong",
     "[| ?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<psi>;
         ?w \<Turnstile>\<^sub>n F\<^sub>n ?\<phi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.ltln_weak_to_strong",
     "[| ?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n ?\<psi>;
         ?w \<Turnstile>\<^sub>n F\<^sub>n ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("LTL.Alm_all_GF_F",
     "MOST i.
         suffix i ?w \<Turnstile>\<^sub>n G\<^sub>n (F\<^sub>n ?\<psi>) =
         suffix i ?w \<Turnstile>\<^sub>n F\<^sub>n ?\<psi>",
     template_predicate
      (
         template_app
          (template_app (template_hole 8, t_empty), template_hole 0)
         )),
    ("LTL.Alm_all_FG_G",
     "MOST i.
         suffix i ?w \<Turnstile>\<^sub>n F\<^sub>n (G\<^sub>n ?\<psi>) =
         suffix i ?w \<Turnstile>\<^sub>n G\<^sub>n ?\<psi>",
     template_predicate
      (
         template_app
          (template_app (template_hole 8, t_empty), template_hole 0)
         )),
    ("LTL.ltln_weak_to_strong",
     "[| ?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<psi>;
         ~ ?w \<Turnstile>\<^sub>n G\<^sub>n ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_hole 1),
                    template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.ltln_weak_to_strong",
     "[| ?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n ?\<psi>;
         ~ ?w \<Turnstile>\<^sub>n G\<^sub>n ?\<phi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("LTL.semantics_pltl_sugar",
     "?w \<Turnstile>\<^sub>p ?\<phi> R\<^sub>p ?\<psi> =
      (ALL i.
          suffix i ?w \<Turnstile>\<^sub>p ?\<psi> |
          (EX j<i. suffix j ?w \<Turnstile>\<^sub>p ?\<phi>))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("LTL.semantics_pltl_sugar",
     "?w \<Turnstile>\<^sub>p ?\<phi> M\<^sub>p ?\<psi> =
      (EX i. suffix i ?w \<Turnstile>\<^sub>p ?\<phi> &
             (ALL j<=i. suffix j ?w \<Turnstile>\<^sub>p ?\<psi>))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("LTL.semantics_pltl_sugar",
     "?w \<Turnstile>\<^sub>p ?\<phi> W\<^sub>p ?\<psi> =
      (ALL i.
          suffix i ?w \<Turnstile>\<^sub>p ?\<phi> |
          (EX j<=i. suffix j ?w \<Turnstile>\<^sub>p ?\<psi>))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("LTL.map_semantics_ltlc",
     "[| inj_on ?f (dom ?f); atoms_ltlc ?\<phi> <= dom ?f |]
      ==> ?\<xi> \<Turnstile>\<^sub>c ?\<phi> =
          (map_props ?f o
           ?\<xi>) \<Turnstile>\<^sub>c map_ltlc (the o ?f) ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 2))
            ),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_app (template_hole 10, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2)),
             template_var 1))))),
    ("LTL.map_semantics_ltlc_inv",
     "[| inj_on ?f (dom ?f); atoms_ltlc ?\<phi> <= dom ?f |]
      ==> ?\<xi> \<Turnstile>\<^sub>c map_ltlc (the o ?f) ?\<phi> =
          (%i. (the o ?f) -` ?\<xi> i) \<Turnstile>\<^sub>c ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 2))
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 1)))),
    ("LTL.map_semantics_ltlc_aux",
     "[| inj_on ?f ?APs; \<Union> (range ?w) <= ?APs;
         atoms_ltlc ?\<phi> <= ?APs |]
      ==> ?w \<Turnstile>\<^sub>c ?\<phi> =
          (%i. ?f ` ?w i) \<Turnstile>\<^sub>c map_ltlc ?f ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("LTL.size_set_diff",
     "[| finite ?S; ?S' <= ?S |]
      ==> size_set (?S - ?S') = size_set ?S - size_set ?S'",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 9, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 9, t_empty), template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.LTLMoreTemplates"
### 0.427s elapsed time, 0.688s cpu time, 0.075s GC time
val it = (): unit
