Loading theory "HOL-Library.Infinite_Set" (required by "Draft.RewritingMoreTemplates" via "Draft.Rewriting" via "Draft.LTL" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RewritingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RewritingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.RewritingMoreTemplates" via "Draft.Rewriting" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.620s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RewritingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.311s elapsed time, 1.242s cpu time, 0.131s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.RewritingMoreTemplates" via "Draft.Rewriting" via "Draft.LTL")
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.361s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RewritingMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.808s cpu time, 0.087s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RewritingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.470s elapsed time, 1.877s cpu time, 0.263s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.RewritingMoreTemplates" via "Draft.Rewriting" via "HOL-Library.Extended_Nat")
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.351s elapsed time, 1.381s cpu time, 0.270s GC time
Loading theory "Draft.LTL" (required by "Draft.RewritingMoreTemplates" via "Draft.Rewriting")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### Additional type variable(s) in locale specification "countable": 'a
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.130s elapsed time, 4.316s cpu time, 1.062s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RewritingMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.372s elapsed time, 5.283s cpu time, 1.080s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.RewritingMoreTemplates" via "Draft.Rewriting" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.757s elapsed time, 2.808s cpu time, 1.131s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.RewritingMoreTemplates" via "Draft.Rewriting" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
### theory "HOL-Library.BigO"
### 1.139s elapsed time, 4.314s cpu time, 1.281s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.538s elapsed time, 9.423s cpu time, 2.401s GC time
Loading theory "Draft.Templates" (required by "Draft.RewritingMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.178s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RewritingMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
consts
  semantics_ltlc :: "(nat => 'a set) => 'a ltlc => bool"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.613s elapsed time, 1.862s cpu time, 0.155s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.166s elapsed time, 5.776s cpu time, 1.328s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.RewritingMoreTemplates" via "Draft.Rewriting" via "HOL-Library.Extended_Nat")
consts
  semantics_ltln :: "(nat => 'a set) => 'a ltln => bool"
### theory "HOL-Library.Order_Continuity"
### 0.432s elapsed time, 0.887s cpu time, 0.037s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.RewritingMoreTemplates" via "Draft.Rewriting")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.569s elapsed time, 1.305s cpu time, 0.146s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  semantics_ltlr :: "(nat => 'a set) => 'a ltlr => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.LTL"
### 7.962s elapsed time, 18.563s cpu time, 3.983s GC time
Loading theory "Draft.Rewriting" (required by "Draft.RewritingMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "syntactical_implies"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Rewriting"
### 3.645s elapsed time, 4.273s cpu time, 0.451s GC time
Loading theory "Draft.RewritingMoreTemplates"
val templateLemmas =
   [("Rewriting.mk_next_pow_simp", "X\<^sub>n' 0 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Rewriting.mk_next_atoms",
     "atoms_ltln (mk_next ?\<phi>) = atoms_ltln ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.is_constant_constructors_simps2",
     "is_constant (mk_finally ?x) = is_constant ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.is_constant_constructors_simps2",
     "is_constant (mk_globally ?x) = is_constant ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.is_constant_constructors_simps2",
     "is_constant (mk_next ?x) = is_constant ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.mk_next_pow_simp", "X\<^sub>n' 1 ?x = mk_next ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Rewriting.rewrite_modal_size",
     "size (rewrite_modal ?\<phi>) <= size ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.mk_finally_atoms",
     "atoms_ltln (mk_finally ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.mk_globally_atoms",
     "atoms_ltln (mk_globally ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.remove_strong_ops_atoms",
     "atoms_ltln (remove_strong_ops ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.remove_weak_ops_atoms",
     "atoms_ltln (remove_weak_ops ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.rewrite_X_atoms",
     "atoms_ltln (rewrite_X ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.rewrite_iter_fast_atoms",
     "atoms_ltln (rewrite_iter_fast ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.rewrite_iter_slow_atoms",
     "atoms_ltln (rewrite_iter_slow ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.rewrite_modal_atoms",
     "atoms_ltln (rewrite_modal ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.rewrite_syn_imp_atoms",
     "atoms_ltln (rewrite_syn_imp ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.mk_next_pow_atoms",
     "atoms_ltln (X\<^sub>n' ?n ?\<phi>) = atoms_ltln ?\<phi>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.is_constant_constructors_simps",
     "is_constant (X\<^sub>n' ?n ?x) = is_constant ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.is_constant_constructors_simps2",
     "is_constant (mk_release ?y ?x) = is_constant ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.is_constant_constructors_simps2",
     "is_constant (mk_until ?y ?x) = is_constant ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.rewrite_X_enat_atoms",
     "atoms_ltln (fst (rewrite_X_enat ?\<phi>)) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Rewriting.simplify_atoms",
     "atoms_ltln (simplify ?m ?\<phi>) <= atoms_ltln ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rewriting.is_constant_constructorsI",
     "is_constant ?x ==> is_constant (mk_finally ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Rewriting.is_constant_constructorsI",
     "is_constant ?x ==> is_constant (mk_globally ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Rewriting.is_constant_constructorsI",
     "is_constant ?x ==> is_constant (mk_next ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Rewriting.rewrite_X_sound",
     "?w \<Turnstile>\<^sub>n rewrite_X ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Rewriting.rewrite_iter_fast_sound",
     "?w \<Turnstile>\<^sub>n rewrite_iter_fast ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Rewriting.rewrite_iter_slow_sound",
     "?w \<Turnstile>\<^sub>n rewrite_iter_slow ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Rewriting.rewrite_modal_sound",
     "?w \<Turnstile>\<^sub>n rewrite_modal ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Rewriting.rewrite_syn_imp_sound",
     "?w \<Turnstile>\<^sub>n rewrite_syn_imp ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Rewriting.is_constant_constructorsI",
     "is_constant ?x ==> is_constant (X\<^sub>n' ?n ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Rewriting.is_constant_constructorsI",
     "is_constant ?x ==> is_constant (mk_release ?y ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Rewriting.is_constant_constructorsI",
     "is_constant ?x ==> is_constant (mk_until ?y ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Rewriting.mk_next_semantics",
     "?w \<Turnstile>\<^sub>n mk_next ?x =
      ?w \<Turnstile>\<^sub>n X\<^sub>n ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Rewriting.is_constant_constructors_simps",
     "(X\<^sub>n' ?n ?x = false\<^sub>n) = (?x = false\<^sub>n)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Rewriting.is_constant_constructors_simps",
     "(X\<^sub>n' ?n ?x = true\<^sub>n) = (?x = true\<^sub>n)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Rewriting.simplify_correct",
     "?w \<Turnstile>\<^sub>n simplify ?m ?\<phi> =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 0))),
    ("Rewriting.is_constant_constructorsI",
     "~ is_constant ?x ==> ~ is_constant (mk_finally ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Rewriting.is_constant_constructorsI",
     "~ is_constant ?x ==> ~ is_constant (mk_globally ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Rewriting.is_constant_constructorsI",
     "~ is_constant ?x ==> ~ is_constant (mk_next ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Rewriting.eq_i_oI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Rewriting.eq_o_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Rewriting.mk_finally_semantics",
     "?w \<Turnstile>\<^sub>n mk_finally ?x =
      ?w \<Turnstile>\<^sub>n F\<^sub>n ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Rewriting.mk_globally_semantics",
     "?w \<Turnstile>\<^sub>n mk_globally ?x =
      ?w \<Turnstile>\<^sub>n G\<^sub>n ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Rewriting.rewrite_X_enat_infinity_invariant",
     "(snd (rewrite_X_enat ?\<phi>) = \<infinity>) =
      is_constant (fst (rewrite_X_enat ?\<phi>))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_hole 2),
       template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("Rewriting.mk_and_atoms",
     "atoms_ltln (mk_and ?\<phi> ?\<psi>)
      <= atoms_ltln ?\<phi> Un atoms_ltln ?\<psi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Rewriting.mk_or_atoms",
     "atoms_ltln (mk_or ?\<phi> ?\<psi>)
      <= atoms_ltln ?\<phi> Un atoms_ltln ?\<psi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Rewriting.mk_release_atoms",
     "atoms_ltln (mk_release ?\<phi> ?\<psi>)
      <= atoms_ltln ?\<phi> Un atoms_ltln ?\<psi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Rewriting.mk_strong_release_atoms",
     "atoms_ltln (mk_strong_release ?\<phi> ?\<psi>)
      <= atoms_ltln ?\<phi> Un atoms_ltln ?\<psi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Rewriting.mk_until_atoms",
     "atoms_ltln (mk_until ?\<phi> ?\<psi>)
      <= atoms_ltln ?\<phi> Un atoms_ltln ?\<psi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Rewriting.mk_weak_until_atoms",
     "atoms_ltln (mk_weak_until ?\<phi> ?\<psi>)
      <= atoms_ltln ?\<phi> Un atoms_ltln ?\<psi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Rewriting.is_constant_constructorsI",
     "~ is_constant ?x ==> ~ is_constant (mk_release ?y ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))
               )
           ))),
    ("Rewriting.is_constant_constructorsI",
     "~ is_constant ?x ==> ~ is_constant (mk_until ?y ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))
               )
           ))),
    ("Rewriting.eq_i_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Rewriting.syntactical_implies_i_iI",
     "?x \<turnstile>\<^sub>s ?xa ==>
      pred.eval (syntactical_implies_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Rewriting.mk_and_semantics",
     "?w \<Turnstile>\<^sub>n mk_and ?x ?y =
      ?w \<Turnstile>\<^sub>n ?x and\<^sub>n ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rewriting.mk_next_pow_semantics",
     "?w \<Turnstile>\<^sub>n X\<^sub>n' ?i ?x =
      suffix ?i ?w \<Turnstile>\<^sub>n ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Rewriting.mk_or_semantics",
     "?w \<Turnstile>\<^sub>n mk_or ?x ?y =
      ?w \<Turnstile>\<^sub>n ?x or\<^sub>n ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rewriting.mk_release_semantics",
     "?w \<Turnstile>\<^sub>n mk_release ?x ?y =
      ?w \<Turnstile>\<^sub>n ?x R\<^sub>n ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rewriting.mk_strong_release_semantics",
     "?w \<Turnstile>\<^sub>n mk_strong_release ?x ?y =
      ?w \<Turnstile>\<^sub>n ?x M\<^sub>n ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rewriting.mk_until_semantics",
     "?w \<Turnstile>\<^sub>n mk_until ?x ?y =
      ?w \<Turnstile>\<^sub>n ?x U\<^sub>n ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rewriting.mk_weak_until_semantics",
     "?w \<Turnstile>\<^sub>n mk_weak_until ?x ?y =
      ?w \<Turnstile>\<^sub>n ?x W\<^sub>n ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rewriting.mk_next_pow_dist",
     "X\<^sub>n' (?i + ?j) ?\<phi> = X\<^sub>n' ?i (X\<^sub>n' ?j ?\<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Rewriting.remove_weak_ops_sound",
     "?w \<Turnstile>\<^sub>n G\<^sub>n remove_weak_ops ?y =
      ?w \<Turnstile>\<^sub>n G\<^sub>n ?y",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Rewriting.remove_strong_ops_sound",
     "?w \<Turnstile>\<^sub>n F\<^sub>n remove_strong_ops ?y =
      ?w \<Turnstile>\<^sub>n F\<^sub>n ?y",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Rewriting.suspendable_formula_simp",
     "suspendable ?\<xi> ==>
      ?w \<Turnstile>\<^sub>n X\<^sub>n ?\<xi> =
      ?w \<Turnstile>\<^sub>n ?\<xi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Rewriting.is_constant_constructorsI",
     "[| is_constant ?x; is_constant ?y |] ==> is_constant (mk_and ?x ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Rewriting.is_constant_constructorsI",
     "[| is_constant ?x; is_constant ?y |] ==> is_constant (mk_or ?x ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Rewriting.is_constant_constructorsI",
     "[| is_constant ?x; is_constant ?y |]
      ==> is_constant (mk_strong_release ?x ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Rewriting.is_constant_constructorsI",
     "[| is_constant ?x; is_constant ?y |]
      ==> is_constant (mk_weak_until ?x ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Rewriting.release_constant_simp",
     "is_constant ?\<psi> ==>
      ?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Rewriting.until_constant_simp",
     "is_constant ?\<psi> ==>
      ?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n ?\<psi> =
      ?w \<Turnstile>\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Rewriting.pure_eventual_until_simp",
     "pure_eventual ?\<mu> ==>
      ?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n ?\<mu> =
      ?w \<Turnstile>\<^sub>n ?\<mu>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Rewriting.pure_universal_release_simp",
     "pure_universal ?\<nu> ==>
      ?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<nu> =
      ?w \<Turnstile>\<^sub>n ?\<nu>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Rewriting.suspendable_formula_simp",
     "suspendable ?\<xi> ==>
      ?w \<Turnstile>\<^sub>n ?\<phi> R\<^sub>n ?\<xi> =
      ?w \<Turnstile>\<^sub>n ?\<xi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Rewriting.suspendable_formula_simp",
     "suspendable ?\<xi> ==>
      ?w \<Turnstile>\<^sub>n ?\<phi> U\<^sub>n ?\<xi> =
      ?w \<Turnstile>\<^sub>n ?\<xi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Rewriting.suspendable_prefix_invariant",
     "suspendable ?\<xi> ==>
      (?u \<frown> ?w) \<Turnstile>\<^sub>n ?\<xi> =
      ?w \<Turnstile>\<^sub>n ?\<xi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Rewriting.syntactical_implies_correct",
     "[| ?\<phi> \<turnstile>\<^sub>s ?\<psi>;
         ?w \<Turnstile>\<^sub>n ?\<phi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Rewriting.rewrite_X_enat_correct",
     "?w \<Turnstile>\<^sub>n ?\<phi> =
      ?w \<Turnstile>\<^sub>n to_ltln (rewrite_X_enat ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)))),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Rewriting.pure_eventual_left_append",
     "[| pure_eventual ?\<mu>; ?w \<Turnstile>\<^sub>n ?\<mu> |]
      ==> (?u \<frown> ?w) \<Turnstile>\<^sub>n ?\<mu>",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Rewriting.pure_universal_suffix_closed",
     "[| pure_universal ?\<nu>;
         (?u \<frown> ?w) \<Turnstile>\<^sub>n ?\<nu> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<nu>",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 2)
           ))),
    ("Rewriting.is_constant_constructorsI",
     "[| ~ is_constant ?x; ~ is_constant ?y |]
      ==> ~ is_constant (mk_and ?x ?y)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Rewriting.is_constant_constructorsI",
     "[| ~ is_constant ?x; ~ is_constant ?y |]
      ==> ~ is_constant (mk_or ?x ?y)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Rewriting.is_constant_constructorsI",
     "[| ~ is_constant ?x; ~ is_constant ?y |]
      ==> ~ is_constant (mk_strong_release ?x ?y)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Rewriting.is_constant_constructorsI",
     "[| ~ is_constant ?x; ~ is_constant ?y |]
      ==> ~ is_constant (mk_weak_until ?x ?y)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Rewriting.eq_i_oE",
     "[| pred.eval (eq_i_o ?x) ?xa; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Rewriting.eq_o_iE",
     "[| pred.eval (eq_o_i ?xa) ?x; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Rewriting.is_constant_semantics",
     "is_constant ?\<phi> ==>
      (ALL w. w \<Turnstile>\<^sub>n ?\<phi>) |
      (\<nexists>w. w \<Turnstile>\<^sub>n ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_hole 1, template_app (template_hole 0, t_empty)))
           ))),
    ("Rewriting.eq_i_iE",
     "[| pred.eval (eq_i_i ?x ?xa) ?y; Predicate.eq ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Rewriting.syntactical_implies_i_iE",
     "[| pred.eval (syntactical_implies_i_i ?x ?xa) ?y;
         ?x \<turnstile>\<^sub>s ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Rewriting.combine_mk_atoms",
     "atoms_ltln (fst (combine mk_and ?x ?y))
      <= atoms_ltln (fst ?x) Un atoms_ltln (fst ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))))),
    ("Rewriting.combine_mk_atoms",
     "atoms_ltln (fst (combine mk_or ?x ?y))
      <= atoms_ltln (fst ?x) Un atoms_ltln (fst ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))))),
    ("Rewriting.combine_mk_atoms",
     "atoms_ltln (fst (combine mk_release ?x ?y))
      <= atoms_ltln (fst ?x) Un atoms_ltln (fst ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))))),
    ("Rewriting.combine_mk_atoms",
     "atoms_ltln (fst (combine mk_strong_release ?x ?y))
      <= atoms_ltln (fst ?x) Un atoms_ltln (fst ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))))),
    ("Rewriting.combine_mk_atoms",
     "atoms_ltln (fst (combine mk_until ?x ?y))
      <= atoms_ltln (fst ?x) Un atoms_ltln (fst ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))))),
    ("Rewriting.combine_mk_atoms",
     "atoms_ltln (fst (combine mk_weak_until ?x ?y))
      <= atoms_ltln (fst ?x) Un atoms_ltln (fst ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))))),
    ("Rewriting.iterate_atoms",
     "(!!\<phi>. atoms_ltln (?f \<phi>) <= atoms_ltln \<phi>) ==>
      atoms_ltln (iterate ?f ?\<phi> ?n) <= atoms_ltln ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Rewriting.pure_eventual_strong_release_simp",
     "[| pure_eventual ?\<phi>; pure_eventual ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n ?\<psi> =
          ?w \<Turnstile>\<^sub>n ?\<phi> and\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Rewriting.pure_universal_weak_until_simp",
     "[| pure_universal ?\<phi>; pure_universal ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n ?\<psi> =
          ?w \<Turnstile>\<^sub>n ?\<phi> or\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Rewriting.suspendable_formula_simp2",
     "[| suspendable ?\<phi>; suspendable ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<phi> M\<^sub>n ?\<psi> =
          ?w \<Turnstile>\<^sub>n ?\<phi> and\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Rewriting.suspendable_formula_simp2",
     "[| suspendable ?\<phi>; suspendable ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<phi> W\<^sub>n ?\<psi> =
          ?w \<Turnstile>\<^sub>n ?\<phi> or\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Rewriting.is_constant_constructors_simps2",
     "is_constant (mk_and ?x ?y) =
      (?x = true\<^sub>n & ?y = true\<^sub>n |
       ?x = false\<^sub>n | ?y = false\<^sub>n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0)))
           ))),
    ("Rewriting.is_constant_constructors_simps2",
     "is_constant (mk_or ?x ?y) =
      (?x = false\<^sub>n & ?y = false\<^sub>n |
       ?x = true\<^sub>n | ?y = true\<^sub>n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0)))
           ))),
    ("Rewriting.is_constant_constructors_simps3",
     "is_constant (mk_strong_release ?x ?y) =
      (?x = true\<^sub>n & ?y = true\<^sub>n |
       ?x = false\<^sub>n | ?y = false\<^sub>n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0)))
           ))),
    ("Rewriting.is_constant_constructors_simps3",
     "is_constant (mk_weak_until ?x ?y) =
      (?x = false\<^sub>n & ?y = false\<^sub>n |
       ?x = true\<^sub>n | ?y = true\<^sub>n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0)))
           ))),
    ("Rewriting.iterate_sound",
     "(!!\<phi>.
          ?w \<Turnstile>\<^sub>n ?f \<phi> =
          ?w \<Turnstile>\<^sub>n \<phi>) ==>
      ?w \<Turnstile>\<^sub>n iterate ?f ?\<phi> ?n =
      ?w \<Turnstile>\<^sub>n ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 1)))),
    ("Rewriting.fst_combine",
     "fst (combine ?binop (?\<phi>, ?i) (?\<psi>, ?j)) =
      ?binop (X\<^sub>n' (the_enat_0 (?i - ?j)) ?\<phi>)
       (X\<^sub>n' (the_enat_0 (?j - ?i)) ?\<psi>)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_var 4,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_var 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 1)))),
    ("Rewriting.mk_next_pow_release",
     "suffix (min ?i ?j)
       ?w \<Turnstile>\<^sub>n X\<^sub>n' (?i - ?j)
                                ?\<phi> R\<^sub>n X\<^sub>n' (?j - ?i)
             ?\<psi> =
      ?w \<Turnstile>\<^sub>n X\<^sub>n' ?i
                               ?\<phi> R\<^sub>n X\<^sub>n' ?j ?\<psi>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 0))),
       template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("Rewriting.mk_next_pow_until",
     "suffix (min ?i ?j)
       ?w \<Turnstile>\<^sub>n X\<^sub>n' (?i - ?j)
                                ?\<phi> U\<^sub>n X\<^sub>n' (?j - ?i)
             ?\<psi> =
      ?w \<Turnstile>\<^sub>n X\<^sub>n' ?i
                               ?\<phi> U\<^sub>n X\<^sub>n' ?j ?\<psi>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 0))),
       template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0))))),
    ("Rewriting.combine_atoms",
     "(!!\<phi> \<psi>.
          atoms_ltln (?f \<phi> \<psi>)
          <= atoms_ltln \<phi> Un atoms_ltln \<psi>) ==>
      atoms_ltln (fst (combine ?f ?x ?y))
      <= atoms_ltln (fst ?x) Un atoms_ltln (fst ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)))))),
    ("Rewriting.combine_infinity_invariant",
     "[| (?i = \<infinity>) = is_constant ?x;
         (?j = \<infinity>) = is_constant ?y;
         combine mk_and (?x, ?i) (?y, ?j) = (?z, ?k) |]
      ==> (?k = \<infinity>) = is_constant ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_app (template_hole 4, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_hole 5),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 5)),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_hole 5),
         template_app (template_hole 4, template_var 1)))),
    ("Rewriting.combine_infinity_invariant",
     "[| (?i = \<infinity>) = is_constant ?x;
         (?j = \<infinity>) = is_constant ?y;
         combine mk_or (?x, ?i) (?y, ?j) = (?z, ?k) |]
      ==> (?k = \<infinity>) = is_constant ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_app (template_hole 4, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_hole 5),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 5)),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_hole 5),
         template_app (template_hole 4, template_var 1)))),
    ("Rewriting.combine_infinity_invariant",
     "[| (?i = \<infinity>) = is_constant ?x;
         (?j = \<infinity>) = is_constant ?y;
         combine mk_release (?x, ?i) (?y, ?j) = (?z, ?k) |]
      ==> (?k = \<infinity>) = is_constant ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_app (template_hole 4, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_hole 5),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 5)),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_hole 5),
         template_app (template_hole 4, template_var 1)))),
    ("Rewriting.combine_infinity_invariant",
     "[| (?i = \<infinity>) = is_constant ?x;
         (?j = \<infinity>) = is_constant ?y;
         combine mk_strong_release (?x, ?i) (?y, ?j) = (?z, ?k) |]
      ==> (?k = \<infinity>) = is_constant ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_app (template_hole 4, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_hole 5),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 5)),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_hole 5),
         template_app (template_hole 4, template_var 1)))),
    ("Rewriting.combine_infinity_invariant",
     "[| (?i = \<infinity>) = is_constant ?x;
         (?j = \<infinity>) = is_constant ?y;
         combine mk_until (?x, ?i) (?y, ?j) = (?z, ?k) |]
      ==> (?k = \<infinity>) = is_constant ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_app (template_hole 4, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_hole 5),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 5)),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_hole 5),
         template_app (template_hole 4, template_var 1)))),
    ("Rewriting.combine_infinity_invariant",
     "[| (?i = \<infinity>) = is_constant ?x;
         (?j = \<infinity>) = is_constant ?y;
         combine mk_weak_until (?x, ?i) (?y, ?j) = (?z, ?k) |]
      ==> (?k = \<infinity>) = is_constant ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 5),
            template_hole 5),
          template_app (template_hole 4, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_hole 5),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_hole 1),
              template_app
               (template_app (template_hole 0, template_var 4),
                template_var 5)),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 3)),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_hole 5),
         template_app (template_hole 4, template_var 1)))),
    ("Rewriting.combine_and_or_semantics",
     "[| (?i = \<infinity>) = is_constant ?\<phi>;
         (?j = \<infinity>) = is_constant ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n to_ltln
                                   (combine mk_and (?\<phi>, ?i)
                                     (?\<psi>, ?j)) =
          ?w \<Turnstile>\<^sub>n to_ltln
                                   (?\<phi>,
                                    ?i) and\<^sub>n to_ltln (?\<psi>, ?j)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_hole 10),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_hole 10),
          template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2))))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))))),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2)))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)))))))),
    ("Rewriting.combine_and_or_semantics",
     "[| (?i = \<infinity>) = is_constant ?\<phi>;
         (?j = \<infinity>) = is_constant ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n to_ltln
                                   (combine mk_or (?\<phi>, ?i)
                                     (?\<psi>, ?j)) =
          ?w \<Turnstile>\<^sub>n to_ltln
                                   (?\<phi>,
                                    ?i) or\<^sub>n to_ltln (?\<psi>, ?j)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_hole 10),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_hole 10),
          template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2))))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))))),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2)))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)))))))),
    ("Rewriting.combine_until_release_semantics",
     "[| (?i = \<infinity>) = is_constant ?\<phi>;
         (?j = \<infinity>) = is_constant ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n to_ltln
                                   (combine mk_release (?\<phi>, ?i)
                                     (?\<psi>, ?j)) =
          ?w \<Turnstile>\<^sub>n to_ltln
                                   (?\<phi>,
                                    ?i) R\<^sub>n to_ltln (?\<psi>, ?j)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_hole 10),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_hole 10),
          template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2))))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))))),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2)))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)))))))),
    ("Rewriting.combine_weak_until_strong_release_semantics",
     "[| (?i = \<infinity>) = is_constant ?\<phi>;
         (?j = \<infinity>) = is_constant ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n to_ltln
                                   (combine mk_strong_release (?\<phi>, ?i)
                                     (?\<psi>, ?j)) =
          ?w \<Turnstile>\<^sub>n to_ltln
                                   (?\<phi>,
                                    ?i) M\<^sub>n to_ltln (?\<psi>, ?j)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_hole 10),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_hole 10),
          template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2))))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))))),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2)))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)))))))),
    ("Rewriting.combine_until_release_semantics",
     "[| (?i = \<infinity>) = is_constant ?\<phi>;
         (?j = \<infinity>) = is_constant ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n to_ltln
                                   (combine mk_until (?\<phi>, ?i)
                                     (?\<psi>, ?j)) =
          ?w \<Turnstile>\<^sub>n to_ltln
                                   (?\<phi>,
                                    ?i) U\<^sub>n to_ltln (?\<psi>, ?j)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_hole 10),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_hole 10),
          template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2))))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))))),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2)))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)))))))),
    ("Rewriting.combine_weak_until_strong_release_semantics",
     "[| (?i = \<infinity>) = is_constant ?\<phi>;
         (?j = \<infinity>) = is_constant ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n to_ltln
                                   (combine mk_weak_until (?\<phi>, ?i)
                                     (?\<psi>, ?j)) =
          ?w \<Turnstile>\<^sub>n to_ltln
                                   (?\<phi>,
                                    ?i) W\<^sub>n to_ltln (?\<psi>, ?j)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_hole 10),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_hole 10),
          template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2))))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))))),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4)))),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 4)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2)))),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))))))))]:
   (string * thm * template) list
### theory "Draft.RewritingMoreTemplates"
### 0.473s elapsed time, 0.600s cpu time, 0.000s GC time
val it = (): unit
