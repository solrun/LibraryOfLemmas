Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.Equivalence_Relations" via "Draft.LTL" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.537s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.865s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.304s elapsed time, 1.202s cpu time, 0.122s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.Equivalence_Relations" via "Draft.LTL")
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.336s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.299s elapsed time, 1.175s cpu time, 0.095s GC time
Loading theory "Draft.LTL" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.Equivalence_Relations")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.059s elapsed time, 4.026s cpu time, 0.998s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.151s elapsed time, 4.217s cpu time, 1.020s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.292s elapsed time, 7.283s cpu time, 2.040s GC time
Loading theory "Draft.Templates" (required by "Draft.Equivalence_RelationsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.139s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Equivalence_RelationsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.542s elapsed time, 1.113s cpu time, 0.073s GC time
consts
  semantics_ltlc :: "(nat => 'a set) => 'a ltlc => bool"
consts
  semantics_ltln :: "(nat => 'a set) => 'a ltln => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  semantics_ltlr :: "(nat => 'a set) => 'a ltlr => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.LTL"
### 7.072s elapsed time, 11.928s cpu time, 2.513s GC time
Loading theory "Draft.Equivalence_Relations" (required by "Draft.Equivalence_RelationsMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No map function defined for LTL.ltln. This will cause problems later on.
instantiation
  ltln\<^sub>L :: (type) equal
  equal_ltln\<^sub>L == equal_class.equal ::
    'a ltln\<^sub>L => 'a ltln\<^sub>L => bool
### No map function defined for LTL.ltln. This will cause problems later on.
instantiation
  ltln\<^sub>P :: (type) equal
  equal_ltln\<^sub>P == equal_class.equal ::
    'a ltln\<^sub>P => 'a ltln\<^sub>P => bool
### No map function defined for LTL.ltln. This will cause problems later on.
instantiation
  ltln\<^sub>C :: (type) equal
  equal_ltln\<^sub>C == equal_class.equal ::
    'a ltln\<^sub>C => 'a ltln\<^sub>C => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale ltl_equivalence
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
  assumes "ltl_equivalence (\<sim>)"
### theory "Draft.Equivalence_Relations"
### 1.472s elapsed time, 1.833s cpu time, 0.188s GC time
Loading theory "Draft.Equivalence_RelationsMoreTemplates"
val templateLemmas =
   [("Equivalence_Relations.nested_prop_atoms_finite",
     "finite (nested_prop_atoms ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Equivalence_Relations.prop_atoms_finite",
     "finite (prop_atoms ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Equivalence_Relations.nested_prop_atoms_notin",
     "false\<^sub>n ~: nested_prop_atoms ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Equivalence_Relations.prop_atoms_notin",
     "false\<^sub>n ~: prop_atoms ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Equivalence_Relations.nested_prop_atoms_notin",
     "true\<^sub>n ~: nested_prop_atoms ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Equivalence_Relations.prop_atoms_notin",
     "true\<^sub>n ~: prop_atoms ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Equivalence_Relations.nested_prop_atoms_subfrmlsn",
     "nested_prop_atoms ?\<phi> <= subfrmlsn ?\<phi>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Equivalence_Relations.prop_atoms_nested_prop_atoms",
     "prop_atoms ?\<phi> <= nested_prop_atoms ?\<phi>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Equivalence_Relations.prop_atoms_subfrmlsn",
     "prop_atoms ?\<phi> <= subfrmlsn ?\<phi>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Equivalence_Relations.nested_prop_atoms_notin",
     "?\<phi>\<^sub>1 and\<^sub>n ?\<phi>\<^sub>2
      ~: nested_prop_atoms ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Equivalence_Relations.prop_atoms_notin",
     "?\<phi>\<^sub>1 and\<^sub>n ?\<phi>\<^sub>2 ~: prop_atoms ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Equivalence_Relations.nested_prop_atoms_notin",
     "?\<phi>\<^sub>1 or\<^sub>n ?\<phi>\<^sub>2
      ~: nested_prop_atoms ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Equivalence_Relations.prop_atoms_notin",
     "?\<phi>\<^sub>1 or\<^sub>n ?\<phi>\<^sub>2 ~: prop_atoms ?\<phi>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Equivalence_Relations.ltl_const_equiv_implies_prop_equiv",
     "?\<phi> \<sim>\<^sub>C false\<^sub>n =
      ?\<phi> \<sim>\<^sub>P false\<^sub>n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Equivalence_Relations.ltl_const_equiv_implies_prop_equiv",
     "?\<phi> \<sim>\<^sub>C true\<^sub>n =
      ?\<phi> \<sim>\<^sub>P true\<^sub>n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Equivalence_Relations.ltl_prop_equiv_true",
     "?\<phi> \<sim>\<^sub>P true\<^sub>n =
      {} \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Equivalence_Relations.ltl_const_equiv_const",
     "?\<phi> \<sim>\<^sub>C false\<^sub>n = (eval ?\<phi> = No)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Equivalence_Relations.ltl_const_equiv_const",
     "?\<phi> \<sim>\<^sub>C true\<^sub>n = (eval ?\<phi> = Yes)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Equivalence_Relations.ltl_prop_equiv_false",
     "?\<phi> \<sim>\<^sub>P false\<^sub>n =
      (~ UNIV \<Turnstile>\<^sub>P ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Equivalence_Relations.eval_prop_entailment",
     "(eval ?\<phi> = Yes) = {} \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Equivalence_Relations.ltl_const_equiv_implies_ltl_prop_equiv",
     "?\<phi> \<sim>\<^sub>C ?\<psi> ==> ?\<phi> \<sim>\<^sub>P ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Equivalence_Relations.ltl_prop_equiv_implies_ltl_lang_equiv",
     "?\<phi> \<sim>\<^sub>P ?\<psi> ==> ?\<phi> \<sim>\<^sub>L ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Equivalence_Relations.ltl_const_equiv_other",
     "?\<phi> \<sim>\<^sub>C X\<^sub>n ?\<psi> =
      (?\<phi> = X\<^sub>n ?\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Equivalence_Relations.ltl_const_equiv_other",
     "?\<phi> \<sim>\<^sub>C nprop\<^sub>n(?a) =
      (?\<phi> = nprop\<^sub>n(?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Equivalence_Relations.ltl_const_equiv_other",
     "?\<phi> \<sim>\<^sub>C prop\<^sub>n(?a) =
      (?\<phi> = prop\<^sub>n(?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Equivalence_Relations.eval_prop_entailment",
     "(eval ?\<phi> = No) = (~ UNIV \<Turnstile>\<^sub>P ?\<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Equivalence_Relations.Rep_Abs_prop_entailment",
     "?\<A> \<Turnstile>\<^sub>P
      rep_ltln\<^sub>P (abs_ltln\<^sub>P ?\<phi>) =
      ?\<A> \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Equivalence_Relations.sat_models_Abs",
     "(?\<A> : sat_models (abs_ltln\<^sub>P ?\<phi>)) =
      ?\<A> \<Turnstile>\<^sub>P ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Equivalence_Relations.ltl_lang_equiv_and_false",
     "?\<phi>\<^sub>1 \<sim>\<^sub>L false\<^sub>n ==>
      ?\<phi>\<^sub>1 and\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>L
      false\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Equivalence_Relations.ltl_lang_equiv_or_const",
     "?\<phi>\<^sub>1 \<sim>\<^sub>L true\<^sub>n ==>
      ?\<phi>\<^sub>1 or\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>L
      true\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Equivalence_Relations.ltl_lang_equiv_and_false",
     "?\<phi>\<^sub>2 \<sim>\<^sub>L false\<^sub>n ==>
      ?\<phi>\<^sub>1 and\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>L
      false\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Equivalence_Relations.ltl_lang_equiv_or_const",
     "?\<phi>\<^sub>2 \<sim>\<^sub>L true\<^sub>n ==>
      ?\<phi>\<^sub>1 or\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>L
      true\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Equivalence_Relations.ltl_prop_implies_equiv",
     "?\<phi> \<sim>\<^sub>P ?\<psi> =
      (?\<phi> \<longrightarrow>\<^sub>P ?\<psi> &
       ?\<psi> \<longrightarrow>\<^sub>P ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Equivalence_Relations.ltl_models_equiv_prop_entailment",
     "?w \<Turnstile>\<^sub>n ?\<phi> =
      {\<psi>. ?w \<Turnstile>\<^sub>n \<psi>} \<Turnstile>\<^sub>P
      ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("Equivalence_Relations.ltl_const_equiv_other",
     "?\<phi> \<sim>\<^sub>C ?\<psi>\<^sub>1 R\<^sub>n ?\<psi>\<^sub>2 =
      (?\<phi> = ?\<psi>\<^sub>1 R\<^sub>n ?\<psi>\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Equivalence_Relations.ltl_const_equiv_other",
     "?\<phi> \<sim>\<^sub>C ?\<psi>\<^sub>1 M\<^sub>n ?\<psi>\<^sub>2 =
      (?\<phi> = ?\<psi>\<^sub>1 M\<^sub>n ?\<psi>\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Equivalence_Relations.ltl_const_equiv_other",
     "?\<phi> \<sim>\<^sub>C ?\<psi>\<^sub>1 U\<^sub>n ?\<psi>\<^sub>2 =
      (?\<phi> = ?\<psi>\<^sub>1 U\<^sub>n ?\<psi>\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Equivalence_Relations.ltl_const_equiv_other",
     "?\<phi> \<sim>\<^sub>C ?\<psi>\<^sub>1 W\<^sub>n ?\<psi>\<^sub>2 =
      (?\<phi> = ?\<psi>\<^sub>1 W\<^sub>n ?\<psi>\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Equivalence_Relations.subst_respects_ltl_const_entailment",
     "?\<phi> \<sim>\<^sub>C ?\<psi> ==>
      subst ?\<phi> ?m \<sim>\<^sub>C subst ?\<psi> ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Equivalence_Relations.subst_respects_ltl_prop_entailment",
     "?\<phi> \<sim>\<^sub>P ?\<psi> ==>
      subst ?\<phi> ?m \<sim>\<^sub>P subst ?\<psi> ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Equivalence_Relations.subst_respects_ltl_prop_entailment",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> ==>
      subst ?\<phi> ?m \<longrightarrow>\<^sub>P subst ?\<psi> ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Equivalence_Relations.eval_subst",
     "eval ?\<phi> = No ==> eval (subst ?\<phi> ?m) = No",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Equivalence_Relations.eval_subst",
     "eval ?\<phi> = Yes ==> eval (subst ?\<phi> ?m) = Yes",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Equivalence_Relations.ltl_const_equiv_and_const",
     "?\<phi>\<^sub>1 and\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>C
      false\<^sub>n =
      (?\<phi>\<^sub>1 \<sim>\<^sub>C false\<^sub>n |
       ?\<phi>\<^sub>2 \<sim>\<^sub>C false\<^sub>n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Equivalence_Relations.ltl_const_equiv_and_const",
     "?\<phi>\<^sub>1 and\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>C
      true\<^sub>n =
      (?\<phi>\<^sub>1 \<sim>\<^sub>C true\<^sub>n &
       ?\<phi>\<^sub>2 \<sim>\<^sub>C true\<^sub>n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Equivalence_Relations.ltl_const_equiv_or_const",
     "?\<phi>\<^sub>1 or\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>C
      false\<^sub>n =
      (?\<phi>\<^sub>1 \<sim>\<^sub>C false\<^sub>n &
       ?\<phi>\<^sub>2 \<sim>\<^sub>C false\<^sub>n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Equivalence_Relations.ltl_const_equiv_or_const",
     "?\<phi>\<^sub>1 or\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>C
      true\<^sub>n =
      (?\<phi>\<^sub>1 \<sim>\<^sub>C true\<^sub>n |
       ?\<phi>\<^sub>2 \<sim>\<^sub>C true\<^sub>n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Equivalence_Relations.ltl_lang_equiv_and_true",
     "?\<phi>\<^sub>1 and\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>L
      true\<^sub>n =
      (?\<phi>\<^sub>1 \<sim>\<^sub>L true\<^sub>n &
       ?\<phi>\<^sub>2 \<sim>\<^sub>L true\<^sub>n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Equivalence_Relations.ltl_lang_equiv_or_false",
     "?\<phi>\<^sub>1 or\<^sub>n ?\<phi>\<^sub>2 \<sim>\<^sub>L
      false\<^sub>n =
      (?\<phi>\<^sub>1 \<sim>\<^sub>L false\<^sub>n &
       ?\<phi>\<^sub>2 \<sim>\<^sub>L false\<^sub>n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Equivalence_Relations.eval_and_const",
     "(eval_and ?\<phi> ?\<psi> = No) = (?\<phi> = No | ?\<psi> = No)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Equivalence_Relations.eval_and_const",
     "(eval_and ?\<phi> ?\<psi> = Yes) = (?\<phi> = Yes & ?\<psi> = Yes)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Equivalence_Relations.eval_or_const",
     "(eval_or ?\<phi> ?\<psi> = No) = (?\<phi> = No & ?\<psi> = No)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Equivalence_Relations.eval_or_const",
     "(eval_or ?\<phi> ?\<psi> = Yes) = (?\<phi> = Yes | ?\<psi> = Yes)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Equivalence_Relations.prop_atoms_entailment_iff",
     "?\<phi> : prop_atoms ?\<psi> ==>
      ?\<A> \<Turnstile>\<^sub>P ?\<phi> = (?\<phi> : ?\<A>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Equivalence_Relations.ltl_prop_entailment_monotonI",
     "[| ?S \<Turnstile>\<^sub>P ?\<phi>; ?S <= ?S' |]
      ==> ?S' \<Turnstile>\<^sub>P ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Equivalence_Relations.ltl_prop_equiv_trans",
     "[| ?\<phi> \<sim>\<^sub>P ?\<psi>; ?\<psi> \<sim>\<^sub>P ?\<chi> |]
      ==> ?\<phi> \<sim>\<^sub>P ?\<chi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Equivalence_Relations.ltl_prop_equiv_true_implies_true",
     "[| ?x \<sim>\<^sub>P true\<^sub>n; ?x \<longrightarrow>\<^sub>P ?y |]
      ==> ?y \<sim>\<^sub>P true\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)
           ))),
    ("Equivalence_Relations.ltl_prop_equiv_false_implied_by_false",
     "[| ?y \<sim>\<^sub>P false\<^sub>n; ?x \<longrightarrow>\<^sub>P ?y |]
      ==> ?x \<sim>\<^sub>P false\<^sub>n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)
           ))),
    ("Equivalence_Relations.ltl_prop_implication_implies_ltl_implication",
     "[| ?w \<Turnstile>\<^sub>n ?\<phi>;
         ?\<phi> \<longrightarrow>\<^sub>P ?\<psi> |]
      ==> ?w \<Turnstile>\<^sub>n ?\<psi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Equivalence_Relations.ltl_const_equiv_no_const_prop_equiv",
     "[| eval ?\<psi> = Maybe; ?\<phi> \<sim>\<^sub>C ?\<psi> |]
      ==> ?\<phi> \<sim>\<^sub>P ?\<psi>",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Equivalence_Relations.ltl_const_equiv_no_const_singleton",
     "[| eval ?\<psi> = Maybe; ?\<phi> \<sim>\<^sub>C ?\<psi> |]
      ==> ?\<phi> = ?\<psi>",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 0, template_var 1))),
    ("Equivalence_Relations.nested_prop_atoms_entailment_inter",
     "nested_prop_atoms ?\<phi> <= ?P ==>
      (?\<A> Int ?P) \<Turnstile>\<^sub>P ?\<phi> =
      ?\<A> \<Turnstile>\<^sub>P ?\<phi>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Equivalence_Relations.prop_atoms_entailment_inter",
     "prop_atoms ?\<phi> <= ?P ==>
      (?\<A> Int ?P) \<Turnstile>\<^sub>P ?\<phi> =
      ?\<A> \<Turnstile>\<^sub>P ?\<phi>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Equivalence_Relations.prop_equiv_finite'",
     "finite ?P ==>
      finite
       {abs_ltln\<^sub>P \<psi> |\<psi>. nested_prop_atoms \<psi> <= ?P}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("Equivalence_Relations.prop_equiv_finite",
     "finite ?P ==>
      finite {abs_ltln\<^sub>P \<psi> |\<psi>. prop_atoms \<psi> <= ?P}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("Equivalence_Relations.sat_models_inter_inj",
     "inj_on (%\<phi>. sat_models \<phi> Int Pow ?P)
       {abs_ltln\<^sub>P \<phi> |\<phi>. prop_atoms \<phi> <= ?P}",
     template_predicate
      (
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 6, t_empty))
         )),
    ("Equivalence_Relations.sat_models_pow_pow",
     "{sat_models (abs_ltln\<^sub>P \<phi>) Int Pow ?P |\<phi>.
       prop_atoms \<phi> <= ?P}
      <= Pow (Pow ?P)",
     template_inequation
      (less_equals, template_app (template_hole 10, t_empty),
       template_app
        (template_hole 0, template_app (template_hole 3, template_var 0)))),
    ("Equivalence_Relations.sat_models_finite",
     "finite ?P ==>
      finite
       {sat_models (abs_ltln\<^sub>P \<phi>) Int Pow ?P |\<phi>.
        prop_atoms \<phi> <= ?P}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 10, template_app (template_hole 9, t_empty))
           ))),
    ("Equivalence_Relations.image_filter",
     "?f ` {?g a |a. ?P a} = {?f (?g a) |a. ?P a}",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app (template_hole 5, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Equivalence_Relations.prop_equiv_subset",
     "{abs_ltln\<^sub>P \<psi> |\<psi>. nested_prop_atoms \<psi> <= ?P}
      <= {abs_ltln\<^sub>P \<psi> |\<psi>. prop_atoms \<psi> <= ?P}",
     template_inequation
      (less_equals, template_app (template_hole 7, t_empty),
       template_app (template_hole 7, t_empty))),
    ("Equivalence_Relations.prop_equiv_card'",
     "finite ?P ==>
      card {abs_ltln\<^sub>P \<psi> |\<psi>. nested_prop_atoms \<psi> <= ?P}
      <= 2 ^ 2 ^ card ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app (template_hole 0, template_var 0)))))),
    ("Equivalence_Relations.prop_equiv_card",
     "finite ?P ==>
      card {abs_ltln\<^sub>P \<psi> |\<psi>. prop_atoms \<psi> <= ?P}
      <= 2 ^ 2 ^ card ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app (template_hole 0, template_var 0)))))),
    ("Equivalence_Relations.sat_models_inter_inj_helper",
     "[| prop_atoms ?\<phi> <= ?P; prop_atoms ?\<psi> <= ?P;
         sat_models (abs_ltln\<^sub>P ?\<phi>) Int Pow ?P =
         sat_models (abs_ltln\<^sub>P ?\<psi>) Int Pow ?P |]
      ==> ?\<phi> \<sim>\<^sub>P ?\<psi>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_var 1),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2))),
            template_app (template_hole 1, template_var 1)),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0))),
            template_app (template_hole 1, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Equivalence_Relations.sat_models_card",
     "finite ?P ==>
      card
       {sat_models (abs_ltln\<^sub>P \<phi>) Int Pow ?P |\<phi>.
        prop_atoms \<phi> <= ?P}
      <= 2 ^ 2 ^ card ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 15, template_app (template_hole 14, t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app (template_hole 0, template_var 0)))))),
    ("Equivalence_Relations.ltl_prop_equiv_subst_S",
     "?S \<Turnstile>\<^sub>P subst ?\<phi> ?m =
      (?S - dom ?m Un
       {uu_.
        EX \<chi> \<chi>'.
           uu_ = \<chi> &
           \<chi> : dom ?m &
           ?m \<chi> = Some \<chi>' &
           ?S \<Turnstile>\<^sub>P \<chi>'}) \<Turnstile>\<^sub>P
      ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app (template_hole 7, template_var 0))),
             template_app (template_hole 6, t_empty))),
         template_var 1)))]:
   (string * thm * template) list
### theory "Draft.Equivalence_RelationsMoreTemplates"
### 0.429s elapsed time, 0.591s cpu time, 0.037s GC time
val it = (): unit
