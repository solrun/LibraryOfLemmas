Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.Disjunctive_Normal_Form" via "Draft.LTL" via "HOL-Library.Omega_Words_Fun")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.Disjunctive_Normal_Form" via "HOL-Library.FSet" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.502s cpu time, 0.048s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.302s elapsed time, 1.215s cpu time, 0.143s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.Disjunctive_Normal_Form" via "Draft.LTL")
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.403s cpu time, 0.143s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.237s elapsed time, 0.939s cpu time, 0.095s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.442s elapsed time, 1.770s cpu time, 0.250s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.Disjunctive_Normal_Form" via "HOL-Library.FSet")
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
### theory "HOL-Library.Omega_Words_Fun"
### 0.336s elapsed time, 1.308s cpu time, 0.228s GC time
Loading theory "Draft.LTL" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.Disjunctive_Normal_Form")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "countable": 'a
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Proofs for inductive predicate(s) "finite_item"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.160s elapsed time, 4.422s cpu time, 0.985s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
Found termination order: "size <*mlex*> {}"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.386s elapsed time, 5.318s cpu time, 0.998s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.Disjunctive_Normal_Form")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.889s elapsed time, 3.493s cpu time, 0.411s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.289s elapsed time, 8.657s cpu time, 1.501s GC time
Loading theory "Draft.Templates" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.187s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Disjunctive_Normal_FormMoreTemplates")
consts
  semantics_ltlc :: "(nat => 'a set) => 'a ltlc => bool"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.621s elapsed time, 1.885s cpu time, 0.187s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.916s elapsed time, 8.472s cpu time, 1.955s GC time
consts
  semantics_ltln :: "(nat => 'a set) => 'a ltln => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  semantics_ltlr :: "(nat => 'a set) => 'a ltlr => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.LTL"
### 8.074s elapsed time, 18.370s cpu time, 4.382s GC time
Loading theory "Draft.Equivalence_Relations" (required by "Draft.Disjunctive_Normal_FormMoreTemplates" via "Draft.Disjunctive_Normal_Form")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No map function defined for LTL.ltln. This will cause problems later on.
instantiation
  ltln\<^sub>L :: (type) equal
  equal_ltln\<^sub>L == equal_class.equal ::
    'a ltln\<^sub>L => 'a ltln\<^sub>L => bool
### No map function defined for LTL.ltln. This will cause problems later on.
instantiation
  ltln\<^sub>P :: (type) equal
  equal_ltln\<^sub>P == equal_class.equal ::
    'a ltln\<^sub>P => 'a ltln\<^sub>P => bool
### No map function defined for LTL.ltln. This will cause problems later on.
instantiation
  ltln\<^sub>C :: (type) equal
  equal_ltln\<^sub>C == equal_class.equal ::
    'a ltln\<^sub>C => 'a ltln\<^sub>C => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale ltl_equivalence
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
  assumes "ltl_equivalence (\<sim>)"
### theory "Draft.Equivalence_Relations"
### 1.419s elapsed time, 1.717s cpu time, 0.154s GC time
Loading theory "Draft.Disjunctive_Normal_Form" (required by "Draft.Disjunctive_Normal_FormMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Disjunctive_Normal_Form"
### 1.007s elapsed time, 1.278s cpu time, 0.232s GC time
Loading theory "Draft.Disjunctive_Normal_FormMoreTemplates"
val templateLemmas =
   [("Disjunctive_Normal_Form.dnf_finite", "finite (dnf ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Disjunctive_Normal_Form.min_dnf_finite", "finite (min_dnf ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Disjunctive_Normal_Form.list_dnf_finite", "finite (list_dnf ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Disjunctive_Normal_Form.subst_clause_finite",
     "finite (subst_clause ?\<Phi> ?m)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Disjunctive_Normal_Form.subst_clause'_finite",
     "finite (subst_clause' ?\<Phi> ?m)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Disjunctive_Normal_Form.min_set_subset", "min_set ?X <= ?X",
     template_inequation
      (less_equals, template_app (template_hole 0, template_var 0),
       template_var 0)),
    ("Disjunctive_Normal_Form.ltln_of_dnf_prop_equiv",
     "ltln_of_dnf (min_dnf ?\<phi>) \<sim>\<^sub>P ?\<phi>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))),
           template_var 0)
         )),
    ("Disjunctive_Normal_Form.min_product_empty",
     "?A \<otimes>\<^sub>m {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Disjunctive_Normal_Form.min_product_empty",
     "{} \<otimes>\<^sub>m ?A = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Disjunctive_Normal_Form.product_empty", "?A \<otimes> {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Disjunctive_Normal_Form.product_empty", "{} \<otimes> ?A = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Disjunctive_Normal_Form.subst_dnf_empty", "subst_dnf {} ?m = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Disjunctive_Normal_Form.min_set_idem",
     "min_set (min_set ?X) = min_set ?X",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.min_set_product_set",
     "\<Otimes>\<^sub>m ?A = min_set (\<Otimes> ?A)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Disjunctive_Normal_Form.min_product_idem",
     "?A \<otimes>\<^sub>m ?A = min_set ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.min_union_idem",
     "?A \<union>\<^sub>m ?A = min_set ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.min_union_empty",
     "?A \<union>\<^sub>m {} = min_set ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.min_union_empty",
     "{} \<union>\<^sub>m ?A = min_set ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.dnf_min_set",
     "min_dnf ?\<phi> = min_set (dnf ?\<phi>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Disjunctive_Normal_Form.list_dnf_to_dnf_list_dnf",
     "list_dnf_to_dnf (list_dnf ?\<phi>) = dnf ?\<phi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.min_dnf_min_set",
     "min_set (min_dnf ?\<phi>) = min_dnf ?\<phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.min_product_comm",
     "?A \<otimes>\<^sub>m ?B = ?B \<otimes>\<^sub>m ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Disjunctive_Normal_Form.min_union_comm",
     "?A \<union>\<^sub>m ?B = ?B \<union>\<^sub>m ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Disjunctive_Normal_Form.product_comm",
     "?A \<otimes> ?B = ?B \<otimes> ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Disjunctive_Normal_Form.product_empty_singleton",
     "?A \<otimes> {{||}} = ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)),
       template_var 0)),
    ("Disjunctive_Normal_Form.product_empty_singleton",
     "{{||}} \<otimes> ?A = ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Disjunctive_Normal_Form.subst_clause_empty",
     "subst_clause {||} ?m = {{||}}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_hole 0))),
    ("Disjunctive_Normal_Form.dnf_ltln_of_dnf_min_dnf",
     "dnf (ltln_of_dnf (min_dnf ?\<phi>)) = min_dnf ?\<phi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.min_dnf_ltln_of_dnf",
     "min_dnf (ltln_of_dnf (min_dnf ?\<phi>)) = min_dnf ?\<phi>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("Disjunctive_Normal_Form.min_dnf_rep_abs",
     "min_dnf (rep_ltln\<^sub>P (abs_ltln\<^sub>P ?\<phi>)) =
      min_dnf ?\<phi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Disjunctive_Normal_Form.dnf_Abs_fset",
     "fset (Abs_fset (dnf ?\<phi>)) = dnf ?\<phi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.min_dnf_Abs_fset",
     "fset (Abs_fset (min_dnf ?\<phi>)) = min_dnf ?\<phi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.subst_clause'_nil",
     "subst_clause' [] ?m = {[]}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_hole 0))),
    ("Disjunctive_Normal_Form.min_set_finite",
     "finite ?X ==> finite (min_set ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Disjunctive_Normal_Form.min_set_singleton", "min_set {?x} = {?x}",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Disjunctive_Normal_Form.min_set_min_product",
     "?A \<otimes>\<^sub>m min_set ?B = ?A \<otimes>\<^sub>m ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Disjunctive_Normal_Form.min_set_min_product",
     "min_set ?A \<otimes>\<^sub>m ?B = ?A \<otimes>\<^sub>m ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Disjunctive_Normal_Form.min_set_min_union",
     "?A \<union>\<^sub>m min_set ?B = ?A \<union>\<^sub>m ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Disjunctive_Normal_Form.min_set_min_union",
     "min_set ?A \<union>\<^sub>m ?B = ?A \<union>\<^sub>m ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Disjunctive_Normal_Form.min_product_min_set",
     "min_set (?A \<otimes>\<^sub>m ?B) = ?A \<otimes>\<^sub>m ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Disjunctive_Normal_Form.min_union_min_set",
     "min_set (?A \<union>\<^sub>m ?B) = ?A \<union>\<^sub>m ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Disjunctive_Normal_Form.min_product_empty_singleton",
     "?A \<otimes>\<^sub>m {{||}} = min_set ?A",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.min_product_empty_singleton",
     "{{||}} \<otimes>\<^sub>m ?A = min_set ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.subst_clause_min_set",
     "min_set (subst_clause ?\<Phi> ?m) = subst_clause ?\<Phi> ?m",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Disjunctive_Normal_Form.subst_dnf_finite",
     "finite ?\<A> ==> finite (subst_dnf ?\<A> ?m)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Disjunctive_Normal_Form.subst_dnf'_list_dnf",
     "subst_dnf' (list_dnf ?\<phi>) ?m = list_dnf (subst ?\<phi> ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.ltl_prop_equiv_min_dnf",
     "?\<phi> \<sim>\<^sub>P ?\<psi> = (min_dnf ?\<phi> = min_dnf ?\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Disjunctive_Normal_Form.fold_graph_finite",
     "fold_graph ?f ?z ?A ?y ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Disjunctive_Normal_Form.subst_clause_fset_of_list",
     "subst_clause (fset_of_list ?\<Phi>) ?m =
      min_set (list_dnf_to_dnf (subst_clause' ?\<Phi> ?m))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Disjunctive_Normal_Form.subst_dnf_dnf",
     "min_set (subst_dnf (dnf ?\<phi>) ?m) = min_dnf (subst ?\<phi> ?m)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.min_dnf_subst",
     "min_set (subst_dnf (min_dnf ?\<phi>) ?m) =
      min_dnf (subst ?\<phi> ?m)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.min_product_set_min_set",
     "finite ?X ==> min_set (\<Otimes>\<^sub>m ?X) = \<Otimes>\<^sub>m ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Disjunctive_Normal_Form.fold_graph_And\<^sub>n",
     "finite ?\<Phi> ==>
      fold_graph And_ltln true\<^sub>n ?\<Phi> (And\<^sub>n ?\<Phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Disjunctive_Normal_Form.fold_graph_Or\<^sub>n",
     "finite ?\<Phi> ==>
      fold_graph Or_ltln false\<^sub>n ?\<Phi> (Or\<^sub>n ?\<Phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Disjunctive_Normal_Form.min_product_set_code",
     "\<Otimes>\<^sub>m (set ?xs) =
      fold (\<otimes>\<^sub>m) (remdups ?xs) {{||}}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Disjunctive_Normal_Form.product_set_code",
     "\<Otimes> (set ?xs) = fold (\<otimes>) (remdups ?xs) {{||}}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Disjunctive_Normal_Form.min_product_assoc",
     "(?A \<otimes>\<^sub>m ?B) \<otimes>\<^sub>m ?C =
      ?A \<otimes>\<^sub>m ?B \<otimes>\<^sub>m ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.min_union_assoc",
     "(?A \<union>\<^sub>m ?B) \<union>\<^sub>m ?C =
      ?A \<union>\<^sub>m ?B \<union>\<^sub>m ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.product_assoc",
     "(?A \<otimes> ?B) \<otimes> ?C = ?A \<otimes> ?B \<otimes> ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.list_product_assoc",
     "?A \<otimes>\<^sub>l (?B \<otimes>\<^sub>l ?C) =
      ?A \<otimes>\<^sub>l ?B \<otimes>\<^sub>l ?C",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Disjunctive_Normal_Form.min_set_min_product_set",
     "finite ?X ==>
      \<Otimes>\<^sub>m (min_set ` ?X) = \<Otimes>\<^sub>m ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Disjunctive_Normal_Form.min_product_set_infinite",
     "infinite ?X ==> \<Otimes>\<^sub>m ?X = {{||}}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Disjunctive_Normal_Form.product_set_infinite",
     "infinite ?X ==> \<Otimes> ?X = {{||}}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Disjunctive_Normal_Form.dnf_prop_atoms",
     "?\<Phi> : dnf ?\<phi> ==> fset ?\<Phi> <= prop_atoms ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Disjunctive_Normal_Form.min_dnf_prop_atoms",
     "?\<Phi> : min_dnf ?\<phi> ==> fset ?\<Phi> <= prop_atoms ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Disjunctive_Normal_Form.fold_union",
     "Finite_Set.fold (%x. (Un) {x}) {} (fset ?x) = fset ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Disjunctive_Normal_Form.product_singleton_singleton",
     "?A \<otimes> {{|?x|}} = finsert ?x ` ?A",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 0)),
         template_var 1))),
    ("Disjunctive_Normal_Form.product_singleton_singleton",
     "{{|?x|}} \<otimes> ?A = finsert ?x ` ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Disjunctive_Normal_Form.min_set_min_product_helper",
     "(?x : min_set ?A \<otimes>\<^sub>m ?B) =
      (?x : ?A \<otimes>\<^sub>m ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.product_mono",
     "?A <= ?B ==> ?A \<otimes> ?C <= ?B \<otimes> ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.product_mono",
     "?B <= ?C ==> ?A \<otimes> ?B <= ?A \<otimes> ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Disjunctive_Normal_Form.subst_dnf_mono",
     "?\<A> <= ?\<B> ==> subst_dnf ?\<A> ?m <= subst_dnf ?\<B> ?m",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.min_product_finite",
     "[| finite ?A; finite ?B |] ==> finite (?A \<otimes>\<^sub>m ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Disjunctive_Normal_Form.min_union_finite",
     "[| finite ?A; finite ?B |] ==> finite (?A \<union>\<^sub>m ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Disjunctive_Normal_Form.product_finite",
     "[| finite ?A; finite ?B |] ==> finite (?A \<otimes> ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Disjunctive_Normal_Form.list_product_finite",
     "[| finite ?A; finite ?B |] ==> finite (?A \<otimes>\<^sub>l ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Disjunctive_Normal_Form.list_product_fset_of_list",
     "fset_of_list ` (?A \<otimes>\<^sub>l ?B) =
      fset_of_list ` ?A \<otimes> fset_of_list ` ?B",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Disjunctive_Normal_Form.subst_clause_funion",
     "subst_clause (?\<Phi> |\<union>| ?\<Psi>) ?m =
      subst_clause ?\<Phi> ?m \<otimes>\<^sub>m subst_clause ?\<Psi> ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.subst_clause'_append",
     "subst_clause' (?A @ ?B) ?m =
      subst_clause' ?A ?m \<otimes>\<^sub>l subst_clause' ?B ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.subst_dnf'_product",
     "subst_dnf' (?A \<otimes>\<^sub>l ?B) ?m =
      subst_dnf' ?A ?m \<otimes>\<^sub>l subst_dnf' ?B ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.min_product_set_insert",
     "finite ?X ==>
      \<Otimes>\<^sub>m (insert ?x ?X) =
      ?x \<otimes>\<^sub>m \<Otimes>\<^sub>m ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Disjunctive_Normal_Form.min_set_Union",
     "finite ?X ==>
      min_set (\<Union> (min_set ` ?X)) = min_set (\<Union> ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 2),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Disjunctive_Normal_Form.subst_clause_finsert",
     "subst_clause (finsert ?\<phi> ?\<Phi>) ?m =
      min_dnf (subst ?\<phi> ?m) \<otimes>\<^sub>m subst_clause ?\<Phi> ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Disjunctive_Normal_Form.subst_dnf'_iff",
     "(?x : subst_dnf' ?A ?m) =
      (EX \<Phi>:?A. ?x : subst_clause' \<Phi> ?m)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("Disjunctive_Normal_Form.min_product_set_finite",
     "(!!x. x : ?X ==> finite x) ==> finite (\<Otimes>\<^sub>m ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Disjunctive_Normal_Form.product_set_finite",
     "(!!x. x : ?X ==> finite x) ==> finite (\<Otimes> ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Disjunctive_Normal_Form.min_dnf_iff_prop_assignment_subset",
     "?\<A> \<Turnstile>\<^sub>P ?\<phi> =
      (EX B. fset B <= ?\<A> & B : min_dnf ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Disjunctive_Normal_Form.ltl_prop_implies_min_dnf",
     "?\<phi> \<longrightarrow>\<^sub>P ?\<psi> =
      (ALL A:min_dnf ?\<phi>. EX B:min_dnf ?\<psi>. B |\<subseteq>| A)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Disjunctive_Normal_Form.Or\<^sub>n_dnf",
     "finite ?\<Phi> ==>
      dnf (Or\<^sub>n ?\<Phi>) =
      Finite_Set.fold (%\<phi>. (Un) (dnf \<phi>)) {} ?\<Phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, t_empty), template_hole 0),
           template_var 0)))),
    ("Disjunctive_Normal_Form.And\<^sub>n_prop_semantics",
     "finite ?\<Phi> ==>
      ?\<A> \<Turnstile>\<^sub>P And\<^sub>n ?\<Phi> =
      (ALL \<phi>:?\<Phi>. ?\<A> \<Turnstile>\<^sub>P \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Disjunctive_Normal_Form.Or\<^sub>n_prop_semantics",
     "finite ?\<Phi> ==>
      ?\<A> \<Turnstile>\<^sub>P Or\<^sub>n ?\<Phi> =
      (EX \<phi>:?\<Phi>. ?\<A> \<Turnstile>\<^sub>P \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Disjunctive_Normal_Form.And\<^sub>n_semantics",
     "finite ?\<Phi> ==>
      ?w \<Turnstile>\<^sub>n And\<^sub>n ?\<Phi> =
      (ALL \<phi>:?\<Phi>. ?w \<Turnstile>\<^sub>n \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Disjunctive_Normal_Form.Or\<^sub>n_semantics",
     "finite ?\<Phi> ==>
      ?w \<Turnstile>\<^sub>n Or\<^sub>n ?\<Phi> =
      (EX \<phi>:?\<Phi>. ?w \<Turnstile>\<^sub>n \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Disjunctive_Normal_Form.min_set_list_dnf_to_dnf_subst_dnf'",
     "finite ?X ==>
      min_set (list_dnf_to_dnf (subst_dnf' ?X ?m)) =
      min_set (subst_dnf (list_dnf_to_dnf ?X) ?m)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_var 0))))),
    ("Disjunctive_Normal_Form.min_set_obtains_helper",
     "?A : ?B ==> EX C. C |\<subseteq>| ?A & C : min_set ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Disjunctive_Normal_Form.subst_clause'_cons",
     "subst_clause' (?xs @ [?x]) ?m =
      subst_clause' ?xs ?m \<otimes>\<^sub>l list_dnf (subst ?x ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Disjunctive_Normal_Form.min_union_comp",
     "?a : ?A ==> EX c. c |\<subseteq>| ?a & c : ?A \<union>\<^sub>m ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Disjunctive_Normal_Form.min_product_subseteq",
     "?x : ?A \<otimes>\<^sub>m ?B ==> EX a. a |\<subseteq>| ?x & a : ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Disjunctive_Normal_Form.fold_product",
     "Finite_Set.fold (%x. (\<otimes>) {{|x|}}) {{||}} (fset ?x) = {?x}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 2),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 0), template_hole 1))),
    ("Disjunctive_Normal_Form.product_iff",
     "(?x : ?A \<otimes> ?B) = (EX a:?A. EX b:?B. ?x = a |\<union>| b)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), t_empty))),
    ("Disjunctive_Normal_Form.product_set_insert",
     "finite ?X ==>
      \<Otimes> (insert ?x ?X) = ?x \<otimes> \<Otimes> (?X - {?x})",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 0))))))),
    ("Disjunctive_Normal_Form.And\<^sub>n_dnf",
     "finite ?\<Phi> ==>
      dnf (And\<^sub>n ?\<Phi>) =
      Finite_Set.fold (%\<phi>. (\<otimes>) (dnf \<phi>)) {{||}} ?\<Phi>",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_var 0)))),
    ("Disjunctive_Normal_Form.min_product_set_union",
     "[| finite ?X; finite ?Y |]
      ==> \<Otimes>\<^sub>m (?X Un ?Y) =
          \<Otimes>\<^sub>m ?X \<otimes>\<^sub>m \<Otimes>\<^sub>m ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Disjunctive_Normal_Form.min_set_iff",
     "(?x : min_set ?X) = (?x : ?X & (ALL y:?X. y <= ?x --> y = ?x))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 0), t_empty)))),
    ("Disjunctive_Normal_Form.subst_clause_inner_finite",
     "finite ?\<Phi> ==>
      finite {min_dnf (subst \<phi> ?m) |\<phi>. \<phi> : ?\<Phi>}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("Disjunctive_Normal_Form.min_set_Union_image",
     "finite ?X ==>
      min_set (UN x:?X. min_set (?f x)) = min_set (\<Union> (?f ` ?X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty),
               template_var 1)))))),
    ("Disjunctive_Normal_Form.min_dnf_atoms_dnf",
     "[| ?\<Phi> : min_dnf ?\<psi>; ?\<phi> : fset ?\<Phi> |]
      ==> dnf ?\<phi> = {{|?\<phi>|}}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 2))
            )],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)))),
    ("Disjunctive_Normal_Form.ltln_of_dnf_prop_semantics",
     "finite ?\<A> ==>
      ?\<I> \<Turnstile>\<^sub>P ltln_of_dnf ?\<A> =
      (EX \<Phi>:?\<A>.
          ALL \<phi>.
             \<phi> |\<in>| \<Phi> --> ?\<I> \<Turnstile>\<^sub>P \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 1), t_empty)))),
    ("Disjunctive_Normal_Form.ltln_of_dnf_semantics",
     "finite ?\<A> ==>
      ?w \<Turnstile>\<^sub>n ltln_of_dnf ?\<A> =
      (EX \<Phi>:?\<A>.
          ALL \<phi>.
             \<phi> |\<in>| \<Phi> --> ?w \<Turnstile>\<^sub>n \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 1), t_empty)))),
    ("Disjunctive_Normal_Form.min_product_set_subseteq",
     "[| finite ?X; ?x : \<Otimes>\<^sub>m ?X; ?A : ?X |]
      ==> EX a:?A. a |\<subseteq>| ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)
           ))),
    ("Disjunctive_Normal_Form.min_set_obtains",
     "[| ?A : ?B;
         !!C. [| C |\<subseteq>| ?A; C : min_set ?B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Disjunctive_Normal_Form.list_product_iff",
     "(?x : ?A \<otimes>\<^sub>l ?B) =
      (EX a b. a : ?A & b : ?B & ?x = a @ b)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Disjunctive_Normal_Form.min_product_comp",
     "[| ?a : ?A; ?b : ?B |]
      ==> EX c. c |\<subseteq>| ?a |\<union>| ?b &
                c : ?A \<otimes>\<^sub>m ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Disjunctive_Normal_Form.Or\<^sub>n_And\<^sub>n_image_prop_semantics",
     "[| finite ?\<A>; !!\<Phi>. \<Phi> : ?\<A> ==> finite \<Phi> |]
      ==> ?\<I> \<Turnstile>\<^sub>P Or\<^sub>n (And\<^sub>n ` ?\<A>) =
          (EX \<Phi>:?\<A>.
              ALL \<phi>:\<Phi>. ?\<I> \<Turnstile>\<^sub>P \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_app
          (template_app (template_hole 1, template_var 1), t_empty)))),
    ("Disjunctive_Normal_Form.Or\<^sub>n_And\<^sub>n_image_semantics",
     "[| finite ?\<A>; !!\<Phi>. \<Phi> : ?\<A> ==> finite \<Phi> |]
      ==> ?w \<Turnstile>\<^sub>n Or\<^sub>n (And\<^sub>n ` ?\<A>) =
          (EX \<Phi>:?\<A>.
              ALL \<phi>:\<Phi>. ?w \<Turnstile>\<^sub>n \<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_app
          (template_app (template_hole 1, template_var 1), t_empty)))),
    ("Disjunctive_Normal_Form.min_union_iff",
     "(?x : ?A \<union>\<^sub>m ?B) =
      (?x : ?A Un ?B &
       (ALL a:?A. a |\<subseteq>| ?x --> a = ?x) &
       (ALL b:?B. b |\<subseteq>| ?x --> b = ?x))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 3, template_var 1), t_empty)),
           template_app
            (template_app (template_hole 3, template_var 0), t_empty))))),
    ("Disjunctive_Normal_Form.min_product_iff",
     "(?x : ?A \<otimes>\<^sub>m ?B) =
      ((EX a:?A. EX b:?B. ?x = a |\<union>| b) &
       (ALL a:?A.
           ALL b:?B.
              a |\<union>| b |\<subseteq>| ?x --> a |\<union>| b = ?x))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1), t_empty)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)))),
    ("Disjunctive_Normal_Form.fold_union_fold_product",
     "[| finite ?X;
         !!\<Psi> \<psi>.
            [| \<Psi> : ?X; \<psi> : fset \<Psi> |]
            ==> dnf \<psi> = {{|\<psi>|}} |]
      ==> Finite_Set.fold
           (%x. (Un)
                 (Finite_Set.fold (%\<phi>. (\<otimes>) (dnf \<phi>)) {{||}}
                   (fset x)))
           {} ?X =
          ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_hole 4),
           template_var 0),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Disjunctive_Normal_FormMoreTemplates"
### 0.488s elapsed time, 0.684s cpu time, 0.090s GC time
val it = (): unit
