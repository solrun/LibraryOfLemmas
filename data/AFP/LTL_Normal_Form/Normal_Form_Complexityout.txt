Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice" via "LTL.LTL" via "HOL-Library.Omega_Words_Fun")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.511s cpu time, 0.041s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice" via "LTL_Master_Theorem.Syntactic_Fragments_and_Stability")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.840s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Infinite_Set"
### 0.309s elapsed time, 1.237s cpu time, 0.127s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice" via "LTL.LTL")
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.279s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  prefixes :: "'a list => 'a list list"
consts
  build :: "'a => (nat => 'a) => nat => 'a"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Omega_Words_Fun"
### 0.311s elapsed time, 1.226s cpu time, 0.182s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.115s elapsed time, 4.273s cpu time, 0.961s GC time
Loading theory "LTL.LTL" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.046s elapsed time, 3.990s cpu time, 0.951s GC time
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.701s elapsed time, 6.456s cpu time, 1.292s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.174s elapsed time, 7.387s cpu time, 1.450s GC time
Loading theory "Draft.Templates" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Normal_Form_ComplexityMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.798s elapsed time, 1.965s cpu time, 0.892s GC time
consts
  semantics_ltlc :: "(nat => 'a set) => 'a ltlc => bool"
consts
  semantics_ltln :: "(nat => 'a set) => 'a ltln => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  semantics_ltlr :: "(nat => 'a set) => 'a ltlr => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "LTL.LTL"
### 7.087s elapsed time, 11.363s cpu time, 2.806s GC time
Loading theory "LTL.Equivalence_Relations" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice")
Loading theory "LTL_Master_Theorem.Syntactic_Fragments_and_Stability" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No map function defined for LTL.ltln. This will cause problems later on.
instantiation
  ltln\<^sub>L :: (type) equal
  equal_ltln\<^sub>L == equal_class.equal ::
    'a ltln\<^sub>L => 'a ltln\<^sub>L => bool
### No map function defined for LTL.ltln. This will cause problems later on.
Found termination order: "size <*mlex*> {}"
instantiation
  ltln\<^sub>P :: (type) equal
  equal_ltln\<^sub>P == equal_class.equal ::
    'a ltln\<^sub>P => 'a ltln\<^sub>P => bool
### No map function defined for LTL.ltln. This will cause problems later on.
instantiation
  ltln\<^sub>C :: (type) equal
  equal_ltln\<^sub>C == equal_class.equal ::
    'a ltln\<^sub>C => 'a ltln\<^sub>C => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale ltl_equivalence
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
  assumes "ltl_equivalence (\<sim>)"
### theory "LTL.Equivalence_Relations"
### 1.542s elapsed time, 3.533s cpu time, 0.341s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "LTL_Master_Theorem.Syntactic_Fragments_and_Stability"
### 2.344s elapsed time, 4.647s cpu time, 0.511s GC time
Loading theory "LTL_Master_Theorem.After" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice")
consts
  af_letter :: "'a ltln => 'a set => 'a ltln"
locale af_congruent
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
  assumes "af_congruent (\<sim>)"
locale ltl_equivalence
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
  assumes "ltl_equivalence (\<sim>)"
### theory "LTL_Master_Theorem.After"
### 0.397s elapsed time, 0.473s cpu time, 0.086s GC time
Loading theory "LTL_Master_Theorem.Advice" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale GF_advice_congruent
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
    and normalise :: "'a ltln => 'a ltln"
  assumes "GF_advice_congruent (\<sim>) normalise"
### theory "LTL_Master_Theorem.Advice"
### 0.709s elapsed time, 0.850s cpu time, 0.098s GC time
Loading theory "LTL_Master_Theorem.Master_Theorem" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity" via "Draft.Normal_Form")
### theory "LTL_Master_Theorem.Master_Theorem"
### 0.069s elapsed time, 0.071s cpu time, 0.000s GC time
Loading theory "Draft.Normal_Form" (required by "Draft.Normal_Form_ComplexityMoreTemplates" via "Draft.Normal_Form_Complexity")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 108 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("\<^const>Set.inter" ("_position" M)
###         ("_applC" ("_position" subformulas\<^sub>\<mu>)
###           ("_position" \<phi>)))
###       ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("\<^const>Set.inter" ("_position" M) ("_position" S)))
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("\<^const>Set.inter" ("_position" M)
###         ("_applC" ("_position" subformulas\<^sub>\<mu>)
###           ("_position" \<phi>)))
###       ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>HOL.eq"
###         ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###           ("\<^const>Set.inter" ("_position" M) ("_position" S)))
###         ("_position" \<phi>))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 112 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_position" M)
###         ("_applC" ("_position" subformulas\<^sub>\<mu>)
###           ("_position" \<phi>)))
###       ("_position" M')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M'))
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_position" M)
###         ("_applC" ("_position" subformulas\<^sub>\<mu>)
###           ("_position" \<phi>)))
###       ("_position" M')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>HOL.eq"
###         ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###           ("_position" M'))
###         ("_position" \<phi>))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 116 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" M) ("_position" M')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LTL.semantics_ltln" ("_position" w)
###         ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###           ("_position" M'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_position" M)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" M) ("_position" M')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LTL.semantics_ltln" ("_position" w)
###         ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###           ("_position" M'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" M) ("_position" M')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###         ("_position" M')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_position" M)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" M) ("_position" M')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###         ("_position" M')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("\<^const>Set.inter" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>)))
###       ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("\<^const>Set.inter" ("_position" N) ("_position" S)))
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("\<^const>Set.inter" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>)))
###       ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>HOL.eq"
###         ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###           ("\<^const>Set.inter" ("_position" N) ("_position" S)))
###         ("_position" \<phi>))
###       ("_position" N))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 125 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>)))
###       ("_position" N')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N'))
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>)))
###       ("_position" N')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>HOL.eq"
###         ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###           ("_position" N'))
###         ("_position" \<phi>))
###       ("_position" N))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" N) ("_position" N')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LTL.semantics_ltln" ("_position" w)
###         ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###           ("_position" N'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_position" N)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" N) ("_position" N')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LTL.semantics_ltln" ("_position" w)
###         ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###           ("_position" N'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" N) ("_position" N')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###         ("_position" N')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_position" N)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" N) ("_position" N')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###         ("_position" N')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 216 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("_cargs" ("_position" i)
###         ("\<^const>Normal_Form.flatten_sigma_2"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("_position" \<psi>))
###           ("_applC" ("_position" \<G>\<F>)
###             ("_cargs" ("_position" \<psi>)
###               ("_applC" ("_position" suffix)
###                 ("_cargs" ("_position" i) ("_position" w))))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("\<^const>LTL.semantics_ltln"
###           ("_applC" ("_position" i) ("_position" w)) ("_position" \<psi>))
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<psi>)
###             ("_applC" ("_position" suffix)
###               ("_cargs" ("_position" i) ("_position" w)))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<psi>)
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<psi>)
###             ("_applC" ("_position" suffix)
###               ("_cargs" ("_position" i) ("_position" w)))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" \<psi>))
###       ("_applC" ("_position" \<G>\<F>)
###         ("_cargs" ("_position" \<psi>)
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 217 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("_cargs" ("_position" i)
###         ("\<^const>Normal_Form.flatten_sigma_2"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("_position" \<psi>))
###           ("_applC" ("_position" \<G>\<F>)
###             ("_cargs" ("_position" \<phi>) ("_position" w))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("\<^const>LTL.semantics_ltln"
###           ("_applC" ("_position" i) ("_position" w)) ("_position" \<psi>))
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<psi>)
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" \<psi>))
###       ("_applC" ("_position" \<G>\<F>)
###         ("_cargs" ("_position" \<phi>) ("_position" w))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 221 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_applC" ("_position" \<G>\<F>)
###         ("_cargs" ("_position" \<phi>) ("_position" w))))
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 341 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("_cargs" ("_position" i)
###         ("\<^const>Normal_Form.flatten_pi_2"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("_position" \<psi>))
###           ("_applC" ("_position" \<F>\<G>)
###             ("_cargs" ("_position" \<psi>)
###               ("_applC" ("_position" suffix)
###                 ("_cargs" ("_position" i) ("_position" w))))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("\<^const>LTL.semantics_ltln"
###           ("_applC" ("_position" i) ("_position" w)) ("_position" \<psi>))
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<psi>)
###             ("_applC" ("_position" suffix)
###               ("_cargs" ("_position" i) ("_position" w)))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<psi>)
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<psi>)
###             ("_applC" ("_position" suffix)
###               ("_cargs" ("_position" i) ("_position" w)))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" \<psi>))
###       ("_applC" ("_position" \<F>\<G>)
###         ("_cargs" ("_position" \<psi>)
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("_cargs" ("_position" i)
###         ("\<^const>Normal_Form.flatten_pi_2"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("_position" \<psi>))
###           ("_applC" ("_position" \<F>\<G>)
###             ("_cargs" ("_position" \<phi>) ("_position" w))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("\<^const>LTL.semantics_ltln"
###           ("_applC" ("_position" i) ("_position" w)) ("_position" \<psi>))
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<psi>)
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" \<psi>))
###       ("_applC" ("_position" \<F>\<G>)
###         ("_cargs" ("_position" \<phi>) ("_position" w))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 346 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_applC" ("_position" \<F>\<G>)
###         ("_cargs" ("_position" \<phi>) ("_position" w))))
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 384 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("_setleEx" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>))
###         ("\<^const>HOL.conj"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###               ("_position" M)))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" \<psi>) ("_position" M)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>LTL.finally\<^sub>n"
###                     ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                       ("_position" N))))))
###             ("_Ball" ("_position" \<psi>) ("_position" N)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>LTL.globally\<^sub>n"
###                     ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                       ("_position" M))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("\<^const>HOL.conj"
###         ("\<^const>Normal_Form.flatten_sigma_2"
###           ("_setleEx" ("_position" N)
###             ("_applC" ("_position" subformulas\<^sub>\<nu>)
###               ("_position" \<phi>))
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>)))
###           ("_position" M))
###         ("\<^const>HOL.conj"
###           ("_Ball" ("_position" \<psi>) ("_position" M)
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("\<^const>LTL.globally\<^sub>n"
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                     ("_position" N))))))
###           ("_Ball" ("_position" \<psi>) ("_position" N)
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("\<^const>LTL.finally\<^sub>n"
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                     ("_position" M)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("_setleEx" ("_position" M)
###           ("_applC" ("_position" subformulas\<^sub>\<mu>)
###             ("_position" \<phi>))
###           ("_setleEx" ("_position" N)
###             ("_applC" ("_position" subformulas\<^sub>\<nu>)
###               ("_position" \<phi>))
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>))))
###         ("_position" M))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" \<psi>) ("_position" M)
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>LTL.globally\<^sub>n"
###               ("\<^const>LTL.finally\<^sub>n"
###                 ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                   ("_position" N))))))
###         ("_Ball" ("_position" \<psi>) ("_position" N)
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>LTL.finally\<^sub>n"
###               ("\<^const>LTL.globally\<^sub>n"
###                 ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                   ("_position" M))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("_setleEx" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>))
###         ("\<^const>HOL.conj"
###           ("\<^const>Normal_Form.flatten_sigma_2"
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>))
###             ("_position" M))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" \<psi>) ("_position" M)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>LTL.finally\<^sub>n"
###                     ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                       ("_position" N))))))
###             ("_Ball" ("_position" \<psi>) ("_position" N)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>LTL.globally\<^sub>n"
###                     ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                       ("_position" M))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 404 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("_setleEx" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>))
###         ("\<^const>HOL.conj"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###               ("_position" N)))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" \<psi>) ("_position" M)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>LTL.finally\<^sub>n"
###                     ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                       ("_position" N))))))
###             ("_Ball" ("_position" \<psi>) ("_position" N)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>LTL.globally\<^sub>n"
###                     ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                       ("_position" M))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("\<^const>HOL.conj"
###         ("\<^const>Normal_Form.flatten_pi_2"
###           ("_setleEx" ("_position" N)
###             ("_applC" ("_position" subformulas\<^sub>\<nu>)
###               ("_position" \<phi>))
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>)))
###           ("_position" N))
###         ("\<^const>HOL.conj"
###           ("_Ball" ("_position" \<psi>) ("_position" M)
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("\<^const>LTL.globally\<^sub>n"
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                     ("_position" N))))))
###           ("_Ball" ("_position" \<psi>) ("_position" N)
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("\<^const>LTL.finally\<^sub>n"
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                     ("_position" M)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("_setleEx" ("_position" M)
###           ("_applC" ("_position" subformulas\<^sub>\<mu>)
###             ("_position" \<phi>))
###           ("_setleEx" ("_position" N)
###             ("_applC" ("_position" subformulas\<^sub>\<nu>)
###               ("_position" \<phi>))
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>))))
###         ("_position" N))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" \<psi>) ("_position" M)
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>LTL.globally\<^sub>n"
###               ("\<^const>LTL.finally\<^sub>n"
###                 ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                   ("_position" N))))))
###         ("_Ball" ("_position" \<psi>) ("_position" N)
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>LTL.finally\<^sub>n"
###               ("\<^const>LTL.globally\<^sub>n"
###                 ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                   ("_position" M))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("_setleEx" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>))
###         ("\<^const>HOL.conj"
###           ("\<^const>Normal_Form.flatten_pi_2"
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>))
###             ("_position" N))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" \<psi>) ("_position" M)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>LTL.finally\<^sub>n"
###                     ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                       ("_position" N))))))
###             ("_Ball" ("_position" \<psi>) ("_position" N)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>LTL.globally\<^sub>n"
###                     ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                       ("_position" M))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Normal_Form"
### 0.745s elapsed time, 0.890s cpu time, 0.106s GC time
Loading theory "Draft.Normal_Form_Complexity" (required by "Draft.Normal_Form_ComplexityMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Normal_Form_Complexity"
### 0.290s elapsed time, 0.309s cpu time, 0.000s GC time
Loading theory "Draft.Normal_Form_ComplexityMoreTemplates"
val templateLemmas =
   [("Normal_Form_Complexity.sf_finite", "finite (sf ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Normal_Form_Complexity.size_gr_0", "0 < size ?\<phi>",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= X\<^sub>n ?\<phi>",
     template_negation
      (
         template_equation
          (template_var 0, template_app (template_hole 0, template_var 0))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "X\<^sub>n ?\<phi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Normal_Form_Complexity.normal_form_length_upper_bound",
     "normal_form_with_flatten_pi_2_length ?\<phi>
      <= normal_form_length_upper_bound ?\<phi>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Normal_Form_Complexity.normal_form_length_upper_bound",
     "normal_form_with_flatten_sigma_2_length ?\<phi>
      <= normal_form_length_upper_bound ?\<phi>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Normal_Form_Complexity.sf_subset_subfrmlsn",
     "sf ?\<phi> <= subfrmlsn ?\<phi>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<phi> and\<^sub>n ?\<psi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<psi> and\<^sub>n ?\<phi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<phi> or\<^sub>n ?\<psi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<psi> or\<^sub>n ?\<phi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<phi> R\<^sub>n ?\<psi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<psi> R\<^sub>n ?\<phi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<phi> M\<^sub>n ?\<psi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<psi> M\<^sub>n ?\<phi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<phi> U\<^sub>n ?\<psi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<psi> U\<^sub>n ?\<phi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<phi> W\<^sub>n ?\<psi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> ~= ?\<psi> W\<^sub>n ?\<phi>",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> and\<^sub>n ?\<psi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<psi> and\<^sub>n ?\<phi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> or\<^sub>n ?\<psi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<psi> or\<^sub>n ?\<phi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> R\<^sub>n ?\<psi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<psi> R\<^sub>n ?\<phi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> M\<^sub>n ?\<psi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<psi> M\<^sub>n ?\<phi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> U\<^sub>n ?\<psi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<psi> U\<^sub>n ?\<phi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<phi> W\<^sub>n ?\<psi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Normal_Form_Complexity.ltln_not_idempotent",
     "?\<psi> W\<^sub>n ?\<phi> ~= ?\<phi>",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Normal_Form_Complexity.flatten_sigma_1_length",
     "size (?\<phi>[?N]\<^sub>\<Sigma>\<^sub>1) <= size ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Normal_Form_Complexity.flatten_pi_1_length",
     "size (?\<phi>[?M]\<^sub>\<Pi>\<^sub>1) <= size ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Normal_Form_Complexity.subfrmlsn_sf_subset",
     "?\<psi> : subfrmlsn ?\<phi> ==> sf ?\<psi> <= sf ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Normal_Form_Complexity.sf_size",
     "?\<psi> : sf ?\<phi> ==> size ?\<psi> <= size ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Normal_Form_Complexity.sf_sf_subset",
     "?\<psi> : sf ?\<phi> ==> sf ?\<psi> <= sf ?\<phi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Normal_Form_Complexity.flatten_pi_2_length",
     "size ?\<phi>[?N]\<^sub>\<Pi>\<^sub>2 <= 2 ^ (size ?\<phi> + 1)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 7, template_var 1)),
           template_hole 0)))),
    ("Normal_Form_Complexity.flatten_sigma_2_length",
     "size ?\<phi>[?M]\<^sub>\<Sigma>\<^sub>2 <= 2 ^ (size ?\<phi> + 1)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 7, template_var 1)),
           template_hole 0)))),
    ("Normal_Form_Complexity.flatten_sigma_2_card_sf",
     "card (sf ?\<phi>[?M]\<^sub>\<Sigma>\<^sub>2)
      <= 3 * card (sf ?\<phi>)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 1))))),
    ("Normal_Form_Complexity.flatten_card_sf",
     "card (UN \<psi>:sf ?\<phi>. sf (\<psi>[?M]\<^sub>\<Sigma>\<^sub>1))
      <= card (sf ?\<phi>)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_hole 4, template_app (template_hole 1, template_var 0)))),
    ("Normal_Form_Complexity.flatten_card_sf",
     "card (UN \<psi>:sf ?\<phi>. sf (\<psi>[?M]\<^sub>\<Pi>\<^sub>1))
      <= card (sf ?\<phi>)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_hole 4, template_app (template_hole 1, template_var 0)))),
    ("Normal_Form_Complexity.flatten_sigma_1_sf_subset",
     "sf (?\<phi>[?M]\<^sub>\<Sigma>\<^sub>1)
      <= (UN \<phi>:sf ?\<phi>. sf (\<phi>[?M]\<^sub>\<Sigma>\<^sub>1))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty),
           template_app (template_hole 3, template_var 1))))),
    ("Normal_Form_Complexity.flatten_pi_1_sf_subset",
     "sf (?\<phi>[?M]\<^sub>\<Pi>\<^sub>1)
      <= (UN \<phi>:sf ?\<phi>. sf (\<phi>[?M]\<^sub>\<Pi>\<^sub>1))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty),
           template_app (template_hole 3, template_var 1))))),
    ("Normal_Form_Complexity.flatten_sigma_2_sf_subset",
     "sf ?\<phi>[?M]\<^sub>\<Sigma>\<^sub>2
      <= (UN \<psi>:sf ?\<phi>. sf \<psi>[?M]\<^sub>\<Sigma>\<^sub>2)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty),
           template_app (template_hole 3, template_var 1))))),
    ("Normal_Form_Complexity.flatten_card_sf",
     "card
       (sf ?\<phi>[?M]\<^sub>\<Sigma>\<^sub>2 Un
        sf (?\<phi>[?M]\<^sub>\<Pi>\<^sub>1))
      <= 3 * card (sf ?\<phi>)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_hole 8,
           template_app (template_hole 6, template_var 1))))),
    ("Normal_Form_Complexity.inequality_1",
     "0 < ?y ==> ?y + 3 <= 2 ^ (?y + 1)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 1, template_hole 3))),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_hole 0))))),
    ("Normal_Form_Complexity.sum_associative",
     "finite ?X ==> (SUM x:?X. ?f x + ?c) = sum ?f ?X + card ?X * ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, t_empty), template_var 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Normal_Form_Complexity.sf_set1",
     "sf ?\<phi>[?M]\<^sub>\<Sigma>\<^sub>2 Un
      sf (?\<phi>[?M]\<^sub>\<Pi>\<^sub>1)
      <= (UN \<psi>:sf ?\<phi>.
             sf \<psi>[?M]\<^sub>\<Sigma>\<^sub>2 Un
             sf (\<psi>[?M]\<^sub>\<Pi>\<^sub>1))",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty),
           template_app (template_hole 4, template_var 1))))),
    ("Normal_Form_Complexity.sf_subset_insert",
     "[| sf ?\<phi> <= insert ?\<phi> ?X; ?\<psi> : subfrmlsn ?\<phi>;
         ?\<phi> ~= ?\<psi> |]
      ==> sf ?\<psi> <= ?X",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 0),
         template_var 1))),
    ("Normal_Form_Complexity.inequality_2",
     "[| 0 < ?x; 0 < ?y |]
      ==> 2 ^ (?x + 1) + 2 ^ (?y + 1) <= 2 ^ (?x + ?y + 1)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_than, template_hole 7, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_hole 0))))),
    ("Normal_Form_Complexity.normal_form_disjunct_length_upper_bound",
     "[| ?M <= subformulas\<^sub>\<mu> ?\<phi>;
         ?N <= subformulas\<^sub>\<nu> ?\<phi> |]
      ==> normal_form_disjunct_with_flatten_pi_2_length ?\<phi> ?M ?N
          <= 2 ^ (size ?\<phi> + 1) + 2 * (size ?\<phi> + 2)\<^sup>2",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 10, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 8, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 2, template_var 1)),
                 template_hole 1))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 2, template_var 1)),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))))))),
    ("Normal_Form_Complexity.normal_form_disjunct_length_upper_bound",
     "[| ?M <= subformulas\<^sub>\<mu> ?\<phi>;
         ?N <= subformulas\<^sub>\<nu> ?\<phi> |]
      ==> normal_form_disjunct_with_flatten_sigma_2_length ?\<phi> ?M ?N
          <= 2 ^ (size ?\<phi> + 1) + 2 * (size ?\<phi> + 2)\<^sup>2",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 10, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 8, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 2, template_var 1)),
                 template_hole 1))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 2, template_var 1)),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))))))),
    ("Normal_Form_Complexity.flatten_card_sf_induct",
     "[| finite ?X; !!x. x : ?X ==> sf x <= ?X |]
      ==> card (UN \<phi>:?X. sf (\<phi>[?N]\<^sub>\<Sigma>\<^sub>1))
          <= card ?X &
          card (UN \<phi>:?X. sf (\<phi>[?M]\<^sub>\<Pi>\<^sub>1))
          <= card ?X &
          card
           (UN \<phi>:?X.
               sf \<phi>[?M]\<^sub>\<Sigma>\<^sub>2 Un
               sf (\<phi>[?M]\<^sub>\<Pi>\<^sub>1))
          <= 3 * card ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, t_empty),
                         template_var 2)))),
                 template_app (template_hole 10, template_var 2))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, t_empty),
                           template_var 2)))),
                   template_app (template_hole 10, template_var 2))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, t_empty),
                         template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_app (template_hole 10, template_var 2)))))
           )))]:
   (string * thm * template) list
### theory "Draft.Normal_Form_ComplexityMoreTemplates"
### 0.517s elapsed time, 0.764s cpu time, 0.126s GC time
val it = (): unit
