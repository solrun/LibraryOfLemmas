Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.AList" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Code_Equations" via "Boolean_Expression_Checkers.Boolean_Expression_Checkers" via "HOL-Library.Mapping")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Code_Equations" via "LTL.LTL" via "HOL-Library.Omega_Words_Fun")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.613s cpu time, 0.038s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Rewriting" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.346s elapsed time, 1.383s cpu time, 0.110s GC time
Loading theory "HOL-Library.Omega_Words_Fun" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Code_Equations" via "LTL.LTL")
### theory "HOL-Library.Nat_Bijection"
### 0.395s elapsed time, 1.580s cpu time, 0.110s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 137 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" drop)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" drop)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###     ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###         ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###       ("\<^const>List.append"
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" i) ("_position" j))
###         ("_list" ("_applC" ("_position" w) ("_position" j)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq" ("_position" i)
###       ("_position" j)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.append"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("\<^const>HOL.eq"
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" i) ("_applC" ("_position" Suc) ("_position" j)))
###           ("_position" w))
###         ("_position" i) ("_position" j))
###       ("_list" ("_applC" ("_position" w) ("_position" j))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" prefix)
###       ("_cargs"
###         ("\<^const>Groups.minus_class.minus" ("_position" j)
###           ("_position" i))
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" i)
###       ("_position" j))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" prefix)
###         ("_cargs"
###           ("\<^const>Groups.minus_class.minus" ("_position" j)
###             ("_position" i))
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w)))))
###       ("_position" w))
###     ("_position" i) ("_position" j)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" take)
###       ("_cargs" ("_position" i)
###         ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###           ("_position" j) ("_position" k))))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w) ("_position" j)
###       ("_applC" ("_position" min)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" take)
###         ("_cargs" ("_position" i)
###           ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###             ("_position" j) ("_position" k))))
###       ("_position" w))
###     ("_position" j)
###     ("_applC" ("_position" min)
###       ("_cargs"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "~~/src/HOL/Library/Omega_Words_Fun.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Omega_Words_Fun.subsequence"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" j) ("_position" k))
###     ("\<^const>Omega_Words_Fun.subsequence" ("_position" w)
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Omega_Words_Fun.subsequence"
###     ("\<^const>HOL.eq"
###       ("\<^const>Omega_Words_Fun.subsequence"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" j) ("_position" k))
###       ("_position" w))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))
###     ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  build :: "'a => (nat => 'a) => nat => 'a"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.400s elapsed time, 1.578s cpu time, 0.149s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Omega_Words_Fun"
### 0.320s elapsed time, 1.254s cpu time, 0.150s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice" via "LTL_Master_Theorem.Syntactic_Fragments_and_Stability")
### theory "HOL-Library.Set_Algebras"
### 0.247s elapsed time, 0.954s cpu time, 0.176s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  prefixes :: "'a list => 'a list list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.253s elapsed time, 4.779s cpu time, 0.988s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Code_Equations" via "Boolean_Expression_Checkers.Boolean_Expression_Checkers")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.188s elapsed time, 4.504s cpu time, 1.038s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Rewriting" via "HOL-Library.Extended_Nat")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Mapping"
### 1.153s elapsed time, 4.530s cpu time, 0.500s GC time
Loading theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Code_Equations")
### theory "HOL-Library.Sublist"
### 1.731s elapsed time, 6.634s cpu time, 1.228s GC time
Loading theory "HOL-Library.AList_Mapping" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Code_Equations" via "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.AList_Mapping"
### 0.128s elapsed time, 0.501s cpu time, 0.065s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.236s elapsed time, 4.851s cpu time, 0.557s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Rewriting" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.302s elapsed time, 8.879s cpu time, 1.448s GC time
Loading theory "Draft.Templates" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.323s cpu time, 0.065s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Disjunctive_Normal_Form")
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
### theory "HOL-Library.Countable_Set"
### 0.480s elapsed time, 1.881s cpu time, 0.247s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Rewriting" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
### theory "HOL-Library.BigO"
### 0.941s elapsed time, 3.682s cpu time, 0.518s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Normal_Form_Code_ExportMoreTemplates")
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  normif :: "('a, bool) mapping => 'a ifex => 'a ifex => 'a ifex => 'a ifex"
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale reduced_bdt_checkers
  fixes ifex_of :: "'b => 'a ifex"
    and val :: "'b => ('a => bool) => bool"
  assumes "reduced_bdt_checkers ifex_of val"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.711s elapsed time, 2.801s cpu time, 0.274s GC time
Loading theory "LTL.LTL" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Code_Equations")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Countable_Complete_Lattices"
### 3.050s elapsed time, 11.588s cpu time, 3.679s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Rewriting" via "HOL-Library.Extended_Nat")
consts
  val_bool_expr :: "'a bool_expr => ('a => bool) => bool"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
### theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers"
### 4.213s elapsed time, 16.137s cpu time, 4.328s GC time
Loading theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Code_Equations")
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 3.764s elapsed time, 14.388s cpu time, 4.118s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  normif_alist ::
    "('a * bool) list => 'a ifex => 'a ifex => 'a ifex => 'a ifex"
### theory "HOL-Library.Order_Continuity"
### 0.648s elapsed time, 2.558s cpu time, 0.365s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Rewriting")
### theory "Boolean_Expression_Checkers.Boolean_Expression_Checkers_AList_Mapping"
### 0.409s elapsed time, 1.609s cpu time, 0.258s GC time
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
consts
  semantics_ltlc :: "(nat => 'a set) => 'a ltlc => bool"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.642s elapsed time, 1.571s cpu time, 0.217s GC time
consts
  semantics_ltln :: "(nat => 'a set) => 'a ltln => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  semantics_ltlr :: "(nat => 'a set) => 'a ltlr => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "LTL.LTL"
### 7.877s elapsed time, 17.449s cpu time, 4.651s GC time
Loading theory "LTL.Equivalence_Relations" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "LTL.Code_Equations")
Loading theory "LTL.Rewriting" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export")
Loading theory "LTL_Master_Theorem.Syntactic_Fragments_and_Stability" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No map function defined for LTL.ltln. This will cause problems later on.
instantiation
  ltln\<^sub>L :: (type) equal
  equal_ltln\<^sub>L == equal_class.equal ::
    'a ltln\<^sub>L => 'a ltln\<^sub>L => bool
### No map function defined for LTL.ltln. This will cause problems later on.
Found termination order: "size <*mlex*> {}"
instantiation
  ltln\<^sub>P :: (type) equal
  equal_ltln\<^sub>P == equal_class.equal ::
    'a ltln\<^sub>P => 'a ltln\<^sub>P => bool
### No map function defined for LTL.ltln. This will cause problems later on.
Found termination order: "{}"
instantiation
  ltln\<^sub>C :: (type) equal
  equal_ltln\<^sub>C == equal_class.equal ::
    'a ltln\<^sub>C => 'a ltln\<^sub>C => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale ltl_equivalence
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
  assumes "ltl_equivalence (\<sim>)"
### theory "LTL.Equivalence_Relations"
### 1.863s elapsed time, 5.871s cpu time, 0.869s GC time
Loading theory "LTL.Code_Equations" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export")
Loading theory "LTL.Disjunctive_Normal_Form" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "LTL.Code_Equations"
### 0.684s elapsed time, 2.521s cpu time, 0.516s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "syntactical_implies"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "LTL_Master_Theorem.Syntactic_Fragments_and_Stability"
### 4.081s elapsed time, 13.519s cpu time, 4.628s GC time
Loading theory "LTL_Master_Theorem.After" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem" via "LTL_Master_Theorem.Advice")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "LTL.Disjunctive_Normal_Form"
### 2.489s elapsed time, 8.476s cpu time, 3.856s GC time
consts
  af_letter :: "'a ltln => 'a set => 'a ltln"
locale af_congruent
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
  assumes "af_congruent (\<sim>)"
locale ltl_equivalence
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
  assumes "ltl_equivalence (\<sim>)"
### theory "LTL_Master_Theorem.After"
### 0.549s elapsed time, 1.470s cpu time, 0.170s GC time
Loading theory "LTL_Master_Theorem.Advice" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "Draft.Normal_Form" via "LTL_Master_Theorem.Master_Theorem")
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale GF_advice_congruent
  fixes eq :: "'a ltln => 'a ltln => bool"  (infix \<open>\<sim>\<close> 75)
    and normalise :: "'a ltln => 'a ltln"
  assumes "GF_advice_congruent (\<sim>) normalise"
### theory "LTL_Master_Theorem.Advice"
### 0.879s elapsed time, 1.891s cpu time, 0.236s GC time
Loading theory "LTL_Master_Theorem.Master_Theorem" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export" via "Draft.Normal_Form")
### theory "LTL_Master_Theorem.Master_Theorem"
### 0.094s elapsed time, 0.199s cpu time, 0.033s GC time
Loading theory "Draft.Normal_Form" (required by "Draft.Normal_Form_Code_ExportMoreTemplates" via "Draft.Normal_Form_Code_Export")
### theory "LTL.Rewriting"
### 5.856s elapsed time, 17.601s cpu time, 5.133s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 108 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("\<^const>Set.inter" ("_position" M)
###         ("_applC" ("_position" subformulas\<^sub>\<mu>)
###           ("_position" \<phi>)))
###       ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("\<^const>Set.inter" ("_position" M) ("_position" S)))
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("\<^const>Set.inter" ("_position" M)
###         ("_applC" ("_position" subformulas\<^sub>\<mu>)
###           ("_position" \<phi>)))
###       ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>HOL.eq"
###         ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###           ("\<^const>Set.inter" ("_position" M) ("_position" S)))
###         ("_position" \<phi>))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 112 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_position" M)
###         ("_applC" ("_position" subformulas\<^sub>\<mu>)
###           ("_position" \<phi>)))
###       ("_position" M')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M'))
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_position" M)
###         ("_applC" ("_position" subformulas\<^sub>\<mu>)
###           ("_position" \<phi>)))
###       ("_position" M')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>HOL.eq"
###         ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###           ("_position" M'))
###         ("_position" \<phi>))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 116 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" M) ("_position" M')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LTL.semantics_ltln" ("_position" w)
###         ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###           ("_position" M'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_position" M)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" M) ("_position" M')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LTL.semantics_ltln" ("_position" w)
###         ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###           ("_position" M'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_position" M))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" M) ("_position" M')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###         ("_position" M')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_position" M)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" M) ("_position" M')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###         ("_position" M')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("\<^const>Set.inter" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>)))
###       ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("\<^const>Set.inter" ("_position" N) ("_position" S)))
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.subset_eq"
###       ("\<^const>Set.inter" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>)))
###       ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>HOL.eq"
###         ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###           ("\<^const>Set.inter" ("_position" N) ("_position" S)))
###         ("_position" \<phi>))
###       ("_position" N))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 125 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>)))
###       ("_position" N')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N'))
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>)))
###       ("_position" N')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>HOL.eq"
###         ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###           ("_position" N'))
###         ("_position" \<phi>))
###       ("_position" N))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" N) ("_position" N')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LTL.semantics_ltln" ("_position" w)
###         ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###           ("_position" N'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_position" N)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" N) ("_position" N')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>LTL.semantics_ltln" ("_position" w)
###         ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###           ("_position" N'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_position" N))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" N) ("_position" N')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###         ("_position" N')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_position" N)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.subset_eq" ("_position" N) ("_position" N')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###         ("_position" N')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 216 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("_cargs" ("_position" i)
###         ("\<^const>Normal_Form.flatten_sigma_2"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("_position" \<psi>))
###           ("_applC" ("_position" \<G>\<F>)
###             ("_cargs" ("_position" \<psi>)
###               ("_applC" ("_position" suffix)
###                 ("_cargs" ("_position" i) ("_position" w))))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("\<^const>LTL.semantics_ltln"
###           ("_applC" ("_position" i) ("_position" w)) ("_position" \<psi>))
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<psi>)
###             ("_applC" ("_position" suffix)
###               ("_cargs" ("_position" i) ("_position" w)))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<psi>)
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<psi>)
###             ("_applC" ("_position" suffix)
###               ("_cargs" ("_position" i) ("_position" w)))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" \<psi>))
###       ("_applC" ("_position" \<G>\<F>)
###         ("_cargs" ("_position" \<psi>)
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 217 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("_cargs" ("_position" i)
###         ("\<^const>Normal_Form.flatten_sigma_2"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("_position" \<psi>))
###           ("_applC" ("_position" \<G>\<F>)
###             ("_cargs" ("_position" \<phi>) ("_position" w))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("\<^const>LTL.semantics_ltln"
###           ("_applC" ("_position" i) ("_position" w)) ("_position" \<psi>))
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<psi>)
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" \<psi>))
###       ("_applC" ("_position" \<G>\<F>)
###         ("_cargs" ("_position" \<phi>) ("_position" w))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 221 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###         ("_applC" ("_position" \<G>\<F>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Normal_Form.flatten_sigma_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_applC" ("_position" \<G>\<F>)
###         ("_cargs" ("_position" \<phi>) ("_position" w))))
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 341 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("_cargs" ("_position" i)
###         ("\<^const>Normal_Form.flatten_pi_2"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("_position" \<psi>))
###           ("_applC" ("_position" \<F>\<G>)
###             ("_cargs" ("_position" \<psi>)
###               ("_applC" ("_position" suffix)
###                 ("_cargs" ("_position" i) ("_position" w))))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("\<^const>LTL.semantics_ltln"
###           ("_applC" ("_position" i) ("_position" w)) ("_position" \<psi>))
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<psi>)
###             ("_applC" ("_position" suffix)
###               ("_cargs" ("_position" i) ("_position" w)))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<psi>)
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<psi>)
###             ("_applC" ("_position" suffix)
###               ("_cargs" ("_position" i) ("_position" w)))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" \<psi>))
###       ("_applC" ("_position" \<F>\<G>)
###         ("_cargs" ("_position" \<psi>)
###           ("_applC" ("_position" suffix)
###             ("_cargs" ("_position" i) ("_position" w))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("_cargs" ("_position" i)
###         ("\<^const>Normal_Form.flatten_pi_2"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("_position" \<psi>))
###           ("_applC" ("_position" \<F>\<G>)
###             ("_cargs" ("_position" \<phi>) ("_position" w))))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" suffix)
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("\<^const>LTL.semantics_ltln"
###           ("_applC" ("_position" i) ("_position" w)) ("_position" \<psi>))
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<psi>)
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln"
###         ("_applC" ("_position" suffix)
###           ("_cargs" ("_position" i) ("_position" w)))
###         ("_position" \<psi>))
###       ("_applC" ("_position" \<F>\<G>)
###         ("_cargs" ("_position" \<phi>) ("_position" w))))
###     ("\<^const>LTL.semantics_ltln"
###       ("_applC" ("_position" suffix)
###         ("_cargs" ("_position" i) ("_position" w)))
###       ("_position" \<psi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 346 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w)
###       ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###         ("_applC" ("_position" \<F>\<G>)
###           ("_cargs" ("_position" \<phi>) ("_position" w)))))
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Normal_Form.flatten_pi_2"
###       ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###       ("_applC" ("_position" \<F>\<G>)
###         ("_cargs" ("_position" \<phi>) ("_position" w))))
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 384 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("_setleEx" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>))
###         ("\<^const>HOL.conj"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>Normal_Form.flatten_sigma_2" ("_position" \<phi>)
###               ("_position" M)))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" \<psi>) ("_position" M)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>LTL.finally\<^sub>n"
###                     ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                       ("_position" N))))))
###             ("_Ball" ("_position" \<psi>) ("_position" N)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>LTL.globally\<^sub>n"
###                     ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                       ("_position" M))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("\<^const>HOL.conj"
###         ("\<^const>Normal_Form.flatten_sigma_2"
###           ("_setleEx" ("_position" N)
###             ("_applC" ("_position" subformulas\<^sub>\<nu>)
###               ("_position" \<phi>))
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>)))
###           ("_position" M))
###         ("\<^const>HOL.conj"
###           ("_Ball" ("_position" \<psi>) ("_position" M)
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("\<^const>LTL.globally\<^sub>n"
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                     ("_position" N))))))
###           ("_Ball" ("_position" \<psi>) ("_position" N)
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("\<^const>LTL.finally\<^sub>n"
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                     ("_position" M)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Normal_Form.flatten_sigma_2"
###         ("_setleEx" ("_position" M)
###           ("_applC" ("_position" subformulas\<^sub>\<mu>)
###             ("_position" \<phi>))
###           ("_setleEx" ("_position" N)
###             ("_applC" ("_position" subformulas\<^sub>\<nu>)
###               ("_position" \<phi>))
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>))))
###         ("_position" M))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" \<psi>) ("_position" M)
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>LTL.globally\<^sub>n"
###               ("\<^const>LTL.finally\<^sub>n"
###                 ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                   ("_position" N))))))
###         ("_Ball" ("_position" \<psi>) ("_position" N)
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>LTL.finally\<^sub>n"
###               ("\<^const>LTL.globally\<^sub>n"
###                 ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                   ("_position" M))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("_setleEx" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>))
###         ("\<^const>HOL.conj"
###           ("\<^const>Normal_Form.flatten_sigma_2"
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>))
###             ("_position" M))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" \<psi>) ("_position" M)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>LTL.finally\<^sub>n"
###                     ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                       ("_position" N))))))
###             ("_Ball" ("_position" \<psi>) ("_position" N)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>LTL.globally\<^sub>n"
###                     ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                       ("_position" M))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 404 of "$AFP/LTL_Normal_Form/Normal_Form.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("_setleEx" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>))
###         ("\<^const>HOL.conj"
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>Normal_Form.flatten_pi_2" ("_position" \<phi>)
###               ("_position" N)))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" \<psi>) ("_position" M)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>LTL.finally\<^sub>n"
###                     ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                       ("_position" N))))))
###             ("_Ball" ("_position" \<psi>) ("_position" N)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>LTL.globally\<^sub>n"
###                     ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                       ("_position" M))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("\<^const>HOL.conj"
###         ("\<^const>Normal_Form.flatten_pi_2"
###           ("_setleEx" ("_position" N)
###             ("_applC" ("_position" subformulas\<^sub>\<nu>)
###               ("_position" \<phi>))
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>)))
###           ("_position" N))
###         ("\<^const>HOL.conj"
###           ("_Ball" ("_position" \<psi>) ("_position" M)
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("\<^const>LTL.globally\<^sub>n"
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                     ("_position" N))))))
###           ("_Ball" ("_position" \<psi>) ("_position" N)
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("\<^const>LTL.finally\<^sub>n"
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                     ("_position" M)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("\<^const>HOL.conj"
###       ("\<^const>Normal_Form.flatten_pi_2"
###         ("_setleEx" ("_position" M)
###           ("_applC" ("_position" subformulas\<^sub>\<mu>)
###             ("_position" \<phi>))
###           ("_setleEx" ("_position" N)
###             ("_applC" ("_position" subformulas\<^sub>\<nu>)
###               ("_position" \<phi>))
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>))))
###         ("_position" N))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" \<psi>) ("_position" M)
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>LTL.globally\<^sub>n"
###               ("\<^const>LTL.finally\<^sub>n"
###                 ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                   ("_position" N))))))
###         ("_Ball" ("_position" \<psi>) ("_position" N)
###           ("\<^const>LTL.semantics_ltln" ("_position" w)
###             ("\<^const>LTL.finally\<^sub>n"
###               ("\<^const>LTL.globally\<^sub>n"
###                 ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                   ("_position" M))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>LTL.semantics_ltln" ("_position" w) ("_position" \<phi>))
###     ("_setleEx" ("_position" M)
###       ("_applC" ("_position" subformulas\<^sub>\<mu>) ("_position" \<phi>))
###       ("_setleEx" ("_position" N)
###         ("_applC" ("_position" subformulas\<^sub>\<nu>)
###           ("_position" \<phi>))
###         ("\<^const>HOL.conj"
###           ("\<^const>Normal_Form.flatten_pi_2"
###             ("\<^const>LTL.semantics_ltln" ("_position" w)
###               ("_position" \<phi>))
###             ("_position" N))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" \<psi>) ("_position" M)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.globally\<^sub>n"
###                   ("\<^const>LTL.finally\<^sub>n"
###                     ("\<^const>Advice.FG_advice" ("_position" \<psi>)
###                       ("_position" N))))))
###             ("_Ball" ("_position" \<psi>) ("_position" N)
###               ("\<^const>LTL.semantics_ltln" ("_position" w)
###                 ("\<^const>LTL.finally\<^sub>n"
###                   ("\<^const>LTL.globally\<^sub>n"
###                     ("\<^const>Advice.GF_advice" ("_position" \<psi>)
###                       ("_position" M))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Normal_Form"
### 0.823s elapsed time, 1.224s cpu time, 0.166s GC time
Loading theory "Draft.Normal_Form_Code_Export" (required by "Draft.Normal_Form_Code_ExportMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
See theory exports
See theory exports
### theory "Draft.Normal_Form_Code_Export"
### 2.930s elapsed time, 3.288s cpu time, 0.425s GC time
Loading theory "Draft.Normal_Form_Code_ExportMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Normal_Form_Code_ExportMoreTemplates"
### 11.932s elapsed time, 36.886s cpu time, 35.983s GC time
val it = (): unit
