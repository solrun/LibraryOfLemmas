Loading theory "Draft.CJDDLplus" (required by "Draft.CJDDLplusMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CJDDLplusMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CJDDLplusMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CJDDLplusMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 3
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = 
show_skolems = 
show_types = 
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = true
verbose = false
wf = smart
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.560s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CJDDLplusMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.CJDDLplus"
### 0.209s elapsed time, 0.853s cpu time, 0.039s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.258s elapsed time, 1.000s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CJDDLplusMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.359s elapsed time, 1.307s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CJDDLplusMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.750s elapsed time, 2.298s cpu time, 0.291s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.942s elapsed time, 2.742s cpu time, 0.707s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.843s elapsed time, 4.261s cpu time, 0.876s GC time
Loading theory "Draft.Templates" (required by "Draft.CJDDLplusMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.067s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CJDDLplusMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.446s elapsed time, 0.452s cpu time, 0.000s GC time
Loading theory "Draft.CJDDLplusMoreTemplates"
val templateLemmas =
   [("CJDDLplus.CJ_4", "ALL c w. ~ ob (?A c) \<bottom>",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("CJDDLplus.sem_5ab", "ob ?X ?Y --> \<I>?X \<sqinter> ?Y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, t_empty))
         )),
    ("CJDDLplus.sem_5b1", "ob ?X ?Y --> ob ?X (?Y \<sqinter> ?X)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1), t_empty))
         )),
    ("CJDDLplus.sem_5b2", "ob ?X (?Y \<sqinter> ?X) --> ob ?X ?Y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1), t_empty)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))
         )),
    ("CJDDLplus.C_7",
     "ALL c.
         (\<^bold>O\<langle>?B|?A\<rangle>) c \<sqsubseteq>
         (%w. \<lfloor>\<^bold>O\<langle>?B|?A\<rangle>\<rfloor>\<^sup>M
               c)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("CJDDLplus.C_2",
     "ALL c.
         (\<^bold>O\<langle>?A|?B\<rangle>) c \<sqsubseteq>
         (%w. \<I>(?B \<^bold>\<and> ?A) c)",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("CJDDLplus.C_8",
     "ALL c.
         (\<^bold>O\<langle>?B|?A\<rangle>) c \<sqsubseteq>
         (%w. ob \<top> ((?A \<^bold>\<rightarrow> ?B) c))",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("CJDDLplus.CJ_6",
     "ALL c.
         (\<^bold>O\<langle>?B|?A\<rangle>) c \<sqsubseteq>
         (\<^bold>O\<langle>?B|?A \<^bold>\<and> ?B\<rangle>) c",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("CJDDLplus.CJ_9_var_a",
     "ALL c.
         (\<^bold>O\<langle>?B|?A\<rangle>) c \<sqsubseteq>
         (%w. av w \<sqsubseteq> (\<^bold>O\<langle>?B|?A\<rangle>) c)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("CJDDLplus.CJ_9_var_b",
     "ALL c.
         (\<^bold>O\<langle>?B|?A\<rangle>) c \<sqsubseteq>
         (%w. pv w \<sqsubseteq> (\<^bold>O\<langle>?B|?A\<rangle>) c)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("CJDDLplus.sem_5bd3",
     "ob ?X ?Y & ?X \<sqsubseteq> ?Z --> ob ?Z ((\<sim>?X) \<squnion> ?Y)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 2, t_empty))),
           template_app
            (template_app (template_hole 3, template_var 0), t_empty))
         )),
    ("CJDDLplus.NecDDLa",
     "\<lfloor>?A\<rfloor> ==> \<lfloor>\<^bold>\<box>\<^sub>a?A\<rfloor>",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("CJDDLplus.NecDDLp",
     "\<lfloor>?A\<rfloor> ==> \<lfloor>\<^bold>\<box>\<^sub>p?A\<rfloor>",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("CJDDLplus.CJ_3",
     "ALL c.
         (\<^bold>\<box>\<^sub>p?A) c \<sqsubseteq>
         (\<^bold>\<box>\<^sub>a?A) c",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("CJDDLplus.sem_5bd4",
     "ob ?X ?Y & ?X \<sqsubseteq> ?Z -->
      ob ?Z ((\<sim>?X) \<squnion> ?X \<sqinter> ?Y)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 2, t_empty))),
           template_app
            (template_app (template_hole 3, template_var 0), t_empty))
         )),
    ("CJDDLplus.sem_5bd2",
     "ob ?X ?Y & ?X \<sqsubseteq> ?Z -->
      ob ?Z ((?Z \<sqinter> (\<sim>?X)) \<squnion> ?Y)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 2, t_empty))),
           template_app
            (template_app (template_hole 3, template_var 0), t_empty))
         )),
    ("CJDDLplus.C_5",
     "ALL c.
         (%w. ALL v. ?A c v = ?B c v) \<sqsubseteq>
         (%w. ob (?A c) (?C c) --> ob (?B c) (?C c))",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("CJDDLplus.CJ_9p",
     "ALL c.
         (%w. \<I>(%v. av w v & ob (?A c) (?B c))) \<sqsubseteq>
         (%w. av w \<sqsubseteq> (\<^bold>O\<langle>?B|?A\<rangle>) c)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("CJDDLplus.CJ_9a",
     "ALL c.
         (%w. \<I>(%v. pv w v & ob (?A c) (?B c))) \<sqsubseteq>
         (%w. pv w \<sqsubseteq> (\<^bold>O\<langle>?B|?A\<rangle>) c)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("CJDDLplus.CJ_7",
     "(ALL c w. ?A c w = ?B c w) -->
      (ALL c w. ob (?A c) (?C c) = ob (?B c) (?C c))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app (template_hole 3, t_empty))
         )),
    ("CJDDLplus.C_6",
     "ALL c.
         (%w. ?C c \<sqsubseteq> (%v. ?A c v = ?B c v)) \<sqsubseteq>
         (%w. ob (?C c) (?A c) = ob (?C c) (?B c))",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("CJDDLplus.sem_5bd1",
     "?Y \<sqsubseteq> ?X & ob ?X ?Y & ?X \<sqsubseteq> ?Z -->
      ob ?Z ((\<sim>?X) \<squnion> ?Y)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 2)),
                 template_app (template_hole 3, t_empty)))),
           template_app
            (template_app (template_hole 2, template_var 0), t_empty))
         )),
    ("CJDDLplus.CJ_8",
     "(ALL c. ?C c \<sqsubseteq> (%w. ?A c w = ?B c w)) -->
      (ALL c w. ob (?C c) (?A c) = ob (?C c) (?B c))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app (template_hole 3, t_empty))
         )),
    ("CJDDLplus.C_4",
     "ALL c.
         (%w. ?A c \<sqsubseteq> ?B c &
              \<I>(?A \<^bold>\<and> ?C) c & ob (?B c) (?C c)) \<sqsubseteq>
         (\<^bold>O\<langle>?C|?A\<rangle>) c",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("CJDDLplus.CJ_10",
     "ALL c.
         (%w. \<I>pv w \<sqinter>
                  (?A \<^bold>\<and> ?B \<^bold>\<and> ?C) c &
              ob (?B c) (?C c)) \<sqsubseteq>
         (\<^bold>O\<langle>?C|?A \<^bold>\<and> ?B\<rangle>) c",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("CJDDLplus.C_3",
     "ALL c.
         (%w. \<I>(?A \<^bold>\<and> ?B \<^bold>\<and> ?C) c &
              ob (?A c) (?B c) & ob (?A c) (?C c)) \<sqsubseteq>
         (\<^bold>O\<langle>?B \<^bold>\<and> ?C|?A\<rangle>) c",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("CJDDLplus.CJ_13a",
     "ALL c.
         (%w. av w \<sqsubseteq> (%v. ?A c v = ?B c v)) \<sqsubseteq>
         (%w. (\<^bold>O\<^sub>a?A) c w = (\<^bold>O\<^sub>a?B) c w)",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("CJDDLplus.CJ_13p",
     "ALL c.
         (%w. pv w \<sqsubseteq> (%v. ?A c v = ?B c v)) \<sqsubseteq>
         (%w. (\<^bold>O\<^sub>i?A) c w = (\<^bold>O\<^sub>i?B) c w)",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("CJDDLplus.CJ_12a",
     "ALL c.
         (\<^bold>\<box>\<^sub>a?A) c \<sqsubseteq>
         (%w. (\<^bold>\<not>\<^bold>O\<^sub>a?A) c w &
              ~ (ob (av w) ((\<^bold>\<not>?A) c) &
                 \<I>av w \<sqinter> (\<^bold>\<not>\<^bold>\<not>?A) c))",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("CJDDLplus.CJ_12p",
     "ALL c.
         (\<^bold>\<box>\<^sub>p?A) c \<sqsubseteq>
         (%w. (\<^bold>\<not>\<^bold>O\<^sub>i?A) c w &
              ~ (ob (pv w) ((\<^bold>\<not>?A) c) &
                 \<I>pv w \<sqinter> (\<^bold>\<not>\<^bold>\<not>?A) c))",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("CJDDLplus.CJ_14a",
     "ALL c.
         (%w. ob (?A c) (?B c) &
              (\<^bold>\<box>\<^sub>a?A) c w &
              (\<^bold>\<diamond>\<^sub>a?B) c w &
              \<I>av w \<sqinter> (\<^bold>\<not>?B) c) \<sqsubseteq>
         (\<^bold>O\<^sub>a?B) c",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("CJDDLplus.CJ_14p",
     "ALL c.
         (%w. ob (?A c) (?B c) &
              (\<^bold>\<box>\<^sub>p?A) c w &
              (\<^bold>\<diamond>\<^sub>p?B) c w &
              \<I>pv w \<sqinter> (\<^bold>\<not>?B) c) \<sqsubseteq>
         (\<^bold>O\<^sub>i?B) c",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("CJDDLplus.CJ_Oi_Oa",
     "ALL c.
         (%w. (\<^bold>O\<^sub>i?A) c w &
              (\<^bold>\<diamond>\<^sub>a?A) c w &
              \<I>av w \<sqinter> (\<^bold>\<not>?A) c) \<sqsubseteq>
         (\<^bold>O\<^sub>a?A) c",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("CJDDLplus.CJ_15a",
     "ALL c.
         (%w. ob (?A c) (?B c) &
              \<I>av w \<sqinter> (?A \<^bold>\<and> ?B) c &
              \<I>av w \<sqinter>
                  (?A \<^bold>\<and> \<^bold>\<not>?B) c) \<sqsubseteq>
         (%w. ob (av w) ((?A \<^bold>\<rightarrow> ?B) c) &
              \<I>av w \<sqinter>
                  (\<^bold>\<not>(?A \<^bold>\<rightarrow> ?B)) c)",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("CJDDLplus.CJ_15p",
     "ALL c.
         (%w. ob (?A c) (?B c) &
              \<I>pv w \<sqinter> (?A \<^bold>\<and> ?B) c &
              \<I>pv w \<sqinter>
                  (?A \<^bold>\<and> \<^bold>\<not>?B) c) \<sqsubseteq>
         (%w. ob (pv w) ((?A \<^bold>\<rightarrow> ?B) c) &
              \<I>pv w \<sqinter>
                  (\<^bold>\<not>(?A \<^bold>\<rightarrow> ?B)) c)",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("CJDDLplus.CJ_11a_var",
     "ALL c.
         (%w. \<I>av w \<sqinter> (?A \<^bold>\<and> ?B) c &
              (\<^bold>O\<^sub>a?A \<^bold>\<and> \<^bold>O\<^sub>a?B) c
               w) \<sqsubseteq>
         (%w. ob (av w) ((?A \<^bold>\<and> ?B) c) &
              \<I>av w \<sqinter>
                  (\<^bold>\<not>(?A \<^bold>\<and> ?B)) c)",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("CJDDLplus.CJ_11p_var",
     "ALL c.
         (%w. \<I>pv w \<sqinter> (?A \<^bold>\<and> ?B) c &
              (\<^bold>O\<^sub>i?A \<^bold>\<and> \<^bold>O\<^sub>i?B) c
               w) \<sqsubseteq>
         (%w. ob (pv w) ((?A \<^bold>\<and> ?B) c) &
              \<I>pv w \<sqinter>
                  (\<^bold>\<not>(?A \<^bold>\<and> ?B)) c)",
     template_predicate (template_app (template_hole 7, t_empty)))]:
   (string * thm * template) list
### theory "Draft.CJDDLplusMoreTemplates"
### 0.379s elapsed time, 0.521s cpu time, 0.059s GC time
val it = (): unit
