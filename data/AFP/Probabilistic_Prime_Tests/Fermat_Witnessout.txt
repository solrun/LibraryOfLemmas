Loading theory "Draft.Algebraic_Auxiliaries" (required by "Draft.Fermat_WitnessTemplates" via "Draft.Fermat_Witness" via "Draft.Euler_Witness" via "Draft.Jacobi_Symbol")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Fermat_WitnessTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Legendre_Symbol" (required by "Draft.Fermat_WitnessTemplates" via "Draft.Fermat_Witness" via "Draft.Euler_Witness" via "Draft.Jacobi_Symbol")
Loading theory "Draft.Templates" (required by "Draft.Fermat_WitnessTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.085s elapsed time, 0.388s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.514s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Fermat_WitnessTemplates" via "Draft.ExtrEqs")
### theory "Draft.Legendre_Symbol"
### 0.154s elapsed time, 0.572s cpu time, 0.051s GC time
### theory "HOL-Library.BigO"
### 0.642s elapsed time, 1.321s cpu time, 0.146s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Fermat_WitnessTemplates")
### theory "Draft.Algebraic_Auxiliaries"
### 0.843s elapsed time, 1.968s cpu time, 0.198s GC time
Loading theory "Draft.Residues_Nat" (required by "Draft.Fermat_WitnessTemplates" via "Draft.Fermat_Witness" via "Draft.Euler_Witness")
Loading theory "Draft.Jacobi_Symbol" (required by "Draft.Fermat_WitnessTemplates" via "Draft.Fermat_Witness" via "Draft.Euler_Witness")
locale residues_mult_nat
  fixes n :: "nat"
    and G :: "nat monoid"
  assumes "residues_mult_nat n"
  defines "G == Residues_Mult n"
locale residues_nat
  fixes n :: "nat"
    and R :: "nat ring"
  assumes "residues_nat n"
  defines "R == Residues_nat n"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.556s cpu time, 0.165s GC time
### theory "Draft.Jacobi_Symbol"
### 0.806s elapsed time, 2.271s cpu time, 0.688s GC time
Loading theory "Draft.QuadRes" (required by "Draft.Fermat_WitnessTemplates" via "Draft.Fermat_Witness" via "Draft.Euler_Witness")
### theory "Draft.QuadRes"
### 0.090s elapsed time, 0.190s cpu time, 0.072s GC time
locale residues_nat_prime
  fixes p :: "nat"
    and R :: "nat ring"
  assumes "residues_nat_prime p"
  defines "R == Residues_nat p"
### theory "Draft.Residues_Nat"
### 1.838s elapsed time, 3.526s cpu time, 0.934s GC time
Loading theory "Draft.Carmichael_Numbers" (required by "Draft.Fermat_WitnessTemplates" via "Draft.Fermat_Witness")
Loading theory "Draft.Euler_Witness" (required by "Draft.Fermat_WitnessTemplates" via "Draft.Fermat_Witness")
### theory "Draft.Carmichael_Numbers"
### 0.079s elapsed time, 0.159s cpu time, 0.000s GC time
locale euler_witness_context
  fixes p :: "nat"
  assumes "euler_witness_context p"
### theory "Draft.Euler_Witness"
### 0.404s elapsed time, 0.532s cpu time, 0.078s GC time
Loading theory "Draft.Fermat_Witness" (required by "Draft.Fermat_WitnessTemplates")
### theory "Draft.Fermat_Witness"
### 0.364s elapsed time, 0.415s cpu time, 0.082s GC time
Loading theory "Draft.Fermat_WitnessTemplates"
val templateLemmas =
   [("Fermat_Witness.fermat_liar_witness_of_composition",
     "fermat_liar ?a ?n ~= fermat_witness ?a ?n",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Fermat_Witness.fermat_liar_witness_of_composition",
     "fermat_witness ?a ?n ~= fermat_liar ?a ?n",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Fermat_Witness.snd_divide_out",
     "snd (divide_out ?p ?x) = multiplicity ?p ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Fermat_Witness.one_is_fermat_liar", "1 < ?n ==> fermat_liar 1 ?n",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0)
           ))),
    ("Fermat_Witness.one_is_strong_fermat_liar",
     "1 < ?n ==> strong_fermat_liar 1 ?n",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0)
           ))),
    ("Fermat_Witness.divide_out_code",
     "divide_out ?p ?x = divide_out_aux ?p (?x, 0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Fermat_Witness.multiplicity_code",
     "multiplicity ?p ?x = snd (divide_out_aux ?p (?x, 0))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Fermat_Witness.fst_divide_out",
     "fst (divide_out ?p ?x) = ?x div ?p ^ multiplicity ?p ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Fermat_Witness.prime_imp_fermat_liar",
     "[| prime ?p; ?a : {1..<?p} |] ==> fermat_liar ?a ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Fermat_Witness.liar_imp_coprime",
     "[| ?a : {1..<?n}; fermat_liar ?a ?n |] ==> coprime ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.not_coprime_imp_witness",
     "[| ?a : {1..<?n}; ~ coprime ?a ?n |] ==> fermat_witness ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.fermat_witness_imp_strong_fermat_witness",
     "[| ?a : {1..<?n}; 1 < ?n; fermat_witness ?a ?n |]
      ==> strong_fermat_witness ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 3, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.strong_fermat_liar_imp_fermat_liar",
     "[| ?a : {1..<?n}; 1 < ?n; strong_fermat_liar ?a ?n |]
      ==> fermat_liar ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 3, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.divide_out_aux_correct",
     "divide_out_aux ?p ?z =
      (fst ?z div ?p ^ multiplicity ?p (fst ?z),
       snd ?z + multiplicity ?p (fst ?z))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 4, template_var 0)))))),
    ("Fermat_Witness.prime_imp_strong_fermat_witness",
     "[| prime ?p; 2 < ?p; ?a : {1..<?p} |] ==> strong_fermat_liar ?a ?p",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Fermat_Witness.Carmichael_number_imp_lower_bound_on_strong_fermat_witness",
     "Carmichael_number ?n ==>
      (?n - 1) div 2 < card {a: {1..<?n}. strong_fermat_witness a ?n}",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 0),
               template_hole 9)),
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6))),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Fermat_Witness.not_Carmichael_numberD",
     "[| ~ Carmichael_number ?n; ~ prime ?n; 1 < ?n |]
      ==> EX a:{2..<?n}. fermat_witness a ?n & coprime a ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            ),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0)),
             t_empty)
           ))),
    ("Fermat_Witness.multiplicity_times_same_power",
     "[| ?x ~= (0::?'a); ~ is_unit ?p; ?p ~= (0::?'a) |]
      ==> multiplicity ?p (?p ^ ?k * ?x) = multiplicity ?p ?x + ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)
                )
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Fermat_Witness.Carmichael_number_imp_lower_bound_on_strong_fermat_witness",
     "Carmichael_number ?n ==>
      real (card {a. 2 <= a & a < ?n & strong_fermat_liar a ?n})
      < real (?n - 2) / 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 12,
           template_app
            (template_hole 11, template_app (template_hole 10, t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5))))),
           template_app
            (template_hole 0,
             template_app (template_hole 6, template_hole 5)))))),
    ("Fermat_Witness.divide_out_unique_nat",
     "[| ~ is_unit ?p; ?p ~= 0; ~ ?p dvd ?m; ?n = ?p ^ ?k * ?m |]
      ==> ?k = multiplicity ?p ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_hole 5)
                )
            ),
        template_negation
         (template_equation (template_var 3, template_hole 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)
                )
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0)),
            template_var 2))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Fermat_Witness.fermat_witness_is_euler_witness",
     "[| ?a : {1..<?n}; 1 < ?n; fermat_witness ?a ?n; coprime ?a ?n;
         odd ?n |]
      ==> euler_witness (int ?a) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 10, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Fermat_Witness.euler_liar_is_fermat_liar",
     "[| ?a : {1..<?n}; 1 < ?n; euler_liar (int ?a) ?n; coprime ?a ?n;
         odd ?n |]
      ==> fermat_liar ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 10, template_var 0),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 1)),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.divide_out_unique_nat",
     "[| ~ is_unit ?p; ?p ~= 0; ~ ?p dvd ?m; ?n = ?p ^ ?k * ?m |]
      ==> ?m = ?n div ?p ^ multiplicity ?p ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_hole 6)
                )
            ),
        template_negation
         (template_equation (template_var 3, template_hole 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)
                )
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0)),
            template_var 2))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)))))),
    ("Fermat_Witness.strong_fermat_liar_code",
     "strong_fermat_liar ?a ?n =
      (let (m, k) = divide_out 2 (?n - 1)
       in [?a ^ m = 1] (mod ?n) |
          (EX i:{0..<k}. [?a ^ (2 ^ i * m) = ?n - 1] (mod ?n)))",
     template_equation
      (template_app
        (template_app (template_hole 15, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 12,
                 template_app (template_hole 11, template_hole 10))),
             template_app
              (template_app (template_hole 9, template_var 0),
               template_hole 8))),
         template_app (template_hole 7, t_empty)))),
    ("Fermat_Witness.ignore_one",
     "[| ?P 1 ?n; 1 < ?n |]
      ==> card {a: {1..<?n}. ?P a ?n} =
          1 + card {a. 2 <= a & a < ?n & ?P a ?n}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 1, template_hole 12),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 12, template_var 0)],
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app
          (template_app (template_hole 4, template_hole 12),
           template_app
            (template_hole 9, template_app (template_hole 8, t_empty)))))),
    ("Fermat_Witness.not_Carmichael_number_imp_card_fermat_witness_bound",
     "[| ~ prime ?n; ~ Carmichael_number ?n; odd ?n; 1 < ?n |]
      ==> (?n - 1) div 2 < card {a: {1..<?n}. fermat_witness a ?n}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 15, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 14, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 8)),
           template_app
            (template_hole 12,
             template_app (template_hole 11, template_hole 10))),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Fermat_Witness.strong_fermat_witness_lower_bound",
     "[| odd ?n; 2 < ?n; ~ prime ?n |]
      ==> real (card {a. 2 <= a & a < ?n & strong_fermat_liar a ?n})
          < real (?n - 2) / 2",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12))),
                  template_var 0)
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)),
          template_var 0),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12))))),
           template_app
            (template_hole 0,
             template_app (template_hole 13, template_hole 12)))))),
    ("Fermat_Witness.not_Carmichael_number_imp_card_fermat_witness_bound",
     "[| ~ prime ?n; ~ Carmichael_number ?n; odd ?n; 1 < ?n |]
      ==> real (card {a. 2 <= a & a < ?n & fermat_liar a ?n})
          < real (?n - 2) / 2",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 17, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 16, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12))))),
           template_app
            (template_hole 0,
             template_app (template_hole 13, template_hole 12)))))),
    ("Fermat_Witness.not_Carmichael_number_imp_card_fermat_witness_bound",
     "[| ~ prime ?n; ~ Carmichael_number ?n; odd ?n; 1 < ?n |]
      ==> real (card {a. 2 <= a & a < ?n & strong_fermat_liar a ?n})
          < real (?n - 2) / 2",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 17, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 16, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12))))),
           template_app
            (template_hole 0,
             template_app (template_hole 13, template_hole 12)))))),
    ("Fermat_Witness.strong_fermat_witness_iff",
     "?a : {1..<?n} ==>
      strong_fermat_witness ?a ?n =
      (EX k m.
          odd m &
          ?n - 1 = 2 ^ k * m &
          [?a ^ m \<noteq> 1] (mod ?n) &
          (ALL i:{0..<k}. [?a ^ (2 ^ i * m) \<noteq> ?n - 1] (mod ?n)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_app
               (template_app (template_hole 17, template_hole 16),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 14, template_var 1), template_var 0),
         template_app (template_hole 13, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Fermat_WitnessTemplates"
### 0.849s elapsed time, 1.533s cpu time, 0.758s GC time
val it = (): unit
