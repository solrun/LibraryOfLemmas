Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Euler_WitnessTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Algebraic_Auxiliaries" (required by "Draft.Euler_WitnessTemplates" via "Draft.Euler_Witness" via "Draft.Jacobi_Symbol")
Loading theory "Draft.Legendre_Symbol" (required by "Draft.Euler_WitnessTemplates" via "Draft.Euler_Witness" via "Draft.Jacobi_Symbol")
Loading theory "Draft.Templates" (required by "Draft.Euler_WitnessTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.127s elapsed time, 0.495s cpu time, 0.044s GC time
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.581s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Euler_WitnessTemplates" via "Draft.ExtrEqs")
### theory "Draft.Legendre_Symbol"
### 0.179s elapsed time, 0.661s cpu time, 0.044s GC time
### theory "HOL-Library.BigO"
### 0.688s elapsed time, 1.405s cpu time, 0.131s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Euler_WitnessTemplates")
### theory "Draft.Algebraic_Auxiliaries"
### 0.885s elapsed time, 2.084s cpu time, 0.175s GC time
Loading theory "Draft.Residues_Nat" (required by "Draft.Euler_WitnessTemplates" via "Draft.Euler_Witness")
Loading theory "Draft.Jacobi_Symbol" (required by "Draft.Euler_WitnessTemplates" via "Draft.Euler_Witness")
locale residues_mult_nat
  fixes n :: "nat"
    and G :: "nat monoid"
  assumes "residues_mult_nat n"
  defines "G == Residues_Mult n"
locale residues_nat
  fixes n :: "nat"
    and R :: "nat ring"
  assumes "residues_nat n"
  defines "R == Residues_nat n"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.585s elapsed time, 1.683s cpu time, 0.156s GC time
### theory "Draft.Jacobi_Symbol"
### 0.798s elapsed time, 2.280s cpu time, 0.631s GC time
Loading theory "Draft.QuadRes" (required by "Draft.Euler_WitnessTemplates" via "Draft.Euler_Witness")
### theory "Draft.QuadRes"
### 0.086s elapsed time, 0.178s cpu time, 0.055s GC time
locale residues_nat_prime
  fixes p :: "nat"
    and R :: "nat ring"
  assumes "residues_nat_prime p"
  defines "R == Residues_nat p"
### theory "Draft.Residues_Nat"
### 1.852s elapsed time, 3.545s cpu time, 0.862s GC time
Loading theory "Draft.Euler_Witness" (required by "Draft.Euler_WitnessTemplates")
locale euler_witness_context
  fixes p :: "nat"
  assumes "euler_witness_context p"
### theory "Draft.Euler_Witness"
### 0.429s elapsed time, 0.477s cpu time, 0.079s GC time
Loading theory "Draft.Euler_WitnessTemplates"
val templateLemmas =
   [("Euler_Witness.euler_witness_mod",
     "euler_witness (?a mod int ?p) ?p = euler_witness ?a ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Euler_Witness.euler_liar_1_p", "?p ~= 0 ==> euler_liar 1 ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)
               )
           ))),
    ("Euler_Witness.euler_liar_mod",
     "euler_liar (?a mod int ?p) ?p = euler_liar ?a ?p",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Euler_Witness.euler_liar_cong",
     "[?a = ?b] (mod int ?p) ==> euler_liar ?a ?p = euler_liar ?b ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Euler_Witness.euler_liar_mult",
     "[| euler_liar ?y ?n; euler_liar ?x ?n |] ==> euler_liar (?x * ?y) ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)),
                 template_var 1)
               )
           ))),
    ("Euler_Witness.prime_imp_euler_liar",
     "[| prime ?p; 2 < ?p; 0 < ?x; ?x < int ?p |] ==> euler_liar ?x ?p",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("Euler_Witness.euler_liar_mult'",
     "[| 1 < ?n; coprime ?y (int ?n); euler_liar ?y ?n;
         euler_witness ?x ?n |]
      ==> euler_witness (?x * ?y) ?n",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Euler_Witness.euler_witnessI",
     "[| [?x ^ ((?n - 1) div 2) = ?a] (mod int ?n);
         [Jacobi ?x (int ?n) \<noteq> ?a] (mod int ?n) |]
      ==> euler_witness ?x ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 2),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 8, template_var 1),
                          template_hole 7)),
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))))),
                template_var 0),
              template_app (template_hole 3, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_app (template_hole 3, template_var 1))),
                    template_var 0),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Euler_Witness.euler_witness_exists_weak",
     "[| odd ?n; ~ prime ?n; 2 < ?n |]
      ==> EX a. euler_witness a ?n & coprime a (int ?n)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 0))
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)),
          template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Euler_Witness.euler_witness_exists_nat",
     "[| odd ?n; ~ prime ?n; 2 < ?n |]
      ==> EX a. euler_witness (int a) ?n & coprime a ?n & 0 < a & a < ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_hole 8))),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Euler_Witness.euler_witness_exists",
     "[| odd ?n; ~ prime ?n; 2 < ?n |]
      ==> EX a. euler_witness a ?n &
                coprime a (int ?n) & 0 < a & a < int ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_hole 9))),
                  template_var 0)
                )
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 0))
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_hole 9)),
          template_var 0)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Euler_Witness.euler_witnessI2",
     "[| [?a \<noteq> ?b] (mod int ?k); ?k dvd ?n;
         euler_liar ?x ?n ==> [Jacobi ?x (int ?n) = ?a] (mod int ?k);
         euler_liar ?x ?n ==> [?x ^ ((?n - 1) div 2) = ?b] (mod int ?k) |]
      ==> euler_witness ?x ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 4),
                    template_var 3),
                  template_app (template_hole 10, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_var 1)
                   )
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_app (template_hole 10, template_var 1))),
                  template_var 4),
                template_app (template_hole 10, template_var 2))
              )),
        template_implication
         ([template_negation
            (
               template_predicate
                (
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_var 1)
                   )
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 6, template_var 0),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 1),
                            template_hole 3)),
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 1, template_hole 0))))),
                  template_var 3),
                template_app (template_hole 10, template_var 2))
              ))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 0), template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Euler_WitnessTemplates"
### 0.640s elapsed time, 0.847s cpu time, 0.097s GC time
val it = (): unit
