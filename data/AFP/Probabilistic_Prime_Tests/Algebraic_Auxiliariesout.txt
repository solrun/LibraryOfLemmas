Loading theory "Draft.Algebraic_Auxiliaries" (required by "Draft.Algebraic_AuxiliariesTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Algebraic_AuxiliariesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Algebraic_AuxiliariesTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.270s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.115s elapsed time, 0.349s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Algebraic_AuxiliariesTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.BigO"
### 0.689s elapsed time, 1.406s cpu time, 0.141s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Algebraic_AuxiliariesTemplates")
### theory "Draft.Algebraic_Auxiliaries"
### 0.891s elapsed time, 1.955s cpu time, 0.233s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.501s elapsed time, 0.602s cpu time, 0.093s GC time
Loading theory "Draft.Algebraic_AuxiliariesTemplates"
val templateLemmas =
   [("Algebraic_Auxiliaries.prime_factorization_normalize",
     "prime_factorization (normalize ?n) = prime_factorization ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Auxiliaries.squarefree_prime_elem",
     "prime_elem ?p ==> squarefree ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Auxiliaries.squarefree_prime", "prime ?p ==> squarefree ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Auxiliaries.size_prime_factorization_eq_Suc_0_iff",
     "(size (prime_factorization ?n) = Suc 0) = prime_elem ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Algebraic_Auxiliaries.not_squarefree_primepow",
     "primepow ?n ==> squarefree ?n = prime ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Auxiliaries.eq_imp_eq_mod_int",
     "?a = ?b ==> [?a = ?b] (mod ?m)",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Algebraic_Auxiliaries.eq_imp_eq_mod_nat",
     "?a = ?b ==> [?a = ?b] (mod ?m)",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Algebraic_Auxiliaries.squarefree_mult_imp_coprime",
     "squarefree (?a * ?b) ==> coprime ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Algebraic_Auxiliaries.is_iso_imp_same_card",
     "?H \<cong> ?G ==> order ?H = order ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Auxiliaries.one_prime_factor_iff_primepow",
     "(card (prime_factors ?n) = Suc 0) = primepow (normalize ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)))),
         template_app (template_hole 3, template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Auxiliaries.prime_factorization_prime_elem",
     "prime_elem ?p ==> prime_factorization ?p = {#normalize ?p#}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Algebraic_Auxiliaries.gre1I", "(?n = 0 ==> False) ==> 1 <= ?n",
     template_implication
      ([template_implication
         ([template_equation (template_var 0, template_hole 3)],
          template_predicate (template_hole 2))],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("Algebraic_Auxiliaries.p_coprime_right_nat",
     "prime ?p ==> coprime ?a ?p = (~ ?p dvd ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Algebraic_Auxiliaries.square_inequality",
     "1 < ?n ==> ?n + ?n <= ?n * ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 0)))),
    ("Algebraic_Auxiliaries.residue_one_dvd",
     "?a mod ?n = 1 ==> ?n dvd ?a - 1",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 2))
           ))),
    ("Algebraic_Auxiliaries.gre1I_nat",
     "(?n = 0 ==> False) ==> Suc 0 <= ?n",
     template_implication
      ([template_implication
         ([template_equation (template_var 0, template_hole 3)],
          template_predicate (template_hole 2))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_hole 3),
         template_var 0))),
    ("Algebraic_Auxiliaries.squarefree_imp_prod_prime_factors_eq",
     "squarefree ?x ==> \<Prod>(prime_factors ?x) = normalize ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Auxiliaries.cong_pow_I",
     "?a = ?b ==> [?x ^ ?a = ?x ^ ?b] (mod ?n)",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("Algebraic_Auxiliaries.square_one_cong_one",
     "[?x = 1::?'a] (mod ?n) ==> [?x\<^sup>2 = 1::?'a] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))),
               template_hole 4),
             template_var 0)
           ))),
    ("Algebraic_Auxiliaries.cong_exp_mod",
     "[?c = (?a mod ?n) ^ ?b] (mod ?n) = [?c = ?a ^ ?b] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_var 1),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Algebraic_Auxiliaries.cong_add_mod",
     "[?a + ?b mod ?n = ?c] (mod ?n) = [?a + ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_var 1),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0),
         template_var 1))),
    ("Algebraic_Auxiliaries.cong_add_mod",
     "[?a mod ?n + ?b = ?c] (mod ?n) = [?a + ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0),
         template_var 2),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_var 2))),
    ("Algebraic_Auxiliaries.cong_mult_mod",
     "[?a * (?b mod ?n) = ?c] (mod ?n) = [?a * ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_var 1),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0),
         template_var 1))),
    ("Algebraic_Auxiliaries.cong_mult_mod",
     "[?a mod ?n * ?b = ?c] (mod ?n) = [?a * ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0),
         template_var 2),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_var 2))),
    ("Algebraic_Auxiliaries.cong_exp_mod",
     "[(?a mod ?n) ^ ?b = ?c] (mod ?n) = [?a ^ ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0),
         template_var 2),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_var 2))),
    ("Algebraic_Auxiliaries.group_hom_imp_group_hom_image",
     "group_hom ?G ?G ?h ==>
      group_hom ?G (?G(| carrier := ?h ` carrier ?G |)) ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, t_empty), template_var 1)),
             template_var 0)
           ))),
    ("Algebraic_Auxiliaries.mod_natE",
     "?a mod ?n = ?b ==> EX l. ?a = ?n * l + ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Algebraic_Auxiliaries.totient_less_not_prime",
     "[| ~ prime ?n; 1 < ?n |] ==> totient ?n < ?n - 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            ),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 2)))),
    ("Algebraic_Auxiliaries.odd_prime_gt_2_int",
     "[| odd ?p; prime ?p |] ==> 2 < ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))),
                  template_var 0)
                )
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_var 0))),
    ("Algebraic_Auxiliaries.odd_prime_gt_2_nat",
     "[| odd ?p; prime ?p |] ==> 2 < ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))),
                  template_var 0)
                )
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_var 0))),
    ("Algebraic_Auxiliaries.cong_add_mod",
     "[SUM i:?A. ?f i mod ?n = ?c] (mod ?n) = [sum ?f ?A = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1)),
           template_var 0),
         template_var 2),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1)),
           template_var 0),
         template_var 2))),
    ("Algebraic_Auxiliaries.prime_dvd_choose",
     "[| 0 < ?k; ?k < ?p; prime ?p |] ==> ?p dvd ?p choose ?k",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Algebraic_Auxiliaries.cong_eq_0_I",
     "ALL i:?A. [?f i mod ?n = 0::?'b] (mod ?n) ==>
      [sum ?f ?A = 0::?'b] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2)),
               template_hole 1),
             template_var 0)
           ))),
    ("Algebraic_Auxiliaries.even_pow_cong",
     "[| 1 < ?n; even ?m |] ==> [(?n - 1) ^ ?m = 1] (mod ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_hole 7)),
                   template_var 0)),
               template_hole 7),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_diff_trans",
     "[| [?a = ?b - ?x] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?a = ?b - ?y] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_diff_trans",
     "[| [?a = ?x - ?b] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?a = ?y - ?b] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_diff_trans",
     "[| [?b - ?x = ?a] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?b - ?y = ?a] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_diff_trans",
     "[| [?x - ?b = ?a] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?y - ?b = ?a] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_add_trans",
     "[| [?a = ?b + ?x] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?a = ?b + ?y] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_add_trans",
     "[| [?a = ?x + ?b] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?a = ?y + ?b] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_mult_trans",
     "[| [?a = ?b * ?x] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?a = ?b * ?y] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_mult_trans",
     "[| [?a = ?x * ?b] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?a = ?y * ?b] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_exp_trans",
     "[| [?c = ?a ^ ?b] (mod ?n); [?a = ?d] (mod ?n) |]
      ==> [?c = ?d ^ ?b] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_add_trans",
     "[| [?b + ?x = ?a] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?b + ?y = ?a] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_add_trans",
     "[| [?x + ?b = ?a] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?y + ?b = ?a] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_mult_trans",
     "[| [?b * ?x = ?a] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?b * ?y = ?a] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_mult_trans",
     "[| [?x * ?b = ?a] (mod ?n); [?x = ?y] (mod ?n) |]
      ==> [?y * ?b = ?a] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.cong_exp_trans",
     "[| [?a ^ ?b = ?c] (mod ?n); [?a = ?d] (mod ?n) |]
      ==> [?d ^ ?b = ?c] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.sum_of_bool_eq_card",
     "finite ?S ==> (SUM a:?S. of_bool (?P a)) = real (card {a: ?S. ?P a})",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty), template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))))),
    ("Algebraic_Auxiliaries.square_minus_one_cong_one",
     "[| 1 < ?n; [?x = ?n - 1] (mod ?n) |] ==> [?x\<^sup>2 = 1] (mod ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 6)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)))),
               template_hole 6),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.prime_factorization_eqI",
     "[| !!p. p :# ?P ==> prime p; \<Prod>\<^sub># ?P = ?n |]
      ==> prime_factorization ?n = ?P",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app (template_hole 2, template_var 1), template_var 0)],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Algebraic_Auxiliaries.cong_square_alt_int",
     "[| prime ?p; [?a * ?a = 1::?'a] (mod ?p) |]
      ==> [?a = 1::?'a] (mod ?p) | [?a = ?p - (1::?'a)] (mod ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_var 0)),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 2)),
               template_var 1))
           ))),
    ("Algebraic_Auxiliaries.cong_square_alt",
     "[| prime ?p; [?a * ?a = 1] (mod ?p) |]
      ==> [?a = 1] (mod ?p) | [?a = ?p - 1] (mod ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_var 0)),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 2)),
               template_var 1))
           ))),
    ("Algebraic_Auxiliaries.odd_pow_cong",
     "[| 1 < ?n; odd ?m |] ==> [(?n - 1) ^ ?m = ?n - 1] (mod ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_hole 8)),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 8)),
             template_var 1)
           ))),
    ("Algebraic_Auxiliaries.gt_one_imp_gt_one_power_if_coprime",
     "[| 1 <= ?x; 1 < ?n; coprime ?x ?n |] ==> 1 <= ?x ^ (?n - 1) mod ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1),
        template_inequation (less_than, template_hole 5, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_hole 5,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 5))),
           template_var 0)))),
    ("Algebraic_Auxiliaries.coprimeI_power_mod",
     "[| ?x ^ ?r mod ?n = 1; ?r ~= 0; ?n ~= 0 |] ==> coprime ?x ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1)),
            template_var 0),
          template_hole 3),
        template_negation
         (template_equation (template_var 1, template_hole 1)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Algebraic_Auxiliaries.homomorphism_thm",
     "group_hom ?G ?G ?h ==>
      ?G Mod kernel ?G (?G(| carrier := ?h ` carrier ?G |)) ?h \<cong> ?G
      (| carrier := ?h ` carrier ?G |)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 2, t_empty),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))
           ))),
    ("Algebraic_Auxiliaries.power_mult_cong",
     "[| [?x ^ ?n = ?a] (mod ?m); [?y ^ ?n = ?b] (mod ?m) |]
      ==> [(?x * ?y) ^ ?n = ?a * ?b] (mod ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 4)),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 1)),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("Algebraic_Auxiliaries.cong_mult_uneq'",
     "[| coprime ?d ?a; [?b \<noteq> ?c] (mod ?a); [?d = ?e] (mod ?a) |]
      ==> [?b * ?d \<noteq> ?c * ?e] (mod ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 3)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 0),
              template_var 3)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 4)),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 3)
               )
           ))),
    ("Algebraic_Auxiliaries.homomorphism_thm_order",
     "group_hom ?G ?G ?h ==>
      order (?G(| carrier := ?h ` carrier ?G |)) *
      card (kernel ?G (?G(| carrier := ?h ` carrier ?G |)) ?h) =
      order ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_var 1))),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_var 1)),
               template_var 0))),
         template_app (template_hole 5, template_var 1)))),
    ("Algebraic_Auxiliaries.power2_diff_nat",
     "?y <= ?x ==>
      (?x - ?y)\<^sup>2 = ?x\<^sup>2 + ?y\<^sup>2 - 2 * ?x * ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1)),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_var 0)),
             template_var 1))))),
    ("Algebraic_Auxiliaries.prime_divisor_exists_strong",
     "[| 1 < ?m; ~ prime ?m |]
      ==> EX n k. ?m = n * k & 1 < n & n < ?m & 1 < k & k < ?m",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Algebraic_Auxiliaries.prime_divisor_exists_strong_nat",
     "[| 1 < ?m; ~ prime ?m |]
      ==> EX p k. ?m = p * k & 1 < p & p < ?m & 1 < k & k < ?m & prime p",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Algebraic_AuxiliariesTemplates"
### 0.643s elapsed time, 0.879s cpu time, 0.195s GC time
val it = (): unit
