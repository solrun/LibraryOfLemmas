   [("Legendre_Symbol.QuadRes_1_right", "QuadRes ?p 1",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Legendre_Symbol.QuadRes_neg", "QuadRes (- ?p) ?a = QuadRes ?p ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Legendre_Symbol.QuadRes_mod",
     "?p dvd ?n ==> QuadRes ?p (?a mod ?n) = QuadRes ?p ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("QuadRes.not_QuadRes_ex_if_prime",
     "[| prime ?p; odd ?p |] ==> EX x. ~ QuadRes ?p x",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))),
                  template_var 0)
                )
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("QuadRes.not_QuadRes_ex",
     "[| 1 < ?p; odd ?p |] ==> EX x. ~ QuadRes ?p x",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 0),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))),
                  template_var 0)
                )
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("QuadRes.inj_on_QuadRes",
     "prime ?p ==> inj_on (%x. x\<^sup>2 mod ?p) {0..(?p - 1) div 2}",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 7, template_hole 6)))))
           ))),
    ("QuadRes.card_QuadRes_set_prime",
     "[| prime ?p; odd ?p |]
      ==> card {x. QuadRes ?p x & x : {0..<?p}} = nat (?p + 1) div 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_hole 15,
                      template_app (template_hole 14, template_hole 13))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 11, template_app (template_hole 10, t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_app
            (template_hole 0,
             template_app (template_hole 14, template_hole 13)))))),
    ("QuadRes.card_not_QuadRes_set_prime",
     "[| prime ?p; odd ?p |]
      ==> card {x. ~ QuadRes ?p x & x : {0..<?p}} = nat (?p - 1) div 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_hole 15,
                      template_app (template_hole 14, template_hole 13))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 11, template_app (template_hole 10, t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_app
            (template_hole 0,
             template_app (template_hole 14, template_hole 13)))))),
    ("QuadRes.QuadRes_iff",
     "[| prime ?p; odd ?p |]
      ==> (QuadRes ?p ?x & ?x : {0..<?p}) =
          (EX a:{0..(?p - 1) div 2}. a\<^sup>2 mod ?p = ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_hole 17,
                      template_app (template_hole 16, template_hole 15))),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 11, template_var 0),
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 1))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 9),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 4)),
                 template_app
                  (template_hole 17,
                   template_app (template_hole 16, template_hole 15))))),
           t_empty)))),
    ("QuadRes.QuadRes_set_prime",
     "[| prime ?p; odd ?p |]
      ==> {x. QuadRes ?p x & x : {0..<?p}} =
          {x\<^sup>2 mod ?p |x. x : {0..(?p - 1) div 2}}",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 19,
                    template_app
                     (template_hole 18,
                      template_app (template_hole 17, template_hole 16))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 14, t_empty),
         template_app (template_hole 14, t_empty))))]
