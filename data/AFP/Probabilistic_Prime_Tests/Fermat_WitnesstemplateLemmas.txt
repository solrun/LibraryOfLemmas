   [("Fermat_Witness.fermat_liar_witness_of_composition",
     "fermat_liar ?a ?n ~= fermat_witness ?a ?n",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Fermat_Witness.fermat_liar_witness_of_composition",
     "fermat_witness ?a ?n ~= fermat_liar ?a ?n",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Fermat_Witness.snd_divide_out",
     "snd (divide_out ?p ?x) = multiplicity ?p ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Fermat_Witness.one_is_fermat_liar", "1 < ?n ==> fermat_liar 1 ?n",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0)
           ))),
    ("Fermat_Witness.one_is_strong_fermat_liar",
     "1 < ?n ==> strong_fermat_liar 1 ?n",
     template_implication
      ([template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_var 0)
           ))),
    ("Fermat_Witness.divide_out_code",
     "divide_out ?p ?x = divide_out_aux ?p (?x, 0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Fermat_Witness.multiplicity_code",
     "multiplicity ?p ?x = snd (divide_out_aux ?p (?x, 0))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Fermat_Witness.fst_divide_out",
     "fst (divide_out ?p ?x) = ?x div ?p ^ multiplicity ?p ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Fermat_Witness.prime_imp_fermat_liar",
     "[| prime ?p; ?a : {1..<?p} |] ==> fermat_liar ?a ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Fermat_Witness.liar_imp_coprime",
     "[| ?a : {1..<?n}; fermat_liar ?a ?n |] ==> coprime ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.not_coprime_imp_witness",
     "[| ?a : {1..<?n}; ~ coprime ?a ?n |] ==> fermat_witness ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.fermat_witness_imp_strong_fermat_witness",
     "[| ?a : {1..<?n}; 1 < ?n; fermat_witness ?a ?n |]
      ==> strong_fermat_witness ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 3, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.strong_fermat_liar_imp_fermat_liar",
     "[| ?a : {1..<?n}; 1 < ?n; strong_fermat_liar ?a ?n |]
      ==> fermat_liar ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 3, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.divide_out_aux_correct",
     "divide_out_aux ?p ?z =
      (fst ?z div ?p ^ multiplicity ?p (fst ?z),
       snd ?z + multiplicity ?p (fst ?z))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 4, template_var 0))))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 4, template_var 0)))))),
    ("Fermat_Witness.prime_imp_strong_fermat_witness",
     "[| prime ?p; 2 < ?p; ?a : {1..<?p} |] ==> strong_fermat_liar ?a ?p",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Fermat_Witness.Carmichael_number_imp_lower_bound_on_strong_fermat_witness",
     "Carmichael_number ?n ==>
      (?n - 1) div 2 < card {a: {1..<?n}. strong_fermat_witness a ?n}",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 0),
               template_hole 9)),
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6))),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Fermat_Witness.not_Carmichael_numberD",
     "[| ~ Carmichael_number ?n; ~ prime ?n; 1 < ?n |]
      ==> EX a:{2..<?n}. fermat_witness a ?n & coprime a ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            ),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))),
                 template_var 0)),
             t_empty)
           ))),
    ("Fermat_Witness.multiplicity_times_same_power",
     "[| ?x ~= (0::?'a); ~ is_unit ?p; ?p ~= (0::?'a) |]
      ==> multiplicity ?p (?p ^ ?k * ?x) = multiplicity ?p ?x + ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)
                )
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Fermat_Witness.Carmichael_number_imp_lower_bound_on_strong_fermat_witness",
     "Carmichael_number ?n ==>
      real (card {a. 2 <= a & a < ?n & strong_fermat_liar a ?n})
      < real (?n - 2) / 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 12,
           template_app
            (template_hole 11, template_app (template_hole 10, t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5))))),
           template_app
            (template_hole 0,
             template_app (template_hole 6, template_hole 5)))))),
    ("Fermat_Witness.divide_out_unique_nat",
     "[| ~ is_unit ?p; ?p ~= 0; ~ ?p dvd ?m; ?n = ?p ^ ?k * ?m |]
      ==> ?k = multiplicity ?p ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_hole 5)
                )
            ),
        template_negation
         (template_equation (template_var 3, template_hole 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)
                )
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0)),
            template_var 2))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Fermat_Witness.fermat_witness_is_euler_witness",
     "[| ?a : {1..<?n}; 1 < ?n; fermat_witness ?a ?n; coprime ?a ?n;
         odd ?n |]
      ==> euler_witness (int ?a) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 10, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Fermat_Witness.euler_liar_is_fermat_liar",
     "[| ?a : {1..<?n}; 1 < ?n; euler_liar (int ?a) ?n; coprime ?a ?n;
         odd ?n |]
      ==> fermat_liar ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 10, template_var 0),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 1)),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Fermat_Witness.divide_out_unique_nat",
     "[| ~ is_unit ?p; ?p ~= 0; ~ ?p dvd ?m; ?n = ?p ^ ?k * ?m |]
      ==> ?m = ?n div ?p ^ multiplicity ?p ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_hole 6)
                )
            ),
        template_negation
         (template_equation (template_var 3, template_hole 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)
                )
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0)),
            template_var 2))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)))))),
    ("Fermat_Witness.strong_fermat_liar_code",
     "strong_fermat_liar ?a ?n =
      (let (m, k) = divide_out 2 (?n - 1)
       in [?a ^ m = 1] (mod ?n) |
          (EX i:{0..<k}. [?a ^ (2 ^ i * m) = ?n - 1] (mod ?n)))",
     template_equation
      (template_app
        (template_app (template_hole 15, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 12,
                 template_app (template_hole 11, template_hole 10))),
             template_app
              (template_app (template_hole 9, template_var 0),
               template_hole 8))),
         template_app (template_hole 7, t_empty)))),
    ("Fermat_Witness.ignore_one",
     "[| ?P 1 ?n; 1 < ?n |]
      ==> card {a: {1..<?n}. ?P a ?n} =
          1 + card {a. 2 <= a & a < ?n & ?P a ?n}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 1, template_hole 12),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 12, template_var 0)],
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app
          (template_app (template_hole 4, template_hole 12),
           template_app
            (template_hole 9, template_app (template_hole 8, t_empty)))))),
    ("Fermat_Witness.not_Carmichael_number_imp_card_fermat_witness_bound",
     "[| ~ prime ?n; ~ Carmichael_number ?n; odd ?n; 1 < ?n |]
      ==> (?n - 1) div 2 < card {a: {1..<?n}. fermat_witness a ?n}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 15, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 14, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_hole 8)),
           template_app
            (template_hole 12,
             template_app (template_hole 11, template_hole 10))),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Fermat_Witness.strong_fermat_witness_lower_bound",
     "[| odd ?n; 2 < ?n; ~ prime ?n |]
      ==> real (card {a. 2 <= a & a < ?n & strong_fermat_liar a ?n})
          < real (?n - 2) / 2",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12))),
                  template_var 0)
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)),
          template_var 0),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12))))),
           template_app
            (template_hole 0,
             template_app (template_hole 13, template_hole 12)))))),
    ("Fermat_Witness.not_Carmichael_number_imp_card_fermat_witness_bound",
     "[| ~ prime ?n; ~ Carmichael_number ?n; odd ?n; 1 < ?n |]
      ==> real (card {a. 2 <= a & a < ?n & fermat_liar a ?n})
          < real (?n - 2) / 2",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 17, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 16, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12))))),
           template_app
            (template_hole 0,
             template_app (template_hole 13, template_hole 12)))))),
    ("Fermat_Witness.not_Carmichael_number_imp_card_fermat_witness_bound",
     "[| ~ prime ?n; ~ Carmichael_number ?n; odd ?n; 1 < ?n |]
      ==> real (card {a. 2 <= a & a < ?n & strong_fermat_liar a ?n})
          < real (?n - 2) / 2",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 17, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 16, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_hole 12))))),
           template_app
            (template_hole 0,
             template_app (template_hole 13, template_hole 12)))))),
    ("Fermat_Witness.strong_fermat_witness_iff",
     "?a : {1..<?n} ==>
      strong_fermat_witness ?a ?n =
      (EX k m.
          odd m &
          ?n - 1 = 2 ^ k * m &
          [?a ^ m \<noteq> 1] (mod ?n) &
          (ALL i:{0..<k}. [?a ^ (2 ^ i * m) \<noteq> ?n - 1] (mod ?n)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_app
               (template_app (template_hole 17, template_hole 16),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 14, template_var 1), template_var 0),
         template_app (template_hole 13, t_empty))))]
