   [("Jacobi_Symbol.is_unit_Jacobi", "Jacobi ?a 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Jacobi_Symbol.Jacobi_0_right", "Jacobi ?a 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Jacobi_Symbol.is_unit_Jacobi", "Jacobi ?a (- 1) = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_hole 0)),
    ("Jacobi_Symbol.Jacobi_code", "Jacobi ?a ?n = jacobi_code ?a ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Jacobi_Symbol.Jacobi_neg_right", "Jacobi ?a (- ?n) = Jacobi ?a ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Jacobi_Symbol.is_unit_Jacobi_aux", "is_unit ?x ==> Jacobi ?a ?x = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_hole 2))),
    ("Jacobi_Symbol.prime_p_Jacobi_eq_Legendre",
     "prime ?p ==> Jacobi ?a ?p = Legendre ?a ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Jacobi_Symbol.Jacobi_1_eq_1", "?p ~= 0 ==> Jacobi 1 ?p = 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_hole 0))),
    ("Jacobi_Symbol.Jacobi_0_eq_0", "~ is_unit ?n ==> Jacobi 0 ?n = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_hole 0))),
    ("Jacobi_Symbol.Jacobi_values", "Jacobi ?p ?q : {1, - 1, 0}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 2, template_hole 3)),
               template_app
                (template_app (template_hole 4, template_hole 1),
                 template_hole 0))))
         )),
    ("Jacobi_Symbol.Jacobi_mult_right",
     "Jacobi ?a (?n * ?m) = Jacobi ?a ?n * Jacobi ?a ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Jacobi_Symbol.Jacobi_mult_left",
     "Jacobi (?a * ?b) ?n = Jacobi ?a ?n * Jacobi ?b ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Jacobi_Symbol.Jacobi_mod_cong",
     "[?a = ?b] (mod ?n) ==> Jacobi ?a ?n = Jacobi ?b ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Jacobi_Symbol.Jacobi_mod",
     "?n dvd ?m ==> Jacobi (?a mod ?m) ?n = Jacobi ?a ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Jacobi_Symbol.Jacobi_eq_0_not_coprime",
     "[| ?n ~= 0; ~ coprime ?a ?n |] ==> Jacobi ?a ?n = 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_hole 2))),
    ("Jacobi_Symbol.Jacobi_p_eq_2'",
     "0 < ?n ==> Jacobi ?a (2 ^ ?n) = ?a mod 2",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1))),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))))),
    ("Jacobi_Symbol.Jacobi_prod_mset",
     "?n ~= 0 ==>
      Jacobi (\<Prod>\<^sub># ?M) ?n = (PROD q:#?M. Jacobi q ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Jacobi_Symbol.non_trivial_coprime_neq",
     "[| 1 < ?a; 1 < ?b; coprime ?a ?b |] ==> ?a ~= ?b",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Jacobi_Symbol.dvd_odd_square", "odd ?a ==> 8 dvd ?a\<^sup>2 - 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 5, template_hole 4))))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 5, template_hole 4)))),
               template_hole 0))
           ))),
    ("Jacobi_Symbol.Jacobi_eq_0_iff_not_coprime",
     "[| ?p ~= 0; ?p ~= 1 |] ==> (Jacobi ?n ?p = 0) = (~ coprime ?n ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_hole 4),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Jacobi_Symbol.Jacobi_eq_0_imp_not_coprime",
     "[| ?p ~= 0; ?p ~= 1; Jacobi ?n ?p = 0 |] ==> ~ coprime ?n ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("Jacobi_Symbol.mod_nat_wlog",
     "[| 0 < ?b; !!k. [| k : {0..<?b}; ?n mod ?b = k |] ==> ?P ?n |]
      ==> ?P ?n",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Jacobi_Symbol.supplement1_Jacobi",
     "[| odd ?p; 1 < ?p |]
      ==> Jacobi (- 1) ?p = (- 1) ^ nat ((?p - 1) div 2)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_hole 9))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 7, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 7)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 4, template_hole 7)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 7)),
               template_app
                (template_hole 11,
                 template_app (template_hole 10, template_hole 9)))))))),
    ("Jacobi_Symbol.mod_int_wlog",
     "[| 0 < ?b; !!k. [| 0 <= k; k < ?b; ?n mod ?b = k |] ==> ?P ?n |]
      ==> ?P ?n",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Jacobi_Symbol.supplement1_Jacobi'",
     "[| odd ?n; 1 < ?n |]
      ==> Jacobi (- 1) ?n = (if ?n mod 4 = 1 then 1 else - 1)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 5, template_var 0)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_hole 5)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 8, template_hole 7))))),
                     template_hole 5)),
                 template_hole 5),
               template_app (template_hole 2, template_hole 5))
             )))),
    ("Jacobi_Symbol.Jacobi_neg_left",
     "[| odd ?n; 1 < ?n |]
      ==> Jacobi (- ?a) ?n =
          (if ?n mod 4 = 1 then 1 else - 1) * Jacobi ?a ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_hole 8))),
                  template_var 1)
                )
            ),
        template_inequation (less_than, template_hole 6, template_var 1)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 0)),
                template_var 1)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 0, template_var 1),
                             template_app
                              (template_hole 10,
                               template_app
                                (template_hole 9,
                                 template_app
                                  (template_hole 9, template_hole 8))))),
                         template_hole 6)),
                     template_hole 6),
                   template_app (template_hole 3, template_hole 6))),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1))
             )))),
    ("Jacobi_Symbol.supplement2_Jacobi",
     "[| odd ?p; 1 < ?p |]
      ==> Jacobi 2 ?p = (- 1) ^ (((nat ?p)\<^sup>2 - 1) div 8)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 14,
               template_app (template_hole 13, template_hole 12))),
           template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 10)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app
                      (template_hole 1,
                       template_app (template_hole 13, template_hole 12)))),
                 template_hole 0)),
             template_app
              (template_hole 1,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 13,
                   template_app
                    (template_hole 13, template_hole 12))))))))),
    ("Jacobi_Symbol.supplement2_Jacobi'",
     "[| odd ?p; 1 < ?p |]
      ==> Jacobi 2 ?p = (if ?p mod 8 = 1 | ?p mod 8 = 7 then 1 else - 1)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_hole 9))),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 7, template_var 0)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 2, template_var 0),
                             template_app
                              (template_hole 11,
                               template_app
                                (template_hole 10,
                                 template_app
                                  (template_hole 10,
                                   template_app
                                    (template_hole 10,
                                     template_hole 9)))))),
                         template_hole 7)),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 2, template_var 0),
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10,
                               template_app
                                (template_hole 10,
                                 template_app
                                  (template_hole 10, template_hole 9)))))),
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 1, template_hole 9)))))),
                 template_hole 7),
               template_app (template_hole 0, template_hole 7))
             )))),
    ("Jacobi_Symbol.prime_nonprime_wlog",
     "[| !!p q. [| prime p; prime q |] ==> ?P p q;
         !!p q. ~ prime p ==> ?P p q; !!p q. ?P p q ==> ?P q p |]
      ==> ?P ?p ?q",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Jacobi_Symbol.odd_odd_even",
     "[| odd ?a; odd ?b |]
      ==> even ((?a * ?b - 1) div 2) =
          even ((?a - 1) div 2 + (?b - 1) div 2)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6))),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_hole 6))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_hole 1)),
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6)))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 1)),
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 1)),
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6)))))))),
    ("Jacobi_Symbol.Quadratic_Reciprocity_Jacobi",
     "[| coprime ?p ?q; 2 < ?p; 2 < ?q; odd ?p; odd ?q |]
      ==> Jacobi ?p ?q * Jacobi ?q ?p =
          (- 1) ^ nat ((?p - 1) div 2 * ((?q - 1) div 2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11)),
          template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11)),
          template_var 0),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 13,
                      template_app (template_hole 12, template_hole 11))),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 13,
                      template_app (template_hole 12, template_hole 11))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_hole 3)),
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_hole 11)))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_hole 3)),
                 template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12, template_hole 11))))))))),
    ("Jacobi_Symbol.odd_odd_even'",
     "[| odd ?a; odd ?b |]
      ==> even (((?a * ?b)\<^sup>2 - 1) div 8) =
          even ((?a\<^sup>2 - 1) div 8 + (?b\<^sup>2 - 1) div 8)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_hole 8))),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_hole 8))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_hole 8))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 0)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 9, template_hole 8)))),
                 template_hole 1)),
             template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 9, template_hole 8)))))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app (template_hole 9, template_hole 8))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 9, template_hole 8)))),
                     template_hole 1)),
                 template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_hole 9,
                       template_app (template_hole 9, template_hole 8)))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_app
                        (template_hole 2,
                         template_app (template_hole 9, template_hole 8)))),
                   template_hole 1)),
               template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_hole 9, template_hole 8)))))))))),
    ("Jacobi_Symbol.odd_odd_even_nat'",
     "[| odd ?a; odd ?b |]
      ==> even (((?a * ?b)\<^sup>2 - 1) div 8) =
          even ((?a\<^sup>2 - 1) div 8 + (?b\<^sup>2 - 1) div 8)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0)),
                     template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_hole 7)))),
                 template_hole 1)),
             template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 8, template_hole 7)))))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8, template_hole 7)))),
                     template_hole 1)),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 8, template_hole 7)))))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 7)))),
                   template_hole 1)),
               template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 8, template_hole 7)))))))))),
    ("Jacobi_Symbol.Quadratic_Reciprocity_Jacobi'",
     "[| coprime ?p ?q; 2 < ?p; 2 < ?q; odd ?p; odd ?q |]
      ==> Jacobi ?q ?p =
          (if ?p mod 4 = 3 & ?q mod 4 = 3 then - 1 else 1) * Jacobi ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11)),
          template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11)),
          template_var 0),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 13,
                      template_app (template_hole 12, template_hole 11))),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 13,
                      template_app (template_hole 12, template_hole 11))),
                  template_var 0)
                )
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 7, template_var 0),
                template_var 1)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 8,
                               template_app
                                (template_app
                                  (template_hole 3, template_var 1),
                                 template_app
                                  (template_hole 13,
                                   template_app
                                    (template_hole 12,
                                     template_app
(template_hole 12, template_hole 11))))),
                             template_app
                              (template_hole 13,
                               template_app
                                (template_hole 2, template_hole 11)))),
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 3, template_var 0),
                               template_app
                                (template_hole 13,
                                 template_app
                                  (template_hole 12,
                                   template_app
                                    (template_hole 12,
                                     template_hole 11))))),
                           template_app
                            (template_hole 13,
                             template_app
                              (template_hole 2, template_hole 11))))),
                     template_app (template_hole 1, template_hole 0)),
                   template_hole 0)),
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 0))
             ))))]
