Loading theory "Draft.Algebraic_Auxiliaries" (required by "Draft.Carmichael_NumbersTemplates" via "Draft.Carmichael_Numbers" via "Draft.Residues_Nat")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Carmichael_NumbersTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Carmichael_NumbersTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.092s elapsed time, 0.312s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.107s elapsed time, 0.339s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Carmichael_NumbersTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.BigO"
### 0.623s elapsed time, 1.258s cpu time, 0.117s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Carmichael_NumbersTemplates")
### theory "Draft.Algebraic_Auxiliaries"
### 0.836s elapsed time, 1.825s cpu time, 0.195s GC time
Loading theory "Draft.Residues_Nat" (required by "Draft.Carmichael_NumbersTemplates" via "Draft.Carmichael_Numbers")
locale residues_mult_nat
  fixes n :: "nat"
    and G :: "nat monoid"
  assumes "residues_mult_nat n"
  defines "G == Residues_Mult n"
locale residues_nat
  fixes n :: "nat"
    and R :: "nat ring"
  assumes "residues_nat n"
  defines "R == Residues_nat n"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.532s elapsed time, 1.097s cpu time, 0.161s GC time
locale residues_nat_prime
  fixes p :: "nat"
    and R :: "nat ring"
  assumes "residues_nat_prime p"
  defines "R == Residues_nat p"
### theory "Draft.Residues_Nat"
### 1.775s elapsed time, 2.601s cpu time, 0.675s GC time
Loading theory "Draft.Carmichael_Numbers" (required by "Draft.Carmichael_NumbersTemplates")
### theory "Draft.Carmichael_Numbers"
### 0.077s elapsed time, 0.077s cpu time, 0.000s GC time
Loading theory "Draft.Carmichael_NumbersTemplates"
val templateLemmas =
   [("Carmichael_Numbers.Carmichael_number_imp_squarefree",
     "Carmichael_number ?n ==> squarefree ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Carmichael_Numbers.Carmichael_number_not_prime",
     "Carmichael_number ?n ==> ~ prime ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Carmichael_Numbers.Carmichael_not_primepow",
     "Carmichael_number ?n ==> ~ primepow ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Carmichael_Numbers.Carmichael_number_gt_3",
     "Carmichael_number ?n ==> 3 < ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Carmichael_Numbers.Carmichael_number_odd",
     "Carmichael_number ?n ==> odd ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 0)
               )
           ))),
    ("Carmichael_Numbers.Carmichael_number_card_prime_factors",
     "Carmichael_number ?n ==> 3 <= card (prime_factors ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Carmichael_Numbers.Carmichael_number_imp_dvd",
     "[| Carmichael_number ?n; prime ?p; ?p dvd ?n |]
      ==> ?p - 1 dvd ?n - 1",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Carmichael_Numbers.Carmichael_number_imp_squarefree_alt_weak",
     "Carmichael_number ?n ==> EX p l. ?n = p * l & prime p & ~ p dvd l",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Carmichael_Numbers.Carmichael_number_iff",
     "Carmichael_number ?n =
      (?n ~= 1 &
       ~ prime ?n &
       squarefree ?n &
       (\<forall>p:#prime_factorization ?n. p - 1 dvd ?n - 1))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_hole 7))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 6, template_var 0))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0))),
                   t_empty))))
           ))),
    ("Carmichael_Numbers.Carmichael_number_imp_squarefree_alt",
     "Carmichael_number ?n ==>
      EX p l. ?n = p * l & prime p & ~ p dvd l & 2 < l",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Carmichael_Numbers.Carmichael_number_imp_squarefree_aux",
     "[| Carmichael_number ?n; ?n = ?p ^ ?r * ?l; prime ?p; ~ ?p dvd ?l;
         1 < ?r |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1)),
            template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0)
                )
            ),
        template_inequation (less_than, template_hole 1, template_var 1)],
       template_predicate (template_hole 0))),
    ("Carmichael_Numbers.Carmichael_number_iff'",
     "Carmichael_number ?n =
      (1 < ?n &
       size (prime_factorization ?n) ~= 1 &
       (\<forall>p:#prime_factorization ?n.
           count (prime_factorization ?n) p = 1 & p - 1 dvd ?n - 1))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_var 0))),
                     template_hole 9))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 5, template_var 0))),
                 t_empty)))
           ))),
    ("Carmichael_Numbers.Carmichael_numberI",
     "[| ~ prime ?n; squarefree ?n; 1 < ?n;
         !!p. p :# prime_factorization ?n ==> p - 1 dvd ?n - 1 |]
      ==> Carmichael_number ?n",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_inequation (less_than, template_hole 7, template_var 0),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Carmichael_NumbersTemplates"
### 0.640s elapsed time, 0.857s cpu time, 0.124s GC time
val it = (): unit
