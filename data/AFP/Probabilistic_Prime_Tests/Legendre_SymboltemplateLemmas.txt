   [("Legendre_Symbol.QuadRes_1_right", "QuadRes ?p 1",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Legendre_Symbol.Legendre_0_eq_0", "Legendre 0 ?p = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Legendre_Symbol.Legendre_p_eq_1", "Legendre ?a 1 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Legendre_Symbol.Legendre_neg", "Legendre ?a (- ?p) = Legendre ?a ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Legendre_Symbol.QuadRes_neg", "QuadRes (- ?p) ?a = QuadRes ?p ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Legendre_Symbol.Legendre_1_left", "prime ?p ==> Legendre 1 ?p = 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_hole 0))),
    ("Legendre_Symbol.Legendre_p_eq_2", "Legendre ?a 2 = ?a mod 2",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))))),
    ("Legendre_Symbol.Legendre_values", "Legendre ?p ?q : {1, - 1, 0}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 2, template_hole 3)),
               template_app
                (template_app (template_hole 4, template_hole 1),
                 template_hole 0))))
         )),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [1 \<noteq> 0] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [0 \<noteq> 1] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.prime_cong_eq_0_iff",
     "prime ?p ==> [?a = 0] (mod ?p) = (~ coprime ?a ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [1 \<noteq> - 1] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_hole 1)),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [0 \<noteq> - 1] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_hole 0)),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [- 1 \<noteq> 1] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)),
                   template_hole 0),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [- 1 \<noteq> 0] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)),
                   template_hole 0),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.Legendre_eq_0_iff",
     "prime ?p ==> (Legendre ?a ?p = 0) = (~ coprime ?a ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_hole 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Legendre_Symbol.Legendre_mod",
     "?p dvd ?n ==> Legendre (?a mod ?n) ?p = Legendre ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Legendre_Symbol.QuadRes_mod",
     "?p dvd ?n ==> QuadRes ?p (?a mod ?n) = QuadRes ?p ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Legendre_Symbol.cong_eq_0_not_coprime",
     "[| prime ?p; [?a = 0] (mod ?p) |] ==> ~ coprime ?a ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("Legendre_Symbol.not_coprime_cong_eq_0",
     "[| prime ?p; ~ coprime ?a ?p |] ==> [?a = 0] (mod ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_var 1)
           ))),
    ("Legendre_Symbol.Suc_mod_eq",
     "[Suc ?a = Suc ?b] (mod 2) = [?a = ?b] (mod 2)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Legendre_Symbol.two_cong_0_iff",
     "[2 = 0] (mod ?p) = (?p = 1 | ?p = 2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))))
           ))),
    ("Legendre_Symbol.Legendre_prod_mset",
     "prime ?p ==>
      Legendre (\<Prod>\<^sub># ?M) ?p = (PROD q:#?M. Legendre q ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Legendre_Symbol.card_Int",
     "finite ?A ==> card (?A Int ?B) = card ?A - card (?A - ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Legendre_Symbol.two_cong_0_iff_nat",
     "[2 = 0] (mod int ?p) = (?p = 1 | ?p = 2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6))),
                template_hole 5),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_hole 0,
                 template_app (template_hole 7, template_hole 6))))
           ))),
    ("Legendre_Symbol.Legendre_mult",
     "prime ?p ==> Legendre (?a * ?b) ?p = Legendre ?a ?p * Legendre ?b ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("Legendre_Symbol.cong_2_pow",
     "[?a = ?b] (mod 2) ==> (- 1) ^ ?a = (- 1) ^ ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Legendre_Symbol.two_cong_0_iff_int",
     "0 < ?p ==> [2 = 0] (mod ?p) = (?p = 1 | ?p = 2)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 0)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))),
                  template_hole 8),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))))
             )))),
    ("Legendre_Symbol.div_cancel_aux",
     "?c dvd ?a ==> (?d + ?a * ?b) div ?c = ?d div ?c + ?a div ?c * ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 3)),
             template_var 0))))),
    ("Legendre_Symbol.div_cancel_Suc",
     "[| ?c dvd ?a; 1 < ?c |] ==> Suc (?a * ?b) div ?c = ?a div ?c * ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Legendre_Symbol.euler_criterion_int",
     "[| prime ?p; 2 < ?p |]
      ==> [Legendre ?a ?p = ?a ^ ((nat ?p - 1) div 2)] (mod ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1)),
                       template_hole 1)),
                   template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_hole 8))))),
             template_var 1)
           ))),
    ("Legendre_Symbol.supplement1_Legendre",
     "[| prime ?p; 2 < ?p |]
      ==> Legendre (- 1) (int ?p) = (- 1) ^ ((?p - 1) div 2)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_hole 9)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 5)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 6, template_hole 5)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_hole 9))))))),
    ("Legendre_Symbol.Legendre_in_cong_eq",
     "[| 2 < ?p; ?b : {- 1, 0, 1} |]
      ==> [Legendre ?a ?m = ?b] (mod ?p) = (Legendre ?a ?m = ?b)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_hole 10)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app
                 (template_app (template_hole 8, template_hole 5),
                  template_app
                   (template_app (template_hole 8, template_hole 6),
                    template_hole 4))))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0)),
                  template_var 2),
                template_var 3)
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Legendre_Symbol.supplement2_Legendre",
     "[| 2 < ?p; prime ?p |]
      ==> Legendre 2 ?p = (- 1) ^ (((nat ?p)\<^sup>2 - 1) div 8)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)),
          template_var 0),
        template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 14,
               template_app (template_hole 13, template_hole 12))),
           template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app
                      (template_hole 1,
                       template_app (template_hole 13, template_hole 12)))),
                 template_hole 0)),
             template_app
              (template_hole 1,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 13,
                   template_app
                    (template_hole 13, template_hole 12))))))))),
    ("Legendre_Symbol.cong_aux_eq_1",
     "odd ?p ==>
      [(?p - 1) div 2 - ?p div 4 = (?p\<^sup>2 - 1) div 8] (mod 2)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 1)),
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5)))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 6, template_hole 5)))))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6, template_hole 5)))),
                     template_hole 1)),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 6, template_hole 5)))))),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)))
           )))]
