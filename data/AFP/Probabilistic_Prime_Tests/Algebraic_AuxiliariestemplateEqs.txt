   [("Algebraic_Auxiliaries.prime_factorization_normalize",
     "prime_factorization (normalize ?n) = prime_factorization ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Auxiliaries.size_prime_factorization_eq_Suc_0_iff",
     "(size (prime_factorization ?n) = Suc 0) = prime_elem ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Algebraic_Auxiliaries.one_prime_factor_iff_primepow",
     "(card (prime_factors ?n) = Suc 0) = primepow (normalize ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)))),
         template_app (template_hole 3, template_hole 2)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Auxiliaries.cong_exp_mod",
     "[?c = (?a mod ?n) ^ ?b] (mod ?n) = [?c = ?a ^ ?b] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_var 1),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Algebraic_Auxiliaries.cong_add_mod",
     "[?a + ?b mod ?n = ?c] (mod ?n) = [?a + ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_var 1),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0),
         template_var 1))),
    ("Algebraic_Auxiliaries.cong_add_mod",
     "[?a mod ?n + ?b = ?c] (mod ?n) = [?a + ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0),
         template_var 2),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_var 2))),
    ("Algebraic_Auxiliaries.cong_mult_mod",
     "[?a * (?b mod ?n) = ?c] (mod ?n) = [?a * ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_var 1),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0),
         template_var 1))),
    ("Algebraic_Auxiliaries.cong_mult_mod",
     "[?a mod ?n * ?b = ?c] (mod ?n) = [?a * ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0),
         template_var 2),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_var 2))),
    ("Algebraic_Auxiliaries.cong_exp_mod",
     "[(?a mod ?n) ^ ?b = ?c] (mod ?n) = [?a ^ ?b = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0),
         template_var 2),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_var 0),
         template_var 2))),
    ("Algebraic_Auxiliaries.cong_add_mod",
     "[SUM i:?A. ?f i mod ?n = ?c] (mod ?n) = [sum ?f ?A = ?c] (mod ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1)),
           template_var 0),
         template_var 2),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1)),
           template_var 0),
         template_var 2)))]
