Loading theory "Draft.Templates" (required by "Draft.Fermat_TestTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Fermat_TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Algebraic_Auxiliaries" (required by "Draft.Fermat_TestTemplates" via "Draft.Fermat_Test" via "Draft.Fermat_Witness" via "Draft.Euler_Witness" via "Draft.Jacobi_Symbol")
Loading theory "Draft.Legendre_Symbol" (required by "Draft.Fermat_TestTemplates" via "Draft.Fermat_Test" via "Draft.Fermat_Witness" via "Draft.Euler_Witness" via "Draft.Jacobi_Symbol")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.359s cpu time, 0.000s GC time
### theory "Draft.Legendre_Symbol"
### 0.134s elapsed time, 0.492s cpu time, 0.039s GC time
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.494s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Fermat_TestTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.BigO"
### 0.691s elapsed time, 1.417s cpu time, 0.134s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Fermat_TestTemplates")
### theory "Draft.Algebraic_Auxiliaries"
### 0.871s elapsed time, 2.005s cpu time, 0.173s GC time
Loading theory "Draft.Generalized_Primality_Test" (required by "Draft.Fermat_TestTemplates" via "Draft.Fermat_Test")
Loading theory "Draft.Residues_Nat" (required by "Draft.Fermat_TestTemplates" via "Draft.Fermat_Test" via "Draft.Fermat_Witness" via "Draft.Euler_Witness")
Loading theory "Draft.Jacobi_Symbol" (required by "Draft.Fermat_TestTemplates" via "Draft.Fermat_Test" via "Draft.Fermat_Witness" via "Draft.Euler_Witness")
locale residues_mult_nat
  fixes n :: "nat"
    and G :: "nat monoid"
  assumes "residues_mult_nat n"
  defines "G == Residues_Mult n"
locale residues_nat
  fixes n :: "nat"
    and R :: "nat ring"
  assumes "residues_nat n"
  defines "R == Residues_nat n"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.781s elapsed time, 2.784s cpu time, 0.694s GC time
### theory "Draft.Jacobi_Symbol"
### 0.963s elapsed time, 3.365s cpu time, 0.751s GC time
Loading theory "Draft.QuadRes" (required by "Draft.Fermat_TestTemplates" via "Draft.Fermat_Test" via "Draft.Fermat_Witness" via "Draft.Euler_Witness")
### theory "Draft.QuadRes"
### 0.091s elapsed time, 0.250s cpu time, 0.067s GC time
locale residues_nat_prime
  fixes p :: "nat"
    and R :: "nat ring"
  assumes "residues_nat_prime p"
  defines "R == Residues_nat p"
locale prob_primality_test
  fixes P :: "nat => nat => bool"
    and n :: "nat"
  assumes "prob_primality_test P n"
locale good_prob_primality_test
  fixes P :: "nat => nat => bool"
    and n :: "nat"
    and q :: "real"
  assumes "good_prob_primality_test P n q"
### theory "Draft.Generalized_Primality_Test"
### 1.202s elapsed time, 3.928s cpu time, 0.880s GC time
### theory "Draft.Residues_Nat"
### 1.913s elapsed time, 4.704s cpu time, 0.993s GC time
Loading theory "Draft.Carmichael_Numbers" (required by "Draft.Fermat_TestTemplates" via "Draft.Fermat_Test" via "Draft.Fermat_Witness")
Loading theory "Draft.Euler_Witness" (required by "Draft.Fermat_TestTemplates" via "Draft.Fermat_Test" via "Draft.Fermat_Witness")
### theory "Draft.Carmichael_Numbers"
### 0.076s elapsed time, 0.152s cpu time, 0.000s GC time
locale euler_witness_context
  fixes p :: "nat"
  assumes "euler_witness_context p"
### theory "Draft.Euler_Witness"
### 0.584s elapsed time, 1.129s cpu time, 0.652s GC time
Loading theory "Draft.Fermat_Witness" (required by "Draft.Fermat_TestTemplates" via "Draft.Fermat_Test")
### theory "Draft.Fermat_Witness"
### 0.421s elapsed time, 0.442s cpu time, 0.042s GC time
Loading theory "Draft.Fermat_Test" (required by "Draft.Fermat_TestTemplates")
locale fermat_test_not_Carmichael_number
  fixes n :: "nat"
  assumes "fermat_test_not_Carmichael_number n"
### theory "Draft.Fermat_Test"
### 1.112s elapsed time, 1.188s cpu time, 0.117s GC time
Loading theory "Draft.Fermat_TestTemplates"
val templateLemmas =
   [("Fermat_Test.fermat_test_prime",
     "prime ?n ==> fermat_test ?n = return_pmf True",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Fermat_Test.not_coprime_imp_fermat_witness",
     "[| 1 < ?n; ~ coprime ?a ?n |] ==> fermat_witness ?a ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Fermat_Test.fermat_test_Carmichael_number",
     "Carmichael_number ?n ==>
      fermat_test ?n =
      bernoulli_pmf (real (totient ?n - 1) / real (?n - 2))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_hole 3))),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))))))))),
    ("Fermat_Test.fermat_test_composite",
     "[| ~ prime ?n; ~ Carmichael_number ?n | ?n < 3 |]
      ==> pmf (fermat_test ?n) True < 1 / 2",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 14, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_hole 15,
                  template_app (template_hole 12, template_var 0))),
              template_app
               (template_app (template_hole 11, template_var 0),
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_hole 8))))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_hole 8))))))]:
   (string * thm * template) list
### theory "Draft.Fermat_TestTemplates"
### 1.629s elapsed time, 2.012s cpu time, 0.296s GC time
val it = (): unit
