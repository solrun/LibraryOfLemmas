Loading theory "Draft.Legendre_Symbol" (required by "Draft.Legendre_SymbolTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Legendre_SymbolTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Legendre_SymbolTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.087s elapsed time, 0.293s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.113s elapsed time, 0.345s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Legendre_SymbolTemplates" via "Draft.ExtrEqs")
### theory "Draft.Legendre_Symbol"
### 0.159s elapsed time, 0.441s cpu time, 0.054s GC time
### theory "HOL-Library.BigO"
### 0.596s elapsed time, 0.608s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Legendre_SymbolTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.489s elapsed time, 0.533s cpu time, 0.075s GC time
Loading theory "Draft.Legendre_SymbolTemplates"
val templateLemmas =
   [("Legendre_Symbol.QuadRes_1_right", "QuadRes ?p 1",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Legendre_Symbol.Legendre_0_eq_0", "Legendre 0 ?p = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Legendre_Symbol.Legendre_p_eq_1", "Legendre ?a 1 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Legendre_Symbol.Legendre_neg", "Legendre ?a (- ?p) = Legendre ?a ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Legendre_Symbol.QuadRes_neg", "QuadRes (- ?p) ?a = QuadRes ?p ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Legendre_Symbol.Legendre_1_left", "prime ?p ==> Legendre 1 ?p = 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_hole 0))),
    ("Legendre_Symbol.Legendre_p_eq_2", "Legendre ?a 2 = ?a mod 2",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))))),
    ("Legendre_Symbol.Legendre_values", "Legendre ?p ?q : {1, - 1, 0}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 2, template_hole 3)),
               template_app
                (template_app (template_hole 4, template_hole 1),
                 template_hole 0))))
         )),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [1 \<noteq> 0] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [0 \<noteq> 1] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.prime_cong_eq_0_iff",
     "prime ?p ==> [?a = 0] (mod ?p) = (~ coprime ?a ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [1 \<noteq> - 1] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_hole 1)),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [0 \<noteq> - 1] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_hole 0)),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [- 1 \<noteq> 1] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)),
                   template_hole 0),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.basic_cong", "2 < ?p ==> [- 1 \<noteq> 0] (mod ?p)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)),
                   template_hole 0),
                 template_var 0)
               )
           ))),
    ("Legendre_Symbol.Legendre_eq_0_iff",
     "prime ?p ==> (Legendre ?a ?p = 0) = (~ coprime ?a ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1)),
           template_hole 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Legendre_Symbol.Legendre_mod",
     "?p dvd ?n ==> Legendre (?a mod ?n) ?p = Legendre ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Legendre_Symbol.QuadRes_mod",
     "?p dvd ?n ==> QuadRes ?p (?a mod ?n) = QuadRes ?p ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Legendre_Symbol.cong_eq_0_not_coprime",
     "[| prime ?p; [?a = 0] (mod ?p) |] ==> ~ coprime ?a ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("Legendre_Symbol.not_coprime_cong_eq_0",
     "[| prime ?p; ~ coprime ?a ?p |] ==> [?a = 0] (mod ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_var 1)
           ))),
    ("Legendre_Symbol.Suc_mod_eq",
     "[Suc ?a = Suc ?b] (mod 2) = [?a = ?b] (mod 2)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Legendre_Symbol.two_cong_0_iff",
     "[2 = 0] (mod ?p) = (?p = 1 | ?p = 2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4))),
                template_hole 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4))))
           ))),
    ("Legendre_Symbol.Legendre_prod_mset",
     "prime ?p ==>
      Legendre (\<Prod>\<^sub># ?M) ?p = (PROD q:#?M. Legendre q ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("Legendre_Symbol.card_Int",
     "finite ?A ==> card (?A Int ?B) = card ?A - card (?A - ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Legendre_Symbol.two_cong_0_iff_nat",
     "[2 = 0] (mod int ?p) = (?p = 1 | ?p = 2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6))),
                template_hole 5),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_hole 0,
                 template_app (template_hole 7, template_hole 6))))
           ))),
    ("Legendre_Symbol.Legendre_mult",
     "prime ?p ==> Legendre (?a * ?b) ?p = Legendre ?a ?p * Legendre ?b ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("Legendre_Symbol.cong_2_pow",
     "[?a = ?b] (mod 2) ==> (- 1) ^ ?a = (- 1) ^ ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Legendre_Symbol.two_cong_0_iff_int",
     "0 < ?p ==> [2 = 0] (mod ?p) = (?p = 1 | ?p = 2)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 0)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))),
                  template_hole 8),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))))
             )))),
    ("Legendre_Symbol.div_cancel_aux",
     "?c dvd ?a ==> (?d + ?a * ?b) div ?c = ?d div ?c + ?a div ?c * ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 3)),
             template_var 0))))),
    ("Legendre_Symbol.div_cancel_Suc",
     "[| ?c dvd ?a; 1 < ?c |] ==> Suc (?a * ?b) div ?c = ?a div ?c * ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Legendre_Symbol.euler_criterion_int",
     "[| prime ?p; 2 < ?p |]
      ==> [Legendre ?a ?p = ?a ^ ((nat ?p - 1) div 2)] (mod ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1)),
                       template_hole 1)),
                   template_app
                    (template_hole 0,
                     template_app (template_hole 9, template_hole 8))))),
             template_var 1)
           ))),
    ("Legendre_Symbol.supplement1_Legendre",
     "[| prime ?p; 2 < ?p |]
      ==> Legendre (- 1) (int ?p) = (- 1) ^ ((?p - 1) div 2)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0)),
        template_inequation
         (less_than,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_hole 9)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 5)),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 6, template_hole 5)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app
              (template_hole 11,
               template_app (template_hole 10, template_hole 9))))))),
    ("Legendre_Symbol.Legendre_in_cong_eq",
     "[| 2 < ?p; ?b : {- 1, 0, 1} |]
      ==> [Legendre ?a ?m = ?b] (mod ?p) = (Legendre ?a ?m = ?b)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_hole 10)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app
                 (template_app (template_hole 8, template_hole 5),
                  template_app
                   (template_app (template_hole 8, template_hole 6),
                    template_hole 4))))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0)),
                  template_var 2),
                template_var 3)
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Legendre_Symbol.supplement2_Legendre",
     "[| 2 < ?p; prime ?p |]
      ==> Legendre 2 ?p = (- 1) ^ (((nat ?p)\<^sup>2 - 1) div 8)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_hole 12)),
          template_var 0),
        template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 14,
               template_app (template_hole 13, template_hole 12))),
           template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app
                      (template_hole 1,
                       template_app (template_hole 13, template_hole 12)))),
                 template_hole 0)),
             template_app
              (template_hole 1,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 13,
                   template_app
                    (template_hole 13, template_hole 12))))))))),
    ("Legendre_Symbol.cong_aux_eq_1",
     "odd ?p ==>
      [(?p - 1) div 2 - ?p div 4 = (?p\<^sup>2 - 1) div 8] (mod 2)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 3, template_var 0),
                           template_hole 1)),
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5)))),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 6, template_hole 5)))))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6, template_hole 5)))),
                     template_hole 1)),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 6, template_hole 5)))))),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)))
           )))]:
   (string * thm * template) list
### theory "Draft.Legendre_SymbolTemplates"
### 0.524s elapsed time, 0.688s cpu time, 0.085s GC time
val it = (): unit
