Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UnionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UnionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UnionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.UnionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.584s cpu time, 0.039s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.811s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UnionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.315s elapsed time, 1.120s cpu time, 0.125s GC time
Loading theory "Draft.Partial_Recursive" (required by "Draft.UnionMoreTemplates" via "Draft.Union" via "Draft.R1_BC" via "Draft.Lemma_R" via "Draft.Inductive_Inference_Basics" via "Draft.Standard_Results" via "Draft.Universal")
Loading theory "HOL-Library.Stream" (required by "Draft.UnionMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "{}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.001s elapsed time, 3.716s cpu time, 0.824s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.065s elapsed time, 3.902s cpu time, 0.772s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.010s elapsed time, 6.427s cpu time, 1.031s GC time
Loading theory "Draft.Templates" (required by "Draft.UnionMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UnionMoreTemplates")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.144s cpu time, 0.125s GC time
### theory "Draft.Partial_Recursive"
### 2.463s elapsed time, 6.733s cpu time, 1.091s GC time
Loading theory "Draft.Universal" (required by "Draft.UnionMoreTemplates" via "Draft.Union" via "Draft.R1_BC" via "Draft.Lemma_R" via "Draft.Inductive_Inference_Basics" via "Draft.Standard_Results")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Universal"
### 1.295s elapsed time, 1.985s cpu time, 0.842s GC time
Loading theory "Draft.Standard_Results" (required by "Draft.UnionMoreTemplates" via "Draft.Union" via "Draft.R1_BC" via "Draft.Lemma_R" via "Draft.Inductive_Inference_Basics")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Standard_Results"
### 0.553s elapsed time, 0.686s cpu time, 0.164s GC time
Loading theory "Draft.Inductive_Inference_Basics" (required by "Draft.UnionMoreTemplates" via "Draft.Union" via "Draft.R1_BC" via "Draft.Lemma_R")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.Inductive_Inference_Basics"
### 0.407s elapsed time, 0.467s cpu time, 0.079s GC time
Loading theory "Draft.CONS_LIM" (required by "Draft.UnionMoreTemplates" via "Draft.Union" via "Draft.TOTAL_CONS")
Loading theory "Draft.CP_FIN_NUM" (required by "Draft.UnionMoreTemplates" via "Draft.Union" via "Draft.R1_BC")
Loading theory "Draft.Lemma_R" (required by "Draft.UnionMoreTemplates" via "Draft.Union" via "Draft.R1_BC")
locale cons_lim
  fixes s :: "nat => nat option"
  assumes "cons_lim s"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.CONS_LIM"
### 0.496s elapsed time, 1.655s cpu time, 1.146s GC time
### theory "Draft.CP_FIN_NUM"
### 0.495s elapsed time, 1.653s cpu time, 1.146s GC time
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Lemma_R"
### 0.951s elapsed time, 2.195s cpu time, 1.281s GC time
Loading theory "Draft.R1_BC" (required by "Draft.UnionMoreTemplates" via "Draft.Union")
Loading theory "Draft.TOTAL_CONS" (required by "Draft.UnionMoreTemplates" via "Draft.Union")
locale r1_bc
  fixes s :: "nat => nat option"
  assumes "r1_bc s"
### theory "Draft.R1_BC"
### 0.239s elapsed time, 0.512s cpu time, 0.069s GC time
locale total_cons
  fixes s :: "nat => nat option"
  assumes "total_cons s"
### theory "Draft.TOTAL_CONS"
### 0.456s elapsed time, 0.723s cpu time, 0.069s GC time
Loading theory "Draft.Union" (required by "Draft.UnionMoreTemplates")
### theory "Draft.Union"
### 0.160s elapsed time, 0.222s cpu time, 0.084s GC time
Loading theory "Draft.UnionMoreTemplates"
val templateLemmas =
   [("Complete_Lattices.Union_Pow_eq", "\<Union> (Pow ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Complete_Lattices.subset_Pow_Union", "?A <= Pow (\<Union> ?A)",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Finite_Set.finite_UnionD", "finite (\<Union> ?A) ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Relation.Field_Union", "Field (\<Union> ?R) = \<Union> (Field ` ?R)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Complete_Lattices.Union_insert",
     "\<Union> (insert ?a ?B) = ?a Un \<Union> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complete_Lattices.Union_upper", "?B : ?A ==> ?B <= \<Union> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Relation.Domain_Union",
     "Domain (\<Union> ?S) = \<Union> (Domain ` ?S)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Relation.Range_Union", "Range (\<Union> ?S) = \<Union> (Range ` ?S)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.Union_Un_distrib",
     "\<Union> (?A Un ?B) = \<Union> ?A Un \<Union> ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complete_Lattices.Union_Int_subset",
     "\<Union> (?A Int ?B) <= \<Union> ?A Int \<Union> ?B",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complete_Lattices.Union_mono",
     "?A <= ?B ==> \<Union> ?A <= \<Union> ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Union.singleton_in_FIN", "?f : \<R> ==> {?f} : FIN",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("Complete_Lattices.Union_eq", "\<Union> ?A = {x. EX B:?A. x : B}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Complete_Lattices.empty_Union_conv",
     "({} = \<Union> ?A) = (ALL x:?A. x = {})",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.Union_empty_conv",
     "(\<Union> ?A = {}) = (ALL x:?A. x = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.disjnt_Union2",
     "disjnt ?B (\<Union> ?\<A>) = (ALL A:?\<A>. disjnt ?B A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Complete_Lattices.disjnt_Union1",
     "disjnt (\<Union> ?\<A>) ?B = (ALL A:?\<A>. disjnt A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Complete_Lattices.Union_iff",
     "(?A : \<Union> ?C) = (EX X:?C. ?A : X)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Equiv_Relations.Union_quotient",
     "equiv ?A ?r ==> \<Union> (?A // ?r) = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Lifting_Set.Union_transfer",
     "rel_fun (rel_set (rel_set ?A)) (rel_set ?A) \<Union> \<Union>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0))),
               template_app (template_hole 2, template_var 0)),
             t_empty),
           t_empty)
         )),
    ("Complete_Lattices.Int_Union",
     "?A Int \<Union> ?B = \<Union> ((Int) ?A ` ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.Int_Union2",
     "\<Union> ?B Int ?A = (UN C:?B. C Int ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complete_Lattices.image_Union",
     "?f ` \<Union> ?S = \<Union> ((`) ?f ` ?S)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Complete_Lattices.vimage_Union",
     "?f -` \<Union> ?A = \<Union> ((-`) ?f ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Product_Type.Sigma_Union",
     "Sigma (\<Union> ?X) ?B = (UN A:?X. Sigma A ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Union.r_div2", "eval r_div2 [?n] \<down>= ?n div 2",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Union.r_mod2", "eval r_mod2 [?n] \<down>= ?n mod 2",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Groups_Big.card_Union_le_sum_card",
     "ALL u:?U. finite u ==> card (\<Union> ?U) <= sum card ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Zorn.chain_subset_antisym_Union",
     "[| chain\<^sub>\<subseteq> ?R; ALL r:?R. antisym r |]
      ==> antisym (\<Union> ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Zorn.chain_subset_trans_Union",
     "[| chain\<^sub>\<subseteq> ?R; ALL r:?R. trans r |]
      ==> trans (\<Union> ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complete_Lattices.UnionI",
     "[| ?X : ?C; ?A : ?X |] ==> ?A : \<Union> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Complete_Lattices.Union_disjoint",
     "(\<Union> ?C Int ?A = {}) = (ALL B:?C. B Int ?A = {})",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Union.NUM_closed_under_union",
     "[| ?U : NUM; ?V : NUM |] ==> ?U Un ?V : NUM",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complete_Lattices.Union_least",
     "(!!X. X : ?A ==> X <= ?C) ==> \<Union> ?A <= ?C",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Zorn.wf_Union_wf_init_segs",
     "[| ?R : Chains init_seg_of; ALL r:?R. wf r |] ==> wf (\<Union> ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Zorn.Chains_init_seg_of_Union",
     "[| ?R : Chains init_seg_of; ?r : ?R |]
      ==> ?r initial_segment_of \<Union> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))),
             template_hole 4)
           ))),
    ("Finite_Set.finite_Union",
     "[| finite ?A; !!M. M : ?A ==> finite M |] ==> finite (\<Union> ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complete_Lattices.Un_Union_image",
     "(UN x:?C. ?A x Un ?B x) = \<Union> (?A ` ?C) Un \<Union> (?B ` ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Zorn.chain_subset_Total_Union",
     "[| chain\<^sub>\<subseteq> ?R; ALL r:?R. Total r |]
      ==> Total (\<Union> ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Zorn.pairwise_chain_Union",
     "[| !!S. S : ?\<C> ==> pairwise ?R S; chain\<^sub>\<subseteq> ?\<C> |]
      ==> pairwise ?R (\<Union> ?\<C>)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Zorn.Union_in_chain",
     "[| finite ?\<B>; ?\<B> ~= {}; subset.chain ?\<A> ?\<B> |]
      ==> \<Union> ?\<B> : ?\<B>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 1)
           ))),
    ("Topological_Spaces.generate_topology_Union",
     "(!!k. k : ?I ==> generate_topology ?S (?K k)) ==>
      generate_topology ?S (\<Union> (?K ` ?I))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("Topological_Spaces.connected_Union",
     "[| !!s. s : ?S ==> connected s; \<Inter> ?S ~= {} |]
      ==> connected (\<Union> ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complete_Lattices.UnionE",
     "[| ?A : \<Union> ?C; !!X. [| ?A : X; X : ?C |] ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Complete_Lattices.Union_subsetI",
     "(!!x. x : ?A ==> EX y. y : ?B & x <= y) ==>
      \<Union> ?A <= \<Union> ?B",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Groups_Big.card_Union_disjoint",
     "[| pairwise disjnt ?C; !!A. A : ?C ==> finite A |]
      ==> card (\<Union> ?C) = sum card ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Complete_Lattices.Union_SetCompr_eq",
     "\<Union> {?f x |x. ?P x} = {a. EX x. ?P x & a : ?f x}",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Topological_Spaces.continuous_on_open_Union",
     "[| !!s. s : ?S ==> open s; !!s. s : ?S ==> continuous_on s ?f |]
      ==> continuous_on (\<Union> ?S) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Wellfounded.wf_Union",
     "[| ALL r:?R. wf r;
         ALL r:?R. ALL s:?R. r ~= s --> Domain r Int Range s = {} |]
      ==> wf (\<Union> ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Hilbert_Choice.finite_subset_Union",
     "[| finite ?A; ?A <= \<Union> ?\<B>;
         !!\<F>.
            [| finite \<F>; \<F> <= ?\<B>; ?A <= \<Union> \<F> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Topological_Spaces.continuous_on_closed_Union",
     "[| finite ?I; !!i. i : ?I ==> closed (?U i);
         !!i. i : ?I ==> continuous_on (?U i) ?f |]
      ==> continuous_on (\<Union> (?U ` ?I)) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2))),
             template_var 0)
           ))),
    ("Zorn.finite_subset_Union_chain",
     "[| finite ?A; ?A <= \<Union> ?\<B>; ?\<B> ~= {};
         subset.chain ?\<A> ?\<B>;
         !!B. [| B : ?\<B>; ?A <= B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.UnionMoreTemplates"
### 0.362s elapsed time, 0.542s cpu time, 0.071s GC time
val it = (): unit
