   [("Lemma_R.auxhyp_prenum", "\<phi> (the (auxhyp ?e)) = prenum ?e",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Lemma_R.amalgamate", "\<phi> (amalgamate ?i ?j) = amalgamation ?i ?j",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Lemma_R.r_auxhyp", "\<phi> (the (eval r_auxhyp [?e])) = prenum ?e",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app (template_hole 0, template_var 0))),
    ("Lemma_R.r_inconsist", "eval r_inconsist [?i, ?e] = inconsist ?i ?e",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Lemma_R.r_amalgamate",
     "eval r_amalgamate [?i, ?j] \<down>= amalgamate ?i ?j",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lemma_R.r_amalgamation",
     "eval r_amalgamation [?i, ?j, ?x] = amalgamation ?i ?j ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Lemma_R.r_parallel'",
     "eval r_parallel [?i, ?j, ?x] = parallel ?i ?j ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Lemma_R.amalgamation_diverg",
     "(amalgamation ?i ?j ?x \<up>) =
      (\<phi> ?i ?x \<up> & \<phi> ?j ?x \<up>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 2),
       template_dunno)),
    ("Lemma_R.parallel_converg_either",
     "(\<phi> ?i ?x \<down> | \<phi> ?j ?x \<down>) =
      (parallel ?i ?j ?x \<down>)",
     template_bimplication
      (template_dunno,
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1),
             template_hole 1)
           ))),
    ("Lemma_R.r_totalizer",
     "eval (r_totalizer ?d) [?i, ?x] =
      (if the (delay ?i ?x) = 0 then Some ?d
       else \<phi> ?i (e_take (the (delay ?i ?x)) ?x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_app
                 (template_app (template_hole 11, template_var 0),
                  template_hole 10)))
            )],
       template_dunno)),
    ("Lemma_R.Greatest_bounded_Suc",
     "(if 0 < ?P ?n then Suc ?n
       else if EX j<?n. 0 < ?P j then Suc (GREATEST j. j < ?n & 0 < ?P j)
            else 0) =
      (if EX j<Suc ?n. 0 < ?P j then Suc (GREATEST j. j < Suc ?n & 0 < ?P j)
       else 0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_var 1, template_var 0))),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 6, template_app (template_hole 2, t_empty)),
             template_app
              (template_hole 3, template_app (template_hole 0, t_empty))),
           template_hole 4)),
       template_app
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 2, t_empty)),
           template_app
            (template_hole 3, template_app (template_hole 0, t_empty))),
         template_hole 4))),
    ("Lemma_R.r_delay",
     "eval r_delay [?i, ?x] \<down>=
      (if EX j<e_length ?x.
             0 < the (eval r_result1 [e_length ?x, ?i, e_take (Suc j) ?x])
       then Suc (GREATEST j.
                    j < e_length ?x &
                    0 < the (eval r_result1
                              [e_length ?x, ?i, e_take (Suc j) ?x]))
       else 0)",
     template_equation
      (template_app
        (template_app (template_hole 17, template_hole 16),
         template_app
          (template_app (template_hole 15, template_var 1),
           template_app
            (template_app (template_hole 15, template_var 0),
             template_hole 14))),
       template_app
        (template_hole 13,
         template_app
          (template_app
            (template_app
              (template_hole 12, template_app (template_hole 11, t_empty)),
             template_app
              (template_hole 1, template_app (template_hole 0, t_empty))),
           template_hole 6))))]
