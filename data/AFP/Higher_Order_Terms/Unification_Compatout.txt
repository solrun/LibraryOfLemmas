Loading theory "Draft.Name" (required by "Draft.Unification_CompatTemplates" via "Draft.Unification_Compat" via "Draft.Term_Class")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Unification_CompatTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Unification_CompatTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Unification_CompatTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.537s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Unification_CompatTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.836s cpu time, 0.048s GC time
Loading theory "Draft.Term_Utils" (required by "Draft.Unification_CompatTemplates" via "Draft.Unification_Compat" via "Draft.Term_Class")
instantiation
  name :: ord
  less_eq_name == less_eq :: name => name => bool
  less_name == less :: name => name => bool
### theory "Draft.Name"
### 0.320s elapsed time, 1.277s cpu time, 0.136s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Unification_CompatTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Term_Utils"
### 0.397s elapsed time, 1.562s cpu time, 0.145s GC time
Loading theory "Draft.Term_Class" (required by "Draft.Unification_CompatTemplates" via "Draft.Unification_Compat")
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.839s elapsed time, 3.323s cpu time, 0.318s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.884s elapsed time, 3.189s cpu time, 0.692s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
creating orders for datatype term
Found termination order: "size <*mlex*> {}"
registered term in class ord
registered term in class order
registered term in class linorder
### theory "HOL-Library.Tree"
### 1.884s elapsed time, 5.625s cpu time, 0.920s GC time
Loading theory "Draft.Templates" (required by "Draft.Unification_CompatTemplates" via "Draft.ExtrEqs")
class pre_term = size +
  fixes frees :: "'a => name fset"
    and subst :: "'a => (name, 'a) fmap => 'a"
    and "consts" :: "'a => name fset"
    and app :: "'a => 'a => 'a"
    and unapp :: "'a => ('a * 'a) option"
    and const :: "name => 'a"
    and unconst :: "'a => name option"
    and free :: "name => 'a"
    and unfree :: "'a => name option"
  assumes
    "unapp_app":
      "!!u\<^sub>1 u\<^sub>2.
          unapp (app u\<^sub>1 u\<^sub>2) = Some (u\<^sub>1, u\<^sub>2)"
  assumes
    "app_unapp":
      "!!u u\<^sub>1 u\<^sub>2.
          unapp u = Some (u\<^sub>1, u\<^sub>2) ==>
          u = app u\<^sub>1 u\<^sub>2"
  assumes
    "app_size":
      "!!u\<^sub>1 u\<^sub>2.
          size (app u\<^sub>1 u\<^sub>2) =
          size u\<^sub>1 + size u\<^sub>2 + 1"
  assumes "unconst_const": "!!name. unconst (const name) = Some name"
  assumes
    "const_unconst": "!!u name. unconst u = Some name ==> u = const name"
  assumes "unfree_free": "!!name. unfree (free name) = Some name"
  assumes "free_unfree": "!!u name. unfree u = Some name ==> u = free name"
  assumes
    "app_const_distinct":
      "!!u\<^sub>1 u\<^sub>2 name. app u\<^sub>1 u\<^sub>2 ~= const name"
  assumes
    "app_free_distinct":
      "!!u\<^sub>1 u\<^sub>2 name. app u\<^sub>1 u\<^sub>2 ~= free name"
  assumes
    "free_const_distinct":
      "!!name\<^sub>1 name\<^sub>2. free name\<^sub>1 ~= const name\<^sub>2"
  assumes "frees_const": "!!name. frees (const name) = {||}"
  assumes "frees_free": "!!name. frees (free name) = {|name|}"
  assumes
    "frees_app":
      "!!u\<^sub>1 u\<^sub>2.
          frees (app u\<^sub>1 u\<^sub>2) =
          frees u\<^sub>1 |\<union>| frees u\<^sub>2"
  assumes "consts_free": "!!name. consts (free name) = {||}"
  assumes "consts_const": "!!name. consts (const name) = {|name|}"
  assumes
    "consts_app":
      "!!u\<^sub>1 u\<^sub>2.
          consts (app u\<^sub>1 u\<^sub>2) =
          consts u\<^sub>1 |\<union>| consts u\<^sub>2"
  assumes
    "subst_app":
      "!!u\<^sub>1 u\<^sub>2 env.
          subst (app u\<^sub>1 u\<^sub>2) env =
          app (subst u\<^sub>1 env) (subst u\<^sub>2 env)"
  assumes "subst_const": "!!name env. subst (const name) env = const name"
  assumes
    "subst_free":
      "!!name env.
          subst (free name) env =
          (case fmlookup env name of None => free name | Some t => t)"
  assumes
    "free_inject":
      "!!name\<^sub>1 name\<^sub>2.
          free name\<^sub>1 = free name\<^sub>2 ==>
          name\<^sub>1 = name\<^sub>2"
  assumes
    "const_inject":
      "!!name\<^sub>1 name\<^sub>2.
          const name\<^sub>1 = const name\<^sub>2 ==>
          name\<^sub>1 = name\<^sub>2"
  assumes
    "app_inject":
      "!!u\<^sub>1 u\<^sub>2 u\<^sub>3 u\<^sub>4.
          app u\<^sub>1 u\<^sub>2 = app u\<^sub>3 u\<^sub>4 ==>
          u\<^sub>1 = u\<^sub>3 & u\<^sub>2 = u\<^sub>4"
instantiation
  term :: pre_term
  frees_term == frees :: term => name fset
  subst_term == subst :: term => (name, term) fmap => term
  consts_term == consts :: term => name fset
  app_term == app :: term => term => term
  unapp_term == unapp :: term => (term * term) option
  const_term == const :: name => term
  unconst_term == unconst :: term => name option
  free_term == free :: name => term
  unfree_term == unfree :: term => name option
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.188s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Unification_CompatTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class pre_term = size +
  fixes frees :: "'a => name fset"
    and subst :: "'a => (name, 'a) fmap => 'a"
    and "consts" :: "'a => name fset"
    and app :: "'a => 'a => 'a"
    and unapp :: "'a => ('a * 'a) option"
    and const :: "name => 'a"
    and unconst :: "'a => name option"
    and free :: "name => 'a"
    and unfree :: "'a => name option"
  assumes
    "unapp_app":
      "!!u\<^sub>1 u\<^sub>2.
          unapp (app u\<^sub>1 u\<^sub>2) = Some (u\<^sub>1, u\<^sub>2)"
  assumes
    "app_unapp":
      "!!u u\<^sub>1 u\<^sub>2.
          unapp u = Some (u\<^sub>1, u\<^sub>2) ==>
          u = app u\<^sub>1 u\<^sub>2"
  assumes
    "app_size":
      "!!u\<^sub>1 u\<^sub>2.
          size (app u\<^sub>1 u\<^sub>2) =
          size u\<^sub>1 + size u\<^sub>2 + 1"
  assumes "unconst_const": "!!name. unconst (const name) = Some name"
  assumes
    "const_unconst": "!!u name. unconst u = Some name ==> u = const name"
  assumes "unfree_free": "!!name. unfree (free name) = Some name"
  assumes "free_unfree": "!!u name. unfree u = Some name ==> u = free name"
  assumes
    "app_const_distinct":
      "!!u\<^sub>1 u\<^sub>2 name. app u\<^sub>1 u\<^sub>2 ~= const name"
  assumes
    "app_free_distinct":
      "!!u\<^sub>1 u\<^sub>2 name. app u\<^sub>1 u\<^sub>2 ~= free name"
  assumes
    "free_const_distinct":
      "!!name\<^sub>1 name\<^sub>2. free name\<^sub>1 ~= const name\<^sub>2"
  assumes "frees_const": "!!name. frees (const name) = {||}"
  assumes "frees_free": "!!name. frees (free name) = {|name|}"
  assumes
    "frees_app":
      "!!u\<^sub>1 u\<^sub>2.
          frees (app u\<^sub>1 u\<^sub>2) =
          frees u\<^sub>1 |\<union>| frees u\<^sub>2"
  assumes "consts_free": "!!name. consts (free name) = {||}"
  assumes "consts_const": "!!name. consts (const name) = {|name|}"
  assumes
    "consts_app":
      "!!u\<^sub>1 u\<^sub>2.
          consts (app u\<^sub>1 u\<^sub>2) =
          consts u\<^sub>1 |\<union>| consts u\<^sub>2"
  assumes
    "subst_app":
      "!!u\<^sub>1 u\<^sub>2 env.
          subst (app u\<^sub>1 u\<^sub>2) env =
          app (subst u\<^sub>1 env) (subst u\<^sub>2 env)"
  assumes "subst_const": "!!name env. subst (const name) env = const name"
  assumes
    "subst_free":
      "!!name env.
          subst (free name) env =
          (case fmlookup env name of None => free name | Some t => t)"
  assumes
    "free_inject":
      "!!name\<^sub>1 name\<^sub>2.
          free name\<^sub>1 = free name\<^sub>2 ==>
          name\<^sub>1 = name\<^sub>2"
  assumes
    "const_inject":
      "!!name\<^sub>1 name\<^sub>2.
          const name\<^sub>1 = const name\<^sub>2 ==>
          name\<^sub>1 = name\<^sub>2"
  assumes
    "app_inject":
      "!!u\<^sub>1 u\<^sub>2 u\<^sub>3 u\<^sub>4.
          app u\<^sub>1 u\<^sub>2 = app u\<^sub>3 u\<^sub>4 ==>
          u\<^sub>1 = u\<^sub>3 & u\<^sub>2 = u\<^sub>4"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.558s elapsed time, 1.181s cpu time, 0.103s GC time
class term = pre_term +
  fixes abs_pred :: "('a => bool) => 'a => bool"
  assumes
    "raw_induct":
      "!!P t.
          [| !!name. P (const name); !!name. P (free name);
             !!t\<^sub>1 t\<^sub>2.
                [| P t\<^sub>1; P t\<^sub>2 |]
                ==> P (app t\<^sub>1 t\<^sub>2);
             !!t. abs_pred P t |]
          ==> P t"
  assumes
    "raw_subst_id":
      "!!t. abs_pred (%t. ALL env. id_env env --> subst t env = t) t"
    and
    "raw_subst_drop":
      "!!x t.
          abs_pred
           (%t. x |\<notin>| frees t -->
                (ALL env. subst t (fmdrop x env) = subst t env))
           t"
    and
    "raw_subst_indep":
      "!!t. abs_pred
             (%t. ALL env\<^sub>1 env\<^sub>2.
                     closed_env env\<^sub>2 -->
                     fdisjnt (fmdom env\<^sub>1) (fmdom env\<^sub>2) -->
                     subst t (env\<^sub>1 ++\<^sub>f env\<^sub>2) =
                     subst (subst t env\<^sub>2) env\<^sub>1)
             t"
    and
    "raw_subst_frees":
      "!!t. abs_pred
             (%t. ALL env.
                     closed_env env -->
                     frees (subst t env) = frees t |-| fmdom env)
             t"
    and
    "raw_subst_consts'":
      "!!t. abs_pred
             (%a. ALL x.
                     consts (subst a x) =
                     consts a |\<union>|
                     ffUnion (consts |`| fmimage x (frees a)))
             t"
    and "abs_pred_trivI": "!!P t. P t ==> abs_pred P t"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (fst p)) (fst p)) <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "rewrite_first"
  Proving monotonicity ...
class term = pre_term +
  fixes abs_pred :: "('a => bool) => 'a => bool"
  assumes
    "raw_induct":
      "!!P t.
          [| !!name. P (const name); !!name. P (free name);
             !!t\<^sub>1 t\<^sub>2.
                [| P t\<^sub>1; P t\<^sub>2 |]
                ==> P (app t\<^sub>1 t\<^sub>2);
             !!t. abs_pred P t |]
          ==> P t"
  assumes
    "raw_subst_id":
      "!!t. abs_pred (%t. ALL env. id_env env --> subst t env = t) t"
    and
    "raw_subst_drop":
      "!!x t.
          abs_pred
           (%t. x |\<notin>| frees t -->
                (ALL env. subst t (fmdrop x env) = subst t env))
           t"
    and
    "raw_subst_indep":
      "!!t. abs_pred
             (%t. ALL env\<^sub>1 env\<^sub>2.
                     closed_env env\<^sub>2 -->
                     fdisjnt (fmdom env\<^sub>1) (fmdom env\<^sub>2) -->
                     subst t (env\<^sub>1 ++\<^sub>f env\<^sub>2) =
                     subst (subst t env\<^sub>2) env\<^sub>1)
             t"
    and
    "raw_subst_frees":
      "!!t. abs_pred
             (%t. ALL env.
                     closed_env env -->
                     frees (subst t env) = frees t |-| fmdom env)
             t"
    and
    "raw_subst_consts'":
      "!!t. abs_pred
             (%a. ALL x.
                     consts (subst a x) =
                     consts a |\<union>|
                     ffUnion (consts |`| fmimage x (frees a)))
             t"
    and "abs_pred_trivI": "!!P t. P t ==> abs_pred P t"
### Rewrite rule not in simpset:
### Wellfounded.accp strip_comb_rel ?t1 ==>
### strip_comb ?t1 ==
### case unapp ?t1 of None => (?t1, [])
### | Some (t, u) => let (f, args) = strip_comb t in (f, args @ [u])
consts
  list_comb :: "'a => 'a list => 'a"
### Rewrite rule not in simpset:
### Wellfounded.accp left_nesting_rel ?t1 ==>
### left_nesting ?t1 ==
### term_cases (%_. 0) (%_. 0) (%t u. Suc (left_nesting t)) 0 ?t1
Found termination order: "size <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp no_abs_rel ?t1 ==>
### no_abs ?t1 ==
### term_cases (%_. True) (%_. True) (%t u. no_abs t & no_abs u) False ?t1
Found termination order: "size <*mlex*> {}"
locale simple_syntactic_and
  fixes P :: "'a => bool"
  assumes "simple_syntactic_and P"
locale subst_syntactic_and
  fixes P :: "'a => bool"
  assumes "subst_syntactic_and P"
locale simple_syntactic_or
  fixes P :: "'a => bool"
  assumes "simple_syntactic_or P"
locale term_struct_rel
  fixes P :: "'a => 'b => bool"
  assumes "term_struct_rel P"
locale term_struct_rel_strong
  fixes P :: "'a => 'b => bool"
  assumes "term_struct_rel_strong P"
### Rewrite rule not in simpset:
### Wellfounded.accp convert_term_rel ?t1 ==>
### convert_term ?t1 ==
### term_cases const free (%t u. app (convert_term t) (convert_term u))
###  undefined ?t1
Found termination order: "size <*mlex*> {}"
### theory "Draft.Term_Class"
### 3.620s elapsed time, 6.817s cpu time, 1.117s GC time
Loading theory "Draft.Unification_Compat" (required by "Draft.Unification_CompatTemplates")
class is_name = type +
  fixes of_name :: "name => 'a"
  assumes "bij": "bij of_name"
instantiation
  name :: is_name
  of_name_name == of_name :: name => name
instantiation
  trm :: (is_name) pre_term
  frees_trm == frees :: 'a trm => name fset
  subst_trm == subst :: 'a trm => (name, 'a trm) fmap => 'a trm
  consts_trm == consts :: 'a trm => name fset
  app_trm == app :: 'a trm => 'a trm => 'a trm
  unapp_trm == unapp :: 'a trm => ('a trm * 'a trm) option
  const_trm == const :: name => 'a trm
  unconst_trm == unconst :: 'a trm => name option
  free_trm == free :: name => 'a trm
  unfree_trm == unfree :: 'a trm => name option
consts
  consts_trm :: "'a trm => name fset"
consts
  subst_trm :: "'a trm => (name, 'a trm) fmap => 'a trm"
instantiation
  trm :: (is_name) term
  abs_pred_trm == abs_pred :: ('a trm => bool) => 'a trm => bool
### theory "Draft.Unification_Compat"
### 0.433s elapsed time, 0.546s cpu time, 0.070s GC time
Loading theory "Draft.Unification_CompatTemplates"
val templateLemmas =
   [("Unification_Compat.frees_trm", "frees (trm.Const ?c) = {||}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Unification_Compat.frees_trm", "frees (Var ?v) = {|to_name ?v|}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Unification_Compat.subst_eq",
     "?t \<lhd> ?s = subst ?t (fmap_of_list ?s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Unification_Compat.frees_trm",
     "frees (?M \<cdot> ?N) = frees ?M |\<union>| frees ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Unification_CompatTemplates"
### 0.656s elapsed time, 1.341s cpu time, 0.773s GC time
val it = (): unit
