   [("Term_Class.list_comb_inj_second", "inj (list_comb ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Term_Class.left_nesting_simps", "left_nesting (const ?name) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Term_Class.left_nesting_simps", "left_nesting (free ?name) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Term_Class.is_abs_simps", "is_abs (const ?name) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Term_Class.is_abs_simps", "is_abs (free ?name) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Term_Class.no_abs_simps", "no_abs (const ?name) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Term_Class.no_abs_simps", "no_abs (free ?name) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Term_Class.convert_term_simps",
     "convert_term (const ?name) = const ?name",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Term_Class.convert_term_simps",
     "convert_term (free ?name) = free ?name",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Term_Class.is_abs_simps", "is_abs (app ?t ?u) = False",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Term_Class.convert_term_no_abs",
     "no_abs ?t ==> no_abs (convert_term ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Term_Class.left_nesting_simps",
     "left_nesting (app ?t ?u) = Suc (left_nesting ?t)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 1)))),
    ("Term_Class.convert_term_id", "no_abs ?t ==> convert_term ?t = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Term_Class.eq_i_oI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Term_Class.eq_o_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Term_Class.term_cases",
     "term_cases ?if_const ?if_free ?if_app ?otherwise (const ?name) =
      ?if_const ?name",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 4, template_var 0))),
    ("Term_Class.term_cases",
     "term_cases ?if_const ?if_free ?if_app ?otherwise (free ?name) =
      ?if_free ?name",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 3, template_var 0))),
    ("Term_Class.convert_term_simps",
     "convert_term (app ?t ?u) = app (convert_term ?t) (convert_term ?u)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Term_Class.list_comb_nesting",
     "left_nesting (list_comb ?f ?xs) = left_nesting ?f + length ?xs",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Term_Class.no_abs_simps",
     "no_abs (app ?t ?u) = (no_abs ?t & no_abs ?u)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Term_Class.convert_term_idem",
     "no_abs ?t ==> convert_term (convert_term ?t) = convert_term ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Term_Class.convert_term_consts",
     "no_abs ?t ==> consts (convert_term ?t) = consts ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Term_Class.convert_term_frees",
     "no_abs ?t ==> frees (convert_term ?t) = frees ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Term_Class.eq_i_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Term_Class.rewrite_first_i_i_oI",
     "rewrite_first ?x ?xa ?xb ==>
      pred.eval (rewrite_first_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Term_Class.term_cases",
     "term_cases ?if_const ?if_free ?if_app ?otherwise (app ?t ?u) =
      ?if_app ?t ?u",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Term_Class.closed_list_comb",
     "pre_term_class.closed (?name $$ ?args) =
      list_all pre_term_class.closed ?args",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Term_Class.eq_i_oE",
     "[| pred.eval (eq_i_o ?x) ?xa; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Term_Class.eq_o_iE",
     "[| pred.eval (eq_o_i ?xa) ?x; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Term_Class.eq_i_iE",
     "[| pred.eval (eq_i_i ?x ?xa) ?y; Predicate.eq ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Term_Class.convert_term_match",
     "match ?t ?u = Some ?env ==>
      match ?t (convert_term ?u) = Some (fmmap convert_term ?env)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 2),
             template_var 0))))),
    ("Term_Class.rewrite_first_i_i_oE",
     "[| pred.eval (rewrite_first_i_i_o ?x ?xa) ?xb;
         rewrite_first ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Term_Class.find_match_rewrite_first",
     "find_match ?cs ?t = Some (?env, ?pat, ?rhs) ==>
      rewrite_first ?cs ?t (subst ?rhs ?env)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Term_Class.convert_term_inj",
     "[| no_abs ?t; no_abs ?t'; convert_term ?t = convert_term ?t' |]
      ==> ?t = ?t'",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Term_Class.term_cases_template",
     "(!!x. ?f x = term_cases ?if_const ?if_free ?if_app ?otherwise x) ==>
      ?f (const ?name) = ?if_const ?name",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_var 5, template_app (template_hole 0, template_var 0)),
         template_app (template_var 4, template_var 0)))),
    ("Term_Class.term_cases_template",
     "(!!x. ?f x = term_cases ?if_const ?if_free ?if_app ?otherwise x) ==>
      ?f (free ?name) = ?if_free ?name",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_var 5, template_app (template_hole 0, template_var 0)),
         template_app (template_var 3, template_var 0)))),
    ("Term_Class.list_comb_semi_inj",
     "[| length ?xs = length ?ys; list_comb ?f ?xs = list_comb ?g ?ys |]
      ==> ?f = ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 3),
          template_app (template_hole 2, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 1), template_var 3),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Term_Class.list_comb_semi_inj",
     "[| length ?xs = length ?ys; list_comb ?f ?xs = list_comb ?g ?ys |]
      ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3),
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 3),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 2))],
       template_equation (template_var 3, template_var 2))),
    ("Term_Class.list_comb_cond_inj",
     "[| list_comb ?f ?xs = list_comb ?g ?ys;
         left_nesting ?f = left_nesting ?g |]
      ==> ?f = ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 0, template_var 3),
          template_app (template_hole 0, template_var 1))],
       template_equation (template_var 3, template_var 1))),
    ("Term_Class.list_comb_cond_inj",
     "[| list_comb ?f ?xs = list_comb ?g ?ys;
         left_nesting ?f = left_nesting ?g |]
      ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 1))],
       template_equation (template_var 2, template_var 0))),
    ("Term_Class.term_cases_template",
     "(!!x. ?f x = term_cases ?if_const ?if_free ?if_app ?otherwise x) ==>
      ?f (app ?t ?u) = ?if_app ?t ?u",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_var 6,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_var 3, template_var 1),
           template_var 0)))),
    ("Term_Class.rewrite_firstE",
     "[| rewrite_first ?cs ?t ?t';
         !!pat rhs env.
            [| (pat, rhs) : set ?cs; match pat ?t = Some env;
               ?t' = subst rhs env |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("Term_Class.no_abs_induct",
     "[| no_abs ?t; !!name. ?P (free name); !!name. ?P (const name);
         !!t\<^sub>1 t\<^sub>2.
            [| ?P t\<^sub>1; no_abs t\<^sub>1; ?P t\<^sub>2;
               no_abs t\<^sub>2 |]
            ==> ?P (app t\<^sub>1 t\<^sub>2) |]
      ==> ?P ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Term_Class.no_abs_cases",
     "[| no_abs ?t; !!name. ?t = free name ==> ?thesis;
         !!name. ?t = const name ==> ?thesis;
         !!t\<^sub>1 t\<^sub>2.
            [| ?t = app t\<^sub>1 t\<^sub>2; no_abs t\<^sub>1;
               no_abs t\<^sub>2 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Term_Class.term_cases_cong",
     "[| ?t = ?u; ?otherwise1.0 = ?otherwise2.0;
         !!name. ?t = const name ==> ?if_const1.0 name = ?if_const2.0 name;
         !!name. ?t = free name ==> ?if_free1.0 name = ?if_free2.0 name;
         !!u\<^sub>1 u\<^sub>2.
            ?t = app u\<^sub>1 u\<^sub>2 ==>
            ?if_app1.0 u\<^sub>1 u\<^sub>2 =
            ?if_app2.0 u\<^sub>1 u\<^sub>2 |]
      ==> term_cases ?if_const1.0 ?if_free1.0 ?if_app1.0 ?otherwise1.0 ?t =
          term_cases ?if_const2.0 ?if_free2.0 ?if_app2.0 ?otherwise2.0 ?u",
     template_implication
      ([template_equation (template_var 9, template_var 8),
        template_equation (template_var 7, template_var 6),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 3),
               template_var 1),
             template_var 7),
           template_var 9),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2),
               template_var 0),
             template_var 6),
           template_var 8))))]
