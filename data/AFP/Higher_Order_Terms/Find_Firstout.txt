Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Find_FirstTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Find_FirstTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Find_FirstTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Find_FirstTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.609s cpu time, 0.048s GC time
Loading theory "Draft.Find_First" (required by "Draft.Find_FirstTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.919s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Find_FirstTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "Draft.Find_First"
### 0.394s elapsed time, 1.550s cpu time, 0.165s GC time
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.820s elapsed time, 2.990s cpu time, 0.272s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.719s elapsed time, 2.343s cpu time, 0.288s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.756s elapsed time, 4.439s cpu time, 0.808s GC time
Loading theory "Draft.Templates" (required by "Draft.Find_FirstTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.079s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Find_FirstTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.462s elapsed time, 0.506s cpu time, 0.049s GC time
Loading theory "Draft.Find_FirstTemplates"
val templateLemmas =
   [("Find_First.find_first_none",
     "?x ~: set ?xs ==> find_first ?x ?xs = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Find_First.find_first_correct",
     "find_first ?x ?xs = Some ?i ==> ?i < length ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Find_First.find_first_correct",
     "find_first ?x ?xs = Some ?i ==> ?xs ! ?i = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Find_First.find_first_correct",
     "find_first ?x ?xs = Some ?i ==> ?x ~: set (take ?i ?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))
               )
           ))),
    ("Find_First.common_prefix_find",
     "?z : set (common_prefix ?xs ?ys) ==>
      find_first ?z ?xs = find_first ?z ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Find_First.find_first_some_index",
     "[| ?i < length ?xs; distinct ?xs |]
      ==> find_first (?xs ! ?i) ?xs = Some ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Find_First.find_first_prefix",
     "[| find_first ?x ?xs = Some ?i; ?i < ?n |]
      ==> find_first ?x (take ?n ?xs) = Some ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app (template_hole 2, template_var 1)))),
    ("Find_First.find_first_append",
     "find_first ?x (?ys @ ?zs) =
      (case find_first ?x ?ys of
       None => map_option (%i. i + length ?ys) (find_first ?x ?zs)
       | Some a => Some a)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 0))),
           t_empty),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 1)))),
    ("Find_First.find_first_insert_nth_eq",
     "[| ?n <= length ?xs; ?x ~: set (take ?n ?xs) |]
      ==> find_first ?x (insert_nth ?n ?x ?xs) = Some ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 8, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_var 1)),
         template_app (template_hole 0, template_var 2)))),
    ("Find_First.find_first_insert_nth_neq",
     "?x ~= ?y ==>
      find_first ?x (insert_nth ?n ?y ?xs) =
      map_option (%i. if i < ?n then i else Suc i) (find_first ?x ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 0))))),
    ("Find_First.find_first_some",
     "[| ?x : set ?xs;
         !!i. [| find_first ?x ?xs = Some i; i < length ?xs |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Find_First.find_first_in_map",
     "[| length ?xs <= length ?ys; find_first ?n ?xs = Some ?i |]
      ==> fmlookup (fmap_of_list (zip ?xs ?ys)) ?n = Some (?ys ! ?i)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 3),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2))),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Find_First.find_first_first",
     "[| ?i < length ?xs; ?x ~: set (take ?i ?xs); ?xs ! ?i = ?x |]
      ==> find_first ?x ?xs = Some ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 9, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)))
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("Find_First.find_first_some_strong",
     "[| ?x : set (take ?n ?xs); ?n <= length ?xs;
         !!i. [| find_first ?x ?xs = Some i; i < ?n |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)))
            ),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Find_First.find_first_later",
     "[| ?i < length ?xs; ?j < length ?xs; ?i < ?j; ?xs ! ?i = ?x;
         ?xs ! ?j = ?x |]
      ==> find_first ?x ?xs ~= Some ?j",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 2)),
        template_inequation (less_than, template_var 3, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 3),
          template_var 0),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Find_First.insert_nth_induct",
     "[| !!x xs. ?P 0 x xs; !!n x y ys. ?P n x ys ==> ?P (Suc n) x (y # ys);
         !!n x. ?P (Suc n) x [] |]
      ==> ?P ?a0.0 ?a1.0 ?a2.0",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Find_FirstTemplates"
### 0.363s elapsed time, 0.522s cpu time, 0.079s GC time
val it = (): unit
