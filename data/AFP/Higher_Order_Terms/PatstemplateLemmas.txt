   [("Pats.overlapping_var2I", "overlapping ?t (Free ?name)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Pats.overlapping_var1I", "overlapping (Free ?name) ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Pats.linear_simps", "Pats.linear (const ?uv) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pats.linear_implies_no_abs", "Pats.linear ?t ==> no_abs ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Pats.non_overlapping_const_appI",
     "non_overlapping (Const ?name) (?t\<^sub>1 $ ?t\<^sub>2)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))
             )
         )),
    ("Pats.non_overlapping_app_constI",
     "non_overlapping (?t\<^sub>1 $ ?t\<^sub>2) (Const ?name)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Pats.wellformed_linearI", "Pats.linear ?t ==> wellformed' ?n ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Pats.linears_butlastI", "linears ?ts ==> linears (butlast ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pats.linear_strip_comb",
     "Pats.linear ?t ==> Pats.linear (fst (strip_comb ?t))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Pats.linears_singleI", "Pats.linear ?t ==> linears [?t]",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Pats.linears_strip_comb",
     "Pats.linear ?t ==> linears (snd (strip_comb ?t))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Pats.linears_appendD", "linears (?xs @ ?ys) ==> linears ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 1)))),
    ("Pats.linears_appendD", "linears (?xs @ ?ys) ==> linears ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Pats.linear_list_comb'", "linears ?xs ==> Pats.linear (?name $$ ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Pats.linears_appendD",
     "linears (?xs @ ?ys) ==> fdisjnt (freess ?xs) (freess ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pats.non_overlapping_const_constI",
     "?x ~= ?y ==> non_overlapping (Const ?x) (Const ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Pats.linears_linear",
     "[| linears ?ts; ?t : set ?ts |] ==> Pats.linear ?t",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Pats.non_overlapping_appI1",
     "non_overlapping ?t\<^sub>1 ?u\<^sub>1 ==>
      non_overlapping (?t\<^sub>1 $ ?t\<^sub>2) (?u\<^sub>1 $ ?u\<^sub>2)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))
               )
           ))),
    ("Pats.non_overlapping_appI2",
     "non_overlapping ?t\<^sub>2 ?u\<^sub>2 ==>
      non_overlapping (?t\<^sub>1 $ ?t\<^sub>2) (?u\<^sub>1 $ ?u\<^sub>2)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))
               )
           ))),
    ("Pats.match_matches",
     "[| match ?t ?u = Some ?env; Pats.linear ?t |] ==> ?t \<lesssim> ?u",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Pats.match_subst_some",
     "[| match ?t ?u = Some ?env; Pats.linear ?t |]
      ==> subst (convert_term ?t) ?env = ?u",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_var 1))),
    ("Pats.linears_appI",
     "[| linears ?xs; linears ?ys; fdisjnt (freess ?xs) (freess ?ys) |]
      ==> linears (?xs @ ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pats.linear_simps",
     "Pats.linear (app ?t\<^sub>1 ?t\<^sub>2) =
      (Pats.linear ?t\<^sub>1 &
       Pats.linear ?t\<^sub>2 &
       ~ is_free ?t\<^sub>1 &
       fdisjnt (frees ?t\<^sub>1) (frees ?t\<^sub>2))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0))))))),
    ("Pats.match_subst_none",
     "[| match ?t ?u = None; Pats.linear ?t;
         subst (convert_term ?t) ?env = ?u |]
      ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_hole 5),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2)),
            template_var 0),
          template_var 1)],
       template_predicate (template_hole 0))),
    ("Pats.match_subst_correctness0",
     "Pats.linear ?t ==>
      case match ?t ?u of None => ALL env. subst (convert_term ?t) env ~= ?u
      | Some env => subst (convert_term ?t) env = ?u",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6, template_app (template_hole 5, t_empty)),
               t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pats.linear_list_comb",
     "[| Pats.linear ?f; linears ?xs; fdisjnt (frees ?f) (freess ?xs);
         ~ is_free ?f |]
      ==> Pats.linear (list_comb ?f ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 3, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pats.match_overlapping",
     "[| Pats.linear ?t\<^sub>1; Pats.linear ?t\<^sub>2;
         match ?t\<^sub>1 ?u = Some ?env\<^sub>1;
         match ?t\<^sub>2 ?u = Some ?env\<^sub>2 |]
      ==> overlapping ?t\<^sub>1 ?t\<^sub>2",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4), template_var 3)
           ))),
    ("Pats.linear_pat_cases",
     "[| Pats.linear ?t; !!s. ?t = Free s ==> ?thesis;
         !!name args. [| linears args; ?t = name $$ args |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Pats.pat_cases",
     "[| !!s. ?t = Free s ==> ?thesis;
         !!name args. [| linears args; ?t = name $$ args |] ==> ?thesis;
         ~ Pats.linear ?t ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_hole 0, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Pats.linear_pat_induct",
     "[| Pats.linear ?t; !!s. ?P (Free s);
         !!name args.
            [| linears args; !!arg. arg : set args ==> ?P arg |]
            ==> ?P (name $$ args) |]
      ==> ?P ?t",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Pats.linear_strip_comb_cases",
     "[| Pats.linear ?pat;
         !!s args.
            [| strip_comb ?pat = (Const s, args); ?pat = s $$ args |]
            ==> ?thesis;
         !!s. [| strip_comb ?pat = (Free s, []); ?pat = Free s |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0)))]
