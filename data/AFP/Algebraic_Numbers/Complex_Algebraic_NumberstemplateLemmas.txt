   [("Complex_Algebraic_Numbers.complex_roots_of_int_poly",
     "distinct (complex_roots_of_int_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Algebraic_Numbers.complex_roots_of_rat_poly",
     "distinct (complex_roots_of_rat_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Algebraic_Numbers.get_itvl_3",
     "real_of_3 ?x \<in>\<^sub>i get_itvl_3 ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Algebraic_Numbers.distinct_pos_imaginary_parts_3",
     "distinct (map real_of_3 (pos_imaginary_parts_3 ?p))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Complex_Algebraic_Numbers.distinct_real_parts_3",
     "distinct (map real_of_3 (real_parts_3 ?p))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Complex_Algebraic_Numbers.real_of_3_code",
     "real_of_3 ?x = real_of (Real_Alg_Quotient ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Algebraic_Numbers.tighten_bounds_3",
     "real_of_3 (tighten_bounds_3 ?x) = real_of_3 ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Complex_Algebraic_Numbers.min_int_poly_complex_of_real",
     "min_int_poly (complex_of_real ?x) = min_int_poly ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Algebraic_Numbers.distinct_remdups_equal_3",
     "distinct
       (map real_of_3 (Complex_Algebraic_Numbers.remdups_gen equal_3 ?xs))",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))
         )),
    ("Complex_Algebraic_Numbers.lower_3_tendsto",
     "lower_3 ?x \<longlonglongrightarrow> real_of_3 ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("Complex_Algebraic_Numbers.upper_3_tendsto",
     "upper_3 ?x \<longlonglongrightarrow> real_of_3 ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("Complex_Algebraic_Numbers.remdups_gen_subset",
     "set (Complex_Algebraic_Numbers.remdups_gen ?eq ?xs) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Complex_Algebraic_Numbers.tighten_bounds_2",
     "invariant_2 ?x ==> invariant_2 (tighten_bounds_2 ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.real_of_tighten_bounds_many",
     "real_of_3 ((tighten_bounds_3 ^^ ?i) ?x) = real_of_3 ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Complex_Algebraic_Numbers.in_real_itvl_get_bounds_tighten",
     "real_of_3 ?x \<in>\<^sub>i get_itvl_3 ((tighten_bounds_3 ^^ ?n) ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               template_var 1)))
         )),
    ("Complex_Algebraic_Numbers.tends_to_tight_bounds_3",
     "(%x. get_itvl_3
            ((tighten_bounds_3 ^^ x) ?y)) \<longlonglongrightarrow>\<^sub>i
      real_of_3 ?y",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Algebraic_Numbers.get_bounds_2",
     "invariant_2 ?x ==> real_of_2 ?x \<in>\<^sub>i get_itvl_2 ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.represents_cnj",
     "?p represents ?x ==> ?p represents cnj ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.algebraic_complex_code",
     "algebraic_complex ?x = (algebraic (Re ?x) & algebraic (Im ?x))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Algebraic_Numbers.algebraic_complex_iff",
     "algebraic ?x = (algebraic (Re ?x) & algebraic (Im ?x))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Algebraic_Numbers.tighten_bounds_2",
     "invariant_2 ?x ==> real_of_2 (tighten_bounds_2 ?x) = real_of_2 ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Complex_Algebraic_Numbers.real_of_3_remdups_equal_3",
     "real_of_3 ` set (Complex_Algebraic_Numbers.remdups_gen equal_3 ?xs) =
      real_of_3 ` set ?xs",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Algebraic_Numbers.positive_pos_imaginary_parts_3",
     "?x : set (pos_imaginary_parts_3 ?p) ==> 0 < real_of_3 ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Algebraic_Numbers.interval_size_3_tendsto_0",
     "(%i. upper_3 ?x i - lower_3 ?x i) \<longlonglongrightarrow> 0",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly3",
     "[| ?p ~= 0; square_free ?p |]
      ==> distinct (complex_roots_of_int_poly3 ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly_all",
     "(3 <= degree ?p ==> square_free ?p) ==>
      distinct (complex_roots_of_int_poly_all ?p)",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_app (template_hole 3, template_var 0))],
          template_predicate
           (template_app (template_hole 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.poly_complex_to_real",
     "(poly (complex_of_int_poly ?p) (complex_of_real ?x) = 0) =
      (poly (real_of_int_poly ?p) ?x = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 1)),
           template_app (template_hole 6, template_var 0)),
         template_hole 5),
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Complex_Algebraic_Numbers.dist_tendsto_0_imp_tendsto",
     "(%i. \<bar>?f i - ?a\<bar>) \<longlonglongrightarrow> 0 ==>
      ?f \<longlonglongrightarrow> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty),
                template_app (template_hole 2, template_hole 1)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app (template_hole 2, template_var 0)),
             template_hole 0)
           ))),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly",
     "?p ~= 0 ==>
      set (complex_roots_of_int_poly ?p) =
      {x. poly (complex_of_int_poly ?p) x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Algebraic_Numbers.complex_roots_of_rat_poly",
     "?p ~= 0 ==> set (complex_roots_of_rat_poly ?p) = {x. rpoly ?p x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Algebraic_Numbers.represents_root_poly",
     "[| poly (complex_of_int_poly ?p) ?x = 0; ?p ~= 0 |]
      ==> root_poly_Re ?p represents Re ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1)),
            template_var 0),
          template_hole 6),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.interval_size_3",
     "upper_3 ?x ?i - lower_3 ?x ?i =
      (upper_3 ?x 0 - lower_3 ?x 0) / 2 ^ ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 4)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_hole 4))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Complex_Algebraic_Numbers.complex_poly",
     "[| ?re represents Re ?x; ?im represents Im ?x |]
      ==> EX f:set (complex_poly ?re ?im). f represents ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             t_empty)
           ))),
    ("Complex_Algebraic_Numbers.complex_poly",
     "[| ?re represents Re ?x; ?im represents Im ?x;
         ?f : set (complex_poly ?re ?im) |]
      ==> poly_cond ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 1)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly3",
     "[| ?p ~= 0; square_free ?p |]
      ==> set (complex_roots_of_int_poly3 ?p) =
          {x. poly (complex_of_int_poly ?p) x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Algebraic_Numbers.real_parts_3",
     "[| ?p ~= 0; poly (complex_of_int_poly ?p) ?x = 0 |]
      ==> Re ?x : real_of_3 ` set (real_parts_3 ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1)),
            template_var 0),
          template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Complex_Algebraic_Numbers.represents_root_poly",
     "[| poly (complex_of_int_poly ?p) ?x = 0; ?p ~= 0 |]
      ==> EX q:set (root_poly_Im ?p). q represents Im ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 1)),
            template_var 0),
          template_hole 8),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1))),
             t_empty)
           ))),
    ("Complex_Algebraic_Numbers.tighten_bounds_3",
     "[| get_itvl_3 ?x = Interval ?l ?r;
         get_itvl_3 (tighten_bounds_3 ?x) = Interval ?l' ?r' |]
      ==> ?r' - ?l' = (?r - ?l) / 2",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 4),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_equation
         (template_app
           (template_hole 8,
            template_app (template_hole 6, template_var 4)),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 3)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Complex_Algebraic_Numbers.pos_imaginary_parts_3",
     "[| ?p ~= 0; poly (complex_of_int_poly ?p) ?x = 0; 0 < Im ?x |]
      ==> Im ?x : real_of_3 ` set (pos_imaginary_parts_3 ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 13)),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 1)),
            template_var 0),
          template_hole 8),
        template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Complex_Algebraic_Numbers.root_poly_Re_code",
     "root_poly_Re ?p =
      (let fs = coeffs (poly_add ?p ?p); k = length fs
       in cf_pos_poly
           (poly_of_list (map2 (%fi i. fi * 2 ^ i) fs [0..<k])))",
     template_equation
      (template_app (template_hole 17, template_var 0),
       template_app
        (template_app
          (template_hole 16,
           template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_var 0),
               template_var 0))),
         t_empty))),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly_all",
     "[| 3 <= degree ?p ==> square_free ?p; ?p ~= 0 |]
      ==> set (complex_roots_of_int_poly_all ?p) =
          {x. poly (complex_of_int_poly ?p) x = 0}",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_hole 16,
               template_app (template_hole 15, template_hole 14)),
             template_app (template_hole 13, template_var 0))],
          template_predicate
           (template_app (template_hole 12, template_var 0))),
        template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Algebraic_Numbers.tighten_bounds_2",
     "[| invariant_2 ?x; get_itvl_2 ?x = Interval ?l ?r;
         get_itvl_2 (tighten_bounds_2 ?x) = Interval ?l' ?r' |]
      ==> ?r' - ?l' = (?r - ?l) / 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_equation
         (template_app (template_hole 8, template_var 4),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_equation
         (template_app
           (template_hole 8,
            template_app (template_hole 6, template_var 4)),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 3)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Complex_Algebraic_Numbers.sandwitch_real",
     "[| ?l \<longlonglongrightarrow> ?a; ?r \<longlonglongrightarrow> ?a;
         !!i. ?l i <= ?m i; !!i. ?m i <= ?r i |]
      ==> ?m \<longlonglongrightarrow> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 2)),
              template_hole 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 2)),
             template_hole 2)
           ))),
    ("Complex_Algebraic_Numbers.filter_list_length",
     "[| length (filter ?P ?xs) = ?n;
         !!i x. [| x : set ?xs; ?P x |] ==> ?p ((?f ^^ i) x);
         !!x. [| x : set ?xs; ~ ?P x |] ==> EX i. ~ ?p ((?f ^^ i) x);
         !!x. ?g (?f x) = ?g x; !!x. ?P (?f x) = ?P x |]
      ==> map ?g (filter_list_length ?f ?p ?n ?xs) =
          map ?g (filter ?P ?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 4)),
          template_var 3),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 3),
             template_var 4)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 12, template_var 5),
             template_var 4)))))]
