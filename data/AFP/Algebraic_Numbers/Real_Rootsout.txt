Loading theory "Draft.Algebraic_Numbers_Prelim" (required by "Draft.Real_RootsTemplates" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers" via "Draft.Algebraic_Numbers")
Loading theory "Draft.Bivariate_Polynomials" (required by "Draft.Real_RootsTemplates" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers" via "Draft.Algebraic_Numbers" via "Draft.Resultant")
Loading theory "Draft.Templates" (required by "Draft.Real_RootsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.264s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Real_RootsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.569s elapsed time, 1.654s cpu time, 0.168s GC time
### Ignoring duplicate rewrite rule:
### content (pCons ?a1 ?p1) == gcd ?a1 (content ?p1)
### theory "Draft.Bivariate_Polynomials"
### 1.252s elapsed time, 3.163s cpu time, 0.341s GC time
Loading theory "Draft.Resultant" (required by "Draft.Real_RootsTemplates" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers" via "Draft.Algebraic_Numbers")
locale dvd_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "dvd_preserving_hom hom"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Algebraic_Numbers_Prelim"
### 1.638s elapsed time, 3.940s cpu time, 0.468s GC time
Loading theory "Draft.Min_Int_Poly" (required by "Draft.Real_RootsTemplates" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
Loading theory "Draft.Sturm_Rat" (required by "Draft.Real_RootsTemplates" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
Loading theory "Draft.Factors_of_Int_Poly" (required by "Draft.Real_RootsTemplates" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
### theory "Draft.Min_Int_Poly"
### 0.100s elapsed time, 0.401s cpu time, 0.000s GC time
### theory "Draft.Factors_of_Int_Poly"
### 0.575s elapsed time, 1.841s cpu time, 0.116s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Resultant"
### 1.363s elapsed time, 3.508s cpu time, 0.379s GC time
Loading theory "Draft.Algebraic_Numbers" (required by "Draft.Real_RootsTemplates" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
### theory "Draft.Sturm_Rat"
### 2.343s elapsed time, 5.790s cpu time, 1.220s GC time
### theory "Draft.Algebraic_Numbers"
### 1.452s elapsed time, 3.176s cpu time, 0.967s GC time
Loading theory "Draft.Real_Algebraic_Numbers" (required by "Draft.Real_RootsTemplates" via "Draft.Real_Roots")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale map_poly_zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom_0 hom"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_alg :: uminus
  uminus_real_alg == uminus :: real_alg => real_alg
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_alg :: plus
  plus_real_alg == plus :: real_alg => real_alg => real_alg
instantiation
  real_alg :: minus
  minus_real_alg == minus :: real_alg => real_alg => real_alg
instantiation
  real_alg :: zero
  zero_real_alg == zero_class.zero :: real_alg
instantiation
  real_alg :: one
  one_real_alg == one_class.one :: real_alg
instantiation
  real_alg :: times
  times_real_alg == times :: real_alg => real_alg => real_alg
instantiation
  real_alg :: inverse
  inverse_real_alg == inverse :: real_alg => real_alg
  divide_real_alg == divide :: real_alg => real_alg => real_alg
instantiation
  real_alg :: sgn
  sgn_real_alg == sgn :: real_alg => real_alg
instantiation
  real_alg :: equal
  equal_real_alg == equal_class.equal :: real_alg => real_alg => bool
instantiation
  real_alg :: ord
  less_eq_real_alg == less_eq :: real_alg => real_alg => bool
  less_real_alg == less :: real_alg => real_alg => bool
instantiation
  real_alg :: compare_order
  compare_real_alg == compare :: real_alg => real_alg => order
instantiation
  real_alg :: abs
  abs_real_alg == abs :: real_alg => real_alg
instantiation
  real_alg :: floor_ceiling
  floor_real_alg == floor :: real_alg => int
instantiation
  real_alg ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real_alg == division_segment :: real_alg => real_alg
  normalize_real_alg == normalize :: real_alg => real_alg
  unit_factor_real_alg == unit_factor :: real_alg => real_alg
  euclidean_size_real_alg == euclidean_size :: real_alg => nat
  modulo_real_alg == modulo :: real_alg => real_alg => real_alg
instantiation
  real_alg :: euclidean_ring_gcd
  Gcd_real_alg == Gcd :: real_alg set => real_alg
  Lcm_real_alg == Lcm :: real_alg set => real_alg
  gcd_real_alg == gcd :: real_alg => real_alg => real_alg
  lcm_real_alg == lcm :: real_alg => real_alg => real_alg
### theory "Draft.Real_Algebraic_Numbers"
### 8.758s elapsed time, 9.286s cpu time, 0.807s GC time
Loading theory "Draft.Real_Roots" (required by "Draft.Real_RootsTemplates")
Found termination order: "length <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Real_Roots"
### 0.727s elapsed time, 0.821s cpu time, 0.132s GC time
Loading theory "Draft.Real_RootsTemplates"
val templateLemmas =
   [("Real_Roots.real_roots_of_int_poly",
     "distinct (real_roots_of_int_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Real_Roots.real_roots_of_rat_poly",
     "distinct (real_roots_of_rat_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Real_Roots.real_alg_2_list_convert",
     "??.Real_Roots.real_alg_2_list_convert ?xs =
      ??.Real_Roots.real_alg_2_list_convert_id ?xs",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Real_Roots.roots_of_3_code",
     "roots_of_3 ?p = ??.Real_Roots.roots_of_3_impl ?p",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Real_Roots.roots_of_real_alg",
     "distinct (map real_of (roots_of_real_alg ?p))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Real_Roots.roots_of_2", "distinct (map real_of_2 (roots_of_2 ?p))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Real_Roots.roots_of_3", "distinct (map real_of_3 (roots_of_3 ?p))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Real_Roots.roots_of_2", "Ball (set (roots_of_2 ?p)) invariant_2",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("Real_Roots.div_le_div_ceiling", "?x div ?y <= div_ceiling ?x ?y",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Real_Roots.real_alg_2_list_length",
     "~ ??.Real_Roots.real_alg_2_list_nil ?xs ==>
      ??.Real_Roots.real_alg_2_list_length
       (??.Real_Roots.real_alg_2_list_tl ?xs)
      < ??.Real_Roots.real_alg_2_list_length ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Real_Roots.roots_of_2_irr",
     "[| poly_cond ?p; 0 < degree ?p |]
      ==> distinct (map real_of_2 (roots_of_2_irr ?p))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Real_Roots.roots_of_2_irr",
     "[| poly_cond ?p; 0 < degree ?p |]
      ==> Ball (set (roots_of_2_irr ?p)) invariant_2",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("Real_Roots.root_bound",
     "[| root_bound ?p = ?B; 0 < degree ?p |] ==> 0 <= ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_var 0),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 2, template_var 1))],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("Real_Roots.div_ceiling",
     "?q ~= 0 ==> of_int ?x / of_int ?q <= of_int (div_ceiling ?x ?q)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Real_Roots.root_imp_deg_nonzero",
     "[| ?p ~= 0; poly ?p ?x = (0::?'a) |] ==> degree ?p ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("Real_Roots.real_roots_of_int_poly",
     "?p ~= 0 ==>
      set (real_roots_of_int_poly ?p) =
      {x. poly (real_of_int_poly ?p) x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Real_Roots.real_roots_of_rat_poly",
     "?p ~= 0 ==> set (real_roots_of_rat_poly ?p) = {x. rpoly ?p x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Real_Roots.roots_of_real_alg",
     "?p ~= 0 ==>
      real_of ` set (roots_of_real_alg ?p) =
      {x. poly (real_of_int_poly ?p) x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 5, t_empty)))),
    ("Real_Roots.roots_of_2",
     "?p ~= 0 ==>
      real_of_2 ` set (roots_of_2 ?p) =
      {x. poly (real_of_int_poly ?p) x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 5, t_empty)))),
    ("Real_Roots.roots_of_3",
     "?p ~= 0 ==>
      real_of_3 ` set (roots_of_3 ?p) =
      {x. poly (real_of_int_poly ?p) x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 5, t_empty)))),
    ("Real_Roots.roots_of_2_irr",
     "[| poly_cond ?p; 0 < degree ?p |]
      ==> real_of_2 ` set (roots_of_2_irr ?p) =
          {x. poly (real_of_int_poly ?p) x = 0}",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0)),
        template_inequation
         (less_than, template_hole 12,
          template_app (template_hole 11, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 5, t_empty)))),
    ("Real_Roots.root_bound",
     "[| root_bound ?p = ?B; 0 < degree ?p;
         poly (real_of_int_poly ?p) ?x = 0 |]
      ==> norm ?x <= real_of_rat ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2), template_var 1),
        template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2)),
            template_var 0),
          template_hole 3)],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Real_Roots.max_list_non_empty_map",
     "[| !!x y. max (?f x) (?f y) = ?f (max x y); ?xs ~= [] |]
      ==> max_list_non_empty (map ?f ?xs) = ?f (max_list_non_empty ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Real_Roots.cauchy_root_bound",
     "[| poly ?p ?x = (0::?'a); ?p ~= 0 |]
      ==> norm ?x
          <= 1 +
             max_list_non_empty
              (map (%i. norm (coeff ?p i)) [0..<degree ?p]) /
             norm (lead_coeff ?p)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 1),
            template_var 0),
          template_hole 14),
        template_negation
         (template_equation (template_var 1, template_hole 11))],
       template_inequation
        (less_equals, template_app (template_hole 9, template_var 0),
         template_app
          (template_app (template_hole 8, template_hole 7),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app (template_hole 0, template_var 1))))),
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 0, template_var 1))))))))]:
   (string * thm * template) list
### theory "Draft.Real_RootsTemplates"
### 2.494s elapsed time, 2.909s cpu time, 0.293s GC time
val it = (): unit
