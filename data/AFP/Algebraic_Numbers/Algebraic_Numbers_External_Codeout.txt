Loading theory "Draft.Complex_Roots_Real_Poly" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers")
Loading theory "Draft.Templates" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Compare_Complex" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers")
Loading theory "Draft.Algebraic_Numbers_Prelim" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers" via "Draft.Algebraic_Numbers")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.348s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Algebraic_Numbers_External_CodeTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.601s elapsed time, 2.277s cpu time, 0.185s GC time
Loading theory "Draft.Bivariate_Polynomials" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers" via "Draft.Algebraic_Numbers" via "Draft.Resultant")
instantiation
  complex :: finite_UNIV
  finite_UNIV_complex == finite_UNIV :: (complex, bool) phantom
instantiation
  complex :: compare
  compare_complex == compare :: complex => complex => order
deriving "ceq" instance for type "Complex.complex" via "="
derived is_ceq_complex-lemma
deriving "ceq" instance for type "Real.real" via "="
derived is_ceq_real-lemma
deriving "ccompare_order" instance for type "Complex.complex" via compare_order
derived is_ccompare_complex-lemma
deriving "ccompare_order" instance for type "Real.real" via compare_order
derived is_ccompare_real-lemma
use dlist as set_impl for type complex
registered complex in class set_impl
use dlist as set_impl for type real
registered real in class set_impl
### theory "Draft.Compare_Complex"
### 0.816s elapsed time, 3.207s cpu time, 0.185s GC time
### theory "Draft.Complex_Roots_Real_Poly"
### 0.976s elapsed time, 3.663s cpu time, 0.300s GC time
### Ignoring duplicate rewrite rule:
### content (pCons ?a1 ?p1) == gcd ?a1 (content ?p1)
locale dvd_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "dvd_preserving_hom hom"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Algebraic_Numbers_Prelim"
### 1.661s elapsed time, 5.049s cpu time, 0.494s GC time
Loading theory "Draft.Interval_Arithmetic" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers")
Loading theory "Draft.Min_Int_Poly" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
Loading theory "Draft.Sturm_Rat" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
### theory "Draft.Min_Int_Poly"
### 0.142s elapsed time, 0.509s cpu time, 0.099s GC time
Loading theory "Draft.Factors_of_Int_Poly" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
### theory "Draft.Bivariate_Polynomials"
### 1.221s elapsed time, 3.289s cpu time, 0.407s GC time
Loading theory "Draft.Resultant" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers" via "Draft.Algebraic_Numbers")
instantiation
  interval :: (zero) zero
  zero_interval == zero_class.zero :: 'a interval
instantiation
  interval :: (one) one
  one_interval == one_class.one :: 'a interval
instantiation
  interval :: (plus) plus
  plus_interval == plus :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: (uminus) uminus
  uminus_interval == uminus :: 'a interval => 'a interval
### theory "Draft.Factors_of_Int_Poly"
### 0.845s elapsed time, 3.134s cpu time, 0.854s GC time
Found termination order: "{}"
instantiation
  interval :: (minus) minus
  minus_interval == minus :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: ({times,ord}) times
  times_interval == times :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: ({inverse,times,ord}) inverse
  inverse_interval == inverse :: 'a interval => 'a interval
  divide_interval == divide :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Resultant"
### 1.637s elapsed time, 5.402s cpu time, 1.110s GC time
Loading theory "Draft.Algebraic_Numbers" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
instantiation
  complex_interval :: comm_monoid_add
  zero_complex_interval == zero_class.zero :: complex_interval
  plus_complex_interval == plus ::
    complex_interval => complex_interval => complex_interval
Found termination order: "{}"
instantiation
  complex_interval :: mult_zero
  times_complex_interval == times ::
    complex_interval => complex_interval => complex_interval
Found termination order: "{}"
instantiation
  complex_interval :: minus
  minus_complex_interval == minus ::
    complex_interval => complex_interval => complex_interval
Found termination order: "{}"
### theory "Draft.Interval_Arithmetic"
### 2.218s elapsed time, 7.293s cpu time, 1.362s GC time
### theory "Draft.Sturm_Rat"
### 2.495s elapsed time, 7.919s cpu time, 1.463s GC time
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
### theory "Draft.Algebraic_Numbers"
### 1.155s elapsed time, 2.132s cpu time, 0.195s GC time
Loading theory "Draft.Real_Algebraic_Numbers" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale map_poly_zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom_0 hom"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_alg :: uminus
  uminus_real_alg == uminus :: real_alg => real_alg
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_alg :: plus
  plus_real_alg == plus :: real_alg => real_alg => real_alg
instantiation
  real_alg :: minus
  minus_real_alg == minus :: real_alg => real_alg => real_alg
instantiation
  real_alg :: zero
  zero_real_alg == zero_class.zero :: real_alg
instantiation
  real_alg :: one
  one_real_alg == one_class.one :: real_alg
instantiation
  real_alg :: times
  times_real_alg == times :: real_alg => real_alg => real_alg
instantiation
  real_alg :: inverse
  inverse_real_alg == inverse :: real_alg => real_alg
  divide_real_alg == divide :: real_alg => real_alg => real_alg
instantiation
  real_alg :: sgn
  sgn_real_alg == sgn :: real_alg => real_alg
instantiation
  real_alg :: equal
  equal_real_alg == equal_class.equal :: real_alg => real_alg => bool
instantiation
  real_alg :: ord
  less_eq_real_alg == less_eq :: real_alg => real_alg => bool
  less_real_alg == less :: real_alg => real_alg => bool
instantiation
  real_alg :: compare_order
  compare_real_alg == compare :: real_alg => real_alg => order
instantiation
  real_alg :: abs
  abs_real_alg == abs :: real_alg => real_alg
instantiation
  real_alg :: floor_ceiling
  floor_real_alg == floor :: real_alg => int
instantiation
  real_alg ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real_alg == division_segment :: real_alg => real_alg
  normalize_real_alg == normalize :: real_alg => real_alg
  unit_factor_real_alg == unit_factor :: real_alg => real_alg
  euclidean_size_real_alg == euclidean_size :: real_alg => nat
  modulo_real_alg == modulo :: real_alg => real_alg => real_alg
instantiation
  real_alg :: euclidean_ring_gcd
  Gcd_real_alg == Gcd :: real_alg set => real_alg
  Lcm_real_alg == Lcm :: real_alg set => real_alg
  gcd_real_alg == gcd :: real_alg => real_alg => real_alg
  lcm_real_alg == lcm :: real_alg => real_alg => real_alg
### theory "Draft.Real_Algebraic_Numbers"
### 8.781s elapsed time, 9.305s cpu time, 0.847s GC time
Loading theory "Draft.Real_Roots" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Complex_Algebraic_Numbers")
Loading theory "Draft.Show_Real_Alg" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests" via "Draft.Show_Real_Precise")
Found termination order: "length <*mlex*> {}"
deriving "show" instance for type "Real_Algebraic_Numbers.real_alg"
overloading
  show_real \<equiv> show_real :: real => char list
### theory "Draft.Show_Real_Alg"
### 0.402s elapsed time, 0.834s cpu time, 0.080s GC time
Loading theory "Draft.Show_Real_Precise" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests")
Found termination order: "{}"
### theory "Draft.Real_Roots"
### 0.778s elapsed time, 1.577s cpu time, 0.150s GC time
Loading theory "Draft.Complex_Algebraic_Numbers" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code" via "Draft.Algebraic_Number_Tests")
Found termination order: "{}"
Found termination order: "{}"
overloading
  show_real_alg \<equiv> show_real_alg :: real_alg => char list
### theory "Draft.Show_Real_Precise"
### 1.160s elapsed time, 2.347s cpu time, 0.131s GC time
consts
  remdups_gen :: "('a => 'a => bool) => 'a list => 'a list"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Complex_Algebraic_Numbers"
### 2.098s elapsed time, 2.962s cpu time, 0.193s GC time
Loading theory "Draft.Algebraic_Number_Tests" (required by "Draft.Algebraic_Numbers_External_CodeTemplates" via "Draft.Algebraic_Numbers_External_Code")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
### theory "Draft.Algebraic_Number_Tests"
### 3.274s elapsed time, 3.670s cpu time, 0.370s GC time
Loading theory "Draft.Algebraic_Numbers_External_Code" (required by "Draft.Algebraic_Numbers_External_CodeTemplates")
"''1''"
  :: "char list"
"''1\<newline>(7/2-sqrt(29/4))\<newline>(7/2+sqrt(29/4))''"
  :: "char list"
See theory exports
### theory "Draft.Algebraic_Numbers_External_Code"
### 38.820s elapsed time, 140.539s cpu time, 13.725s GC time
Loading theory "Draft.Algebraic_Numbers_External_CodeTemplates"
"''1\<newline>(-1/2+sqrt(3/4)i)\<newline>(-1/2+ -sqrt(3/4)i)\<newline>(7/2+sqrt(29/4))\<newline>(7/2-sqrt(29/4))''"
  :: "char list"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Algebraic_Numbers_External_CodeTemplates"
### 4.924s elapsed time, 18.249s cpu time, 3.080s GC time
"''[1, (7/2-sqrt(29/4)), (7/2+sqrt(29/4))]''"
  :: "char list"
"''[1, (-1/2+sqrt(3/4)i), (-1/2+ -sqrt(3/4)i), (7/2+sqrt(29/4)), (7/2-sqrt(29/4))]''"
  :: "char list"
"[:1598 / 5, 124 / 5, - 13, 1:]"
  :: "rat poly"
"''(root #1 of 1 + -10x^2 + x^4, in (-4,-3))''"
  :: "char list"
"''(sqrt(9/2)+sqrt(1/2)i)''"
  :: "char list"
"''((root #2 of -1 + -4x^2 + 4x^4, in (1,2))+(root #2 of -1 + 4x^2 + 4x^4, in (0,1))i)''"
  :: "char list"
"''(root #2 of -2553604 + -103870x^2 + -620x^4 + 25x^6, in (9,10))''"
  :: "char list"
val it = (): unit
