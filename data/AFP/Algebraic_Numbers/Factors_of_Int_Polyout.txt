Loading theory "Draft.Algebraic_Numbers_Prelim" (required by "Draft.Factors_of_Int_PolyTemplates" via "Draft.Factors_of_Int_Poly")
Loading theory "Draft.Templates" (required by "Draft.Factors_of_Int_PolyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.097s elapsed time, 0.231s cpu time, 0.031s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Factors_of_Int_PolyTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 1.063s cpu time, 0.076s GC time
### Ignoring duplicate rewrite rule:
### content (pCons ?a1 ?p1) == gcd ?a1 (content ?p1)
locale dvd_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "dvd_preserving_hom hom"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Algebraic_Numbers_Prelim"
### 1.391s elapsed time, 2.089s cpu time, 0.148s GC time
Loading theory "Draft.Factors_of_Int_Poly" (required by "Draft.Factors_of_Int_PolyTemplates")
### theory "Draft.Factors_of_Int_Poly"
### 0.514s elapsed time, 0.567s cpu time, 0.084s GC time
Loading theory "Draft.Factors_of_Int_PolyTemplates"
val templateLemmas =
   [("Factors_of_Int_Poly.factors_of_int_poly",
     "factors_of_int_poly ?p = ?qs ==> distinct ?qs",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Factors_of_Int_Poly.factors_of_int_poly_const",
     "degree ?p = 0 ==> factors_of_int_poly ?p = []",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Factors_of_Int_Poly.poly_uminus_irreducible",
     "[| irreducible ?p; degree ?p ~= 0 |]
      ==> irreducible (poly_uminus ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Factors_of_Int_Poly.poly_add_rat_irreducible",
     "[| irreducible ?p; degree ?p ~= 0 |]
      ==> irreducible (cf_pos_poly (poly_add_rat ?r ?p))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Factors_of_Int_Poly.reflect_poly_irreducible",
     "[| irreducible ?p; ?p represents ?x; ?x ~= (0::?'a) |]
      ==> irreducible (reflect_poly ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Factors_of_Int_Poly.degree_of_gcd",
     "(degree (gcd ?q ?r) ~= 0) =
      (degree (gcd (of_int_poly ?q) (of_int_poly ?r)) ~= 0)",
     template_bimplication
      (template_negation
        (
           template_equation
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_hole 4)
           ),
       template_negation
        (
           template_equation
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))),
             template_hole 4)
           ))),
    ("Factors_of_Int_Poly.irreducible_represents_imp_degree",
     "[| irreducible ?f; ?f represents ?x; ?g represents ?x |]
      ==> degree ?f <= degree ?g",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Factors_of_Int_Poly.poly_mult_rat_irreducible",
     "[| irreducible ?p; degree ?p ~= 0; ?r ~= 0 |]
      ==> irreducible (cf_pos_poly (poly_mult_rat ?r ?p))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Factors_of_Int_Poly.factors_int_poly_represents",
     "?p represents ?x ==>
      EX q:set (factors_of_int_poly ?p).
         q represents ?x &
         irreducible q & 0 < lead_coeff q & degree q <= degree ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 1))),
             t_empty)
           ))),
    ("Factors_of_Int_Poly.factors_of_int_poly",
     "[| factors_of_int_poly ?p = ?qs; ?p ~= 0 |]
      ==> (ipoly ?p ?x = (0::?'a)) = (EX q:set ?qs. ipoly q ?x = (0::?'a))",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2), template_var 1),
        template_negation
         (template_equation (template_var 2, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 2)),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           t_empty)))),
    ("Factors_of_Int_Poly.factors_of_int_poly",
     "[| factors_of_int_poly ?p = ?qs; ?q : set ?qs |]
      ==> irreducible ?q &
          0 < lead_coeff ?q & degree ?q <= degree ?p & degree ?q ~= 0",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 2), template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 0)),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app (template_hole 4, template_var 0)))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 4, template_var 0)),
                     template_app (template_hole 4, template_var 2))),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 4, template_var 0)),
                     template_hole 0)))))
           ))),
    ("Factors_of_Int_Poly.factors_of_int_poly",
     "[| factors_of_int_poly ?p = ?qs; ?p ~= 0; ipoly ?p ?x = (0::?'a) |]
      ==> EX! q. q : set ?qs & ipoly q ?x = (0::?'a)",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 2), template_var 1),
        template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 2)),
            template_var 0),
          template_hole 4)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Factors_of_Int_Poly.irreducible_preservation",
     "[| irreducible ?p; ?p represents ?x; ?q represents ?y;
         degree ?q <= degree ?p;
         !!q. q represents ?y ==>
              ?f q represents ?x & degree (?f q) <= degree q;
         primitive ?q |]
      ==> irreducible ?q",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 4)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_predicate
        (template_app (template_hole 7, template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Factors_of_Int_PolyTemplates"
### 2.318s elapsed time, 2.927s cpu time, 0.693s GC time
val it = (): unit
