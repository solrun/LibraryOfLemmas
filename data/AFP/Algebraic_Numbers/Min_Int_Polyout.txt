Loading theory "Draft.Algebraic_Numbers_Prelim" (required by "Draft.Min_Int_PolyTemplates" via "Draft.Min_Int_Poly")
Loading theory "Draft.Templates" (required by "Draft.Min_Int_PolyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.162s cpu time, 0.030s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Min_Int_PolyTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.488s elapsed time, 0.990s cpu time, 0.076s GC time
### Ignoring duplicate rewrite rule:
### content (pCons ?a1 ?p1) == gcd ?a1 (content ?p1)
locale dvd_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "dvd_preserving_hom hom"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Algebraic_Numbers_Prelim"
### 1.370s elapsed time, 1.982s cpu time, 0.148s GC time
Loading theory "Draft.Min_Int_Poly" (required by "Draft.Min_Int_PolyTemplates")
### theory "Draft.Min_Int_Poly"
### 0.087s elapsed time, 0.090s cpu time, 0.000s GC time
Loading theory "Draft.Min_Int_PolyTemplates"
val templateLemmas =
   [("Min_Int_Poly.min_int_poly_irreducible",
     "irreducible (min_int_poly ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Min_Int_Poly.min_int_poly_prime_elem", "prime_elem (min_int_poly ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Min_Int_Poly.min_int_poly_prime", "prime (min_int_poly ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Min_Int_Poly.min_int_poly_primitive", "primitive (min_int_poly ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Min_Int_Poly.min_int_poly_nonzero", "min_int_poly ?x ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Min_Int_Poly.min_int_poly_content", "content (min_int_poly ?x) = 1",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Min_Int_Poly.degree_min_int_poly_pos", "0 < degree (min_int_poly ?x)",
     template_inequation
      (less_than, template_hole 2,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Min_Int_Poly.degree_min_int_poly_nonzero",
     "degree (min_int_poly ?x) ~= 0",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Min_Int_Poly.min_int_poly_of_rat",
     "min_int_poly (of_rat ?r) = poly_rat ?r",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Min_Int_Poly.min_int_poly_real_basic_impl",
     "min_int_poly_real (real_of_rat ?x) = poly_rat ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Min_Int_Poly.min_int_poly_normalize",
     "normalize (min_int_poly ?x) = min_int_poly ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Min_Int_Poly.lead_coeff_min_int_poly_pos",
     "0 < lead_coeff (min_int_poly ?x)",
     template_inequation
      (less_than, template_hole 3,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Min_Int_Poly.min_int_poly_represents",
     "algebraic ?x ==> min_int_poly ?x represents ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Min_Int_Poly.min_int_poly_of_int",
     "min_int_poly (of_int ?n) = [:- of_int ?n, 1:]",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app (template_hole 4, template_hole 1),
           template_hole 0)))),
    ("Min_Int_Poly.min_int_poly_of_nat",
     "min_int_poly (of_nat ?n) = [:- int ?n, 1:]",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app (template_hole 4, template_hole 1),
           template_hole 0)))),
    ("Min_Int_Poly.ipoly_min_int_poly",
     "algebraic ?x ==> ipoly (min_int_poly ?x) ?x = (0::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0))),
           template_var 0),
         template_hole 0))),
    ("Min_Int_Poly.poly_min_int_poly_0_eq_0_iff",
     "algebraic ?x ==> (poly (min_int_poly ?x) 0 = 0) = (?x = (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_hole 2),
           template_hole 2),
         template_equation (template_var 0, template_hole 0)))),
    ("Min_Int_Poly.min_int_poly_unique",
     "[| ?p represents ?x; irreducible ?p; 0 < lead_coeff ?p |]
      ==> min_int_poly ?x = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 2, template_var 1)))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Min_Int_Poly.min_int_poly_eqI",
     "[| ?p represents ?x; irreducible ?p; 0 <= lead_coeff ?p |]
      ==> min_int_poly ?x = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_hole 4,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 2, template_var 1)))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1)))]:
   (string * thm * template) list
### theory "Draft.Min_Int_PolyTemplates"
### 0.964s elapsed time, 1.498s cpu time, 0.564s GC time
val it = (): unit
