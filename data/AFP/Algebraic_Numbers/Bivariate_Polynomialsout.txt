Loading theory "Draft.Bivariate_Polynomials" (required by "Draft.Bivariate_PolynomialsTemplates")
Loading theory "Draft.Templates" (required by "Draft.Bivariate_PolynomialsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.176s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Bivariate_PolynomialsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.590s elapsed time, 1.184s cpu time, 0.133s GC time
### theory "Draft.Bivariate_Polynomials"
### 1.158s elapsed time, 1.873s cpu time, 0.176s GC time
Loading theory "Draft.Bivariate_PolynomialsTemplates"
val templateLemmas =
   [("Bivariate_Polynomials.poly_y_x_id", "poly_y_x (poly_y_x ?p) = ?p",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Bivariate_Polynomials.degree_poly_lift",
     "degree (poly_lift ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Bivariate_Polynomials.degree_poly_lift2",
     "degree (poly_lift2 ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Bivariate_Polynomials.poly_y_x_poly_lift",
     "poly_y_x (poly_lift ?p) = [:?p:]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Bivariate_Polynomials.poly_y_x_const",
     "poly_y_x [:?p:] = poly_lift ?p",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Bivariate_Polynomials.poly_lift_0_iff",
     "(poly_lift ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Bivariate_Polynomials.poly_lift2_0_iff",
     "(poly_lift2 ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Bivariate_Polynomials.pcompose_conv_poly",
     "?p \<circ>\<^sub>p ?q = poly (poly_lift ?p) ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Bivariate_Polynomials.poly2_poly_lift",
     "poly2 (poly_lift ?p) ?x ?y = poly ?p ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Bivariate_Polynomials.poly2_poly_y_x",
     "poly2 (poly_y_x ?p) ?x ?y = poly2 ?p ?y ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_var 1))),
    ("Bivariate_Polynomials.poly2_const", "poly2 [:[:?a:]:] ?x ?y = ?a",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_hole 0)),
           template_var 1),
         template_var 0),
       template_var 2)),
    ("Bivariate_Polynomials.coeff_poly_lift",
     "coeff (poly_lift ?p) ?i = [:coeff ?p ?i:]",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Bivariate_Polynomials.poly_y_x_smult",
     "poly_y_x (smult ?c ?p) = poly_lift ?c * poly_y_x ?p",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Bivariate_Polynomials.poly_y_x_pCons_0",
     "poly_y_x (pCons 0 ?p) = map_poly (pCons (0::?'a)) (poly_y_x ?p)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_app (template_hole 5, template_var 0)))),
    ("Bivariate_Polynomials.poly_y_x_map_poly_pCons_0",
     "poly_y_x (map_poly (pCons (0::?'a)) ?p) = pCons 0 (poly_y_x ?p)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 5, template_var 0)))),
    ("Bivariate_Polynomials.poly2_by_map",
     "poly2 ?p ?x = poly (map_poly (%c. poly c ?x) ?p)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Bivariate_Polynomials.poly_lift_pCons",
     "poly_lift (pCons ?a ?p) = pCons [:?a:] (poly_lift ?p)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0)),
         template_app (template_hole 3, template_var 0)))),
    ("Bivariate_Polynomials.poly_y_x_monom",
     "poly_y_x (monom ?a ?n) = smult (monom (1::?'a) ?n) (poly_lift ?a)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Bivariate_Polynomials.poly_lift2_nonzero",
     "?p ~= 0 ==> poly_lift2 ?p ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Bivariate_Polynomials.poly_poly_as_poly2",
     "poly2 ?p ?x (poly ?q ?x) = poly (poly ?p ?q) ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Bivariate_Polynomials.poly_poly_lift",
     "poly (poly_lift ?p) [:?x:] = [:poly ?p ?x:]",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Bivariate_Polynomials.map_poly_pCons_0_as_mult",
     "map_poly (pCons (0::?'a)) ?p = [:pCons (0::?'a) 1:] * ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app (template_hole 5, template_hole 4)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 1)),
             template_hole 0)),
         template_var 0))),
    ("Bivariate_Polynomials.pCons_as_add",
     "pCons ?a ?p = [:?a:] + monom (1::?'a) 1 * ?p",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_hole 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)),
           template_var 0)))),
    ("Bivariate_Polynomials.poly_y_x_pCons",
     "poly_y_x (pCons ?a ?p) =
      poly_lift ?a + map_poly (pCons (0::?'a)) (poly_y_x ?p)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_app (template_hole 6, template_var 0))))),
    ("Bivariate_Polynomials.poly_lift2_pCons",
     "poly_lift2 (pCons ?a ?p) = pCons [:[:?a:]:] (poly_lift2 ?p)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 1)),
             template_hole 0)),
         template_app (template_hole 5, template_var 0)))),
    ("Bivariate_Polynomials.poly2_monom",
     "poly2 (monom ?a ?n) ?x ?y = poly ?a ?x * ?y ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Bivariate_Polynomials.poly2_smult",
     "poly2 (smult ?a ?p) ?x ?y = poly ?a ?x * poly2 ?p ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Bivariate_Polynomials.poly_poly_y_x",
     "poly (poly (poly_y_x ?p) ?q) ?y = poly (poly ?p [:?y:]) (poly ?q ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Bivariate_Polynomials.poly2_pCons",
     "poly2 (pCons ?a ?p) ?x ?y = poly ?a ?x + ?y * poly2 ?p ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Bivariate_Polynomials.poly2_ext",
     "(!!x y. poly2 ?p x y = poly2 ?q x y) ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Bivariate_Polynomials.poly_monom_mult",
     "poly (monom ?p ?i * ?q ^ ?j) ?y =
      poly (monom ?p ?j * [:?y:] ^ ?i) (poly ?q ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_var 3))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 0)))),
    ("Bivariate_Polynomials.degree_poly_y_x",
     "?p ~= 0 ==>
      degree (poly_y_x ?p) = Max {degree (coeff ?p i) |i. i <= degree ?p}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("Bivariate_Polynomials.map_poly_sum_commute",
     "[| ?h (0::?'b) = (0::?'a); ALL p q. ?h (p + q) = ?h p + ?h q |]
      ==> (SUM i:?S. map_poly ?h (?f i)) = map_poly ?h (sum ?f ?S)",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_hole 8), template_hole 7),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Bivariate_Polynomials.poly_y_x_swapped",
     "poly_y_x ?p =
      (SUM j<=Max {degree (coeff ?p i) |i. i <= degree ?p}.
       SUM i<=degree ?p. monom (monom (coeff (coeff ?p i) j) i) j)",
     template_equation
      (template_app (template_hole 14, template_var 0),
       template_app
        (template_app (template_hole 13, t_empty),
         template_app
          (template_hole 8,
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty)))))),
    ("Bivariate_Polynomials.poly_y_x_fixed_deg",
     "poly_y_x ?p =
      (SUM i<=degree ?p.
       SUM j<=Max {degree (coeff ?p i) |i. i <= degree ?p}.
       monom (monom (coeff (coeff ?p i) j) i) j)",
     template_equation
      (template_app (template_hole 14, template_var 0),
       template_app
        (template_app (template_hole 13, t_empty),
         template_app
          (template_hole 8,
           template_app (template_hole 0, template_var 0))))),
    ("Bivariate_Polynomials.poly_y_x_fix_y_deg",
     "ALL i<=degree ?p. degree (coeff ?p i) <= ?d ==>
      poly_y_x ?p =
      (SUM i<=degree ?p.
       SUM j<=?d. monom (monom (coeff (coeff ?p i) j) i) j)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 9, template_var 1)))))),
    ("Bivariate_Polynomials.Max_degree_coeff_pCons",
     "Max {degree (coeff (pCons ?a ?p) i) |i. i <= degree (pCons ?a ?p)} =
      max (degree ?a) (Max {degree (coeff ?p x) |x. x <= degree ?p})",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, t_empty)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 9, template_app (template_hole 8, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.Bivariate_PolynomialsTemplates"
### 0.794s elapsed time, 1.034s cpu time, 0.138s GC time
val it = (): unit
