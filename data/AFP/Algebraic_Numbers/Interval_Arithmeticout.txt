Loading theory "Draft.Algebraic_Numbers_Prelim" (required by "Draft.Interval_ArithmeticTemplates" via "Draft.Interval_Arithmetic")
Loading theory "Draft.Templates" (required by "Draft.Interval_ArithmeticTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.159s cpu time, 0.031s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Interval_ArithmeticTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.488s elapsed time, 0.989s cpu time, 0.080s GC time
### Ignoring duplicate rewrite rule:
### content (pCons ?a1 ?p1) == gcd ?a1 (content ?p1)
locale dvd_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "dvd_preserving_hom hom"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Algebraic_Numbers_Prelim"
### 1.318s elapsed time, 1.927s cpu time, 0.153s GC time
Loading theory "Draft.Interval_Arithmetic" (required by "Draft.Interval_ArithmeticTemplates")
instantiation
  interval :: (zero) zero
  zero_interval == zero_class.zero :: 'a interval
instantiation
  interval :: (one) one
  one_interval == one_class.one :: 'a interval
instantiation
  interval :: (plus) plus
  plus_interval == plus :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: (uminus) uminus
  uminus_interval == uminus :: 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: (minus) minus
  minus_interval == minus :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: ({times,ord}) times
  times_interval == times :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: ({inverse,times,ord}) inverse
  inverse_interval == inverse :: 'a interval => 'a interval
  divide_interval == divide :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
Found termination order: "{}"
instantiation
  complex_interval :: comm_monoid_add
  zero_complex_interval == zero_class.zero :: complex_interval
  plus_complex_interval == plus ::
    complex_interval => complex_interval => complex_interval
Found termination order: "{}"
instantiation
  complex_interval :: mult_zero
  times_complex_interval == times ::
    complex_interval => complex_interval => complex_interval
Found termination order: "{}"
instantiation
  complex_interval :: minus
  minus_complex_interval == minus ::
    complex_interval => complex_interval => complex_interval
Found termination order: "{}"
### theory "Draft.Interval_Arithmetic"
### 1.746s elapsed time, 2.086s cpu time, 0.552s GC time
Loading theory "Draft.Interval_ArithmeticTemplates"
val templateLemmas =
   [("Interval_Arithmetic.in_interval_to_interval",
     "?a \<in>\<^sub>i to_interval ?a",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Interval_Arithmetic.interval_diff_zero", "?a - 0 = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Interval_Arithmetic.ipoly_complex_interval_0",
     "ipoly_complex_interval 0 ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Interval_Arithmetic.of_int_complex_interval",
     "of_int ?i \<in>\<^sub>c of_int_complex_interval ?i",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Interval_Arithmetic.const_interval_tendsto",
     "(%i. to_interval ?a) \<longlonglongrightarrow>\<^sub>i ?a",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("Interval_Arithmetic.of_int_complex_interval_tendsto",
     "(%i. of_int_complex_interval ?n) \<longlonglongrightarrow>\<^sub>c
      of_int ?n",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Interval_Arithmetic.Im_interval_minus",
     "Im_interval (?A - ?B) = Im_interval ?A - Im_interval ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Interval_Arithmetic.Im_interval_plus",
     "Im_interval (?A + ?B) = Im_interval ?A + Im_interval ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Interval_Arithmetic.Re_interval_minus",
     "Re_interval (?A - ?B) = Re_interval ?A - Re_interval ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Interval_Arithmetic.Re_interval_plus",
     "Re_interval (?A + ?B) = Re_interval ?A + Re_interval ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Interval_Arithmetic.uminus_in_interval",
     "?x \<in>\<^sub>i ?X ==> - ?x \<in>\<^sub>i - ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Interval_Arithmetic.uminus_interval_tendsto",
     "?X \<longlonglongrightarrow>\<^sub>i ?x ==>
      (%i. - ?X i) \<longlonglongrightarrow>\<^sub>i - ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Interval_Arithmetic.ipoly_complex_interval_pCons",
     "ipoly_complex_interval (pCons ?a ?p) ?x =
      of_int_complex_interval ?a + ?x * ipoly_complex_interval ?p ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Interval_Arithmetic.ipoly_complex_interval",
     "?x \<in>\<^sub>c ?X ==>
      ipoly ?p ?x \<in>\<^sub>c ipoly_complex_interval ?p ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 0)),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Interval_Arithmetic.Im_interval_times",
     "Im_interval (?A * ?B) =
      Re_interval ?A * Im_interval ?B + Im_interval ?A * Re_interval ?B",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Interval_Arithmetic.Re_interval_times",
     "Re_interval (?A * ?B) =
      Re_interval ?A * Re_interval ?B - Im_interval ?A * Im_interval ?B",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 1)),
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Interval_Arithmetic.ipoly_complex_interval_tendsto",
     "?C \<longlonglongrightarrow>\<^sub>c ?c ==>
      (%i. ipoly_complex_interval ?p
            (?C i)) \<longlonglongrightarrow>\<^sub>c
      ipoly ?p ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               template_var 1))
           ))),
    ("Interval_Arithmetic.plus_complex_interval",
     "[| ?x \<in>\<^sub>c ?X; ?y \<in>\<^sub>c ?Y |]
      ==> ?x + ?y \<in>\<^sub>c ?X + ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.times_complex_interval",
     "[| ?x \<in>\<^sub>c ?X; ?y \<in>\<^sub>c ?Y |]
      ==> ?x * ?y \<in>\<^sub>c ?X * ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.times_in_interval",
     "[| ?x \<in>\<^sub>i ?X; ?y \<in>\<^sub>i ?Y |]
      ==> ?x * ?y \<in>\<^sub>i ?X * ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.minus_in_interval",
     "[| ?x \<in>\<^sub>i ?X; ?y \<in>\<^sub>i ?Y |]
      ==> ?x - ?y \<in>\<^sub>i ?X - ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.plus_in_interval",
     "[| ?x \<in>\<^sub>i ?X; ?y \<in>\<^sub>i ?Y |]
      ==> ?x + ?y \<in>\<^sub>i ?X + ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.complex_interval_tendstoI",
     "[| (Re_interval o ?C) \<longlonglongrightarrow>\<^sub>i Re ?c;
         (Im_interval o ?C) \<longlonglongrightarrow>\<^sub>i Im ?c |]
      ==> ?C \<longlonglongrightarrow>\<^sub>c ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Interval_Arithmetic.minus_complex_interval_tendsto",
     "[| ?A \<longlonglongrightarrow>\<^sub>c ?a;
         ?B \<longlonglongrightarrow>\<^sub>c ?b |]
      ==> (%i. ?A i - ?B i) \<longlonglongrightarrow>\<^sub>c ?a - ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.plus_complex_interval_tendsto",
     "[| ?A \<longlonglongrightarrow>\<^sub>c ?a;
         ?B \<longlonglongrightarrow>\<^sub>c ?b |]
      ==> (%i. ?A i + ?B i) \<longlonglongrightarrow>\<^sub>c ?a + ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.times_complex_interval_tendsto",
     "[| ?A \<longlonglongrightarrow>\<^sub>c ?a;
         ?B \<longlonglongrightarrow>\<^sub>c ?b |]
      ==> (%i. ?A i * ?B i) \<longlonglongrightarrow>\<^sub>c ?a * ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.minus_interval_tendsto",
     "[| ?X \<longlonglongrightarrow>\<^sub>i ?x;
         ?Y \<longlonglongrightarrow>\<^sub>i ?y |]
      ==> (%i. ?X i - ?Y i) \<longlonglongrightarrow>\<^sub>i ?x - ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.plus_interval_tendsto",
     "[| ?X \<longlonglongrightarrow>\<^sub>i ?x;
         ?Y \<longlonglongrightarrow>\<^sub>i ?y |]
      ==> (%i. ?X i + ?Y i) \<longlonglongrightarrow>\<^sub>i ?x + ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.times_interval_tendsto",
     "[| ?X \<longlonglongrightarrow>\<^sub>i ?x;
         ?Y \<longlonglongrightarrow>\<^sub>i ?y |]
      ==> (%i. ?X i * ?Y i) \<longlonglongrightarrow>\<^sub>i ?x * ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Interval_Arithmetic.complex_interval_tendsto_neq",
     "[| ?f \<longlonglongrightarrow>\<^sub>c ?a; ?a ~= ?b |]
      ==> EX n. ~ ?b \<in>\<^sub>c ?f n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Interval_Arithmetic.interval_tendsto_neq",
     "[| ?f \<longlonglongrightarrow>\<^sub>i ?a; ?a ~= ?b |]
      ==> EX n. ~ ?b \<in>\<^sub>i ?f n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Interval_Arithmetic.interval_tendstoI",
     "[| (interval.upper o ?X) \<longlonglongrightarrow> ?x;
         (interval.lower o ?X) \<longlonglongrightarrow> ?x |]
      ==> ?X \<longlonglongrightarrow>\<^sub>i ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_var 1)),
                template_app (template_hole 3, template_var 0)),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_hole 1),
                    template_var 1)),
                template_app (template_hole 3, template_var 0)),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Interval_ArithmeticTemplates"
### 0.836s elapsed time, 1.034s cpu time, 0.156s GC time
val it = (): unit
