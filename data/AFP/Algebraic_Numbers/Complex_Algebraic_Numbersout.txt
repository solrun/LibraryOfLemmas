Loading theory "Draft.Compare_Complex" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers")
Loading theory "Draft.Complex_Roots_Real_Poly" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers")
Loading theory "Draft.Algebraic_Numbers_Prelim" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers" via "Draft.Algebraic_Numbers")
Loading theory "Draft.Templates" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.119s elapsed time, 0.461s cpu time, 0.040s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Complex_Algebraic_NumbersTemplates")
instantiation
  complex :: finite_UNIV
  finite_UNIV_complex == finite_UNIV :: (complex, bool) phantom
instantiation
  complex :: compare
  compare_complex == compare :: complex => complex => order
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.604s elapsed time, 2.360s cpu time, 0.128s GC time
Loading theory "Draft.Bivariate_Polynomials" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers" via "Draft.Algebraic_Numbers" via "Draft.Resultant")
deriving "ceq" instance for type "Complex.complex" via "="
derived is_ceq_complex-lemma
deriving "ceq" instance for type "Real.real" via "="
derived is_ceq_real-lemma
deriving "ccompare_order" instance for type "Complex.complex" via compare_order
derived is_ccompare_complex-lemma
deriving "ccompare_order" instance for type "Real.real" via compare_order
derived is_ccompare_real-lemma
use dlist as set_impl for type complex
registered complex in class set_impl
use dlist as set_impl for type real
registered real in class set_impl
### theory "Draft.Compare_Complex"
### 0.801s elapsed time, 3.128s cpu time, 0.168s GC time
### theory "Draft.Complex_Roots_Real_Poly"
### 0.973s elapsed time, 3.628s cpu time, 0.275s GC time
### Ignoring duplicate rewrite rule:
### content (pCons ?a1 ?p1) == gcd ?a1 (content ?p1)
locale dvd_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "dvd_preserving_hom hom"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Algebraic_Numbers_Prelim"
### 1.616s elapsed time, 4.944s cpu time, 0.498s GC time
Loading theory "Draft.Interval_Arithmetic" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers")
Loading theory "Draft.Min_Int_Poly" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
Loading theory "Draft.Sturm_Rat" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
### theory "Draft.Min_Int_Poly"
### 0.164s elapsed time, 0.587s cpu time, 0.103s GC time
Loading theory "Draft.Factors_of_Int_Poly" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
### theory "Draft.Bivariate_Polynomials"
### 1.205s elapsed time, 3.312s cpu time, 0.433s GC time
Loading theory "Draft.Resultant" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers" via "Draft.Algebraic_Numbers")
instantiation
  interval :: (zero) zero
  zero_interval == zero_class.zero :: 'a interval
instantiation
  interval :: (one) one
  one_interval == one_class.one :: 'a interval
instantiation
  interval :: (plus) plus
  plus_interval == plus :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: (uminus) uminus
  uminus_interval == uminus :: 'a interval => 'a interval
Found termination order: "{}"
### theory "Draft.Factors_of_Int_Poly"
### 0.630s elapsed time, 2.391s cpu time, 0.197s GC time
instantiation
  interval :: (minus) minus
  minus_interval == minus :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: ({times,ord}) times
  times_interval == times :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
instantiation
  interval :: ({inverse,times,ord}) inverse
  inverse_interval == inverse :: 'a interval => 'a interval
  divide_interval == divide :: 'a interval => 'a interval => 'a interval
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  complex_interval :: comm_monoid_add
  zero_complex_interval == zero_class.zero :: complex_interval
  plus_complex_interval == plus ::
    complex_interval => complex_interval => complex_interval
Found termination order: "{}"
instantiation
  complex_interval :: mult_zero
  times_complex_interval == times ::
    complex_interval => complex_interval => complex_interval
Found termination order: "{}"
instantiation
  complex_interval :: minus
  minus_complex_interval == minus ::
    complex_interval => complex_interval => complex_interval
### theory "Draft.Resultant"
### 1.564s elapsed time, 4.941s cpu time, 0.608s GC time
Loading theory "Draft.Algebraic_Numbers" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots" via "Draft.Real_Algebraic_Numbers")
Found termination order: "{}"
### theory "Draft.Interval_Arithmetic"
### 1.965s elapsed time, 6.386s cpu time, 0.711s GC time
### theory "Draft.Sturm_Rat"
### 2.289s elapsed time, 7.092s cpu time, 0.811s GC time
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
### theory "Draft.Algebraic_Numbers"
### 1.061s elapsed time, 1.713s cpu time, 0.289s GC time
Loading theory "Draft.Real_Algebraic_Numbers" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers" via "Draft.Real_Roots")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale map_poly_zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom_0 hom"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_alg :: uminus
  uminus_real_alg == uminus :: real_alg => real_alg
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  real_alg :: plus
  plus_real_alg == plus :: real_alg => real_alg => real_alg
instantiation
  real_alg :: minus
  minus_real_alg == minus :: real_alg => real_alg => real_alg
instantiation
  real_alg :: zero
  zero_real_alg == zero_class.zero :: real_alg
instantiation
  real_alg :: one
  one_real_alg == one_class.one :: real_alg
instantiation
  real_alg :: times
  times_real_alg == times :: real_alg => real_alg => real_alg
instantiation
  real_alg :: inverse
  inverse_real_alg == inverse :: real_alg => real_alg
  divide_real_alg == divide :: real_alg => real_alg => real_alg
instantiation
  real_alg :: sgn
  sgn_real_alg == sgn :: real_alg => real_alg
instantiation
  real_alg :: equal
  equal_real_alg == equal_class.equal :: real_alg => real_alg => bool
instantiation
  real_alg :: ord
  less_eq_real_alg == less_eq :: real_alg => real_alg => bool
  less_real_alg == less :: real_alg => real_alg => bool
instantiation
  real_alg :: compare_order
  compare_real_alg == compare :: real_alg => real_alg => order
instantiation
  real_alg :: abs
  abs_real_alg == abs :: real_alg => real_alg
instantiation
  real_alg :: floor_ceiling
  floor_real_alg == floor :: real_alg => int
instantiation
  real_alg ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real_alg == division_segment :: real_alg => real_alg
  normalize_real_alg == normalize :: real_alg => real_alg
  unit_factor_real_alg == unit_factor :: real_alg => real_alg
  euclidean_size_real_alg == euclidean_size :: real_alg => nat
  modulo_real_alg == modulo :: real_alg => real_alg => real_alg
instantiation
  real_alg :: euclidean_ring_gcd
  Gcd_real_alg == Gcd :: real_alg set => real_alg
  Lcm_real_alg == Lcm :: real_alg set => real_alg
  gcd_real_alg == gcd :: real_alg => real_alg => real_alg
  lcm_real_alg == lcm :: real_alg => real_alg => real_alg
### theory "Draft.Real_Algebraic_Numbers"
### 8.925s elapsed time, 10.274s cpu time, 2.009s GC time
Loading theory "Draft.Real_Roots" (required by "Draft.Complex_Algebraic_NumbersTemplates" via "Draft.Complex_Algebraic_Numbers")
Found termination order: "length <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Real_Roots"
### 0.701s elapsed time, 0.760s cpu time, 0.085s GC time
Loading theory "Draft.Complex_Algebraic_Numbers" (required by "Draft.Complex_Algebraic_NumbersTemplates")
consts
  remdups_gen :: "('a => 'a => bool) => 'a list => 'a list"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Complex_Algebraic_Numbers"
### 1.974s elapsed time, 2.061s cpu time, 0.168s GC time
Loading theory "Draft.Complex_Algebraic_NumbersTemplates"
val templateLemmas =
   [("Complex_Algebraic_Numbers.complex_roots_of_int_poly",
     "distinct (complex_roots_of_int_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Algebraic_Numbers.complex_roots_of_rat_poly",
     "distinct (complex_roots_of_rat_poly ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Algebraic_Numbers.get_itvl_3",
     "real_of_3 ?x \<in>\<^sub>i get_itvl_3 ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Algebraic_Numbers.distinct_pos_imaginary_parts_3",
     "distinct (map real_of_3 (pos_imaginary_parts_3 ?p))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Complex_Algebraic_Numbers.distinct_real_parts_3",
     "distinct (map real_of_3 (real_parts_3 ?p))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Complex_Algebraic_Numbers.real_of_3_code",
     "real_of_3 ?x = real_of (Real_Alg_Quotient ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Algebraic_Numbers.tighten_bounds_3",
     "real_of_3 (tighten_bounds_3 ?x) = real_of_3 ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Complex_Algebraic_Numbers.min_int_poly_complex_of_real",
     "min_int_poly (complex_of_real ?x) = min_int_poly ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Algebraic_Numbers.distinct_remdups_equal_3",
     "distinct
       (map real_of_3 (Complex_Algebraic_Numbers.remdups_gen equal_3 ?xs))",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))
         )),
    ("Complex_Algebraic_Numbers.lower_3_tendsto",
     "lower_3 ?x \<longlonglongrightarrow> real_of_3 ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("Complex_Algebraic_Numbers.upper_3_tendsto",
     "upper_3 ?x \<longlonglongrightarrow> real_of_3 ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("Complex_Algebraic_Numbers.remdups_gen_subset",
     "set (Complex_Algebraic_Numbers.remdups_gen ?eq ?xs) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Complex_Algebraic_Numbers.tighten_bounds_2",
     "invariant_2 ?x ==> invariant_2 (tighten_bounds_2 ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.real_of_tighten_bounds_many",
     "real_of_3 ((tighten_bounds_3 ^^ ?i) ?x) = real_of_3 ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Complex_Algebraic_Numbers.in_real_itvl_get_bounds_tighten",
     "real_of_3 ?x \<in>\<^sub>i get_itvl_3 ((tighten_bounds_3 ^^ ?n) ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               template_var 1)))
         )),
    ("Complex_Algebraic_Numbers.tends_to_tight_bounds_3",
     "(%x. get_itvl_3
            ((tighten_bounds_3 ^^ x) ?y)) \<longlonglongrightarrow>\<^sub>i
      real_of_3 ?y",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Algebraic_Numbers.get_bounds_2",
     "invariant_2 ?x ==> real_of_2 ?x \<in>\<^sub>i get_itvl_2 ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.represents_cnj",
     "?p represents ?x ==> ?p represents cnj ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.algebraic_complex_code",
     "algebraic_complex ?x = (algebraic (Re ?x) & algebraic (Im ?x))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Algebraic_Numbers.algebraic_complex_iff",
     "algebraic ?x = (algebraic (Re ?x) & algebraic (Im ?x))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Algebraic_Numbers.tighten_bounds_2",
     "invariant_2 ?x ==> real_of_2 (tighten_bounds_2 ?x) = real_of_2 ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Complex_Algebraic_Numbers.real_of_3_remdups_equal_3",
     "real_of_3 ` set (Complex_Algebraic_Numbers.remdups_gen equal_3 ?xs) =
      real_of_3 ` set ?xs",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Algebraic_Numbers.positive_pos_imaginary_parts_3",
     "?x : set (pos_imaginary_parts_3 ?p) ==> 0 < real_of_3 ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Algebraic_Numbers.interval_size_3_tendsto_0",
     "(%i. upper_3 ?x i - lower_3 ?x i) \<longlonglongrightarrow> 0",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)
         )),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly3",
     "[| ?p ~= 0; square_free ?p |]
      ==> distinct (complex_roots_of_int_poly3 ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly_all",
     "(3 <= degree ?p ==> square_free ?p) ==>
      distinct (complex_roots_of_int_poly_all ?p)",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_app (template_hole 3, template_var 0))],
          template_predicate
           (template_app (template_hole 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.poly_complex_to_real",
     "(poly (complex_of_int_poly ?p) (complex_of_real ?x) = 0) =
      (poly (real_of_int_poly ?p) ?x = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 1)),
           template_app (template_hole 6, template_var 0)),
         template_hole 5),
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Complex_Algebraic_Numbers.dist_tendsto_0_imp_tendsto",
     "(%i. \<bar>?f i - ?a\<bar>) \<longlonglongrightarrow> 0 ==>
      ?f \<longlonglongrightarrow> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty),
                template_app (template_hole 2, template_hole 1)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_app (template_hole 2, template_var 0)),
             template_hole 0)
           ))),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly",
     "?p ~= 0 ==>
      set (complex_roots_of_int_poly ?p) =
      {x. poly (complex_of_int_poly ?p) x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Algebraic_Numbers.complex_roots_of_rat_poly",
     "?p ~= 0 ==> set (complex_roots_of_rat_poly ?p) = {x. rpoly ?p x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Algebraic_Numbers.represents_root_poly",
     "[| poly (complex_of_int_poly ?p) ?x = 0; ?p ~= 0 |]
      ==> root_poly_Re ?p represents Re ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1)),
            template_var 0),
          template_hole 6),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Algebraic_Numbers.interval_size_3",
     "upper_3 ?x ?i - lower_3 ?x ?i =
      (upper_3 ?x 0 - lower_3 ?x 0) / 2 ^ ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 4)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_hole 4))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Complex_Algebraic_Numbers.complex_poly",
     "[| ?re represents Re ?x; ?im represents Im ?x |]
      ==> EX f:set (complex_poly ?re ?im). f represents ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             t_empty)
           ))),
    ("Complex_Algebraic_Numbers.complex_poly",
     "[| ?re represents Re ?x; ?im represents Im ?x;
         ?f : set (complex_poly ?re ?im) |]
      ==> poly_cond ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 1)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly3",
     "[| ?p ~= 0; square_free ?p |]
      ==> set (complex_roots_of_int_poly3 ?p) =
          {x. poly (complex_of_int_poly ?p) x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Algebraic_Numbers.real_parts_3",
     "[| ?p ~= 0; poly (complex_of_int_poly ?p) ?x = 0 |]
      ==> Re ?x : real_of_3 ` set (real_parts_3 ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1)),
            template_var 0),
          template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Complex_Algebraic_Numbers.represents_root_poly",
     "[| poly (complex_of_int_poly ?p) ?x = 0; ?p ~= 0 |]
      ==> EX q:set (root_poly_Im ?p). q represents Im ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 1)),
            template_var 0),
          template_hole 8),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1))),
             t_empty)
           ))),
    ("Complex_Algebraic_Numbers.tighten_bounds_3",
     "[| get_itvl_3 ?x = Interval ?l ?r;
         get_itvl_3 (tighten_bounds_3 ?x) = Interval ?l' ?r' |]
      ==> ?r' - ?l' = (?r - ?l) / 2",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 4),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_equation
         (template_app
           (template_hole 8,
            template_app (template_hole 6, template_var 4)),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 3)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Complex_Algebraic_Numbers.pos_imaginary_parts_3",
     "[| ?p ~= 0; poly (complex_of_int_poly ?p) ?x = 0; 0 < Im ?x |]
      ==> Im ?x : real_of_3 ` set (pos_imaginary_parts_3 ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 13)),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 1)),
            template_var 0),
          template_hole 8),
        template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Complex_Algebraic_Numbers.root_poly_Re_code",
     "root_poly_Re ?p =
      (let fs = coeffs (poly_add ?p ?p); k = length fs
       in cf_pos_poly
           (poly_of_list (map2 (%fi i. fi * 2 ^ i) fs [0..<k])))",
     template_equation
      (template_app (template_hole 17, template_var 0),
       template_app
        (template_app
          (template_hole 16,
           template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_var 0),
               template_var 0))),
         t_empty))),
    ("Complex_Algebraic_Numbers.complex_roots_of_int_poly_all",
     "[| 3 <= degree ?p ==> square_free ?p; ?p ~= 0 |]
      ==> set (complex_roots_of_int_poly_all ?p) =
          {x. poly (complex_of_int_poly ?p) x = 0}",
     template_implication
      ([template_implication
         ([template_inequation
            (less_equals,
             template_app
              (template_hole 16,
               template_app (template_hole 15, template_hole 14)),
             template_app (template_hole 13, template_var 0))],
          template_predicate
           (template_app (template_hole 12, template_var 0))),
        template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Algebraic_Numbers.tighten_bounds_2",
     "[| invariant_2 ?x; get_itvl_2 ?x = Interval ?l ?r;
         get_itvl_2 (tighten_bounds_2 ?x) = Interval ?l' ?r' |]
      ==> ?r' - ?l' = (?r - ?l) / 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_equation
         (template_app (template_hole 8, template_var 4),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_equation
         (template_app
           (template_hole 8,
            template_app (template_hole 6, template_var 4)),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 3)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Complex_Algebraic_Numbers.sandwitch_real",
     "[| ?l \<longlonglongrightarrow> ?a; ?r \<longlonglongrightarrow> ?a;
         !!i. ?l i <= ?m i; !!i. ?m i <= ?r i |]
      ==> ?m \<longlonglongrightarrow> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 2)),
              template_hole 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 2)),
             template_hole 2)
           ))),
    ("Complex_Algebraic_Numbers.filter_list_length",
     "[| length (filter ?P ?xs) = ?n;
         !!i x. [| x : set ?xs; ?P x |] ==> ?p ((?f ^^ i) x);
         !!x. [| x : set ?xs; ~ ?P x |] ==> EX i. ~ ?p ((?f ^^ i) x);
         !!x. ?g (?f x) = ?g x; !!x. ?P (?f x) = ?P x |]
      ==> map ?g (filter_list_length ?f ?p ?n ?xs) =
          map ?g (filter ?P ?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 4)),
          template_var 3),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 3),
             template_var 4)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 12, template_var 5),
             template_var 4)))))]:
   (string * thm * template) list
### theory "Draft.Complex_Algebraic_NumbersTemplates"
### 3.187s elapsed time, 4.741s cpu time, 1.974s GC time
val it = (): unit
