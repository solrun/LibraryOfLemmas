   [("Algebraic_Numbers_Prelim.irr_cf_poly_rat",
     "irreducible (poly_rat ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Algebraic_Numbers_Prelim.irr_cf_poly_rat", "primitive (poly_rat ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Algebraic_Numbers.algebraic_of_rat", "algebraic (of_rat ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Algebraic_Numbers_Prelim.cf_pos_poly_dvd", "cf_pos_poly ?f dvd ?f",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Algebraic_Numbers_Prelim.poly_rat_represents_of_rat",
     "poly_rat ?x represents of_rat ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Algebraic_Numbers_Prelim.poly_rat", "poly_rat ?x ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Algebraic_Numbers_Prelim.content_uminus",
     "content (- ?p) = content ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Numbers_Prelim.degree_abs_int_poly",
     "degree (abs_int_poly ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Numbers_Prelim.degree_cf_pos_poly",
     "degree (cf_pos_poly ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Numbers.degree_poly_x_minus_y",
     "degree (poly_x_minus_y ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Algebraic_Numbers.degree_poly_x_mult_y",
     "degree (poly_x_mult_y ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Algebraic_Numbers_Prelim.irreducible_abs_int_poly",
     "irreducible (abs_int_poly ?p) = irreducible ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Numbers_Prelim.primitive_abs_int_poly",
     "primitive (abs_int_poly ?p) = primitive ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Numbers.algebraic_int_sqrt_iff",
     "algebraic_int (sqrt ?x) = algebraic_int ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Numbers.algebraic_int_csqrt_iff",
     "algebraic_int (csqrt ?x) = algebraic_int ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Numbers_Prelim.poly_uminus_code",
     "poly_uminus ?p = poly_uminus_inner (coeffs ?p)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Numbers.coeff_0_poly_x_minus_y",
     "coeff (poly_x_minus_y ?p) 0 = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Algebraic_Numbers.poly_y_x_poly_x_minus_y",
     "poly_y_x (poly_x_minus_y ?p) =
      ??.Algebraic_Numbers.poly_y_minus_x ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Algebraic_Numbers_Prelim.content_poly_uminus_inner",
     "content (poly_uminus_inner ?as) = content (Poly ?as)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Numbers_Prelim.degree_poly_uminus_inner",
     "degree (poly_uminus_inner ?as) = degree (Poly ?as)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Numbers_Prelim.degree_poly_add_rat",
     "degree (poly_add_rat ?r ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Algebraic_Numbers.degree_poly_y_minus_x",
     "degree (poly_y_x (poly_x_minus_y ?p)) = degree ?p",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Algebraic_Numbers.primitive_field_poly", "primitive ?p = (?p ~= 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Algebraic_Numbers.algebraic_inverse",
     "algebraic ?x ==> algebraic (inverse ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers.algebraic_uminus",
     "algebraic ?x ==> algebraic (- ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers.algebraic_int_norm_complex",
     "algebraic_int ?z ==> algebraic_int (cmod ?z)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers.algebraic_representsI",
     "?p represents ?x ==> algebraic ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Numbers.poly2_x_y",
     "poly2 Algebraic_Numbers.x_y ?x ?y = ?x - ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Algebraic_Numbers_Prelim.poly_rat", "ipoly (poly_rat ?x) ?x = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 0))),
         template_var 0),
       template_hole 0)),
    ("Algebraic_Numbers_Prelim.algebraic_iff_represents",
     "algebraic ?x = (EX p. p represents ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Algebraic_Numbers_Prelim.represents_of_rat",
     "?p represents of_rat ?x = ?p represents ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Algebraic_Numbers_Prelim.abs_int_poly_represents",
     "abs_int_poly ?p represents ?x = ?p represents ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Algebraic_Numbers_Prelim.cf_pos_poly_represents",
     "cf_pos_poly ?p represents ?x = ?p represents ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Algebraic_Numbers_Prelim.represents_of_real",
     "?p represents of_real ?x = ?p represents ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Algebraic_Numbers_Prelim.abs_int_poly_eq_0_iff",
     "(abs_int_poly ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Algebraic_Numbers_Prelim.cf_pos_poly_eq_0",
     "(cf_pos_poly ?f = 0) = (?f = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Algebraic_Numbers_Prelim.abs_int_poly_dvd",
     "(abs_int_poly ?p dvd ?q) = (?p dvd ?q)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Algebraic_Numbers_Prelim.irr_cf_poly_rat",
     "0 < lead_coeff (poly_rat ?x)",
     template_inequation
      (less_than, template_hole 3,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Algebraic_Numbers.algebraic_root",
     "algebraic ?x ==> algebraic (root ?n ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Algebraic_Numbers.algebraic_int_power",
     "algebraic_int ?x ==> algebraic_int (?x ^ ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.linear_irreducible_field",
     "degree ?p = 1 ==> irreducible ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Numbers_Prelim.content_pCons",
     "content (pCons ?a ?p) = gcd ?a (content ?p)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Algebraic_Numbers_Prelim.poly_rat",
     "ipoly (poly_rat ?x) (of_rat ?x) = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Algebraic_Numbers_Prelim.poly_uminus_inner_0",
     "(poly_uminus_inner ?as = 0) = (Poly ?as = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Algebraic_Numbers_Prelim.poly_add_rat_0",
     "(poly_add_rat ?r ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Algebraic_Numbers_Prelim.smult_prod",
     "Polynomial.smult ?a ?b = monom ?a 0 * ?b",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Algebraic_Numbers_Prelim.representsD", "?p represents ?x ==> ?p ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Algebraic_Numbers_Prelim.cf_pos_cf_pos_poly",
     "?p ~= 0 ==> cf_pos (cf_pos_poly ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.content_cf_pos_poly",
     "content (cf_pos_poly ?f) = (if ?f = 0 then 0 else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Algebraic_Numbers.degree_coeff_poly_x_minus_y",
     "degree (coeff (poly_x_minus_y ?p) ?i) = degree ?p - ?i",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Algebraic_Numbers.coeff_poly_x_mult_y",
     "coeff (poly_x_mult_y ?p) ?i = monom (coeff ?p ?i) ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Algebraic_Numbers_Prelim.abs_int_poly_inv",
     "Polynomial.smult (sgn (lead_coeff ?p)) (abs_int_poly ?p) = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_var 0)))),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Algebraic_Numbers_Prelim.represents_uminus",
     "?p represents ?x ==> poly_uminus ?p represents - ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.represents_degree",
     "?p represents ?x ==> degree ?p ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_hole 0)
           ))),
    ("Algebraic_Numbers_Prelim.sgn_is_unit",
     "?x ~= (0::?'a) ==> sgn ?x dvd (1::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Algebraic_Numbers.poly2_poly_x_minus_y",
     "poly2 (poly_x_minus_y ?p) ?x ?y = poly ?p (?x - ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algebraic_Numbers.poly2_poly_x_mult_y",
     "poly2 (poly_x_mult_y ?p) ?x ?y = poly ?p (?x * ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Algebraic_Numbers.algebraic_int_power_iff",
     "algebraic_int (?x ^ ?n) = (?n = 0 | algebraic_int ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Algebraic_Numbers.algebraic_int_nth_root_real_iff",
     "algebraic_int (root ?n ?x) = (?n = 0 | algebraic_int ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app (template_hole 4, template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.irreducible_content",
     "irreducible ?p ==> degree ?p = 0 | primitive ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.poly_zero_imp_not_unit",
     "poly ?p ?x = (0::?'a) ==> ~ ?p dvd 1",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)
               )
           ))),
    ("Algebraic_Numbers_Prelim.lead_coeff_abs_int_poly",
     "lead_coeff (abs_int_poly ?p) = \<bar>lead_coeff ?p\<bar>",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 1, template_var 0))))),
    ("Algebraic_Numbers.poly_y_x_const", "poly_y_x [:[:?a:]:] = [:[:?a:]:]",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Algebraic_Numbers_Prelim.primitive_imp_unit_iff",
     "primitive ?p ==> (?p dvd 1) = (degree ?p = 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3)
              )],
         template_equation
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Algebraic_Numbers_Prelim.algebraic_imp_represents_irreducible",
     "algebraic ?x ==> EX p. p represents ?x & irreducible p",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Algebraic_Numbers_Prelim.representsD",
     "?p represents ?x ==> ipoly ?p ?x = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Algebraic_Numbers.algebraic_int_power_iff'",
     "0 < ?n ==> algebraic_int (?x ^ ?n) = algebraic_int ?x",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Algebraic_Numbers_Prelim.deg_nonzero_represents",
     "degree ?p ~= 0 ==> EX x. ?p represents x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Algebraic_Numbers_Prelim.irreducible_connect_rev",
     "[| irreducible ?p; 0 < degree ?p |] ==> irreducible\<^sub>d ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Numbers_Prelim.irreducible_connect_int",
     "[| irreducible\<^sub>d ?p; content ?p = 1 |] ==> irreducible ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Numbers.algebraic_plus",
     "[| algebraic ?x; algebraic ?y |] ==> algebraic (?x + ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebraic_Numbers.algebraic_times",
     "[| algebraic ?x; algebraic ?y |] ==> algebraic (?x * ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebraic_Numbers.algebraic_div",
     "[| algebraic ?x; algebraic ?y |] ==> algebraic (?x / ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebraic_Numbers.algebraic_int_diff",
     "[| algebraic_int ?x; algebraic_int ?y |] ==> algebraic_int (?x - ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebraic_Numbers.algebraic_int_plus",
     "[| algebraic_int ?x; algebraic_int ?y |] ==> algebraic_int (?x + ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebraic_Numbers.algebraic_int_times",
     "[| algebraic_int ?x; algebraic_int ?y |] ==> algebraic_int (?x * ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.ipoly_of_real",
     "ipoly ?p (of_real ?x) = of_real (poly (real_of_int_poly ?p) ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Algebraic_Numbers_Prelim.ipoly_of_rat",
     "ipoly ?p (of_rat ?y) = of_rat (ipoly ?p ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Algebraic_Numbers_Prelim.poly_rat",
     "(ipoly (poly_rat ?x) ?y = (0::?'a)) = (?y = of_rat ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 1))),
           template_var 0),
         template_hole 1),
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Algebraic_Numbers_Prelim.pos_poly_abs_poly",
     "(0 < lead_coeff (abs_int_poly ?p)) = (?p ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0)),
                template_app
                 (template_hole 3,
                  template_app (template_hole 4, template_var 0))))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Algebraic_Numbers_Prelim.lead_coeff_cf_pos_poly",
     "(0 < lead_coeff (cf_pos_poly ?f)) = (?f ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0)),
                template_app
                 (template_hole 3,
                  template_app (template_hole 4, template_var 0))))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Algebraic_Numbers_Prelim.cf_pos_poly_main",
     "Polynomial.smult (sgn (lead_coeff ?f) * content ?f) (cf_pos_poly ?f) =
      ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 2, template_var 0)))),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Algebraic_Numbers_Prelim.represents_add_rat",
     "?p represents ?x ==> poly_add_rat ?r ?p represents of_rat ?r + ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Algebraic_Numbers_Prelim.represents_csqrt",
     "?p represents ?x ==> poly_nth_root 2 ?p represents csqrt ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.degree_poly_mult_rat",
     "?r ~= 0 ==> degree (poly_mult_rat ?r ?p) = degree ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Algebraic_Numbers_Prelim.degree_0_content",
     "degree ?p = 0 ==> content ?p = \<bar>coeff ?p 0\<bar>",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 4))))),
    ("Algebraic_Numbers_Prelim.ipoly_uminus_inner",
     "ipoly (poly_uminus_inner ?as) ?x = ipoly (Poly ?as) (- ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Numbers.poly_poly_poly_x_minus_y",
     "poly (poly (poly_x_minus_y ?p) ?q) ?x = poly ?p (?x - poly ?q ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))))),
    ("Algebraic_Numbers_Prelim.cf_pos_poly_eq_1",
     "(cf_pos_poly ?f = 1) = (degree ?f = 0 & ?f ~= 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 7, template_var 0), template_hole 6),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_hole 0)))
           ))),
    ("Algebraic_Numbers_Prelim.of_int_monom",
     "(of_int_poly ?p = [:rat_of_int ?c:]) = (?p = [:?c:])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 5, template_var 0)),
           template_hole 3)),
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Algebraic_Numbers_Prelim.poly_uminus_pCons_pCons",
     "poly_uminus (pCons ?a (pCons ?b ?p)) =
      pCons ?a (pCons (- ?b) (poly_uminus ?p))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Algebraic_Numbers_Prelim.pos_mult",
     "(0::?'a) < ?c ==> ((0::?'a) < ?c * ?b) = ((0::?'a) < ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Algebraic_Numbers_Prelim.pos_mult",
     "(0::?'a) < ?c ==> (?c * ?a < (0::?'a)) = (?a < (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)))),
    ("Algebraic_Numbers_Prelim.irreducible_cf_pos_poly",
     "[| irreducible ?p; degree ?p ~= 0 |]
      ==> irreducible (cf_pos_poly ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.linear_irreducible_int",
     "[| degree ?p = 1; is_unit (content ?p) |] ==> irreducible ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algebraic_Numbers_Prelim.ipoly_nth_root",
     "ipoly (poly_nth_root ?n ?p) ?x = ipoly ?p (?x ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Algebraic_Numbers.poly_x_minus_y_pCons",
     "poly_x_minus_y (pCons ?a ?p) =
      [:[:?a:]:] + poly_x_minus_y ?p * Algebraic_Numbers.x_y",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 3)),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 7, template_var 0)),
           template_hole 0)))),
    ("Algebraic_Numbers_Prelim.poly_nth_root_0",
     "?n ~= 0 ==> (poly_nth_root ?n ?p = 0) = (?p = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0),
         template_equation (template_var 0, template_hole 0)))),
    ("Algebraic_Numbers_Prelim.poly_mult_rat_0",
     "?r ~= 0 ==> (poly_mult_rat ?r ?p = 0) = (?p = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0),
         template_equation (template_var 0, template_hole 0)))),
    ("Algebraic_Numbers_Prelim.dvd_all_coeffs_imp_dvd",
     "ALL a:set (coeffs ?p). ?c dvd a ==> [:?c:] dvd ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Algebraic_Numbers_Prelim.poly_prod_mset_zero_iff",
     "(poly (\<Prod>\<^sub># ?F) ?x = (0::?'a)) =
      (\<exists>f:#?F. poly f ?x = (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty))),
    ("Algebraic_Numbers_Prelim.ipoly_cf_pos_poly_eq_0",
     "(ipoly (cf_pos_poly ?p) ?x = (0::?'a)) = (ipoly ?p ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1))),
           template_var 0),
         template_hole 0),
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Algebraic_Numbers_Prelim.ipoly_abs_int_poly_eq_zero_iff",
     "(ipoly (abs_int_poly ?p) ?x = (0::?'a)) = (ipoly ?p ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 1))),
           template_var 0),
         template_hole 0),
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Algebraic_Numbers.dvd_all_coeffs_iff",
     "(ALL pi:set (coeffs ?p). ?x dvd pi) = (ALL i. ?x dvd coeff ?p i)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         t_empty),
       template_app (template_hole 1, t_empty))),
    ("Algebraic_Numbers_Prelim.prime_elem_imp_gcd_eq",
     "prime_elem ?x ==> gcd ?x ?y = normalize ?x | gcd ?x ?y = (1::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Algebraic_Numbers_Prelim.finite_ipoly_roots",
     "?p ~= 0 ==> finite {x. poly (real_of_int_poly ?p) x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))
           ))),
    ("Algebraic_Numbers.algebraic_int_sum",
     "(!!x. x : ?A ==> algebraic_int (?f x)) ==> algebraic_int (sum ?f ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Algebraic_Numbers.algebraic_int_prod",
     "(!!x. x : ?A ==> algebraic_int (?f x)) ==>
      algebraic_int (prod ?f ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Algebraic_Numbers_Prelim.represents_inverse",
     "[| ?x ~= (0::?'a); ?p represents ?x |]
      ==> reflect_poly ?p represents inverse ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Algebraic_Numbers_Prelim.ipoly_poly_compose",
     "ipoly (?p \<circ>\<^sub>p ?q) ?x = ipoly ?p (ipoly ?q ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)))),
    ("Algebraic_Numbers.y_x",
     "poly2 ??.Algebraic_Numbers.y_x ?x ?y = ?y - ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 5, template_hole 4)),
                     template_hole 3))),
               template_app
                (template_app (template_hole 8, template_hole 2),
                 template_hole 1))),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Algebraic_Numbers_Prelim.poly_map_poly_code",
     "poly (map_poly ?h ?p) ?x =
      fold_coeffs (%a b. ?h a + ?x * b) ?p (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 1),
         template_hole 0))),
    ("Algebraic_Numbers_Prelim.algebraic_altdef_ipoly",
     "algebraic ?x = (EX p. ipoly p ?x = (0::?'a) & p ~= 0)",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app (template_hole 9, t_empty))),
    ("Algebraic_Numbers_Prelim.degree_map_poly_2",
     "?f (lead_coeff ?p) ~= (0::?'a) ==>
      degree (map_poly ?f ?p) = degree ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_var 1,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app (template_hole 4, template_var 0))),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 4, template_var 0)))),
    ("Algebraic_Numbers.represents_add",
     "[| ?p represents ?x; ?q represents ?y |]
      ==> poly_add ?p ?q represents ?x + ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.sgn_ipoly_add_rat",
     "sgn (ipoly (poly_add_rat ?r ?p) ?x) =
      sgn (ipoly ?p (?x - of_rat ?r))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("Algebraic_Numbers_Prelim.smult_inverse_monom",
     "?p ~= 0 ==> (Polynomial.smult (inverse ?c) ?p = 1) = (?p = [:?c:])",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_var 1),
           template_hole 1),
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_hole 5))))),
    ("Algebraic_Numbers_Prelim.represents_sqrt",
     "[| ?p represents ?x; 0 <= ?x |]
      ==> poly_nth_root 2 ?p represents sqrt ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_inequation (less_equals, template_hole 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.representsI",
     "[| ipoly ?p ?x = (0::?'a); ?p ~= 0 |] ==> ?p represents ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1)),
            template_var 0),
          template_hole 4),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Algebraic_Numbers_Prelim.coeff_abs_int_poly",
     "coeff (abs_int_poly ?p) ?n =
      (if lead_coeff ?p < 0 then - coeff ?p ?n else coeff ?p ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app (template_hole 2, template_var 1))),
               template_hole 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_var 0)))),
    ("Algebraic_Numbers.lead_coeff_poly_x_minus_y",
     "lead_coeff (poly_x_minus_y ?p) =
      [:lead_coeff ?p * (- (1::?'a)) ^ degree ?p:]",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_hole 8,
           template_app (template_hole 9, template_var 0))),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)),
               template_app (template_hole 4, template_var 0)))),
         template_hole 0))),
    ("Algebraic_Numbers_Prelim.algebraic_imp_represents_unique",
     "algebraic ?x ==>
      EX! p. p represents ?x & irreducible p & 0 < lead_coeff p",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Algebraic_Numbers_Prelim.degree_poly_mult_rat_main",
     "?n ~= (0::?'a) ==>
      degree (poly_mult_rat_main ?n ?d ?f) =
      (if ?d = (0::?'a) then 0 else degree ?f)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 5)),
                 template_hole 0),
               template_app (template_hole 3, template_var 0))
             )))),
    ("Algebraic_Numbers_Prelim.represents_mult_rat",
     "[| ?r ~= 0; ?p represents ?x |]
      ==> poly_mult_rat ?r ?p represents of_rat ?r * ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))
           ))),
    ("Algebraic_Numbers.algebraic_nth_root",
     "[| ?n ~= 0; algebraic ?x; ?y ^ ?n = ?x |] ==> algebraic ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 0), template_var 2),
          template_var 1)],
       template_predicate
        (template_app (template_hole 2, template_var 0)))),
    ("Algebraic_Numbers_Prelim.add_rat_roots",
     "(ipoly (poly_add_rat ?r ?p) ?x = (0::?'a)) =
      (ipoly ?p (?x - of_rat ?r) = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1))),
           template_var 0),
         template_hole 2),
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))),
         template_hole 2))),
    ("Algebraic_Numbers_Prelim.ipoly_add_rat_pos_neg",
     "((0::?'a) < ipoly (poly_add_rat ?r ?p) ?x) =
      ((0::?'a) < ipoly ?p (?x - of_rat ?r))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_var 0)),
       template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("Algebraic_Numbers_Prelim.ipoly_add_rat_pos_neg",
     "(ipoly (poly_add_rat ?r ?p) ?x < (0::?'a)) =
      (ipoly ?p (?x - of_rat ?r) < (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2)))),
         template_hole 2))),
    ("Algebraic_Numbers.primitive_imp_no_constant_factor",
     "[| primitive ?p; mset_factors ?F ?p; ?f :# ?F |] ==> degree ?f ~= 0",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Algebraic_Numbers.irreducible_dvd_degree",
     "[| ?f dvd ?g; irreducible ?g; 0 < degree ?f |]
      ==> degree ?f = degree ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Algebraic_Numbers_Prelim.coeff_poly_mult_rat_main",
     "coeff (poly_mult_rat_main ?n ?d ?f) ?i =
      coeff ?f ?i * ?n ^ (degree ?f - ?i) * ?d ^ ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Algebraic_Numbers.poly_x_mult_y_code",
     "poly_x_mult_y ?p =
      (let cs = coeffs ?p
       in poly_of_list (map2 (%i ai. monom ai i) [0..<length cs] cs))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         t_empty))),
    ("Algebraic_Numbers_Prelim.irreducible_pos_gcd",
     "[| irreducible ?p; 0 < lead_coeff ?p |] ==> gcd ?p ?q : {1, ?p}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_app (template_hole 5, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 0)))
           ))),
    ("Algebraic_Numbers_Prelim.represents_irr_non_0",
     "[| irreducible ?p; ?p represents ?x; ?x ~= (0::?'a) |]
      ==> poly ?p 0 ~= 0",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_hole 0)
           ))),
    ("Algebraic_Numbers.coprime_poly_x_minus_y_poly_lift",
     "[| 0 < degree ?p; 0 < degree ?q; primitive ?p |]
      ==> comm_monoid_mult_class.coprime (poly_x_minus_y ?p)
           (poly_lift ?q)",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.algebraic_imp_represents_irreducible_cf_pos",
     "algebraic ?x ==>
      EX p. p represents ?x &
            irreducible p & 0 < lead_coeff p & primitive p",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Algebraic_Numbers_Prelim.poly_mult_rat_main_0",
     "[| ?n ~= (0::?'a); ?d ~= (0::?'a) |]
      ==> (poly_mult_rat_main ?n ?d ?p = 0) = (?p = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0),
         template_equation (template_var 0, template_hole 0)))),
    ("Algebraic_Numbers_Prelim.inverse_roots",
     "?x ~= (0::?'a) ==>
      (ipoly (reflect_poly ?p) ?x = (0::?'a)) =
      (ipoly ?p (inverse ?x) = (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 1, template_var 0))),
             template_var 1),
           template_hole 6),
         template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0)),
             template_app (template_hole 0, template_var 1)),
           template_hole 6)))),
    ("Algebraic_Numbers_Prelim.ipoly_smult_0_iff",
     "?c ~= 0 ==>
      (poly (real_of_int_poly (Polynomial.smult ?c ?p)) ?x = 0) =
      (poly (real_of_int_poly ?p) ?x = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_var 0),
           template_hole 0),
         template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0),
           template_hole 0)))),
    ("Algebraic_Numbers_Prelim.represents_nth_root_pos_real",
     "[| ?n ~= 0; ?p represents ?x; 0 < ?x |]
      ==> poly_nth_root ?n ?p represents root ?n ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.represents_nth_root",
     "[| ?n ~= 0; ?y ^ ?n = ?x; ?p represents ?x |]
      ==> poly_nth_root ?n ?p represents ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 4)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 3),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("Algebraic_Numbers_Prelim.ipoly_add_rat",
     "ipoly (poly_add_rat ?r ?p) ?x =
      of_int (snd (quotient_of ?r)) ^ degree ?p *
      ipoly ?p (?x - of_rat ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)))),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("Algebraic_Numbers_Prelim.gcd_of_int_poly",
     "gcd (of_int_poly ?f) (of_int_poly ?g) =
      Polynomial.smult (inverse (of_int (lead_coeff (gcd ?f ?g))))
       (of_int_poly (gcd ?f ?g))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)))))),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Algebraic_Numbers.poly_y_minus_x_pCons",
     "??.Algebraic_Numbers.poly_y_minus_x (pCons ?a ?p) =
      [:[:?a:]:] +
      ??.Algebraic_Numbers.poly_y_minus_x ?p * ??.Algebraic_Numbers.y_x",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_hole 6)),
             template_hole 5)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 10, template_var 0)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 9, template_hole 3),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 2, template_hole 1)),
                   template_hole 6))),
             template_app
              (template_app (template_hole 7, template_hole 0),
               template_hole 5)))))),
    ("Algebraic_Numbers_Prelim.ipoly_reflect_poly",
     "?x ~= (0::?'a) ==>
      ipoly (reflect_poly ?p) ?x = ?x ^ degree ?p * ipoly ?p (inverse ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, template_var 0))),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 0)),
             template_app (template_hole 0, template_var 1)))))),
    ("Algebraic_Numbers_Prelim.representsE",
     "[| ?p represents ?x;
         [| ?p ~= 0; ipoly ?p ?x = (0::?'a) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_negation
            (template_equation (template_var 2, template_hole 5))],
          template_implication
           ([template_equation
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 2)),
                 template_var 1),
               template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Algebraic_Numbers_Prelim.coprime_prod",
     "[| ?a ~= (0::?'a); ?c ~= (0::?'a);
         comm_monoid_mult_class.coprime (?a * ?b) (?c * ?d) |]
      ==> comm_monoid_mult_class.coprime ?b ?d",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 2)),
        template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Algebraic_Numbers.represents_div",
     "[| ?p represents ?x; ?q represents ?y; poly ?q 0 ~= 0 |]
      ==> poly_div ?p ?q represents ?x / ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebraic_Numbers.represents_mult",
     "[| ?p represents ?x; ?q represents ?y; poly ?q 0 ~= 0 |]
      ==> poly_mult ?p ?q represents ?x * ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.represents_nth_root_neg_real",
     "[| ?n ~= 0; ?p represents ?x; ?x < 0 |]
      ==> poly_uminus (poly_nth_root ?n (poly_uminus ?p)) represents
          root ?n ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_var 0, template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 2, template_var 1)))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebraic_Numbers.coeff_xy_power",
     "?k <= ?n ==>
      coeff (Algebraic_Numbers.x_y ^ ?n) ?k =
      monom (of_nat (?n choose (?n - ?k)) * (- (1::?'a)) ^ ?k) (?n - ?k)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 1)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)),
                 template_var 1))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))))),
    ("Algebraic_Numbers_Prelim.inverse_pow_minus",
     "[| ?x ~= (0::?'a); ?i <= ?n |]
      ==> inverse ?x ^ ?n * ?x ^ ?i = inverse ?x ^ (?n - ?i)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Algebraic_Numbers_Prelim.represents_nth_root_odd_real",
     "[| ?n ~= 0; ?p represents ?x; odd ?n |]
      ==> poly_nth_root ?n ?p represents root ?n ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))),
                  template_var 2)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Algebraic_Numbers.poly_add",
     "[| ?q ~= 0; poly ?p ?x = (0::?'a); poly ?q ?y = (0::?'a) |]
      ==> poly (poly_add ?p ?q) (?x + ?y) = (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_hole 2),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 2))),
    ("Algebraic_Numbers_Prelim.ipoly_mult_rat",
     "?r ~= 0 ==>
      ipoly (poly_mult_rat ?r ?p) ?x =
      of_int (fst (quotient_of ?r)) ^ degree ?p *
      ipoly ?p (?x * inverse (of_rat ?r))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 12))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 2)))),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)))))))),
    ("Algebraic_Numbers_Prelim.representsE_full",
     "[| ?p represents ?x;
         [| ?p ~= 0; ipoly ?p ?x = (0::?'a); degree ?p ~= 0 |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_negation
            (template_equation (template_var 2, template_hole 8))],
          template_implication
           ([template_equation
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 2)),
                 template_var 1),
               template_hole 3)],
            template_implication
             ([template_negation
                (
                   template_equation
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Algebraic_Numbers.coprime_poly_x_mult_y_poly_lift",
     "[| 0 < degree ?p; 0 < degree ?q;
         poly ?p (0::?'a) ~= (0::?'a) | poly ?q (0::?'a) ~= (0::?'a) |]
      ==> comm_monoid_mult_class.coprime (poly_x_mult_y ?p) (poly_lift ?q)",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_hole 3)),
                    template_hole 3))),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_hole 3)),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Algebraic_Numbers_Prelim.irreducible_pos_gcd_twice",
     "[| irreducible ?p; 0 < lead_coeff ?p; irreducible ?q;
         0 < lead_coeff ?q |]
      ==> gcd ?p ?q = 1 | ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app (template_hole 4, template_var 1))),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_app (template_hole 5, template_var 0),
            template_app (template_hole 4, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_hole 0)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Algebraic_Numbers.poly_div",
     "[| ?q ~= 0; poly ?p ?x = (0::?'a); poly ?q ?y = (0::?'a);
         ?y ~= (0::?'a) |]
      ==> poly (poly_div ?p ?q) (?x / ?y) = (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_hole 2),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 0),
          template_hole 2),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 2))),
    ("Algebraic_Numbers_Prelim.not_irreducibleD",
     "[| ~ irreducible ?x; ?x ~= (0::?'a); ~ ?x dvd (1::?'a) |]
      ==> EX y z. ?x = y * z & ~ y dvd (1::?'a) & ~ z dvd (1::?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)
                )
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Algebraic_Numbers.poly_add_nonzero",
     "[| ?p ~= 0; ?q ~= 0; poly ?p ?x = (0::?'a); poly ?q ?y = (0::?'a);
         primitive ?p |]
      ==> poly_add ?p ?q ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 1),
          template_hole 2),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_hole 2),
        template_predicate
         (template_app (template_hole 1, template_var 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_hole 5)
           ))),
    ("Algebraic_Numbers_Prelim.ipoly_mult_rat_main",
     "[| ?d ~= 0; ?n ~= 0 |]
      ==> ipoly (poly_mult_rat_main ?n ?d ?p) ?x =
          of_int ?n ^ degree ?p * ipoly ?p (?x * of_int ?d / of_int ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 9)),
        template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 3),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 5, template_var 2)),
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app (template_hole 5, template_var 3))),
               template_app (template_hole 5, template_var 2))))))),
    ("Algebraic_Numbers.ipoly_poly_div",
     "[| ?q ~= 0; ipoly ?p ?x = (0::?'a); ipoly ?q ?y = (0::?'a);
         ?y ~= (0::?'a) |]
      ==> ipoly (poly_div ?p ?q) (?x / ?y) = (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 7)),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 2)),
            template_var 1),
          template_hole 2),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 3)),
            template_var 0),
          template_hole 2),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 2))),
    ("Algebraic_Numbers.lead_coeff_poly_add",
     "[| monic ?p; monic ?q; 0 < degree ?p; 0 < degree ?q |]
      ==> lead_coeff (poly_add ?p ?q) =
          poly_add_sign (degree ?p) (degree ?q)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1),
            template_app (template_hole 5, template_var 1)),
          template_hole 4),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 0),
            template_app (template_hole 5, template_var 0)),
          template_hole 4),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 5, template_var 0))))),
    ("Algebraic_Numbers.lead_coeff_poly_mult",
     "[| monic ?p; monic ?q; 0 < degree ?p; 0 < degree ?q;
         coeff ?q 0 ~= (0::?'a) |]
      ==> monic (poly_mult ?p ?q)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1),
            template_app (template_hole 6, template_var 1)),
          template_hole 5),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 0),
            template_app (template_hole 6, template_var 0)),
          template_hole 5),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 6, template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 0),
                template_hole 3),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_hole 5))),
    ("Algebraic_Numbers.poly_div_nonzero",
     "[| ?p ~= 0; ?q ~= 0; poly ?p ?x = (0::?'a); poly ?q ?y = (0::?'a);
         poly ?p (0::?'a) ~= (0::?'a) | poly ?q (0::?'a) ~= (0::?'a) |]
      ==> poly_div ?p ?q ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 1),
          template_hole 2),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 3),
                        template_hole 2)),
                    template_hole 2))),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_hole 2)),
                  template_hole 2)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_hole 5)
           ))),
    ("Algebraic_Numbers.ipoly_poly_add",
     "[| of_int (lead_coeff ?p) ~= (0::?'a);
         of_int (lead_coeff ?q) ~= (0::?'a); ipoly ?p ?x = (0::?'a);
         ipoly ?q ?y = (0::?'a) |]
      ==> ipoly (poly_add ?p ?q) (?x + ?y) = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 3))),
              template_hole 4)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 2))),
              template_hole 4)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 7),
                template_var 3)),
            template_var 1),
          template_hole 4),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 7),
                template_var 2)),
            template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 7),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 4))),
    ("Algebraic_Numbers.ipoly_poly_div_nonzero",
     "[| ?p ~= 0; ?q ~= 0; ipoly ?p ?x = (0::?'a); ipoly ?q ?y = (0::?'a);
         poly ?p 0 ~= 0 | poly ?q 0 ~= 0 |]
      ==> poly_div ?p ?q ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 10)),
        template_negation
         (template_equation (template_var 2, template_hole 10)),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 3)),
            template_var 1),
          template_hole 5),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 2)),
            template_var 0),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_hole 1)),
                    template_hole 1))),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_hole 1)),
                  template_hole 1)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_hole 10)
           ))),
    ("Algebraic_Numbers.ipoly_poly_add_nonzero",
     "[| ?p ~= 0; ?q ~= 0; ipoly ?p ?x = (0::?'a); ipoly ?q ?y = (0::?'a);
         of_int (lead_coeff ?p) ~= (0::?'a);
         of_int (lead_coeff ?q) ~= (0::?'a) |]
      ==> poly_add ?p ?q ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 8)),
        template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 3)),
            template_var 1),
          template_hole 3),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2)),
            template_var 0),
          template_hole 3),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 3))),
              template_hole 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 2))),
              template_hole 3)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_hole 8)
           )))]
