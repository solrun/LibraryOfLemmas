   [("Sturm_Rat.sign_changes_number_rootat",
     "sign_changes_inf (map real_of_rat_poly ?ps) =
      sign_changes_number_rootat ?ps",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sturm_Rat.sign_changes_neg_number_rootat",
     "sign_changes_neg_inf (map real_of_rat_poly ?ps) =
      sign_changes_neg_number_rootat ?ps",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Sturm_Rat.poly_number_rootat",
     "poly_inf (real_of_rat_poly ?p) = real_of_rat (poly_number_rootat ?p)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Sturm_Rat.poly_neg_number_rootat",
     "poly_neg_inf (real_of_rat_poly ?p) =
      real_of_rat (poly_neg_number_rootat ?p)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Sturm_Rat.square_free_of_int_poly",
     "square_free ?p ==> square_free (of_int_poly ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Sturm_Rat.count_roots_interval_rat",
     "square_free ?p ==> root_info_cond (count_roots_interval_rat ?p) ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Sturm_Rat.real_of_rat_remdups_adj",
     "remdups_adj (map real_of_rat ?xs) =
      map real_of_rat (remdups_adj ?xs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Sturm_Rat.of_rat_of_int_poly",
     "map_poly of_rat (of_int_poly ?p) = of_int_poly ?p",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Sturm_Rat.count_roots_interval_iff",
     "square_free ?p ==>
      count_roots_interval ?p = count_roots_interval_sf ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Sturm_Rat.sturm_rat",
     "sturm (real_of_rat_poly ?p) = map real_of_rat_poly (sturm_rat ?p)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 0, template_var 0)))),
    ("Sturm_Rat.count_roots_interval_sf_rat",
     "?p ~= 0 ==>
      root_info_cond (Sturm_Rat.count_roots_interval_sf_rat ?p) ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Sturm_Rat.sign_changes_rat",
     "sign_changes (map real_of_rat_poly ?ps) (real_of_rat ?x) =
      sign_changes_rat ?ps ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Sturm_Rat.root_primitive_part",
     "(poly (primitive_part ?p) ?x = (0::?'a)) = (poly ?p ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 0))),
    ("Sturm_Rat.count_roots_rat",
     "count_roots_rat ?p = card {x. poly (real_of_int_poly ?p) x = 0}",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("Sturm_Rat.sturm_aux_rat",
     "sturm_aux (real_of_rat_poly ?p) (real_of_rat_poly ?q) =
      map real_of_rat_poly (sturm_aux_rat ?p ?q)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Sturm_Rat.irreducible_primitive_part",
     "[| irreducible ?p; 0 < degree ?p |] ==> primitive_part ?p = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Sturm_Rat.root_info",
     "[| irreducible ?p; 0 < degree ?p |]
      ==> root_info_cond (root_info ?p) ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Sturm_Rat.real_of_rat_list_neq",
     "list_neq (map real_of_rat ?xs) 0 = map real_of_rat (list_neq ?xs 0)",
     template_equation
      (template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Sturm_Rat.count_roots_rat_code",
     "count_roots_rat ?p =
      (let rp = of_int_poly ?p
       in if ?p = 0 then 0
          else let ps = sturm_rat rp
               in sign_changes_neg_number_rootat ps -
                  sign_changes_number_rootat ps)",
     template_equation
      (template_app (template_hole 12, template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 0)),
         t_empty))),
    ("Sturm_Rat.root_info_condD",
     "root_info_cond ?ri ?p ==>
      root_info.number_root ?ri ?a =
      card {x. x <= real_of_rat ?a & poly (real_of_int_poly ?p) x = 0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 10, template_var 2), template_var 0),
         template_app
          (template_hole 9, template_app (template_hole 8, t_empty))))),
    ("Sturm_Rat.root_info_condD",
     "[| root_info_cond ?ri ?p; ?a <= ?b |]
      ==> root_info.l_r ?ri ?a ?b = card {x. root_cond (?p, ?a, ?b) x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Sturm_Rat.count_roots_interval",
     "[| count_roots_interval ?p = (?cr, ?nr); square_free ?p |]
      ==> ?nr ?a = card {x. x <= ?a & poly ?p x = 0}",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 3),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 3))],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("Sturm_Rat.count_roots_interval_sf",
     "[| ?p ~= 0; count_roots_interval_sf ?p = (?cr, ?nr) |]
      ==> ?nr ?a = card {x. x <= ?a & poly ?p x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 11)),
        template_equation
         (template_app (template_hole 9, template_var 3),
          template_app
           (template_app (template_hole 8, template_var 2),
            template_var 1))],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("Sturm_Rat.count_roots_interval",
     "[| count_roots_interval ?p = (?cr, ?nr); square_free ?p; ?a <= ?b |]
      ==> ?cr ?a ?b = card {x. ?a <= x & x <= ?b & poly ?p x = 0}",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 4),
          template_app
           (template_app (template_hole 9, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 4)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 1), template_var 0),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Sturm_Rat.count_roots_interval_rat_code",
     "count_roots_interval_rat ?p =
      (let rp = of_int_poly ?p; ps = sturm_rat rp
       in Root_Info
           (%a b. sign_changes_rat ps a - sign_changes_rat ps b +
                  (if poly rp a = 0 then 1 else 0))
           (%a. sign_changes_neg_number_rootat ps -
                sign_changes_rat ps a))",
     template_equation
      (template_app (template_hole 16, template_var 0),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_hole 13),
             template_var 0)),
         t_empty))),
    ("Sturm_Rat.count_roots_interval_sf",
     "[| ?p ~= 0; count_roots_interval_sf ?p = (?cr, ?nr); ?a <= ?b |]
      ==> ?cr ?a ?b = card {x. ?a <= x & x <= ?b & poly ?p x = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 11)),
        template_equation
         (template_app (template_hole 9, template_var 4),
          template_app
           (template_app (template_hole 8, template_var 3),
            template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 1), template_var 0),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty)))))]
