Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FunctorsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.FuncSet" (required by "Draft.FunctorsMoreTemplates" via "Draft.Functors" via "Draft.Category")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FunctorsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FunctorsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.628s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FunctorsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.247s elapsed time, 1.000s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FunctorsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.295s cpu time, 0.140s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FunctorsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.398s elapsed time, 1.588s cpu time, 0.140s GC time
Loading theory "Draft.Category" (required by "Draft.FunctorsMoreTemplates" via "Draft.Functors")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale ExtCategory
  fixes C :: "('o, 'm, 'a) Category_scheme"  (structure)
  assumes "ExtCategory C"
locale Category
  fixes C :: "('a, 'b, 'c) Category_scheme"  (structure)
  assumes "Category C"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.Category"
### 0.855s elapsed time, 3.158s cpu time, 0.900s GC time
Loading theory "Draft.Functors" (required by "Draft.FunctorsMoreTemplates")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.040s elapsed time, 3.895s cpu time, 0.900s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.123s elapsed time, 4.124s cpu time, 1.003s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale PreFunctor
  fixes
    F :: "('o1, 'o2, 'm1, 'm2, 'a1, 'a2, 'a) Functor_scheme"  (structure)
  assumes "PreFunctor F"
locale FunctorM
  fixes F :: "('a, 'b, 'c, 'd, 'e, 'f, 'g) Functor_scheme"  (structure)
  assumes "FunctorM F"
locale FunctorExt
  fixes
    F :: "('o1, 'o2, 'm1, 'm2, 'a1, 'a2, 'a) Functor_scheme"  (structure)
  assumes "FunctorExt F"
locale Functor
  fixes F :: "('a, 'b, 'c, 'd, 'e, 'f, 'g) Functor_scheme"  (structure)
  assumes "Functor F"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Equivalence
  fixes F :: "('a, 'b, 'c, 'd, 'e, 'f, 'g) Functor_scheme"  (structure)
  assumes "Equivalence F"
### theory "Draft.Functors"
### 0.675s elapsed time, 1.683s cpu time, 0.245s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.000s elapsed time, 6.075s cpu time, 1.239s GC time
Loading theory "Draft.Templates" (required by "Draft.FunctorsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FunctorsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.481s elapsed time, 0.529s cpu time, 0.058s GC time
Loading theory "Draft.FunctorsMoreTemplates"
val templateLemmas =
   [("Functors.FunctorMFunctor", "Functor ?F ==> FunctorM ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Functors.PreFunctorFunctor", "Functor ?F ==> PreFunctor ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Functors.IdFtorFtor", "Category ?C ==> Functor FId ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Functors.UnitFtor", "Category ?C ==> Functor (UnitFunctor ?C)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Functors.IdFtor'FtorM", "Category ?C ==> FunctorM FId' ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Functors.IdFtor'PreFunctor", "Category ?C ==> PreFunctor FId' ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Functors.MakeFtor", "FunctorM ?F ==> Functor (MakeFtor ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Functors.MakeFtorPreFtor",
     "PreFunctor ?F ==> PreFunctor (MakeFtor ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Functors.FtorComp", "?F \<approx>>;;; ?G ==> Functor (?F ;;; ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Functors.FtorCompM", "?F \<approx>>;;; ?G ==> FunctorM (?F ;;: ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Functors.FtorCompPreFtor",
     "?F \<approx>>;;; ?G ==> PreFunctor (?F ;;: ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Functors.MakeFtorMor",
     "?f : mor\<^bsub>CatDom ?F\<^esub> ==> MakeFtor ?F ## ?f = ?F ## ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Functors.IdFtor'Obj",
     "[| Category ?C; ?X : obj\<^bsub>CatDom FId' ?C\<^esub> |]
      ==> FId' ?C @@ ?X = ?X",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_var 0))),
    ("Functors.MakeFtorObj",
     "[| PreFunctor ?F; ?X : obj\<^bsub>CatDom ?F\<^esub> |]
      ==> MakeFtor ?F @@ ?X = ?F @@ ?X",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Functors.ConstFtor",
     "[| Category ?A; Category ?B; ?b : obj\<^bsub>?B\<^esub> |]
      ==> Functor (ConstFunctor ?A ?B ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Functors.ConstFtor'",
     "[| Category ?A; Category ?B; ?b : obj\<^bsub>?B\<^esub> |]
      ==> FunctorM (ConstFunctor' ?A ?B ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Functors.ConstFtor'",
     "[| Category ?A; Category ?B; ?b : obj\<^bsub>?B\<^esub> |]
      ==> PreFunctor (ConstFunctor' ?A ?B ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Functors.FunctorCompDef",
     "[| Ftor ?F : ?A \<longrightarrow> ?B;
         ?f \<approx>>\<^bsub>?A\<^esub> ?g |]
      ==> ?F ## ?f \<approx>>\<^bsub>?B\<^esub> ?F ## ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))
           ))),
    ("Functors.FunctorId",
     "[| Ftor ?F : ?C \<longrightarrow> ?D; ?X : obj\<^bsub>?C\<^esub> |]
      ==> ?F ## id\<^bsub>?C\<^esub> ?X = id\<^bsub>?D\<^esub> (?F @@ ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Functors.FunctorMapsTo",
     "[| Ftor ?F : ?A \<longrightarrow> ?B;
         ?f maps\<^bsub>?A\<^esub> ?X to ?Y |]
      ==> ?F ## ?f maps\<^bsub>?B\<^esub> ?F @@ ?X to ?F @@ ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 0))
           ))),
    ("Functors.functor_abbrevE",
     "[| Ftor ?F : ?A \<longrightarrow> ?B;
         [| Functor ?F; CatDom ?F = ?A; CatCod ?F = ?B |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 4, template_var 3))],
          template_implication
           ([template_equation
              (template_app (template_hole 2, template_var 3),
               template_var 2)],
            template_implication
             ([template_equation
                (template_app (template_hole 0, template_var 3),
                 template_var 1)],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Functors.functor_simps",
     "[| PreFunctor ?F; ?X : obj\<^bsub>CatDom ?F\<^esub> |]
      ==> EX Y:obj\<^bsub>CatCod ?F\<^esub>.
             ?F ## id\<^bsub>CatDom ?F\<^esub> ?X =
             id\<^bsub>CatCod ?F\<^esub> Y",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1))),
             t_empty)
           ))),
    ("Functors.FunctorComp",
     "[| Ftor ?F : ?A \<longrightarrow> ?B;
         ?f \<approx>>\<^bsub>?A\<^esub> ?g |]
      ==> ?F ## ?f ;;\<^bsub>?A\<^esub> ?g =
          ?F ## ?f ;;\<^bsub>?B\<^esub> (?F ## ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 0))))),
    ("Functors.functor_simps",
     "[| PreFunctor ?F; ?f \<approx>>\<^bsub>CatDom ?F\<^esub> ?g |]
      ==> ?F ## ?f ;;\<^bsub>CatDom ?F\<^esub> ?g =
          ?F ## ?f ;;\<^bsub>CatCod ?F\<^esub> (?F ## ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 5, template_var 2)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))))),
    ("Functors.FtorCompIdDef",
     "[| ?X : obj\<^bsub>CatDom ?F\<^esub>; PreFunctor (?F ;;: ?G);
         ?F \<approx>>;;; ?G |]
      ==> ?F ;;: ?G @@ ?X = ?G @@ ?F @@ ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Functors.FtorCompComp'",
     "[| ?f \<approx>>\<^bsub>CatDom ?F\<^esub> ?g; ?F \<approx>>;;; ?G |]
      ==> ?G ## ?F ## ?f ;;\<^bsub>CatDom ?F\<^esub> ?g =
          ?G ## ?F ## ?f ;;\<^bsub>CatCod ?G\<^esub> (?G ## ?F ## ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 7, template_var 3)),
                 template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2))),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)))))),
    ("Functors.FunctorCompMapsTo",
     "[| ?f : mor\<^bsub>CatDom (?F ;;: ?G)\<^esub>; ?F \<approx>>;;; ?G |]
      ==> ?G ##
          ?F ##
          ?f maps\<^bsub>CatCod ?G\<^esub> ?G @@
     ?F @@
     dom\<^bsub>CatDom ?F\<^esub> ?f to ?G @@
  ?F @@ cod\<^bsub>CatDom ?F\<^esub> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 0)),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 2))),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_var 2)))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 1, template_var 1)),
                   template_var 2))))
           ))),
    ("Functors.FtorCompId",
     "[| ?X : obj\<^bsub>CatDom ?F\<^esub>; ?F \<approx>>;;; ?G |]
      ==> ?G ## ?F ## id\<^bsub>CatDom ?F\<^esub> ?X =
          id\<^bsub>CatCod ?G\<^esub> (?G @@ ?F @@ ?X) &
          ?G @@ ?F @@ ?X : obj\<^bsub>CatCod ?G\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 12, template_var 1)),
                         template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2))))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 2))),
               template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("Functors.FunctorCompMapsTo3",
     "[| ?f maps\<^bsub>CatDom (?F ;;: ?G)\<^esub> ?X to ?Y;
         ?F \<approx>>;;; ?G; PreFunctor (?F ;;: ?G) |]
      ==> ?F ;;: ?G ##
          ?f maps\<^bsub>CatCod (?F ;;: ?G)\<^esub> ?F ;;: ?G @@
              ?X to ?F ;;: ?G @@ ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 4),
                        template_var 3))),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 6, template_var 4),
                       template_var 3))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 6, template_var 4),
                       template_var 3)),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 3)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_var 3)),
               template_var 0))
           ))),
    ("Functors.FunctorCompMapsTo2",
     "[| ?f : mor\<^bsub>CatDom (?F ;;: ?G)\<^esub>; ?F \<approx>>;;; ?G;
         PreFunctor (?F ;;: ?G) |]
      ==> ?F ;;: ?G ##
          ?f maps\<^bsub>CatCod (?F ;;: ?G)\<^esub> ?F ;;: ?G @@
              dom\<^bsub>CatDom (?F ;;: ?G)\<^esub> ?f to ?F ;;: ?G @@
                    cod\<^bsub>CatDom (?F ;;: ?G)\<^esub> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_var 0)),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_var 1),
                         template_var 0))),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_var 0))),
                 template_var 2)))
           )))]:
   (string * thm * template) list
### theory "Draft.FunctorsMoreTemplates"
### 0.354s elapsed time, 0.503s cpu time, 0.077s GC time
val it = (): unit
