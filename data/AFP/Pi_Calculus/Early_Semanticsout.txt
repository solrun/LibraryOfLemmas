Loading theory "Draft.Agent" (required by "Draft.Early_SemanticsTemplates" via "Draft.Early_Semantics")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Early_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Early_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Early_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.578s cpu time, 0.056s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Early_SemanticsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.249s elapsed time, 1.005s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Early_SemanticsTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.293s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Early_SemanticsTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.955s elapsed time, 3.607s cpu time, 0.820s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.016s elapsed time, 3.743s cpu time, 0.785s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.968s elapsed time, 6.089s cpu time, 1.043s GC time
Loading theory "Draft.Templates" (required by "Draft.Early_SemanticsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Early_SemanticsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.138s cpu time, 0.121s GC time
### length descr: 3
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: pi_Rep_set
Proofs for inductive predicate(s) "pi_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "pi_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 125 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/Pi_Calculus/Agent.thy") produces 80 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/Pi_Calculus/Agent.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" a))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" a))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 243 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 255 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 285 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subs" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subst_name" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seqSubs :: "pi => (name * name) list => pi"
### Ambiguous input (line 310 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subs" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subst_name" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seq_subst_name :: "name => (name * name) list => name"
### Ambiguous input (line 377 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Agent"
### 3.575s elapsed time, 8.906s cpu time, 1.336s GC time
Loading theory "Draft.Early_Semantics" (required by "Draft.Early_SemanticsTemplates")
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: freeRes_Rep_set
Proofs for inductive predicate(s) "freeRes_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "freeRes_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: residual_Rep_set
Proofs for inductive predicate(s) "residual_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "residual_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 42 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^fixed>TransitionsEarly" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>TransitionsEarly" ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u)))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###           ("_position" u))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u)))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###           ("_position" u))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>TransitionsEarly"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>TransitionsEarly"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" V)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" V))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" V)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "TransitionsEarly"
  Proving monotonicity ...
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### Ambiguous input (line 81 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 99 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###         ("_position" u)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 274 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P) ("_idts" ("_position" u) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" a))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###                   ("_position" u))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P) ("_idts" ("_position" u) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" a))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###                   ("_position" u))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 276 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 277 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 278 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 279 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 280 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 281 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" u)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" u)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 283 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 291 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" r)))
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" u) ("_tuple_arg" ("_position" r))))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" r))
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" u) ("_tuple_arg" ("_position" r))))
###         ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 338 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 365 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x)))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x))
###       ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 368 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 413 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 415 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 416 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 418 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 419 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 421 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 423 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 441 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 442 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 638 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 640 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" a) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" a) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 641 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 642 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 643 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 644 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 645 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 646 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 647 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 648 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 650 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 652 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "bangPred"
  Proving monotonicity ...
### Ambiguous input (line 668 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 671 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 673 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" A))
###       ("_position" \<alpha>))
###     ("_position" A')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" A))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" A'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 680 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Tau" ("_position" P)) ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 693 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 694 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" u)
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###           ("_position" u))))))
### ("\<^const>Pure.all_binder" ("_position" u)
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###           ("_position" u))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 727 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 748 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" a)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" a)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 775 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 875 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" PQ'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 876 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 877 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 890 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b)))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b))
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 891 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 892 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 905 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 906 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 908 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 909 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 910 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 911 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1033 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" RP')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" RP'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1035 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("_position" \<alpha>))
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1090 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" y)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" y)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Nominal.perm"
###           ("_list"
###             ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###           ("_position" P'))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" y))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" y)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Nominal.perm"
###           ("_list"
###             ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1198 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" \<alpha>) ("_type_name" freeRes))
###     ("_idts" ("_idtyp" ("_position" P') ("_type_name" pi)) ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" \<alpha>) ("_type_name" freeRes))
###     ("_idts" ("_idtyp" ("_position" P') ("_type_name" pi)) ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1200 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Bang" ("_position" P))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Early_Semantics.Transitions_Freejudge"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Early_Semantics.Transitions_Freejudge"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1201 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1203 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1205 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.residual.BoundOutputR"
###                           ("_position" a) ("_position" x)
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.residual.BoundOutputR"
###                           ("_position" a) ("_position" x)
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1207 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.Transitions_Freejudge"
###                           ("\<^const>Early_Semantics.freeRes.InputR"
###                             ("_position" a) ("_position" x))
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x)))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.Transitions_Freejudge"
###                           ("\<^const>Early_Semantics.freeRes.InputR"
###                             ("_position" a) ("_position" x))
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Early_Semantics"
### 1.622s elapsed time, 1.750s cpu time, 0.161s GC time
Loading theory "Draft.Early_SemanticsTemplates"
val templateLemmas =
   [("Early_Semantics.freeRes_perm_empty",
     "[] \<bullet> ?freeRes_Rep = ?freeRes_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Early_Semantics.residual_perm_empty",
     "[] \<bullet> ?residual_Rep = ?residual_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Early_Semantics.zeroTrans", "\<zero> \<longmapsto> ?e ?Rs ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app (template_var 1, template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Early_Semantics.mismatchTrans",
     "[?a\<noteq>?a]?P \<longmapsto> ?Rs ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Early_Semantics.freeRes_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?freeRes_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?freeRes_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Early_Semantics.residual_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?residual_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?residual_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Early_Semantics.freeRes_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?freeRes_Rep = ?pi2.0 \<bullet> ?freeRes_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Early_Semantics.residual_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?residual_Rep = ?pi2.0 \<bullet> ?residual_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Early_Semantics.Input",
     "?a<?x>.?P \<longmapsto> ?a<?u> \<prec> ?P[?x::=?u]",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0)))
         )),
    ("Early_Semantics.freshTauTransition",
     "[| ?P \<longmapsto> \<tau> \<prec> ?P'; ?c \<sharp> ?P |]
      ==> ?c \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Early_Semantics.tauCases",
     "[| \<tau>.?P \<longmapsto> ?\<alpha> \<prec> ?P'; ?Prop (\<tau>) ?P |]
      ==> ?Prop ?\<alpha> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Early_Semantics.substTrans",
     "?b \<sharp> ?P ==> ?P[?a::=?b][?b::=?c] = ?P[?a::=?c]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 3)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Early_Semantics.freshBoundOutputAction",
     "[| ?P \<longmapsto> ?a<\<nu>?x> \<prec> ?P'; ?c \<sharp> ?P |]
      ==> ?c ~= ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            )],
       template_negation
        (template_equation (template_var 0, template_var 3)))),
    ("Early_Semantics.freshAction",
     "[| ?P \<longmapsto> ?a[?b] \<prec> ?P'; ?c \<sharp> ?P |]
      ==> ?c \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Early_Semantics.freshInputAction",
     "[| ?P \<longmapsto> ?a<?b> \<prec> ?P'; ?c \<sharp> ?P |]
      ==> ?c ~= ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            )],
       template_negation
        (template_equation (template_var 0, template_var 3)))),
    ("Early_Semantics.freshAction",
     "[| ?P \<longmapsto> ?a[?b] \<prec> ?P'; ?c \<sharp> ?P |]
      ==> ?c ~= ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            )],
       template_negation
        (template_equation (template_var 0, template_var 3)))),
    ("Early_Semantics.freshAction",
     "[| ?P \<longmapsto> ?a[?b] \<prec> ?P'; ?c \<sharp> ?P |]
      ==> ?c ~= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            )],
       template_negation
        (template_equation (template_var 0, template_var 2)))),
    ("Early_Semantics.alphaBoundOutput",
     "?x' \<sharp> ?P ==>
      ?a<\<nu>?x> \<prec> ?P =
      ?a<\<nu>?x'> \<prec> ([(?x, ?x')] \<bullet> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 3),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 3)),
                 template_hole 0)),
             template_var 2))))),
    ("Early_Semantics.outputCases",
     "[| ?a{?b}.?P \<longmapsto> ?\<alpha> \<prec> ?P'; ?Prop (?a[?b]) ?P |]
      ==> ?Prop ?\<alpha> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 0,
                template_app
                 (template_app (template_hole 0, template_var 5),
                  template_var 4)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Early_Semantics.freshFreeTransition",
     "[| ?P \<longmapsto> ?\<alpha> \<prec> ?P'; ?c \<sharp> ?P;
         ?c \<sharp> ?\<alpha> |]
      ==> ?c \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Early_Semantics.matchCases",
     "[| [?a\<frown>?b]?P \<longmapsto> ?Rs;
         ?P \<longmapsto> ?Rs ==> ?F ?a ?a |]
      ==> ?F ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 0, template_var 4),
                template_var 4)
              ))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 4), template_var 3)
           ))),
    ("Early_Semantics.freshBoundOutputTransition",
     "[| ?P \<longmapsto> ?a<\<nu>?x> \<prec> ?P'; ?c \<sharp> ?P;
         ?c ~= ?x |]
      ==> ?c \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), template_var 1)
           ))),
    ("Early_Semantics.Par1B",
     "[| ?P \<longmapsto> ?a<\<nu>?x> \<prec> ?P'; ?x \<sharp> ?Q |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> ?a<\<nu>?x> \<prec> (?P' \<parallel> ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Early_Semantics.Par2B",
     "[| ?Q \<longmapsto> ?a<\<nu>?x> \<prec> ?Q'; ?x \<sharp> ?P |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> ?a<\<nu>?x> \<prec> (?P \<parallel> ?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Early_Semantics.freshInputTransition",
     "[| ?P \<longmapsto> ?a<?u> \<prec> ?P'; ?c \<sharp> ?P; ?c ~= ?u |]
      ==> ?c \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), template_var 1)
           ))),
    ("Early_Semantics.sumCases",
     "[| ?P \<oplus> ?Q \<longmapsto> ?Rs; ?P \<longmapsto> ?Rs ==> ?F;
         ?Q \<longmapsto> ?Rs ==> ?F |]
      ==> ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Early_Semantics.inputCases",
     "[| ?a<?x>.?P \<longmapsto> ?\<alpha> \<prec> ?P';
         !!u. ?Prop (?a<u>) (?P[?x::=u]) |]
      ==> ?Prop ?\<alpha> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Early_Semantics.tauCases'",
     "[| \<tau>.?P \<longmapsto> ?Rs;
         !!P. [| \<tau>.?P = \<tau>.P; ?Rs = \<tau> \<prec> P |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.mismatchCases",
     "[| [?a\<noteq>?b]?P \<longmapsto> ?Rs;
         [| ?P \<longmapsto> ?Rs; ?a ~= ?b |] ==> ?F ?a ?b |]
      ==> ?F ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_negation
              (template_equation (template_var 4, template_var 3))],
            template_predicate
             (
                template_app
                 (template_app (template_var 0, template_var 4),
                  template_var 3)
                )))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 4), template_var 3)
           ))),
    ("Early_Semantics.ResB",
     "[| ?P \<longmapsto> ?a<\<nu>?x> \<prec> ?P'; ?y ~= ?a; ?y ~= ?x |]
      ==> <\<nu>?y>?P \<longmapsto> ?a<\<nu>?x> \<prec> (<\<nu>?y>?P')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 0, template_var 3)),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Early_Semantics.resCasesF",
     "[| <\<nu>?x>?P \<longmapsto> ?\<alpha> \<prec> ?RP';
         ?x \<sharp> ?\<alpha>;
         !!P'. ?P \<longmapsto> ?\<alpha> \<prec> P' ==> ?F (<\<nu>?x>P') |]
      ==> ?F ?RP'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Early_Semantics.inputAlpha",
     "[| ?P \<longmapsto> ?a<?u> \<prec> ?P'; ?u \<sharp> ?P;
         ?r \<sharp> ?P' |]
      ==> ?P \<longmapsto> ?a<?r> \<prec> [(?u, ?r)] \<bullet> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 4),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 0)),
                     template_hole 0)),
                 template_var 1)))
           ))),
    ("Early_Semantics.Close2",
     "[| ?P \<longmapsto> ?a<\<nu>?x> \<prec> ?P';
         ?Q \<longmapsto> ?a<?x> \<prec> ?Q'; ?x \<sharp> ?Q |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> \<tau> \<prec> <\<nu>?x>(?P' \<parallel> ?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))))
           ))),
    ("Early_Semantics.Close1",
     "[| ?P \<longmapsto> ?a<?x> \<prec> ?P';
         ?Q \<longmapsto> ?a<\<nu>?x> \<prec> ?Q'; ?x \<sharp> ?P |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> \<tau> \<prec> <\<nu>?x>(?P' \<parallel> ?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))))
           ))),
    ("Early_Semantics.matchCases'",
     "[| [?a\<frown>?b]?P \<longmapsto> ?Rs;
         !!P b.
            [| ?a = b & ?b = b & ?P = P; P \<longmapsto> ?Rs |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.outputCases'",
     "[| ?a{?b}.?P \<longmapsto> ?Rs;
         !!a b P.
            [| ?a = a & ?b = b & ?P = P; ?Rs = a[b] \<prec> P |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.mismatchCases'",
     "[| [?a\<noteq>?b]?P \<longmapsto> ?Rs;
         !!P a b.
            [| ?a = a & ?b = b & ?P = P; P \<longmapsto> ?Rs; a ~= b |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.parCasesInput",
     "[| ?P \<parallel> ?Q \<longmapsto> ?a<?b> \<prec> ?PQ';
         !!P'. ?P \<longmapsto> ?a<?b> \<prec> P' ==>
               ?F (P' \<parallel> ?Q);
         !!Q'. ?Q \<longmapsto> ?a<?b> \<prec> Q' ==>
               ?F (?P \<parallel> Q') |]
      ==> ?F ?PQ'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Early_Semantics.parCasesOutput",
     "[| ?P \<parallel> ?Q \<longmapsto> ?a[?b] \<prec> ?PQ';
         !!P'. ?P \<longmapsto> ?a[?b] \<prec> P' ==>
               ?F (P' \<parallel> ?Q);
         !!Q'. ?Q \<longmapsto> ?a[?b] \<prec> Q' ==>
               ?F (?P \<parallel> Q') |]
      ==> ?F ?PQ'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Early_Semantics.sumCases'",
     "[| ?P \<oplus> ?Q \<longmapsto> ?Rs;
         !!P Q. [| ?P = P & ?Q = Q; P \<longmapsto> ?Rs |] ==> ?Pa;
         !!Q P. [| ?P = P & ?Q = Q; Q \<longmapsto> ?Rs |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.resCasesF'",
     "[| <\<nu>?x>?A \<longmapsto> ?\<alpha> \<prec> ?A';
         !!P \<alpha> P' y.
            [| <\<nu>?x>?A = <\<nu>y>P;
               ?\<alpha> \<prec> ?A' = \<alpha> \<prec> <\<nu>y>P';
               P \<longmapsto> \<alpha> \<prec> P'; y \<sharp> \<alpha> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.parCasesB",
     "[| ?P \<parallel> ?Q \<longmapsto> ?a<\<nu>?x> \<prec> ?PQ';
         !!P'. [| ?P \<longmapsto> ?a<\<nu>?x> \<prec> P'; ?x \<sharp> ?Q |]
               ==> ?F (P' \<parallel> ?Q);
         !!Q'. [| ?Q \<longmapsto> ?a<\<nu>?x> \<prec> Q'; ?x \<sharp> ?P |]
               ==> ?F (?P \<parallel> Q') |]
      ==> ?F ?PQ'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Early_Semantics.inputCases'",
     "[| ?a<?b>.?P \<longmapsto> ?Rs;
         !!x a u P.
            [| ?a = a & [?b].?P = [x].P; ?Rs = a<u> \<prec> P[x::=u];
               x ~= a; x ~= u |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.resCasesB",
     "[| <\<nu>?y>?P \<longmapsto> ?a<\<nu>?x> \<prec> ?RP'; ?x ~= ?y;
         !!P'. [| ?P \<longmapsto> ?a[?y] \<prec> P'; ?a ~= ?y |]
               ==> ?F ([(?x, ?y)] \<bullet> P');
         !!P'. [| ?P \<longmapsto> ?a<\<nu>?x> \<prec> P'; ?y ~= ?a |]
               ==> ?F (<\<nu>?y>P') |]
      ==> ?F ?RP'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 2, template_var 5)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Early_Semantics.resCasesB'",
     "[| <\<nu>?x'>?A \<longmapsto> ?a<\<nu>?y'> \<prec> ?A';
         !!P a b P'.
            [| <\<nu>?x'>?A = <\<nu>b>P;
               ?a<\<nu>?y'> \<prec> ?A' = a<\<nu>b> \<prec> P';
               P \<longmapsto> a[b] \<prec> P'; a ~= b |]
            ==> ?P;
         !!P a x P' y.
            [| <\<nu>?x'>?A = <\<nu>y>P;
               ?a<\<nu>?y'> \<prec> ?A' = a<\<nu>x> \<prec> (<\<nu>y>P');
               P \<longmapsto> a<\<nu>x> \<prec> P'; y ~= a; y ~= x;
               x \<sharp> P; x ~= a |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.parCasesB'",
     "[| ?A \<parallel> ?B \<longmapsto> ?b<\<nu>?y> \<prec> ?A';
         !!P a x P' Q.
            [| ?A \<parallel> ?B = P \<parallel> Q;
               ?b<\<nu>?y> \<prec> ?A' =
               a<\<nu>x> \<prec> (P' \<parallel> Q);
               P \<longmapsto> a<\<nu>x> \<prec> P'; x \<sharp> P;
               x \<sharp> Q; x ~= a |]
            ==> ?P;
         !!Q a x Q' P.
            [| ?A \<parallel> ?B = P \<parallel> Q;
               ?b<\<nu>?y> \<prec> ?A' =
               a<\<nu>x> \<prec> (P \<parallel> Q');
               Q \<longmapsto> a<\<nu>x> \<prec> Q'; x \<sharp> P;
               x \<sharp> Q; x ~= a |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.parCasesF",
     "[| ?P \<parallel> ?Q \<longmapsto> ?\<alpha> \<prec> ?PQ';
         !!P'. ?P \<longmapsto> ?\<alpha> \<prec> P' ==>
               ?F ?\<alpha> (P' \<parallel> ?Q);
         !!Q'. ?Q \<longmapsto> ?\<alpha> \<prec> Q' ==>
               ?F ?\<alpha> (?P \<parallel> Q');
         !!P' Q' a b.
            [| ?P \<longmapsto> a<b> \<prec> P';
               ?Q \<longmapsto> a[b] \<prec> Q' |]
            ==> ?F (\<tau>) (P' \<parallel> Q');
         !!P' Q' a b.
            [| ?P \<longmapsto> a[b] \<prec> P';
               ?Q \<longmapsto> a<b> \<prec> Q' |]
            ==> ?F (\<tau>) (P' \<parallel> Q');
         !!P' Q' a x.
            [| ?P \<longmapsto> a<x> \<prec> P';
               ?Q \<longmapsto> a<\<nu>x> \<prec> Q'; x \<sharp> ?P;
               x \<sharp> ?C |]
            ==> ?F (\<tau>) (<\<nu>x>(P' \<parallel> Q'));
         !!P' Q' a x.
            [| ?P \<longmapsto> a<\<nu>x> \<prec> P';
               ?Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> ?Q;
               x \<sharp> ?C |]
            ==> ?F (\<tau>) (<\<nu>x>(P' \<parallel> Q')) |]
      ==> ?F ?\<alpha> ?PQ'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 3), template_var 2)
           ))),
    ("Early_Semantics.parCasesF'",
     "[| ?P \<parallel> ?Q \<longmapsto> ?\<alpha> \<prec> ?P';
         !!P \<alpha> P' Q.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' = \<alpha> \<prec> P' \<parallel> Q;
               P \<longmapsto> \<alpha> \<prec> P' |]
            ==> ?Pa;
         !!Q \<alpha> Q' P.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' = \<alpha> \<prec> P \<parallel> Q';
               Q \<longmapsto> \<alpha> \<prec> Q' |]
            ==> ?Pa;
         !!P a b P' Q Q'.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' = \<tau> \<prec> P' \<parallel> Q';
               P \<longmapsto> a<b> \<prec> P';
               Q \<longmapsto> a[b] \<prec> Q' |]
            ==> ?Pa;
         !!P a b P' Q Q'.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' = \<tau> \<prec> P' \<parallel> Q';
               P \<longmapsto> a[b] \<prec> P';
               Q \<longmapsto> a<b> \<prec> Q' |]
            ==> ?Pa;
         !!P a x P' Q Q'.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' =
               \<tau> \<prec> <\<nu>x>(P' \<parallel> Q');
               P \<longmapsto> a<x> \<prec> P';
               Q \<longmapsto> a<\<nu>x> \<prec> Q'; x \<sharp> P;
               x \<sharp> Q; x ~= a |]
            ==> ?Pa;
         !!P a x P' Q Q'.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' =
               \<tau> \<prec> <\<nu>x>(P' \<parallel> Q');
               P \<longmapsto> a<\<nu>x> \<prec> P';
               Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> P; x \<sharp> Q;
               x ~= a |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 13, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Early_Semantics.outputInduct",
     "[| ?P \<longmapsto> ?a[?b] \<prec> ?P';
         !!a b P C. ?F C (a{b}.P) a b P;
         !!P a b P' c C.
            [| P \<longmapsto> a[b] \<prec> P'; !!C. ?F C P a b P' |]
            ==> ?F C ([c\<frown>c]P) a b P';
         !!P a b P' c d C.
            [| P \<longmapsto> a[b] \<prec> P'; !!C. ?F C P a b P';
               c ~= d |]
            ==> ?F C ([c\<noteq>d]P) a b P';
         !!P a b P' Q C.
            [| P \<longmapsto> a[b] \<prec> P'; !!C. ?F C P a b P' |]
            ==> ?F C (P \<oplus> Q) a b P';
         !!Q a b Q' P C.
            [| Q \<longmapsto> a[b] \<prec> Q'; !!C. ?F C Q a b Q' |]
            ==> ?F C (P \<oplus> Q) a b Q';
         !!P a b P' Q C.
            [| P \<longmapsto> a[b] \<prec> P'; !!C. ?F C P a b P' |]
            ==> ?F C (P \<parallel> Q) a b (P' \<parallel> Q);
         !!Q a b Q' P C.
            [| Q \<longmapsto> a[b] \<prec> Q'; !!C. ?F C Q a b Q' |]
            ==> ?F C (P \<parallel> Q) a b (P \<parallel> Q');
         !!P a b P' x C.
            [| P \<longmapsto> a[b] \<prec> P'; x ~= a; x ~= b;
               x \<sharp> C; !!C. ?F C P a b P' |]
            ==> ?F C (<\<nu>x>P) a b (<\<nu>x>P');
         !!P a b P' C.
            [| P \<parallel> !P \<longmapsto> a[b] \<prec> P';
               !!C. ?F C (P \<parallel> !P) a b P' |]
            ==> ?F C (!P) a b P' |]
      ==> ?F ?C ?P ?a ?b ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 3)),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 1, template_var 0),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Early_Semantics.inputInduct",
     "[| ?P \<longmapsto> ?a<?u> \<prec> ?P';
         !!a x P u C.
            [| x \<sharp> C; x ~= u; x ~= a |]
            ==> ?F C (a<x>.P) a u (P[x::=u]);
         !!P a u P' b C.
            [| P \<longmapsto> a<u> \<prec> P'; !!C. ?F C P a u P' |]
            ==> ?F C ([b\<frown>b]P) a u P';
         !!P a u P' b c C.
            [| P \<longmapsto> a<u> \<prec> P'; !!C. ?F C P a u P';
               b ~= c |]
            ==> ?F C ([b\<noteq>c]P) a u P';
         !!P a u P' Q C.
            [| P \<longmapsto> a<u> \<prec> P'; !!C. ?F C P a u P' |]
            ==> ?F C (P \<oplus> Q) a u P';
         !!Q a u Q' P C.
            [| Q \<longmapsto> a<u> \<prec> Q'; !!C. ?F C Q a u Q' |]
            ==> ?F C (P \<oplus> Q) a u Q';
         !!P a u P' Q C.
            [| P \<longmapsto> a<u> \<prec> P'; !!C. ?F C P a u P' |]
            ==> ?F C (P \<parallel> Q) a u (P' \<parallel> Q);
         !!Q a u Q' P C.
            [| Q \<longmapsto> a<u> \<prec> Q'; !!C. ?F C Q a u Q' |]
            ==> ?F C (P \<parallel> Q) a u (P \<parallel> Q');
         !!P a u P' x C.
            [| P \<longmapsto> a<u> \<prec> P'; x ~= a; x ~= u;
               x \<sharp> C; !!C. ?F C P a u P' |]
            ==> ?F C (<\<nu>x>P) a u (<\<nu>x>P');
         !!P a u P' C.
            [| P \<parallel> !P \<longmapsto> a<u> \<prec> P';
               !!C. ?F C (P \<parallel> !P) a u P' |]
            ==> ?F C (!P) a u P' |]
      ==> ?F ?C ?P ?a ?u ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 5),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_var 4),
                    template_var 3)),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 1, template_var 0),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Early_Semantics.boundOutputInduct",
     "[| ?P \<longmapsto> ?a<\<nu>?x> \<prec> ?P'; ?x \<sharp> ?P;
         !!P a x P' b C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; !!C. ?F C P a x P' |]
            ==> ?F C ([b\<frown>b]P) a x P';
         !!P a x P' b c C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; !!C. ?F C P a x P';
               b ~= c |]
            ==> ?F C ([b\<noteq>c]P) a x P';
         !!P a x P' C.
            [| P \<longmapsto> a[x] \<prec> P'; a ~= x |]
            ==> ?F C (<\<nu>x>P) a x P';
         !!P Q a x P' C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; !!C. ?F C P a x P' |]
            ==> ?F C (P \<oplus> Q) a x P';
         !!P Q a x Q' C.
            [| Q \<longmapsto> a<\<nu>x> \<prec> Q'; !!C. ?F C Q a x Q' |]
            ==> ?F C (P \<oplus> Q) a x Q';
         !!P P' Q a x C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; x \<sharp> Q;
               !!C. ?F C P a x P' |]
            ==> ?F C (P \<parallel> Q) a x (P' \<parallel> Q);
         !!P Q Q' a x C.
            [| Q \<longmapsto> a<\<nu>x> \<prec> Q'; x \<sharp> P;
               !!C. ?F C Q a x Q' |]
            ==> ?F C (P \<parallel> Q) a x (P \<parallel> Q');
         !!P P' a x y C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; y ~= a; y ~= x;
               y \<sharp> C; !!C. ?F C P a x P' |]
            ==> ?F C (<\<nu>y>P) a x (<\<nu>y>P');
         !!P a x P' C.
            [| P \<parallel> !P \<longmapsto> a<\<nu>x> \<prec> P';
               !!C. ?F C (P \<parallel> !P) a x P' |]
            ==> ?F C (!P) a x P' |]
      ==> ?F ?C ?P ?a ?x ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 15, template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 1, template_var 0),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Early_Semantics.bangInduct",
     "[| !?P \<longmapsto> ?Rs;
         !!a x P' C.
            [| ?P \<longmapsto> a<\<nu>x> \<prec> P'; x \<sharp> ?P;
               x \<sharp> C |]
            ==> ?F C (?P \<parallel> !?P)
                 (a<\<nu>x> \<prec> (P' \<parallel> !?P));
         !!\<alpha> P' C.
            ?P \<longmapsto> \<alpha> \<prec> P' ==>
            ?F C (?P \<parallel> !?P) (\<alpha> \<prec> P' \<parallel> !?P);
         !!a x P' C.
            [| !?P \<longmapsto> a<\<nu>x> \<prec> P'; x \<sharp> ?P;
               x \<sharp> C; !!C. ?F C (!?P) (a<\<nu>x> \<prec> P') |]
            ==> ?F C (?P \<parallel> !?P)
                 (a<\<nu>x> \<prec> (?P \<parallel> P'));
         !!\<alpha> P' C.
            [| !?P \<longmapsto> \<alpha> \<prec> P';
               !!C. ?F C (!?P) (\<alpha> \<prec> P') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<alpha> \<prec> ?P \<parallel> P');
         !!a P' b P'' C.
            [| ?P \<longmapsto> a<b> \<prec> P';
               !?P \<longmapsto> a[b] \<prec> P'';
               !!C. ?F C (!?P) (a[b] \<prec> P'') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<tau> \<prec> P' \<parallel> P'');
         !!a b P' P'' C.
            [| ?P \<longmapsto> a[b] \<prec> P';
               !?P \<longmapsto> a<b> \<prec> P'';
               !!C. ?F C (!?P) (a<b> \<prec> P'') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<tau> \<prec> P' \<parallel> P'');
         !!a x P' P'' C.
            [| ?P \<longmapsto> a<x> \<prec> P';
               !?P \<longmapsto> a<\<nu>x> \<prec> P''; x \<sharp> ?P;
               x \<sharp> C; !!C. ?F C (!?P) (a<\<nu>x> \<prec> P'') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<tau> \<prec> <\<nu>x>(P' \<parallel> P''));
         !!a x P' P'' C.
            [| ?P \<longmapsto> a<\<nu>x> \<prec> P';
               !?P \<longmapsto> a<x> \<prec> P''; x \<sharp> ?P;
               x \<sharp> C; !!C. ?F C (!?P) (a<x> \<prec> P'') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<tau> \<prec> <\<nu>x>(P' \<parallel> P''));
         !!Rs C.
            [| ?P \<parallel> !?P \<longmapsto> Rs;
               !!C. ?F C (?P \<parallel> !?P) Rs |]
            ==> ?F C (!?P) Rs |]
      ==> ?F ?C (!?P) ?Rs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 0),
               template_app (template_hole 14, template_var 3)),
             template_var 2)
           ))),
    ("Early_Semantics.tauInduct",
     "[| ?P \<longmapsto> \<tau> \<prec> ?P'; !!P C. ?F C (\<tau>.P) P;
         !!P P' a C.
            [| P \<longmapsto> \<tau> \<prec> P'; !!C. ?F C P P' |]
            ==> ?F C ([a\<frown>a]P) P';
         !!P P' a b C.
            [| P \<longmapsto> \<tau> \<prec> P'; !!C. ?F C P P'; a ~= b |]
            ==> ?F C ([a\<noteq>b]P) P';
         !!P P' Q C.
            [| P \<longmapsto> \<tau> \<prec> P'; !!C. ?F C P P' |]
            ==> ?F C (P \<oplus> Q) P';
         !!Q Q' P C.
            [| Q \<longmapsto> \<tau> \<prec> Q'; !!C. ?F C Q Q' |]
            ==> ?F C (P \<oplus> Q) Q';
         !!P P' Q C.
            [| P \<longmapsto> \<tau> \<prec> P'; !!C. ?F C P P' |]
            ==> ?F C (P \<parallel> Q) (P' \<parallel> Q);
         !!Q Q' P C.
            [| Q \<longmapsto> \<tau> \<prec> Q'; !!C. ?F C Q Q' |]
            ==> ?F C (P \<parallel> Q) (P \<parallel> Q');
         !!P a b P' Q Q' C.
            [| P \<longmapsto> a<b> \<prec> P';
               Q \<longmapsto> a[b] \<prec> Q' |]
            ==> ?F C (P \<parallel> Q) (P' \<parallel> Q');
         !!P a b P' Q Q' C.
            [| P \<longmapsto> a[b] \<prec> P';
               Q \<longmapsto> a<b> \<prec> Q' |]
            ==> ?F C (P \<parallel> Q) (P' \<parallel> Q');
         !!P a x P' Q Q' C.
            [| P \<longmapsto> a<x> \<prec> P';
               Q \<longmapsto> a<\<nu>x> \<prec> Q'; x \<sharp> P;
               x \<sharp> Q; x ~= a; x \<sharp> C |]
            ==> ?F C (P \<parallel> Q) (<\<nu>x>(P' \<parallel> Q'));
         !!P a x P' Q Q' C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P';
               Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> P; x \<sharp> Q;
               x ~= a; x \<sharp> C |]
            ==> ?F C (P \<parallel> Q) (<\<nu>x>(P' \<parallel> Q'));
         !!P P' x C.
            [| P \<longmapsto> \<tau> \<prec> P'; x \<sharp> C;
               !!C. ?F C P P' |]
            ==> ?F C (<\<nu>x>P) (<\<nu>x>P');
         !!P P' C.
            [| P \<parallel> !P \<longmapsto> \<tau> \<prec> P';
               !!C. ?F C (P \<parallel> !P) P' |]
            ==> ?F C (!P) P' |]
      ==> ?F ?C ?P ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 3),
              template_app
               (template_app (template_hole 18, template_hole 17),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 0),
               template_var 3),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.Early_SemanticsTemplates"
### 0.469s elapsed time, 0.671s cpu time, 0.078s GC time
val it = (): unit
