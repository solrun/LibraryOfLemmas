Loading theory "Draft.Agent" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_Subst_Pres" via "Draft.Strong_Late_Bisim_Subst" via "Draft.Strong_Late_Bisim" via "Draft.Strong_Late_Sim" via "Draft.Late_Semantics1" via "Draft.Late_Semantics")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.153s elapsed time, 0.625s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.193s elapsed time, 0.787s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.367s elapsed time, 1.464s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.740s elapsed time, 2.908s cpu time, 0.309s GC time
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.022s elapsed time, 3.609s cpu time, 0.835s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.947s elapsed time, 5.986s cpu time, 1.128s GC time
Loading theory "Draft.Templates" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Strong_Early_Late_CompTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.174s cpu time, 0.177s GC time
### length descr: 3
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: pi_Rep_set
Proofs for inductive predicate(s) "pi_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "pi_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 125 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/Pi_Calculus/Agent.thy") produces 80 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/Pi_Calculus/Agent.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" a))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" a))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 243 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 255 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 285 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subs" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subst_name" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seqSubs :: "pi => (name * name) list => pi"
### Ambiguous input (line 310 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subs" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subst_name" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seq_subst_name :: "name => (name * name) list => name"
### Ambiguous input (line 377 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Agent"
### 3.567s elapsed time, 8.858s cpu time, 1.434s GC time
Loading theory "Draft.Early_Semantics" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Early_Bisim_Subst" via "Draft.Strong_Early_Bisim" via "Draft.Strong_Early_Sim")
Loading theory "Draft.Late_Semantics" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_Subst_Pres" via "Draft.Strong_Late_Bisim_Subst" via "Draft.Strong_Late_Bisim" via "Draft.Strong_Late_Sim" via "Draft.Late_Semantics1")
Loading theory "Draft.Rel" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_Subst_Pres" via "Draft.Strong_Late_Bisim_Subst" via "Draft.Strong_Late_Bisim" via "Draft.Strong_Late_Sim")
Proofs for inductive predicate(s) "bangRelp"
  Proving monotonicity ...
consts
  resChain :: "name list => pi => pi"
### theory "Draft.Rel"
### 0.178s elapsed time, 0.547s cpu time, 0.061s GC time
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: subject_Rep_set
Proofs for inductive predicate(s) "subject_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "subject_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: freeRes_Rep_set
Proofs for inductive predicate(s) "freeRes_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "freeRes_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: freeRes_Rep_set
Proofs for inductive predicate(s) "freeRes_Rep_set"
### proving closure under permutation...
### defining type...
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### representing sets
### big_rep_name: residual_Rep_set
Proofs for inductive predicate(s) "residual_Rep_set"
### proving closure under permutation...
### defining type...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "freeRes_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "residual_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 42 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^fixed>TransitionsEarly" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>TransitionsEarly" ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u)))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###           ("_position" u))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u)))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###           ("_position" u))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>TransitionsEarly"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>TransitionsEarly"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" V)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" V))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" V)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "TransitionsEarly"
  Proving monotonicity ...
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: residual_Rep_set
Proofs for inductive predicate(s) "residual_Rep_set"
### proving closure under permutation...
### defining type...
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "residual_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 28 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^fixed>transitions" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>transitions" ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" P)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" a))
###       ("_position" x) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###         ("_position" x) ("_position" Q')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" Q'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###         ("_position" x) ("_position" Q')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" Q'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P) ("_position" Rs)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" Rs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P) ("_position" Rs)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" Rs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 32 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" b))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" b))
###           ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 32 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 46 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "transitions"
  Proving monotonicity ...
### Ambiguous input (line 81 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 99 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###         ("_position" u)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 274 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P) ("_idts" ("_position" u) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" a))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###                   ("_position" u))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P) ("_idts" ("_position" u) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" a))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###                   ("_position" u))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 276 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 277 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 278 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 279 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 280 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 281 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" u)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" u)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 283 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 291 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" r)))
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" u) ("_tuple_arg" ("_position" r))))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" r))
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" u) ("_tuple_arg" ("_position" r))))
###         ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 338 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 365 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x)))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x))
###       ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 368 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 413 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 415 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 416 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 418 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### Ambiguous input (line 419 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### Ambiguous input (line 420 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 421 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 423 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 441 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 442 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 638 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 640 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" a) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" a) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 641 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 642 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 643 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 644 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 645 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 646 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 647 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 648 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 650 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 652 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "bangPred"
  Proving monotonicity ...
### Ambiguous input (line 668 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 671 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 673 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" A))
###       ("_position" \<alpha>))
###     ("_position" A')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" A))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" A'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 680 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Tau" ("_position" P)) ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 693 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 694 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" u)
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###           ("_position" u))))))
### ("\<^const>Pure.all_binder" ("_position" u)
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###           ("_position" u))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 727 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 748 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" a)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" a)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 775 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 875 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" PQ'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 876 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 877 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 890 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b)))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b))
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 891 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 892 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 905 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 906 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 908 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 909 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 910 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 911 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1033 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" RP')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" RP'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" a))
###     ("_position" x) ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1035 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("_position" \<alpha>))
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1090 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" y)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" y)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Nominal.perm"
###           ("_list"
###             ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###           ("_position" P'))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" y))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" y)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Nominal.perm"
###           ("_list"
###             ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 203 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###         ("_position" b))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###         ("_position" b))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 227 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 228 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 230 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P')
###       ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P')
###       ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1198 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" \<alpha>) ("_type_name" freeRes))
###     ("_idts" ("_idtyp" ("_position" P') ("_type_name" pi)) ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" \<alpha>) ("_type_name" freeRes))
###     ("_idts" ("_idtyp" ("_position" P') ("_type_name" pi)) ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 251 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 252 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" y) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 255 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###           ("_position" y))
###         ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" y))
###         ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1200 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Bang" ("_position" P))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Early_Semantics.Transitions_Freejudge"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Early_Semantics.Transitions_Freejudge"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 299 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1201 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 302 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1203 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 346 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1205 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.residual.BoundOutputR"
###                           ("_position" a) ("_position" x)
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.residual.BoundOutputR"
###                           ("_position" a) ("_position" x)
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 368 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1207 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.Transitions_Freejudge"
###                           ("\<^const>Early_Semantics.freeRes.InputR"
###                             ("_position" a) ("_position" x))
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x)))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.Transitions_Freejudge"
###                           ("\<^const>Early_Semantics.freeRes.InputR"
###                             ("_position" a) ("_position" x))
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 370 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 371 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 372 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 373 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 374 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Early_Semantics"
### 2.035s elapsed time, 4.471s cpu time, 0.459s GC time
Loading theory "Draft.Strong_Early_Sim" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Early_Bisim_Subst" via "Draft.Strong_Early_Bisim")
### Ambiguous input (line 375 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 376 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 378 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 398 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 399 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 400 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 401 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 402 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 404 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" Q)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" Q')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" Q)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" Q')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 406 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 408 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 583 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 585 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 586 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 587 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 588 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 589 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 590 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 592 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" Q)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" Q')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" Q)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" Q')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 594 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Strong_Early_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>strongSimEarly" ("_position" P) ("_position" Rel)
###     ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" y) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###                 ("\<^const>Early_Semantics.residual.BoundOutputR"
###                   ("_position" a) ("_position" y) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###               ("\<^const>Early_Semantics.Transitions_Freejudge"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strongSimEarly" ("_position" P) ("_position" Rel)
###     ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" y) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###                 ("\<^const>Early_Semantics.residual.BoundOutputR"
###                   ("_position" a) ("_position" y) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###               ("\<^const>Early_Semantics.Transitions_Freejudge"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strongSimEarly" ("_position" P) ("_position" Rel)
###     ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" y) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###                 ("\<^const>Early_Semantics.residual.BoundOutputR"
###                   ("_position" a) ("_position" y) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###                 ("_position" \<alpha>))
###               ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strongSimEarly" ("_position" P) ("_position" Rel)
###     ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" y) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###                 ("\<^const>Early_Semantics.residual.BoundOutputR"
###                   ("_position" a) ("_position" y) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###                 ("_position" \<alpha>))
###               ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 596 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Pi_Calculus/Strong_Early_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 79 of "$AFP/Pi_Calculus/Strong_Early_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 775 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Pi_Calculus/Strong_Early_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 777 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" c) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" c) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 778 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 779 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 780 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 781 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 782 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Early_Sim"
### 0.212s elapsed time, 0.460s cpu time, 0.043s GC time
Loading theory "Draft.Strong_Early_Bisim" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Early_Bisim_Subst")
### Ambiguous input (line 783 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 784 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 785 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" y))
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" y))
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" y))
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" y))
###                 ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for coinductive predicate(s) "bisimp"
  Proving monotonicity ...
### Ambiguous input (line 786 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" Q')
###                   ("_position" x) ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" Q')
###                   ("_position" x) ("_position" y))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 787 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 789 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "bangPred"
  Proving monotonicity ...
### equivariance lemma of the relational form
p_ \<bullet> (P_ \<sim> Q_) = p_ \<bullet> P_ \<sim> p_ \<bullet> Q_
### equivariance lemma of the relational form
p_ \<bullet> (P_ \<sim> Q_) = p_ \<bullet> P_ \<sim> p_ \<bullet> Q_
### equivariance lemma of the relational form
p_ \<bullet> (P_ \<sim> Q_) = p_ \<bullet> P_ \<sim> p_ \<bullet> Q_
### equivariance lemma of the relational form
p_ \<bullet> (P_ \<sim> Q_) = p_ \<bullet> P_ \<sim> p_ \<bullet> Q_
### theory "Draft.Strong_Early_Bisim"
### 0.124s elapsed time, 0.262s cpu time, 0.042s GC time
Loading theory "Draft.Strong_Early_Bisim_Subst" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp")
### Ambiguous input (line 808 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Early_Bisim_Subst"
### 0.036s elapsed time, 0.072s cpu time, 0.000s GC time
### Ambiguous input (line 810 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" b)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" b))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 811 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x') ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" y') ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x') ("_position" P))
###       ("_position" a))
###     ("_position" y') ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 814 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 822 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P)) ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 836 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 837 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs" ("_applC" ("_position" a) ("_list" ("_position" b)))
###         ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("_applC" ("_position" a) ("_list" ("_position" b)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs" ("_applC" ("_position" a) ("_list" ("_position" b)))
###         ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))
###         ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("_applC" ("_position" a) ("_list" ("_position" b)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))
###         ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 880 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" a)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" a)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 892 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" b)
###       ("_position" y) ("_position" yP'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b))
###     ("_position" y) ("_position" yP')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 919 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P)) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 931 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 944 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 958 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" b)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 970 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 984 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" c)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 998 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" c) ("_list" ("_position" d))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" c) ("_list" ("_position" d)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" c)
###         ("_position" d)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" c)
###         ("_position" d))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1012 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1027 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" b)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1041 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Tau" ("_position" P)))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Tau" ("_position" P)))
###       ("_position" a))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1054 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Tau" ("_position" P)))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Tau" ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Tau" ("_position" P)))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Tau" ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1068 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###           ("_position" P)))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1083 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" b)
###       ("_position" z) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###           ("_position" P)))
###       ("_position" b))
###     ("_position" z) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1096 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###           ("_position" P)))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1111 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" c)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###           ("_position" P)))
###       ("_position" c))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1125 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###           ("_position" P)))
###       ("_applC" ("_position" b) ("_list" ("_position" y))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" b) ("_list" ("_position" y)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###           ("_position" P)))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###         ("_position" y)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###         ("_position" y))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1163 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1206 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" PQ'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x) ("_position" PQ')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1209 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1210 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" a))
###         ("_position" x) ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1236 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1237 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1238 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1239 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1240 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1241 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1243 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" xP')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" xP'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1267 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1292 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" yP'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("_position" a))
###     ("_position" x) ("_position" yP')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1295 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###               ("_position" y))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###               ("_position" y)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" b) ("_list" ("_position" y)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" b) ("_list" ("_position" y))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1296 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" a)
###           ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" a)
###           ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1322 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1323 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1324 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.BoundR"
###                         ("_position" a) ("_position" x)
###                         ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Bang" ("_position" P))
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.BoundR"
###                         ("_position" a) ("_position" x)
###                         ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1326 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Bang" ("_position" P))
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Late_Semantics.residual.FreeR"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Late_Semantics.residual.FreeR"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1327 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1330 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1333 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1336 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Late_Semantics"
### 2.835s elapsed time, 5.726s cpu time, 0.579s GC time
Loading theory "Draft.Late_Semantics1" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_Subst_Pres" via "Draft.Strong_Late_Bisim_Subst" via "Draft.Strong_Late_Bisim" via "Draft.Strong_Late_Sim")
### theory "Draft.Late_Semantics1"
### 0.094s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.Strong_Late_Sim" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_Subst_Pres" via "Draft.Strong_Late_Bisim_Subst" via "Draft.Strong_Late_Bisim")
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" derivative)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" x) ("_position" Rel))))))
###   ("_case_syntax" ("_position" a)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" InputS) ("_position" b))
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###                 ("_position" u))
###               ("_tuple_arg"
###                 ("\<^const>Agent.subs" ("_position" Q) ("_position" x)
###                   ("_position" u))))
###             ("_position" Rel))))
###       ("_case1" ("_applC" ("_position" BoundOutputS) ("_position" b))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P) ("_tuple_arg" ("_position" Q)))
###           ("_position" Rel))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" derivative)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" x) ("_position" Rel))))))
###   ("_case_syntax" ("_position" a)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" InputS) ("_position" b))
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###                 ("_position" u))
###               ("_tuple_arg"
###                 ("\<^const>Agent.subs" ("_position" Q) ("_position" x)
###                   ("_position" u))))
###             ("_position" Rel))))
###       ("_case1" ("_applC" ("_position" BoundOutputS) ("_position" b))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P) ("_tuple_arg" ("_position" Q)))
###           ("_position" Rel))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" derivative)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" x) ("_position" Rel))))))
###   ("_case_syntax" ("_position" a)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" InputS) ("_position" b))
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###                 ("_position" u))
###               ("_tuple_arg"
###                 ("\<^const>Agent.subst_name" ("_position" Q) ("_position" x)
###                   ("_position" u))))
###             ("_position" Rel))))
###       ("_case1" ("_applC" ("_position" BoundOutputS) ("_position" b))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P) ("_tuple_arg" ("_position" Q)))
###           ("_position" Rel))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" derivative)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" x) ("_position" Rel))))))
###   ("_case_syntax" ("_position" a)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" InputS) ("_position" b))
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###                 ("_position" u))
###               ("_tuple_arg"
###                 ("\<^const>Agent.subst_name" ("_position" Q) ("_position" x)
###                   ("_position" u))))
###             ("_position" Rel))))
###       ("_case1" ("_applC" ("_position" BoundOutputS) ("_position" b))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P) ("_tuple_arg" ("_position" Q)))
###           ("_position" Rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###                 ("_position" x) ("_position" P')))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###                 ("_position" x) ("_position" P')))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###                 ("_position" x) ("_position" P')))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###                 ("_position" x) ("_position" P')))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" \<alpha>))
###               ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" \<alpha>))
###               ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 99 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" y) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" y) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" y) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" y) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" y) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" y) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 150 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" x)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" x))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" x)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" x))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 151 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" y)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" y) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" y)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" y) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" y)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" y) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" y)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" y) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P')
###               ("_tuple_arg"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P')
###               ("_tuple_arg"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P')
###               ("_tuple_arg"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P')
###               ("_tuple_arg"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Late_Sim"
### 0.222s elapsed time, 0.245s cpu time, 0.028s GC time
Loading theory "Draft.Strong_Late_Bisim" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_Subst_Pres" via "Draft.Strong_Late_Bisim_Subst")
Loading theory "Draft.Strong_Late_Sim_Pres" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_Subst_Pres" via "Draft.Strong_Late_Bisim_Pres")
Loading theory "Draft.Strong_Late_Sim_SC" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_SC")
Proofs for coinductive predicate(s) "bisimp"
  Proving monotonicity ...
### Ambiguous input (line 44 of "$AFP/Pi_Calculus/Strong_Late_Sim_Pres.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" y)
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###           ("_position" y))
###         ("_tuple_arg"
###           ("\<^const>Agent.subst_name" ("_position" Q) ("_position" x)
###             ("_position" y))))
###       ("_position" Rel))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" y)
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###           ("_position" y))
###         ("_tuple_arg"
###           ("\<^const>Agent.subst_name" ("_position" Q) ("_position" x)
###             ("_position" y))))
###       ("_position" Rel))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" y)
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###           ("_position" y))
###         ("_tuple_arg"
###           ("\<^const>Agent.subs" ("_position" Q) ("_position" x)
###             ("_position" y))))
###       ("_position" Rel))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" y)
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###           ("_position" y))
###         ("_tuple_arg"
###           ("\<^const>Agent.subs" ("_position" Q) ("_position" x)
###             ("_position" y))))
###       ("_position" Rel))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/Pi_Calculus/Strong_Late_Sim_SC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rel) ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rel) ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 89 of "$AFP/Pi_Calculus/Strong_Late_Sim_SC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation" ("_position" P) ("_position" Rel)
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation" ("_position" P) ("_position" Rel)
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 97 of "$AFP/Pi_Calculus/Strong_Late_Sim_SC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation" ("\<^const>Agent.pi.PiNil")
###     ("_position" Rel)
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" a)
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation" ("\<^const>Agent.pi.PiNil")
###     ("_position" Rel)
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" a)))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 200 of "$AFP/Pi_Calculus/Strong_Late_Sim_Pres.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rel')
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rel')
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rel')
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Sim.simulation"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rel')
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Late_Bisim"
### 0.127s elapsed time, 0.385s cpu time, 0.060s GC time
Loading theory "Draft.Strong_Late_Bisim_Subst" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_Subst_Pres")
### Ambiguous input (line 636 of "$AFP/Pi_Calculus/Strong_Late_Sim_SC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" x) ("_position" a))
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" a))))
###         ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" x) ("_position" a))
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" a))))
###         ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Late_Sim_Pres"
### 0.135s elapsed time, 0.413s cpu time, 0.060s GC time
Loading theory "Draft.Strong_Late_Bisim_Pres" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC" via "Draft.Strong_Late_Bisim_Subst_Pres")
### theory "Draft.Strong_Late_Bisim_Subst"
### 0.376s elapsed time, 1.328s cpu time, 1.222s GC time
### theory "Draft.Strong_Late_Sim_SC"
### 0.564s elapsed time, 1.821s cpu time, 1.281s GC time
### Ambiguous input (line 30 of "$AFP/Pi_Calculus/Strong_Late_Bisim_Pres.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" y)
###     ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###         ("_position" y))
###       ("\<^const>Agent.subs" ("_position" Q) ("_position" x)
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" y)
###     ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###         ("_position" y))
###       ("\<^const>Agent.subs" ("_position" Q) ("_position" x)
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" y)
###     ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###         ("_position" y))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" x)
###         ("_position" y)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" y)
###     ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###         ("_position" y))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" x)
###         ("_position" y)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Pi_Calculus/Strong_Late_Bisim_Pres.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Late_Bisim_Pres"
### 0.523s elapsed time, 1.555s cpu time, 1.278s GC time
Loading theory "Draft.Strong_Late_Bisim_Subst_Pres" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC")
Loading theory "Draft.Strong_Late_Bisim_SC" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp" via "Draft.Strong_Late_Bisim_Subst_SC")
### Ambiguous input (line 83 of "$AFP/Pi_Calculus/Strong_Late_Bisim_Subst_Pres.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim_Subst.StrongEqJudge"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim_Subst.StrongEqJudge"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim_Subst.StrongEqJudge"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim_Subst.StrongEqJudge"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Late_Bisim_Subst_Pres"
### 0.121s elapsed time, 0.243s cpu time, 0.000s GC time
### Ambiguous input (line 58 of "$AFP/Pi_Calculus/Strong_Late_Bisim_SC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/Pi_Calculus/Strong_Late_Bisim_SC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" a)
###       ("_position" P))
###     ("\<^const>Agent.pi.PiNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim.strongBisimJudge"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" a)))
###       ("_position" P))
###     ("\<^const>Agent.pi.PiNil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "structCong"
  Proving monotonicity ...
### theory "Draft.Strong_Late_Bisim_SC"
### 0.234s elapsed time, 0.358s cpu time, 0.000s GC time
Loading theory "Draft.Strong_Late_Bisim_Subst_SC" (required by "Draft.Strong_Early_Late_CompTemplates" via "Draft.Strong_Early_Late_Comp")
### Ambiguous input (line 20 of "$AFP/Pi_Calculus/Strong_Late_Bisim_Subst_SC.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim_Subst.StrongEqJudge"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" a)
###       ("_position" P))
###     ("\<^const>Agent.pi.PiNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Late_Bisim_Subst.StrongEqJudge"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" a)))
###       ("_position" P))
###     ("\<^const>Agent.pi.PiNil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Late_Bisim_Subst_SC"
### 0.196s elapsed time, 0.230s cpu time, 0.047s GC time
Loading theory "Draft.Strong_Early_Late_Comp" (required by "Draft.Strong_Early_Late_CompTemplates")
### Ambiguous input (line 28 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###       ("_position" a) ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P) ("_position" a))
###     ("_position" b) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###       ("_position" a) ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###       ("_position" a))
###     ("_position" b) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###       ("_position" a) ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###       ("_position" a))
###     ("_position" b) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###       ("_position" a) ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P) ("_position" a))
###     ("_position" b) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 18 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###         ("_position" P) ("_position" a))
###       ("_position" b)
###       ("\<^const>HOL.eq" ("_position" P')
###         ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###           ("_position" P) ("_position" a))))
###     ("_position" b) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###         ("_position" a) ("_position" b)
###         ("\<^const>HOL.eq" ("_position" P')
###           ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###             ("_position" P) ("_position" a))))
###       ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P)
###       ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###         ("_position" a) ("_position" b)
###         ("\<^const>HOL.eq" ("_position" P')
###           ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###             ("_position" P) ("_position" a)))))
###     ("_position" b) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P)
###       ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###         ("_position" a) ("_position" b) ("_position" P')))
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("_position" P) ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###         ("_position" P) ("_position" a))
###       ("_position" b) ("_position" P'))
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("_position" P) ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###       ("_position" a) ("_position" b)
###       ("\<^const>HOL.eq" ("_position" P')
###         ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###           ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###             ("_position" P) ("_position" a))
###           ("_position" b) ("_position" P'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P) ("_position" a))
###     ("_position" b)
###     ("\<^const>HOL.eq" ("_position" P')
###       ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###         ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###           ("_position" P) ("_position" a))
###         ("_position" b) ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###       ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###         ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###           ("_position" P) ("_position" a))
###         ("_position" b)
###         ("\<^const>HOL.eq" ("_position" P') ("_position" P)))
###       ("_position" a))
###     ("_position" b) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###           ("_position" a) ("_position" b)
###           ("\<^const>HOL.eq" ("_position" P') ("_position" P)))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P)
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("\<^const>Strong_Early_Late_Comp.Transitions_OutputjudgeEarly"
###           ("_position" a) ("_position" b)
###           ("\<^const>HOL.eq" ("_position" P') ("_position" P)))
###         ("_position" a)))
###     ("_position" b) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###       ("_position" a) ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###       ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###       ("_position" a) ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###       ("_position" a) ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 200 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###       ("_position" a) ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###       ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 265 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 18 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x)
###       ("\<^const>HOL.eq" ("_position" P')
###         ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###           ("_position" P) ("_position" a))))
###     ("_position" x) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###         ("_position" a) ("_position" x)
###         ("\<^const>HOL.eq" ("_position" P')
###           ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###             ("_position" P) ("_position" a))))
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P)
###       ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###         ("_position" a) ("_position" x)
###         ("\<^const>HOL.eq" ("_position" P')
###           ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###             ("_position" P) ("_position" a)))))
###     ("_position" x) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P)
###       ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###         ("_position" a) ("_position" x) ("_position" P')))
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'))
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###       ("_position" a) ("_position" x)
###       ("\<^const>HOL.eq" ("_position" P')
###         ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###           ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###             ("_position" P) ("_position" a))
###           ("_position" x) ("_position" P'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P) ("_position" a))
###     ("_position" x)
###     ("\<^const>HOL.eq" ("_position" P')
###       ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###         ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###       ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###         ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x)
###         ("\<^const>HOL.eq" ("_position" P') ("_position" P)))
###       ("_position" a))
###     ("_position" x) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###           ("_position" a) ("_position" x)
###           ("\<^const>HOL.eq" ("_position" P') ("_position" P)))
###         ("_position" a))
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P)
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("\<^const>Strong_Early_Late_Comp.Transitions_BoundOutputjudgeEarly"
###           ("_position" a) ("_position" x)
###           ("\<^const>HOL.eq" ("_position" P') ("_position" P)))
###         ("_position" a)))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###       ("_position" a) ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###       ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 277 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeEarly"
###       ("_position" a) ("_position" u)
###       ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeEarly"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P) ("_position" a))
###     ("_position" u)
###     ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeEarly"
###       ("_position" a) ("_position" u)
###       ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeEarly"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P) ("_position" a))
###     ("_position" u)
###     ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###       ("_position" u))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 347 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge" ("_position" P)
###     ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeEarly"
###       ("_position" a) ("_position" u) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeEarly"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P) ("_position" a))
###     ("_position" u) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 350 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>HOL.eq"
###       ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###         ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x)
###         ("\<^const>HOL.conj" ("_position" P'') ("_position" P')))
###       ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>HOL.eq"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("_position" P)
###         ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###           ("_position" a) ("_position" x)
###           ("\<^const>HOL.conj" ("_position" P'') ("_position" P'))))
###       ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>HOL.conj"
###       ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###         ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P''))
###       ("\<^const>HOL.eq" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###           ("_position" u))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x)
###       ("\<^const>HOL.conj" ("_position" P'')
###         ("\<^const>HOL.eq" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###             ("_position" u)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge" ("_position" P)
###       ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###         ("_position" a) ("_position" x)
###         ("\<^const>HOL.conj" ("_position" P'')
###           ("\<^const>HOL.eq" ("_position" P')
###             ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###               ("_position" u))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>HOL.conj"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("_position" P)
###         ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###           ("_position" a) ("_position" x) ("_position" P'')))
###       ("\<^const>HOL.eq" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###           ("_position" u))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>HOL.eq"
###       ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###         ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x)
###         ("\<^const>HOL.conj" ("_position" P'') ("_position" P')))
###       ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>HOL.eq"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("_position" P)
###         ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###           ("_position" a) ("_position" x)
###           ("\<^const>HOL.conj" ("_position" P'') ("_position" P'))))
###       ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>HOL.conj"
###       ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###         ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P''))
###       ("\<^const>HOL.eq" ("_position" P')
###         ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###           ("_position" u))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P'')
###     ("\<^const>Strong_Early_Late_Comp.Transitions_InputjudgeLate"
###       ("\<^const>Strong_Early_Late_Comp.TransitionsLate_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x)
###       ("\<^const>HOL.conj" ("_position" P'')
###         ("\<^const>HOL.eq" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###             ("_position" u)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 735 of "$AFP/Pi_Calculus/Strong_Early_Late_Comp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P)
###       ("_applC" ("_position" Early_Semantics.FreeR)
###         ("_cargs" ("_position" Early_Semantics.TauR) ("_position" P'))))
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Strong_Early_Late_Comp.Transitions_TaujudgeLate"
###         ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Strong_Early_Late_Comp.TransitionsEarly_judge"
###       ("_position" P)
###       ("_applC" ("_position" Early_Semantics.FreeR)
###         ("_cargs" ("_position" Early_Semantics.TauR) ("_position" P'))))
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Strong_Early_Late_Comp.Transitions_TaujudgeLate"
###         ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Early_Late_Comp"
### 0.280s elapsed time, 0.318s cpu time, 0.047s GC time
Loading theory "Draft.Strong_Early_Late_CompTemplates"
val templateLemmas =
   [("Strong_Early_Late_Comp.earlyBisimStructCong",
     "?P \<equiv>\<^sub>s ?Q ==> ?P \<sim>\<^sub>e ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Strong_Early_Late_Comp.lateEarlySim",
     "?P \<leadsto>\<^sub>l[?Rel] ?Q ==> ?P \<leadsto>\<^sub>e[?Rel] ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Strong_Early_Late_Comp.tauEq",
     "?P \<longmapsto>\<^sub>e \<tau> \<prec>\<^sub>e ?P' =
      ?P \<longmapsto>\<^sub>l \<tau> \<prec>\<^sub>l ?P'",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Strong_Early_Late_Comp.earlyCongStructCong",
     "?P \<equiv>\<^sub>s ?Q ==> ?P \<sim>\<^sup>s\<^sub>e ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Strong_Early_Late_Comp.earlyLateTau",
     "?P \<longmapsto>\<^sub>e \<tau> \<prec>\<^sub>e ?P' ==>
      ?P \<longmapsto>\<^sub>l \<tau> \<prec>\<^sub>l ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Strong_Early_Late_Comp.lateEarlyTau",
     "?P \<longmapsto>\<^sub>l \<tau> \<prec>\<^sub>l ?P' ==>
      ?P \<longmapsto>\<^sub>e \<tau> \<prec>\<^sub>e ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Strong_Early_Late_Comp.lateEarlyBisim",
     "?P \<sim>\<^sub>l ?Q ==> ?P \<sim>\<^sub>e ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Strong_Early_Late_Comp.BoundOutputEq",
     "?P \<longmapsto>\<^sub>e ?a<\<nu>?x> \<prec>\<^sub>e ?P' =
      ?P \<longmapsto>\<^sub>l ?a<\<nu>?x> \<prec>\<^sub>l ?P'",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("Strong_Early_Late_Comp.lateEarlyCong",
     "?P \<sim>\<^sup>s\<^sub>l ?Q ==> ?P \<sim>\<^sup>s\<^sub>e ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app (template_hole 2, template_hole 0))
           ))),
    ("Strong_Early_Late_Comp.outputEq",
     "?P \<longmapsto>\<^sub>e ?a[?b] \<prec>\<^sub>e ?P' =
      ?P \<longmapsto>\<^sub>l ?a[?b] \<prec>\<^sub>l ?P'",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Strong_Early_Late_Comp.earlyLateBoundOutput",
     "?P \<longmapsto>\<^sub>e ?a<\<nu>?x> \<prec>\<^sub>e ?P' ==>
      ?P \<longmapsto>\<^sub>l ?a<\<nu>?x> \<prec>\<^sub>l ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1),
               template_var 0))
           ))),
    ("Strong_Early_Late_Comp.lateEarlyBoundOutput",
     "?P \<longmapsto>\<^sub>l ?a<\<nu>?x> \<prec>\<^sub>l ?P' ==>
      ?P \<longmapsto>\<^sub>e ?a<\<nu>?x> \<prec>\<^sub>e ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Strong_Early_Late_Comp.earlyLateOutput",
     "?P \<longmapsto>\<^sub>e ?a[?b] \<prec>\<^sub>e ?P' ==>
      ?P \<longmapsto>\<^sub>l ?a[?b] \<prec>\<^sub>l ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))
           ))),
    ("Strong_Early_Late_Comp.lateEarlyOutput",
     "?P \<longmapsto>\<^sub>l ?a[?b] \<prec>\<^sub>l ?P' ==>
      ?P \<longmapsto>\<^sub>e ?a[?b] \<prec>\<^sub>e ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))
           ))),
    ("Strong_Early_Late_Comp.lateEarlyInput",
     "?P \<longmapsto>\<^sub>l ?a<?x> \<prec>\<^sub>l ?P' ==>
      ?P \<longmapsto>\<^sub>e ?a<?u> \<prec>\<^sub>e ?P'[?x::=?u]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 3)),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)))
           ))),
    ("Strong_Early_Late_Comp.earlyLateInput",
     "[| ?P \<longmapsto>\<^sub>e ?a<?u> \<prec>\<^sub>e ?P';
         ?x \<sharp> ?P |]
      ==> EX P''.
             ?P \<longmapsto>\<^sub>l ?a<?x> \<prec>\<^sub>l P'' &
             ?P' = P''[?x::=?u]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 4)
            )],
       template_predicate (template_app (template_hole 6, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Strong_Early_Late_CompTemplates"
### 0.480s elapsed time, 0.640s cpu time, 0.064s GC time
val it = (): unit
