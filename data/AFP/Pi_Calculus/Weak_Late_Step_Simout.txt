Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "Draft.Agent" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.Weak_Late_Step_Sim" via "Draft.Weak_Late_Step_Semantics" via "Draft.Late_Tau_Chain" via "Draft.Late_Semantics1" via "Draft.Late_Semantics")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.541s cpu time, 0.055s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.926s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.336s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.717s cpu time, 0.907s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.145s elapsed time, 4.136s cpu time, 0.864s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.063s elapsed time, 6.473s cpu time, 1.150s GC time
Loading theory "Draft.Templates" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Weak_Late_Step_SimTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.551s elapsed time, 1.165s cpu time, 0.152s GC time
### length descr: 3
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: pi_Rep_set
Proofs for inductive predicate(s) "pi_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "pi_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 125 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/Pi_Calculus/Agent.thy") produces 80 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/Pi_Calculus/Agent.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" a))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" a))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 243 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 255 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 285 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subs" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subst_name" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seqSubs :: "pi => (name * name) list => pi"
### Ambiguous input (line 310 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subs" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subst_name" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seq_subst_name :: "name => (name * name) list => name"
### Ambiguous input (line 377 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Agent"
### 3.603s elapsed time, 9.164s cpu time, 1.417s GC time
Loading theory "Draft.Late_Semantics" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.Weak_Late_Step_Sim" via "Draft.Weak_Late_Step_Semantics" via "Draft.Late_Tau_Chain" via "Draft.Late_Semantics1")
Loading theory "Draft.Rel" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.Weak_Late_Step_Sim" via "Draft.Weak_Late_Sim" via "Draft.Strong_Late_Sim")
Proofs for inductive predicate(s) "bangRelp"
  Proving monotonicity ...
consts
  resChain :: "name list => pi => pi"
### theory "Draft.Rel"
### 0.160s elapsed time, 0.350s cpu time, 0.038s GC time
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: subject_Rep_set
Proofs for inductive predicate(s) "subject_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "subject_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: freeRes_Rep_set
Proofs for inductive predicate(s) "freeRes_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "freeRes_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: residual_Rep_set
Proofs for inductive predicate(s) "residual_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "residual_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 28 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^fixed>transitions" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>transitions" ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" P)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" a))
###       ("_position" x) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###         ("_position" x) ("_position" Q')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" Q'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###         ("_position" x) ("_position" Q')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" Q'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P) ("_position" Rs)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" Rs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P) ("_position" Rs)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" Rs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 32 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" b))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" b))
###           ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 32 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 46 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "transitions"
  Proving monotonicity ...
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### Ambiguous input (line 92 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" a))
###     ("_position" x) ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 203 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###         ("_position" b))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###         ("_position" b))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 227 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 228 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 230 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P')
###       ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P')
###       ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 251 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 252 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" y) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 255 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###           ("_position" y))
###         ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" y))
###         ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 299 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 302 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 346 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 368 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 370 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 371 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 372 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 373 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 374 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 375 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 376 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 378 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 398 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 399 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 400 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 401 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 402 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 404 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" Q)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" Q')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" Q)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" Q')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 406 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 408 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 583 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 585 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 586 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 587 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 588 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 589 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 590 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 592 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" Q)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" Q')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" Q)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" Q')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 594 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 596 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 775 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 777 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" c) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" c) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 778 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 779 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 780 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 781 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 782 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 783 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 784 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 785 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" y))
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" y))
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" y))
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" y))
###                 ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 786 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" Q')
###                   ("_position" x) ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" Q')
###                   ("_position" x) ("_position" y))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 787 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 789 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "bangPred"
  Proving monotonicity ...
### Ambiguous input (line 808 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 810 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" b)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" b))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 811 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x') ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" y') ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x') ("_position" P))
###       ("_position" a))
###     ("_position" y') ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 814 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 822 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P)) ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 836 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 837 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs" ("_applC" ("_position" a) ("_list" ("_position" b)))
###         ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("_applC" ("_position" a) ("_list" ("_position" b)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs" ("_applC" ("_position" a) ("_list" ("_position" b)))
###         ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))
###         ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("_applC" ("_position" a) ("_list" ("_position" b)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))
###         ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 880 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" a)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" a)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 892 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" b)
###       ("_position" y) ("_position" yP'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b))
###     ("_position" y) ("_position" yP')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 919 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P)) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 931 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 944 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 958 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" b)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 970 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 984 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" c)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 998 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" c) ("_list" ("_position" d))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" c) ("_list" ("_position" d)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" c)
###         ("_position" d)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" c)
###         ("_position" d))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1012 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1027 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" b)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1041 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Tau" ("_position" P)))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Tau" ("_position" P)))
###       ("_position" a))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1054 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Tau" ("_position" P)))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Tau" ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Tau" ("_position" P)))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Tau" ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1068 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###           ("_position" P)))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1083 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" b)
###       ("_position" z) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###           ("_position" P)))
###       ("_position" b))
###     ("_position" z) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1096 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###           ("_position" P)))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1111 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" c)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###           ("_position" P)))
###       ("_position" c))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1125 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###           ("_position" P)))
###       ("_applC" ("_position" b) ("_list" ("_position" y))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" b) ("_list" ("_position" y)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###           ("_position" P)))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###         ("_position" y)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###         ("_position" y))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1163 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1206 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" PQ'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x) ("_position" PQ')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1209 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1210 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" a))
###         ("_position" x) ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1236 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1237 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1238 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1239 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1240 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1241 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1243 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" xP')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" xP'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1267 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1292 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" yP'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("_position" a))
###     ("_position" x) ("_position" yP')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1295 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###               ("_position" y))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###               ("_position" y)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" b) ("_list" ("_position" y)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" b) ("_list" ("_position" y))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1296 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" a)
###           ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" a)
###           ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1322 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1323 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1324 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.BoundR"
###                         ("_position" a) ("_position" x)
###                         ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Bang" ("_position" P))
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.BoundR"
###                         ("_position" a) ("_position" x)
###                         ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1326 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Bang" ("_position" P))
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Late_Semantics.residual.FreeR"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Late_Semantics.residual.FreeR"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1327 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1330 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1333 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1336 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Late_Semantics"
### 2.220s elapsed time, 2.562s cpu time, 0.219s GC time
Loading theory "Draft.Late_Semantics1" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.Weak_Late_Step_Sim" via "Draft.Weak_Late_Step_Semantics" via "Draft.Late_Tau_Chain")
### theory "Draft.Late_Semantics1"
### 0.093s elapsed time, 0.124s cpu time, 0.000s GC time
Loading theory "Draft.Late_Tau_Chain" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.Weak_Late_Step_Sim" via "Draft.Weak_Late_Step_Semantics")
Loading theory "Draft.Strong_Late_Sim" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.Weak_Late_Step_Sim" via "Draft.Weak_Late_Sim")
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Late_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>tauChain_judge" ("_position" P) ("_position" P'))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###     ("\<^const>Transitive_Closure.rtrancl"
###       ("_Setcompr"
###         ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###         ("_idts" ("_position" P) ("_position" P'))
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>tauChain_judge" ("_position" P) ("_position" P'))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###     ("\<^const>Transitive_Closure.rtrancl"
###       ("_Setcompr"
###         ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###         ("_idts" ("_position" P) ("_position" P'))
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/Pi_Calculus/Late_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Pi_Calculus/Late_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" P')
###           ("\<^const>Late_Semantics.freeRes.TauR"))
###         ("_position" P'')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P'')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" P')
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P''))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P'')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/Pi_Calculus/Late_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P')
###         ("_position" P'')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P'')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P')
###         ("_position" P'')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P'')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Pi_Calculus/Late_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" P') ("_position" P''))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" P')
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P''))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F) ("_position" P'))))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" F) ("_position" P'')))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" P') ("_position" P''))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P')
###               ("\<^const>Late_Semantics.freeRes.TauR"))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F) ("_position" P'))))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" F) ("_position" P'')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### equivariance lemma of the relational form
perm_ \<bullet> P_ \<Longrightarrow>\<^sub>\<tau> P'_ =
perm_ \<bullet> P_ \<Longrightarrow>\<^sub>\<tau> perm_ \<bullet> P'_
### equivariance lemma of the relational form
perm_ \<bullet> P_ \<Longrightarrow>\<^sub>\<tau> P'_ =
perm_ \<bullet> P_ \<Longrightarrow>\<^sub>\<tau> perm_ \<bullet> P'_
### equivariance lemma of the relational form
perm_ \<bullet> P_ \<Longrightarrow>\<^sub>\<tau> P'_ =
perm_ \<bullet> P_ \<Longrightarrow>\<^sub>\<tau> perm_ \<bullet> P'_
### equivariance lemma of the relational form
perm_ \<bullet> P_ \<Longrightarrow>\<^sub>\<tau> P'_ =
perm_ \<bullet> P_ \<Longrightarrow>\<^sub>\<tau> perm_ \<bullet> P'_
### Ambiguous input (line 145 of "$AFP/Pi_Calculus/Late_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Tau_Chain.tauChain_judge"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Tau_Chain.tauChain_judge"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/Pi_Calculus/Late_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Tau_Chain.tauChain_judge"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x) ("_position" b))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Tau_Chain.tauChain_judge"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" b))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 308 of "$AFP/Pi_Calculus/Late_Tau_Chain.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Tau_Chain.tauChain_judge"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x) ("_position" b))
###     ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Tau_Chain.tauChain_judge"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" b))
###     ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Tau_Chain.tauChain_judge"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x) ("_position" b))
###     ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Tau_Chain.tauChain_judge"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" b))
###     ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Late_Tau_Chain"
### 0.092s elapsed time, 0.190s cpu time, 0.021s GC time
Loading theory "Draft.Weak_Late_Step_Semantics" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.Weak_Late_Step_Sim")
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>inputTransition" ("_position" P) ("_position" u)
###     ("_position" P'') ("_position" a) ("_position" x) ("_position" P'))
###   ("\<^const>HOL.Ex_binder" ("_position" P''')
###     ("\<^const>HOL.conj"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("_position" a))
###           ("_position" x) ("_position" P''))
###         ("\<^const>Late_Tau_Chain.tauChain_judge"
###           ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###             ("_position" u))
###           ("_position" P'))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>inputTransition" ("_position" P) ("_position" u)
###     ("_position" P'') ("_position" a) ("_position" x) ("_position" P'))
###   ("\<^const>HOL.Ex_binder" ("_position" P''')
###     ("\<^const>HOL.conj"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.transitions" ("_position" P''')
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'')))
###         ("\<^const>Late_Tau_Chain.tauChain_judge"
###           ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###             ("_position" u))
###           ("_position" P'))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>inputTransition" ("_position" P) ("_position" u)
###     ("_position" P'') ("_position" a) ("_position" x) ("_position" P'))
###   ("\<^const>HOL.Ex_binder" ("_position" P''')
###     ("\<^const>HOL.conj"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("_position" a))
###           ("_position" x) ("_position" P''))
###         ("\<^const>Late_Tau_Chain.tauChain_judge"
###           ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###             ("_position" u))
###           ("_position" P'))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>inputTransition" ("_position" P) ("_position" u)
###     ("_position" P'') ("_position" a) ("_position" x) ("_position" P'))
###   ("\<^const>HOL.Ex_binder" ("_position" P''')
###     ("\<^const>HOL.conj"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.transitions" ("_position" P''')
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'')))
###         ("\<^const>Late_Tau_Chain.tauChain_judge"
###           ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###             ("_position" u))
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" derivative)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" x) ("_position" Rel))))))
###   ("_case_syntax" ("_position" a)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" InputS) ("_position" b))
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###                 ("_position" u))
###               ("_tuple_arg"
###                 ("\<^const>Agent.subs" ("_position" Q) ("_position" x)
###                   ("_position" u))))
###             ("_position" Rel))))
###       ("_case1" ("_applC" ("_position" BoundOutputS) ("_position" b))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P) ("_tuple_arg" ("_position" Q)))
###           ("_position" Rel))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" derivative)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" x) ("_position" Rel))))))
###   ("_case_syntax" ("_position" a)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" InputS) ("_position" b))
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###                 ("_position" u))
###               ("_tuple_arg"
###                 ("\<^const>Agent.subs" ("_position" Q) ("_position" x)
###                   ("_position" u))))
###             ("_position" Rel))))
###       ("_case1" ("_applC" ("_position" BoundOutputS) ("_position" b))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P) ("_tuple_arg" ("_position" Q)))
###           ("_position" Rel))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" derivative)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" x) ("_position" Rel))))))
###   ("_case_syntax" ("_position" a)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" InputS) ("_position" b))
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###                 ("_position" u))
###               ("_tuple_arg"
###                 ("\<^const>Agent.subst_name" ("_position" Q) ("_position" x)
###                   ("_position" u))))
###             ("_position" Rel))))
###       ("_case1" ("_applC" ("_position" BoundOutputS) ("_position" b))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P) ("_tuple_arg" ("_position" Q)))
###           ("_position" Rel))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" derivative)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" x) ("_position" Rel))))))
###   ("_case_syntax" ("_position" a)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" InputS) ("_position" b))
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###                 ("_position" u))
###               ("_tuple_arg"
###                 ("\<^const>Agent.subst_name" ("_position" Q) ("_position" x)
###                   ("_position" u))))
###             ("_position" Rel))))
###       ("_case1" ("_applC" ("_position" BoundOutputS) ("_position" b))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P) ("_tuple_arg" ("_position" Q)))
###           ("_position" Rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 13 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" transition)
###   ("\<^const>Set.union"
###     ("_Coll" ("_position" x)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P)
###           ("_idts" ("_position" P')
###             ("_idts" ("_position" \<alpha>)
###               ("_idts" ("_position" P'') ("_position" P''')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###             ("_position" P'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P')
###                 ("_position" \<alpha>))
###               ("_position" P''))
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###                 ("_position" P'''))
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_arg"
###                     ("\<^const>Late_Semantics.residual.FreeR"
###                       ("_position" \<alpha>) ("_position" P'''))))))))))
###     ("_Coll" ("_position" x)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P)
###           ("_idts" ("_position" P')
###             ("_idts" ("_position" a)
###               ("_idts" ("_position" y)
###                 ("_idts" ("_position" P'') ("_position" P'''))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###             ("_position" P'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P')
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" y) ("_position" P'')))
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###                 ("_position" P'''))
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_arg"
###                     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                       ("_position" a) ("_position" y)
###                       ("_position" P'''))))))))))))
### ("\<^const>Pure.eq" ("_position" transition)
###   ("\<^const>Set.union"
###     ("_Coll" ("_position" x)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P)
###           ("_idts" ("_position" P')
###             ("_idts" ("_position" \<alpha>)
###               ("_idts" ("_position" P'') ("_position" P''')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###             ("_position" P'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P')
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P'')))
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###                 ("_position" P'''))
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_arg"
###                     ("\<^const>Late_Semantics.residual.FreeR"
###                       ("_position" \<alpha>) ("_position" P'''))))))))))
###     ("_Coll" ("_position" x)
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P)
###           ("_idts" ("_position" P')
###             ("_idts" ("_position" a)
###               ("_idts" ("_position" y)
###                 ("_idts" ("_position" P'') ("_position" P'''))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###             ("_position" P'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P')
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" y) ("_position" P'')))
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###                 ("_position" P'''))
###               ("\<^const>HOL.eq" ("_position" x)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_arg"
###                     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                       ("_position" a) ("_position" y)
###                       ("_position" P'''))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###                 ("_position" x) ("_position" P')))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###                 ("_position" x) ("_position" P')))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###                 ("_position" x) ("_position" P')))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###                 ("_position" x) ("_position" P')))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("\<^const>Late_Semantics.residual.FreeR"
###                 ("_position" \<alpha>) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" \<alpha>))
###               ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>simulation" ("_position" P) ("_position" Rel) ("_position" Q))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.BoundR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("_applC" ("_position" derivative)
###               ("_cargs" ("_position" P')
###                 ("_cargs" ("_position" Q')
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Rel))))))))))
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" \<alpha>) ("_position" Q'))
###       ("\<^const>HOL.implies"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.transitions" ("_position" P)
###                 ("_position" \<alpha>))
###               ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P''')
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("_position" \<alpha>))
###           ("_position" P'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P''')
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("_position" \<alpha>))
###           ("_position" P'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("_position" a))
###           ("_position" x) ("_position" P'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P''')
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("_position" a))
###           ("_position" x) ("_position" P'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P''')
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("_position" a))
###           ("_position" x) ("_position" P'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge"
###             ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###               ("_position" u))
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###       ("_position" u) ("_position" P'') ("_position" a) ("_position" x)
###       ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P''')
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge"
###             ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###               ("_position" u))
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###       ("_position" u) ("_position" P'') ("_position" a) ("_position" x)
###       ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("_position" a))
###           ("_position" x) ("_position" P'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge"
###             ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###               ("_position" u))
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###       ("_position" u) ("_position" P'') ("_position" a) ("_position" x)
###       ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P''')
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Tau_Chain.tauChain_judge"
###             ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###               ("_position" u))
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###       ("_position" u) ("_position" P'') ("_position" a) ("_position" x)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P'')
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P''')))
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P''')
###             ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P'')
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P''')))
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P''')
###             ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P'')
###               ("_position" \<alpha>))
###             ("_position" P'''))
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P''')
###             ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P'')
###               ("_position" \<alpha>))
###             ("_position" P'''))
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P''')
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 99 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P''')
###               ("_position" a))
###             ("_position" x) ("_position" P''))
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P''')
###               ("_position" a))
###             ("_position" x) ("_position" P''))
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P'')))
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P'')))
###           ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###         ("_position" u) ("_position" P'') ("_position" a) ("_position" x)
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P''')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P''')
###               ("_position" a))
###             ("_position" x) ("_position" P''))
###           ("\<^const>Late_Tau_Chain.tauChain_judge"
###             ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###               ("_position" u))
###             ("_position" P')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###         ("_position" u) ("_position" P'') ("_position" a) ("_position" x)
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P''')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P'')))
###           ("\<^const>Late_Tau_Chain.tauChain_judge"
###             ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###               ("_position" u))
###             ("_position" P')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###         ("_position" u) ("_position" P'') ("_position" a) ("_position" x)
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P''')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P''')
###               ("_position" a))
###             ("_position" x) ("_position" P''))
###           ("\<^const>Late_Tau_Chain.tauChain_judge"
###             ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###               ("_position" u))
###             ("_position" P')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###         ("_position" u) ("_position" P'') ("_position" a) ("_position" x)
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P''')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P''')
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P'')))
###           ("\<^const>Late_Tau_Chain.tauChain_judge"
###             ("\<^const>Agent.subst_name" ("_position" P'') ("_position" x)
###               ("_position" u))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" y) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" y) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" y) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" y) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a) ("_idts" ("_position" y) ("_position" Q')))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" y) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" y) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>) ("_position" Q'))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###       ("_position" P'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P)
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("\<^const>Late_Semantics.freeRes.TauR"))
###         ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 150 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" x)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" x))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" x)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" Q') ("_position" a))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" x))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 160 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("_position" a))
###       ("_position" x) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("_position" a))
###       ("_position" x) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 161 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_position" a))
###         ("_position" x) ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###       ("_position" u) ("_position" P') ("_position" a) ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###         ("_position" u)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###       ("_position" u) ("_position" P') ("_position" a) ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###         ("_position" u)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_position" a))
###         ("_position" x) ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###       ("_position" u) ("_position" P') ("_position" a) ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###         ("_position" u)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###       ("_position" u) ("_position" P') ("_position" a) ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###         ("_position" u)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 151 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" y)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" y) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" y)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" y) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" y)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" y) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" y)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" y) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" y) ("_position" Rel)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P')
###               ("_tuple_arg"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P')
###               ("_tuple_arg"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P')
###               ("_tuple_arg"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P')
###               ("_tuple_arg"
###                 ("\<^const>Agent.pi.Res" ("_position" x) ("_position" Q'))))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 197 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("_position" u) ("_position" P) ("_position" a) ("_position" x)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("_position" u) ("_position" P) ("_position" a) ("_position" x)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" u))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.BoundR"
###             ("\<^const>Late_Semantics.transitions" ("_position" P)
###               ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x) ("_position" P')))
###           ("_applC" ("_position" derivative)
###             ("_cargs" ("_position" P')
###               ("_cargs" ("_position" Q')
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" x) ("_position" Rel)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/Pi_Calculus/Strong_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 300 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" Rs)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###         ("_position" P))
###       ("_position" Rs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" Rs)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###         ("_position" P))
###       ("_position" Rs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 301 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###         ("_position" u) ("_position" P'') ("_position" b) ("_position" x)
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###         ("_position" P))
###       ("_position" u) ("_position" P'') ("_position" b) ("_position" x)
###       ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.inputTransition" ("_position" P)
###         ("_position" u) ("_position" P'') ("_position" b) ("_position" x)
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###         ("_position" P))
###       ("_position" u) ("_position" P'') ("_position" b) ("_position" x)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Strong_Late_Sim"
### 0.257s elapsed time, 0.544s cpu time, 0.071s GC time
### Ambiguous input (line 371 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 374 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("_position" a))
###     ("_position" b) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" b) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 541 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 598 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("_position" \<alpha>))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 600 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 621 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" Q) ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###           ("_position" a))
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###           ("_position" a))
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" Q) ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 678 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q) ("_position" \<alpha>))
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 680 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 703 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q) ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 705 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 733 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 736 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 765 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q) ("_position" a))
###     ("_position" y) ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 769 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 803 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("_position" a))
###     ("_position" y) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 808 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 839 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("_position" \<alpha>))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 842 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 865 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 985 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1004 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P) ("_position" a))
###           ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P''))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P) ("_position" a))
###           ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P''))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1006 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P''))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P''))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1097 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1134 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1150 of "$AFP/Pi_Calculus/Weak_Late_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Weak_Late_Step_Semantics"
### 0.301s elapsed time, 0.483s cpu time, 0.050s GC time
Loading theory "Draft.Weak_Late_Semantics" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.Weak_Late_Step_Sim" via "Draft.Weak_Late_Sim")
### Ambiguous input (line 21 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 66 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" b) ("_position" x) ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###         ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" b) ("_position" x) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" b))
###       ("_position" x) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###         ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" b) ("_position" x) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" b) ("_position" x) ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###           ("_position" P))
###         ("_position" b))
###       ("_position" x) ("_position" P'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" b))
###       ("_position" x) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###           ("_position" P))
###         ("_position" b))
###       ("_position" x) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 79 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###             ("_position" P))
###           ("_position" \<alpha>))
###         ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###             ("_position" P))
###           ("_position" \<alpha>))
###         ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###           ("_position" P))
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###           ("_position" P))
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P) ("_position" b))
###         ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_applC"
###           ("_list"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###           ("_position" P))
###         ("_position" b))
###       ("_position" x) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" b) ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_applC"
###           ("_list"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###           ("_position" P))
###         ("_position" b))
###       ("_position" x) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P) ("_position" b))
###         ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###         ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" b) ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" b) ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###         ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" b) ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P) ("_position" b))
###         ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###         ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" b) ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" b) ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###         ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" b) ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P) ("_position" b))
###         ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###           ("_position" P))
###         ("_position" b))
###       ("_position" x) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" b) ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###           ("_position" P))
###         ("_position" b))
###       ("_position" x) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###               ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###               ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###             ("_position" P))
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" c)
###             ("_position" P))
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_applC"
###             ("_list"
###               ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###             ("_position" P))
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_applC"
###             ("_list"
###               ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###             ("_position" P))
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###               ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" P) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" a) ("_position" c)))
###               ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 101 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 104 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("_position" a))
###     ("_position" b) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 115 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 118 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 141 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###       ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 144 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###       ("_position" \<alpha>))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###       ("_position" a))
###     ("_position" y) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 225 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_position" a))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 230 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 241 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 244 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 256 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 261 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 299 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P''))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" P''))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P) ("_position" a))
###           ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" a))
###       ("_position" x) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P) ("_position" a))
###           ("_position" x) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 300 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P''))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P) ("_position" \<alpha>))
###       ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" P''))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Tau_Chain.tauChain_judge" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 328 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###       ("_position" P') ("_position" \<alpha>))
###     ("_position" P'')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P')
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P''))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 330 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P''))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" P) ("_position" \<alpha>))
###     ("_position" P'')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 352 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 365 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 380 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 407 of "$AFP/Pi_Calculus/Weak_Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" P)
###       ("_position" a))
###     ("_position" b) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Weak_Late_Semantics"
### 0.162s elapsed time, 0.216s cpu time, 0.074s GC time
Loading theory "Draft.Weak_Late_Sim" (required by "Draft.Weak_Late_Step_SimTemplates" via "Draft.Weak_Late_Step_Sim")
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 24 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x) ("_position" P'))
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subst_name" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x) ("_position" P'))
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subst_name" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x)
###                     ("\<^const>HOL.conj" ("_position" P')
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subst_name" ("_position" Q')
###                               ("_position" x) ("_position" u))))
###                         ("_position" Rel))))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x)
###                     ("\<^const>HOL.conj" ("_position" P')
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subst_name" ("_position" Q')
###                               ("_position" x) ("_position" u))))
###                         ("_position" Rel))))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Set.member"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x)
###                       ("\<^const>HOL.conj" ("_position" P')
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subst_name" ("_position" Q')
###                               ("_position" x) ("_position" u))))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Set.member"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x)
###                       ("\<^const>HOL.conj" ("_position" P')
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subst_name" ("_position" Q')
###                               ("_position" x) ("_position" u))))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x) ("_position" P'))
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subs" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x) ("_position" P'))
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subs" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x)
###                     ("\<^const>HOL.conj" ("_position" P')
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subs" ("_position" Q')
###                               ("_position" x) ("_position" u))))
###                         ("_position" Rel))))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x)
###                     ("\<^const>HOL.conj" ("_position" P')
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subs" ("_position" Q')
###                               ("_position" x) ("_position" u))))
###                         ("_position" Rel))))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 15 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 192 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P)
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" x) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P)
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" x) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("\<^const>Late_Semantics.transitions" ("_position" Q)
###                 ("_position" a))
###               ("_position" x) ("_position" Q'))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("\<^const>Late_Semantics.transitions" ("_position" Q)
###                 ("_position" a))
###               ("_position" x) ("_position" Q'))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P)
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" x) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("\<^const>Late_Semantics.transitions" ("_position" Q)
###                 ("_position" a))
###               ("_position" x) ("_position" Q'))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P)
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" x) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("\<^const>Late_Semantics.transitions" ("_position" Q)
###                 ("_position" a))
###               ("_position" x) ("_position" Q'))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                   ("_position" P) ("_position" u) ("_position" P'')
###                   ("_position" a) ("_position" x)
###                   ("\<^const>HOL.conj" ("_position" P')
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subst_name" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                   ("_position" P) ("_position" u) ("_position" P'')
###                   ("_position" a) ("_position" x)
###                   ("\<^const>HOL.conj" ("_position" P')
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subst_name" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" b)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" InputS) ("_position" b))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" b) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder" ("_position" b)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" InputS) ("_position" b))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" b) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" b)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" BoundOutputS) ("_position" b))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" b) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_position" b)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" BoundOutputS) ("_position" b))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" b))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P')
###     ("\<^const>HOL.conj"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P')))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###         ("_position" Rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P')
###     ("\<^const>HOL.conj"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###         ("_position" Rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 224 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 225 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P) ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P) ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 272 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" Q) ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" Q) ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/Pi_Calculus/Weak_Late_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" Q) ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###         ("_position" Q) ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P) ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Semantics.weakLateTransition_judge" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Semantics.weakLateTransition_judge"
###             ("_position" P) ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Weak_Late_Sim"
### 0.853s elapsed time, 1.728s cpu time, 1.002s GC time
Loading theory "Draft.Weak_Late_Step_Sim" (required by "Draft.Weak_Late_Step_SimTemplates")
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 24 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x) ("_position" P'))
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subst_name" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x) ("_position" P'))
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subst_name" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x)
###                     ("\<^const>HOL.conj" ("_position" P')
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subst_name" ("_position" Q')
###                               ("_position" x) ("_position" u))))
###                         ("_position" Rel))))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x)
###                     ("\<^const>HOL.conj" ("_position" P')
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subst_name" ("_position" Q')
###                               ("_position" x) ("_position" u))))
###                         ("_position" Rel))))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Set.member"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x)
###                       ("\<^const>HOL.conj" ("_position" P')
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subst_name" ("_position" Q')
###                               ("_position" x) ("_position" u))))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Set.member"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x)
###                       ("\<^const>HOL.conj" ("_position" P')
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subst_name" ("_position" Q')
###                               ("_position" x) ("_position" u))))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x) ("_position" P'))
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subs" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                       ("_position" P) ("_position" u) ("_position" P'')
###                       ("_position" a) ("_position" x) ("_position" P'))
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subs" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                   ("_position" P) ("_position" a))
###                 ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x)
###                     ("\<^const>HOL.conj" ("_position" P')
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subs" ("_position" Q')
###                               ("_position" x) ("_position" u))))
###                         ("_position" Rel))))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAct)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" Rs)
###         ("_cargs" ("_position" C) ("_position" Rel)))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" Rs)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q')))
###         ("\<^const>HOL.implies"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                   ("_position" a) ("_position" x) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>HOL.implies"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))
###             ("\<^const>HOL.Ex_binder" ("_position" P'')
###               ("\<^const>HOL.All_binder" ("_position" u)
###                 ("\<^const>HOL.Ex_binder" ("_position" P')
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x)
###                     ("\<^const>HOL.conj" ("_position" P')
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" P')
###                           ("_tuple_arg"
###                             ("\<^const>Agent.subs" ("_position" Q')
###                               ("_position" x) ("_position" u))))
###                         ("_position" Rel))))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" Rs)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" Q')))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 15 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 192 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P)
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" x) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P)
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" x) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("\<^const>Late_Semantics.transitions" ("_position" Q)
###                 ("_position" a))
###               ("_position" x) ("_position" Q'))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("\<^const>Late_Semantics.transitions" ("_position" Q)
###                 ("_position" a))
###               ("_position" x) ("_position" Q'))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P)
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" x) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("\<^const>Late_Semantics.transitions" ("_position" Q)
###                 ("_position" a))
###               ("_position" x) ("_position" Q'))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P)
###               ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                 ("_position" a) ("_position" x) ("_position" P')))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("\<^const>Late_Semantics.transitions" ("_position" Q)
###                 ("_position" a))
###               ("_position" x) ("_position" Q'))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                     ("_position" P) ("_position" u) ("_position" P'')
###                     ("_position" a) ("_position" x) ("_position" P'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" P')
###                       ("_tuple_arg"
###                         ("\<^const>Agent.subst_name" ("_position" Q')
###                           ("_position" x) ("_position" u))))
###                     ("_position" Rel))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q')))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                   ("_position" P) ("_position" u) ("_position" P'')
###                   ("_position" a) ("_position" x)
###                   ("\<^const>HOL.conj" ("_position" P')
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subst_name" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" weakStepSimAux)
###     ("_cargs" ("_position" P) ("_cargs" ("_position" Rel) ("_position" Q))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q'))
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("\<^const>HOL.Ex_binder" ("_position" P')
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P) ("_position" a))
###               ("_position" x) ("_position" P'))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###               ("_position" Rel))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                 ("_position" a) ("_position" x) ("_position" Q')))
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("\<^const>HOL.Ex_binder" ("_position" P'')
###             ("\<^const>HOL.All_binder" ("_position" u)
###               ("\<^const>HOL.Ex_binder" ("_position" P')
###                 ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                   ("_position" P) ("_position" u) ("_position" P'')
###                   ("_position" a) ("_position" x)
###                   ("\<^const>HOL.conj" ("_position" P')
###                     ("\<^const>Set.member"
###                       ("_tuple" ("_position" P')
###                         ("_tuple_arg"
###                           ("\<^const>Agent.subst_name" ("_position" Q')
###                             ("_position" x) ("_position" u))))
###                       ("_position" Rel)))))))))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q') ("_position" \<alpha>))
###         ("\<^const>HOL.implies"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" \<alpha>))
###             ("_position" Q'))
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###                 ("_position" P)
###                 ("\<^const>Late_Semantics.residual.FreeR"
###                   ("_position" \<alpha>) ("_position" P')))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###                 ("_position" Rel)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 122 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" \<alpha>))
###             ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" \<alpha>))
###         ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q') ("_position" \<alpha>))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" b)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" InputS) ("_position" b))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" b) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.all_binder" ("_position" b)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" InputS) ("_position" b))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" b) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" b)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" BoundOutputS) ("_position" b))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" b))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.all_binder" ("_position" b)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" a)
###         ("_applC" ("_position" BoundOutputS) ("_position" b))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" b) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 207 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P')
###     ("\<^const>HOL.conj"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###         ("_position" Rel)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" P')
###     ("\<^const>HOL.conj"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P')))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###         ("_position" Rel)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 224 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 225 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subst_name" ("_position" Q')
###                       ("_position" x) ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Set.member"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x)
###                 ("\<^const>HOL.conj" ("_position" P')
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subst_name" ("_position" Q')
###                         ("_position" x) ("_position" u))))))
###               ("_position" Rel))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>HOL.conj"
###               ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###                 ("_position" P) ("_position" u) ("_position" P'')
###                 ("_position" a) ("_position" x) ("_position" P'))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" P')
###                   ("_tuple_arg"
###                     ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                       ("_position" u))))
###                 ("_position" Rel)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P'')
###         ("\<^const>HOL.All_binder" ("_position" u)
###           ("\<^const>HOL.Ex_binder" ("_position" P')
###             ("\<^const>Weak_Late_Step_Semantics.inputTransition"
###               ("_position" P) ("_position" u) ("_position" P'')
###               ("_position" a) ("_position" x)
###               ("\<^const>HOL.conj" ("_position" P')
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" P')
###                     ("_tuple_arg"
###                       ("\<^const>Agent.subs" ("_position" Q')
###                         ("_position" x) ("_position" u))))
###                   ("_position" Rel))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 226 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P) ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P) ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 419 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" Q) ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###               ("_position" P) ("_position" a))
###             ("_position" x) ("_position" P'))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" Q) ("_position" a))
###       ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q)
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" x) ("_position" Q'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" P')
###         ("\<^const>HOL.conj"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" x) ("_position" P')))
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###             ("_position" Rel)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/Pi_Calculus/Weak_Late_Step_Sim.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" Q) ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###           ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###       ("_position" Q)
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P) ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###         ("_position" Q) ("_position" \<alpha>))
###       ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" P')
###       ("\<^const>HOL.conj"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Weak_Late_Step_Semantics.weakTransition_judge"
###             ("_position" P) ("_position" \<alpha>))
###           ("_position" P'))
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" P') ("_tuple_arg" ("_position" Q')))
###           ("_position" Rel))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Weak_Late_Step_Sim"
### 0.395s elapsed time, 0.581s cpu time, 0.071s GC time
Loading theory "Draft.Weak_Late_Step_SimTemplates"
val templateLemmas =
   [("Weak_Late_Step_Sim.reflexive",
     "Id <= ?Rel ==> ?P \<leadsto><?Rel> ?P",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 0)
           ))),
    ("Weak_Late_Step_Sim.strongSimWeakEqSim",
     "?P \<leadsto>[?Rel] ?Q ==> ?P \<leadsto><?Rel> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Weak_Late_Step_Sim.weakSimWeakEqSim",
     "?P \<leadsto><?Rel> ?Q ==> ?P \<leadsto>\<^sup>^<?Rel> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Weak_Late_Step_Sim.monotonic",
     "[| ?P \<leadsto><?A> ?P'; ?A <= ?B |] ==> ?P \<leadsto><?B> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Weak_Late_Step_Sim.eqvtI",
     "[| ?P \<leadsto><?Rel> ?Q; ?Rel <= ?Rel'; eqvt ?Rel' |]
      ==> ?perm \<bullet> ?P \<leadsto><?Rel'> ?perm \<bullet> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 3, template_var 1),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4)),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Weak_Late_Step_Sim.simActFreeCases",
     "EX P'.
         ?P \<Longrightarrow>\<^sub>l ?\<alpha> \<prec> P' &
         (P', ?Q') : ?Rel ==>
      weakStepSimAct ?P (?\<alpha> \<prec> ?Q') ?P ?Rel",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_var 3),
             template_var 0)
           ))),
    ("Weak_Late_Step_Sim.simE",
     "[| ?P \<leadsto><?Rel> ?Q; ?Q \<longmapsto> ?\<alpha> \<prec> ?Q' |]
      ==> EX P'.
             ?P \<Longrightarrow>\<^sub>l ?\<alpha> \<prec> P' &
             (P', ?Q') : ?Rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Weak_Late_Step_Sim.simE",
     "[| ?P \<leadsto><?Rel> ?Q; ?Q \<longmapsto> ?a<\<nu>?x> \<prec> ?Q';
         ?x \<sharp> ?P |]
      ==> EX P'.
             ?P \<Longrightarrow>\<^sub>l ?a<\<nu>?x> \<prec> P' &
             (P', ?Q') : ?Rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 2)),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 5)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Weak_Late_Step_Sim.simE",
     "[| ?P \<leadsto><?Rel> ?Q; ?Q \<longmapsto> ?a<?x> \<prec> ?Q';
         ?x \<sharp> ?P |]
      ==> EX P''.
             ALL u.
                EX P'.
                   ?P \<Longrightarrow>\<^sub>lu in P''\<rightarrow>?a<?x> \<prec> P' &
                   (P', ?Q'[?x::=u]) : ?Rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 2)),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 5)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Weak_Late_Step_Sim.transitive",
     "[| ?P \<leadsto><?Rel> ?Q; ?Q \<leadsto><?Rel'> ?R; eqvt ?Rel;
         eqvt ?Rel''; ?Rel O ?Rel' <= ?Rel'';
         !!P Q. (P, Q) : ?Rel ==> P \<leadsto>\<^sup>^<?Rel> Q;
         (?P, ?Q) : ?Rel |]
      ==> ?P \<leadsto><?Rel''> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 4), template_var 2),
          template_var 0),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 3)),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 5),
               template_var 0),
             template_var 1)
           ))),
    ("Weak_Late_Step_Sim.simE2",
     "[| ?P \<leadsto><?Rel> ?Q;
         !!P Q. (P, Q) : ?Rel ==> P \<leadsto>\<^sup>^<?Rel> Q; eqvt ?Rel;
         (?P, ?Q) : ?Rel;
         ?Q \<Longrightarrow>\<^sub>l ?\<alpha> \<prec> ?Q' |]
      ==> EX P'.
             ?P \<Longrightarrow>\<^sub>l ?\<alpha> \<prec> P' &
             (P', ?Q') : ?Rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 2)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))),
              template_hole 2)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Weak_Late_Step_Sim.simE2",
     "[| ?P \<leadsto><?Rel> ?Q;
         !!P Q. (P, Q) : ?Rel ==> P \<leadsto>\<^sup>^<?Rel> Q; eqvt ?Rel;
         (?P, ?Q) : ?Rel;
         ?Q \<Longrightarrow>\<^sub>l ?a<\<nu>?x> \<prec> ?Q';
         ?x \<sharp> ?P |]
      ==> EX P'.
             ?P \<Longrightarrow>\<^sub>l ?a<\<nu>?x> \<prec> P' &
             (P', ?Q') : ?Rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 3)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 2)),
                      template_var 1),
                    template_var 0))),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 5)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Weak_Late_Step_Sim.simActBoundCases",
     "[| eqvt ?Rel;
         !!b. ?a = InputS b ==>
              EX P''.
                 ALL u.
                    EX P'.
                       ?P \<Longrightarrow>\<^sub>lu in P''\<rightarrow>b<?x> \<prec> P' &
                       (P', ?Q'[?x::=u]) : ?Rel;
         !!b. ?a = BoundOutputS b ==>
              EX P'.
                 ?P \<Longrightarrow>\<^sub>l b<\<nu>?x> \<prec> P' &
                 (P', ?Q') : ?Rel |]
      ==> weakStepSimAct ?P
           (?a\<guillemotleft>?x\<guillemotright> \<prec> ?Q') ?P ?Rel",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 4)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 1),
                   template_var 0)),
               template_var 2),
             template_var 4)
           ))),
    ("Weak_Late_Step_Sim.weakSimTauChain",
     "[| ?Q \<Longrightarrow>\<^sub>\<tau> ?Q'; (?P, ?Q) : ?Rel;
         !!P Q. (P, Q) : ?Rel ==> P \<leadsto><?Rel> Q |]
      ==> EX P'. ?P \<Longrightarrow>\<^sub>\<tau> P' & (P', ?Q') : ?Rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 9, template_app (template_hole 8, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 3)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Weak_Late_Step_Sim.simCases",
     "[| !!Q' a x.
            [| ?Q \<longmapsto> a<\<nu>x> \<prec> Q'; x \<sharp> ?P |]
            ==> EX P'.
                   ?P \<Longrightarrow>\<^sub>l a<\<nu>x> \<prec> P' &
                   (P', Q') : ?Rel;
         !!Q' a x.
            [| ?Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> ?P |]
            ==> EX P''.
                   ALL u.
                      EX P'.
                         ?P \<Longrightarrow>\<^sub>lu in P''\<rightarrow>a<x> \<prec> P' &
                         (P', Q'[x::=u]) : ?Rel;
         !!Q' \<alpha>.
            ?Q \<longmapsto> \<alpha> \<prec> Q' ==>
            EX P'.
               ?P \<Longrightarrow>\<^sub>l \<alpha> \<prec> P' &
               (P', Q') : ?Rel |]
      ==> ?P \<leadsto><?Rel> ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Weak_Late_Step_Sim.simCasesCont",
     "[| eqvt ?Rel;
         !!Q' a x.
            [| x \<sharp> ?C; ?Q \<longmapsto> a<\<nu>x> \<prec> Q' |]
            ==> EX P'.
                   ?P \<Longrightarrow>\<^sub>l a<\<nu>x> \<prec> P' &
                   (P', Q') : ?Rel;
         !!Q' a x.
            [| x \<sharp> ?C; ?Q \<longmapsto> a<x> \<prec> Q' |]
            ==> EX P''.
                   ALL u.
                      EX P'.
                         ?P \<Longrightarrow>\<^sub>lu in P''\<rightarrow>a<x> \<prec> P' &
                         (P', Q'[x::=u]) : ?Rel;
         !!Q' \<alpha>.
            ?Q \<longmapsto> \<alpha> \<prec> Q' ==>
            EX P'.
               ?P \<Longrightarrow>\<^sub>l \<alpha> \<prec> P' &
               (P', Q') : ?Rel |]
      ==> ?P \<leadsto><?Rel> ?Q",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 3)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Weak_Late_Step_SimTemplates"
### 0.432s elapsed time, 0.584s cpu time, 0.056s GC time
val it = (): unit
