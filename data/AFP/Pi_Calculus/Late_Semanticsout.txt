Loading theory "Draft.Agent" (required by "Draft.Late_SemanticsTemplates" via "Draft.Late_Semantics")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Late_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Late_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Late_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.585s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Late_SemanticsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.860s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Late_SemanticsTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.340s elapsed time, 1.360s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Late_SemanticsTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.645s cpu time, 0.958s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.046s elapsed time, 3.754s cpu time, 0.904s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.963s elapsed time, 6.075s cpu time, 1.213s GC time
Loading theory "Draft.Templates" (required by "Draft.Late_SemanticsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Late_SemanticsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.145s cpu time, 0.140s GC time
### length descr: 3
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: pi_Rep_set
Proofs for inductive predicate(s) "pi_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "pi_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 125 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/Pi_Calculus/Agent.thy") produces 80 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/Pi_Calculus/Agent.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" a))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" a))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 243 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 255 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 285 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subs" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subst_name" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seqSubs :: "pi => (name * name) list => pi"
### Ambiguous input (line 310 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subs" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subst_name" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seq_subst_name :: "name => (name * name) list => name"
### Ambiguous input (line 377 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Agent"
### 3.638s elapsed time, 8.966s cpu time, 1.520s GC time
Loading theory "Draft.Late_Semantics" (required by "Draft.Late_SemanticsTemplates")
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: subject_Rep_set
Proofs for inductive predicate(s) "subject_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "subject_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: freeRes_Rep_set
Proofs for inductive predicate(s) "freeRes_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "freeRes_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: residual_Rep_set
Proofs for inductive predicate(s) "residual_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "residual_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 28 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^fixed>transitions" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>transitions" ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###         ("_position" x) ("_position" P)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_Inputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" a))
###       ("_position" x) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 41 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###         ("_position" x) ("_position" Q')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" Q'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###         ("_position" x) ("_position" Q')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" Q'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P) ("_position" Rs)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" Rs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P) ("_position" Rs)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" Rs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("_position" a) ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###         ("_position" a))
###       ("_position" b) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 32 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^fixed>transitions" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" b))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" Q'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" b))
###           ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 32 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" b)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P)
###           ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" P'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 46 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" y))
###             ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" y) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" P')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^const>Late_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" y)
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" y))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" y) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("_position" a) ("_position" y) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^fixed>transitions" ("_position" Q) ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" Q)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" a)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" y)
###                         ("_position" a)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q')))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" x)
###                             ("_position" y))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Late_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###         ("_position" x)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.BoundR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" a))
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^fixed>transitions"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.FreeR"
###         ("\<^fixed>transitions" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "transitions"
  Proving monotonicity ...
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### Ambiguous input (line 92 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" a))
###     ("_position" x) ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 203 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###         ("_position" b))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###         ("_position" b))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###           ("_position" b))
###         ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 227 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 228 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 230 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P')
###       ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Par" ("_position" P')
###       ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 251 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 252 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" y) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 255 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###           ("_position" y))
###         ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par"
###         ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###           ("_position" y))
###         ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par"
###           ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###             ("_position" y))
###           ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 299 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" Q)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" Q) ("_position" a))
###     ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 302 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" y)
###       ("\<^const>Agent.pi.Par" ("_position" P')
###         ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" y)
###         ("\<^const>Agent.pi.Par" ("_position" P')
###           ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###             ("_position" y)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 346 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("_position" a))
###     ("_position" x)
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 368 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 370 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 371 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 372 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 373 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 374 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 375 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 376 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 378 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 398 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 399 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 400 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 401 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 402 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 404 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" Q)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" Q')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" Q)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" Q')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 406 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 408 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 583 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions" ("_position" P) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 585 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 586 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 587 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 588 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 589 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" Q') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 590 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 592 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" a))
###           ("_position" x) ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" Q)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" Q')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" Q')
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" Q)
###                     ("_cargs" ("_position" a)
###                       ("_cargs" ("_position" x) ("_position" Q')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 594 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" y) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" y) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" y) ("_position" x)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" x)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("\<^const>Agent.pi.Res" ("_position" y)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 596 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 775 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions" ("_position" P)
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions" ("_position" P)
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 777 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" c) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" c) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 778 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" c) ("_idts" ("_position" d) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 779 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 780 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 781 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 782 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 783 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" b)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" b))
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 784 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x)
###                   ("_position" C))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" b)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 785 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" y))
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" y))
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" y))
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" y)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_applC" ("_position" BoundR)
###             ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###               ("_cargs" ("_position" x) ("_position" P'))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" y))
###                 ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 786 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                   ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" Q')
###                   ("_position" x) ("_position" y))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" y)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" x)
###               ("_idts" ("_position" Q') ("_position" C))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_applC" ("_position" BoundR)
###               ("_cargs" ("_applC" ("_position" InputS) ("_position" a))
###                 ("_cargs" ("_position" x) ("_position" Q'))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" y)
###                     ("_position" P)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" y)
###                       ("_position" Q)))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.not_equal" ("_position" x)
###                           ("_position" y))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" y)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" Q')
###                   ("_position" x) ("_position" y))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 787 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 789 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "bangPred"
  Proving monotonicity ...
### Ambiguous input (line 808 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 810 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" b)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" b))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 811 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x') ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" y') ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x') ("_position" P))
###       ("_position" a))
###     ("_position" y') ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 814 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 822 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P)) ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 836 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 837 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs" ("_applC" ("_position" a) ("_list" ("_position" b)))
###         ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("_applC" ("_position" a) ("_list" ("_position" b)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs" ("_applC" ("_position" a) ("_list" ("_position" b)))
###         ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))
###         ("_position" P)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("_applC" ("_position" a) ("_list" ("_position" b)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###           ("_position" b))
###         ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 880 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" a)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" a)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 892 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" b)
###       ("_position" y) ("_position" yP'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b))
###     ("_position" y) ("_position" yP')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 919 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P)) ("_position" a))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 931 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 944 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 958 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" b)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 970 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 984 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" c)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c))
###     ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 998 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" c) ("_list" ("_position" d))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" c) ("_list" ("_position" d)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" c)
###         ("_position" d)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" c)
###         ("_position" d))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1012 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1027 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" b)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1041 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Tau" ("_position" P)))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Tau" ("_position" P)))
###       ("_position" a))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1054 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Tau" ("_position" P)))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Tau" ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Tau" ("_position" P)))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Tau" ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1068 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###           ("_position" P)))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1083 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.Transitions_BoundOutputjudge" ("_position" b)
###       ("_position" z) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" y)
###           ("_position" P)))
###       ("_position" b))
###     ("_position" z) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1096 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###           ("_position" P)))
###       ("\<^const>Late_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1111 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" c)
###       ("_position" y) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.Transitions_Inputjudge"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###           ("_position" P)))
###       ("_position" c))
###     ("_position" y) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1125 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###           ("_position" P)))
###       ("_applC" ("_position" b) ("_list" ("_position" y))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("_applC" ("_position" b) ("_list" ("_position" y)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###           ("_position" P)))
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###         ("_position" y)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" x)
###         ("_position" P)))
###     ("\<^const>Late_Semantics.residual.FreeR"
###       ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###         ("_position" y))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1163 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1206 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" PQ'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" a))
###     ("_position" x) ("_position" PQ')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1209 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" P)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("_position" a))
###         ("_position" x) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1210 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.transitions" ("_position" Q)
###         ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###           ("_position" x) ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Late_Semantics.residual.BoundR"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("_position" a))
###         ("_position" x) ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Prop)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1236 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1237 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1238 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" Q)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1239 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par"
###             ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###               ("_position" b))
###             ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1240 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" x)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" b)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" x)
###                         ("_position" C)))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" \<alpha>)
###                           ("\<^const>Late_Semantics.freeRes.TauR"))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P')
###             ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###               ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1241 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" y) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" Q')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" P')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par"
###               ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###                 ("_position" y))
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1243 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subs" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions" ("_position" Q)
###               ("_position" a))
###             ("_position" x) ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q')
###       ("_idts" ("_position" a) ("_idts" ("_position" x) ("_position" y)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions" ("_position" Q)
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.not_equal" ("_position" x)
###                     ("_position" y)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Nominal.fresh" ("_position" x)
###                       ("_position" P')))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Nominal.fresh" ("_position" y)
###                         ("_position" P)))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Nominal.fresh" ("_position" y)
###                           ("_position" Q)))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.not_equal" ("_position" y)
###                             ("_position" a)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Nominal.fresh" ("_position" y)
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Nominal.fresh" ("_position" x)
###                                 ("_position" C)))
###                             ("_asms"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" y)
###                                   ("_position" C)))
###                               ("_asm"
###                                 ("\<^const>HOL.Trueprop"
###                                   ("\<^const>HOL.eq" ("_position" \<alpha>)
###                                     ("\<^const>Late_Semantics.freeRes.TauR")))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Late_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" y)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("\<^const>Agent.subst_name" ("_position" Q') ("_position" x)
###                 ("_position" y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.FreeR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" xP')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###       ("_position" xP'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1267 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x)
###             ("_position" \<alpha>)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1292 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.transitions"
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###     ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###       ("_position" x) ("_position" yP'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Late_Semantics.residual.BoundR"
###     ("\<^const>Late_Semantics.transitions"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("_position" a))
###     ("_position" x) ("_position" yP')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1295 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###               ("_position" y))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("\<^const>Late_Semantics.freeRes.OutputR" ("_position" b)
###               ("_position" y)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" b) ("_list" ("_position" y)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" b) ("_position" P'))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" b) ("_list" ("_position" y))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" b) ("_position" y)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" a)
###               ("_applC" ("_position" BoundOutputS) ("_position" b)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_applC" ("_position" BoundOutputS) ("_position" b))
###           ("\<^const>Nominal.perm"
###             ("_list"
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1296 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" a)
###           ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" y) ("_position" a)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" a)
###           ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1322 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1323 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1324 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.BoundR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.BoundR"
###                         ("_position" a) ("_position" x)
###                         ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Bang" ("_position" P))
###           ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.BoundR"
###                         ("_position" a) ("_position" x)
###                         ("_position" P')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.BoundR" ("_position" a)
###               ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1326 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions"
###           ("\<^const>Agent.pi.Bang" ("_position" P))
###           ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Late_Semantics.residual.FreeR"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Late_Semantics.residual.FreeR"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR" ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1327 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                   ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" b)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.residual.FreeR"
###                         ("_applC" ("_position" OutputR)
###                           ("_cargs" ("_position" a) ("_position" b)))
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par"
###                 ("\<^const>Agent.subst_name" ("_position" P')
###                   ("_position" x) ("_position" b))
###                 ("_position" P'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1330 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                   ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.residual.FreeR"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.residual.FreeR"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" C)
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" F)
###                   ("_cargs" ("_position" C)
###                     ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                       ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                         ("_position" a) ("_position" x)
###                         ("_position" P'')))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.subst_name" ("_position" P'')
###                   ("_position" x) ("_position" b))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1333 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subst_name" ("_position" P')
###                     ("_position" x) ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" y) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_Inputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" x) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" y)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_Inputjudge" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###               ("_position" a) ("_position" y) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###                             ("_position" a) ("_position" y)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par"
###                   ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###                     ("_position" y))
###                   ("_position" P''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1336 of "$AFP/Pi_Calculus/Late_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subst_name" ("_position" P'')
###                     ("_position" x) ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###             ("\<^const>Late_Semantics.transitions"
###               ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a))
###             ("_position" x) ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###           ("\<^const>Late_Semantics.transitions" ("_position" P)
###             ("_position" a))
###           ("_position" y) ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" y)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" x)
###           ("_idts" ("_position" P'') ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Late_Semantics.transitions" ("_position" P)
###           ("\<^const>Late_Semantics.Transitions_BoundOutputjudge"
###             ("_position" a) ("_position" y) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Late_Semantics.transitions"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Late_Semantics.Transitions_Inputjudge"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" y) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Nominal.fresh" ("_position" y) ("_position" C)))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" C)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" F)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                           ("\<^const>Late_Semantics.Transitions_Inputjudge"
###                             ("_position" a) ("_position" x)
###                             ("_position" P'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Late_Semantics.residual.FreeR"
###               ("\<^const>Late_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" y)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("\<^const>Agent.subs" ("_position" P'') ("_position" x)
###                     ("_position" y)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Late_Semantics"
### 2.344s elapsed time, 2.575s cpu time, 0.247s GC time
Loading theory "Draft.Late_SemanticsTemplates"
val templateLemmas =
   [("Late_Semantics.freeRes_perm_empty",
     "[] \<bullet> ?freeRes_Rep = ?freeRes_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Late_Semantics.subject_perm_empty",
     "[] \<bullet> ?subject_Rep = ?subject_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Late_Semantics.residual_perm_empty",
     "[] \<bullet> ?residual_Rep = ?residual_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Late_Semantics.zeroTrans", "\<zero> \<longmapsto> ?Rs ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.nilCases'", "\<zero> \<longmapsto> ?Rs ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_hole 0),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("Late_Semantics.resZeroTrans",
     "<\<nu>?x>\<zero> \<longmapsto> ?Rs ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.residualInject",
     "(BoundOutputS ?x1.0 = BoundOutputS ?y1.0) = (?x1.0 = ?y1.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Late_Semantics.residualInject",
     "(InputS ?x1.0 = InputS ?y1.0) = (?x1.0 = ?y1.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Late_Semantics.mismatchTrans",
     "[?a\<noteq>?a]?P \<longmapsto> ?Rs ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.Input", "?a<?x>.?P \<longmapsto> ?a<?x> \<prec> ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0))
         )),
    ("Late_Semantics.tauBoundTrans",
     "\<tau>.?P \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?P' ==>
      False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.freeRes_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?freeRes_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?freeRes_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Late_Semantics.subject_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?subject_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?subject_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Late_Semantics.residual_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?residual_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?residual_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Late_Semantics.tauOutputTrans",
     "\<tau>.?P \<longmapsto> ?a[?b] \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.inputFreeTrans",
     "?a<?x>.?P \<longmapsto> ?\<alpha> \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.outputTauTrans",
     "?a{?b}.?P \<longmapsto> \<tau> \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.resTrans",
     "<\<nu>?x>?x<?y>.?P \<longmapsto> ?Rs ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.resTrans",
     "<\<nu>?x>?x{?b}.?P \<longmapsto> ?Rs ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.freeRes_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?freeRes_Rep = ?pi2.0 \<bullet> ?freeRes_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Late_Semantics.subject_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?subject_Rep = ?pi2.0 \<bullet> ?subject_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Late_Semantics.residual_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?residual_Rep = ?pi2.0 \<bullet> ?residual_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Late_Semantics.outputBoundTrans",
     "?a{?b}.?P \<longmapsto> ?c\<guillemotleft>?x\<guillemotright> \<prec> ?P' ==>
      False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.resTauBoundTrans",
     "<\<nu>?x>\<tau>.?P \<longmapsto> ?a\<guillemotleft>?y\<guillemotright> \<prec> ?P' ==>
      False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app (template_hole 2, template_var 3))),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.inputBoundOutputTrans",
     "?a<?x>.?P \<longmapsto> ?b<\<nu>?y> \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.resTauOutputTrans",
     "<\<nu>?x>\<tau>.?P \<longmapsto> ?a[?b] \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 3))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.resInputFreeTrans",
     "<\<nu>?x>?a<?y>.?P \<longmapsto> ?\<alpha> \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3),
                    template_var 2))),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.resOutputTauTrans",
     "<\<nu>?x>?a{?b}.?P \<longmapsto> \<tau> \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2),
                    template_var 1))),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.freshResidual",
     "[| ?P \<longmapsto> ?Rs; ?x \<sharp> ?P |] ==> ?x \<sharp> ?Rs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Late_Semantics.residualInject",
     "(?x2.0[?x1.0] = ?y2.0[?y1.0]) = (?x2.0 = ?y2.0 & ?x1.0 = ?y1.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Late_Semantics.residualInject",
     "(?x2.0 \<prec> ?x1.0 = ?y2.0 \<prec> ?y1.0) =
      (?x2.0 = ?y2.0 & ?x1.0 = ?y1.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Late_Semantics.resInputBoundOutputTrans",
     "<\<nu>?x>?a<?y>.?P \<longmapsto> ?b<\<nu>?z> \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3))),
              template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.resOutputInputTrans",
     "<\<nu>?x>?a{?b}.?P \<longmapsto> ?c<?y> \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3))),
              template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.resOutputOutputTrans",
     "<\<nu>?x>?a{?x}.?P \<longmapsto> ?b[?y] \<prec> ?P' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 5),
                    template_var 3))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.freshFreeDerivative",
     "[| ?P \<longmapsto> ?\<alpha> \<prec> ?P'; ?y \<sharp> ?P |]
      ==> ?y \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Late_Semantics.freshFreeDerivative",
     "[| ?P \<longmapsto> ?\<alpha> \<prec> ?P'; ?y \<sharp> ?P |]
      ==> ?y \<sharp> ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Late_Semantics.matchTrans",
     "[| [?a\<frown>?b]?P \<longmapsto> ?Rs; ?a ~= ?b |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate (template_hole 0))),
    ("Late_Semantics.freshBoundDerivative",
     "[| ?P \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?P';
         ?y \<sharp> ?P |]
      ==> ?y \<sharp> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 3)
           ))),
    ("Late_Semantics.substTrans",
     "?b \<sharp> ?P ==> ?P[?a::=?b][?b::=?c] = ?P[?a::=?c]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 3)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Late_Semantics.inputIneqTrans",
     "[| ?a<?x>.?P \<longmapsto> ?b\<guillemotleft>?y\<guillemotright> \<prec> ?P';
         ?a \<sharp> ?b |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 5),
              template_var 2)
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.name_abs_alpha",
     "?b \<sharp> ?P ==> [?a].?P = [?b].([(?a, ?b)] \<bullet> ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)),
                 template_hole 0)),
             template_var 1))))),
    ("Late_Semantics.alphaBoundResidual",
     "?x' \<sharp> ?P ==>
      ?a\<guillemotleft>?x\<guillemotright> \<prec> ?P =
      ?a\<guillemotleft>?x'\<guillemotright> \<prec> [(?x, ?x')] \<bullet>
               ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 3),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 3)),
                 template_hole 0)),
             template_var 2))))),
    ("Late_Semantics.outputFreshTrans",
     "[| ?a{?b}.?P \<longmapsto> ?\<alpha> \<prec> ?P';
         ?a \<sharp> ?\<alpha> | ?b \<sharp> ?\<alpha> |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 1)),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.residualInject",
     "(?x3.0\<guillemotleft>?x1.0\<guillemotright> \<prec> ?x2.0 =
       ?y3.0\<guillemotleft>?y1.0\<guillemotright> \<prec> ?y2.0) =
      (?x3.0 = ?y3.0 & [?x1.0].?x2.0 = [?y1.0].?y2.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Late_Semantics.freshBoundDerivative",
     "[| ?P \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?P';
         ?y \<sharp> ?P; ?y ~= ?x |]
      ==> ?y \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), template_var 1)
           ))),
    ("Late_Semantics.Par1B",
     "[| ?P \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?P';
         ?x \<sharp> ?Q |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?P' \<parallel>
                                   ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Late_Semantics.Par2B",
     "[| ?Q \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?Q';
         ?x \<sharp> ?P |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?P \<parallel>
                                   ?Q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Late_Semantics.outputIneqTrans",
     "[| ?a{?b}.?P \<longmapsto> ?c[?d] \<prec> ?P'; ?a ~= ?c | ?b ~= ?d |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 1)))
            )],
       template_predicate (template_hole 0))),
    ("Late_Semantics.sumCases",
     "[| ?P \<oplus> ?Q \<longmapsto> ?Rs; ?P \<longmapsto> ?Rs ==> ?Prop;
         ?Q \<longmapsto> ?Rs ==> ?Prop |]
      ==> ?Prop",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Late_Semantics.tauCases'",
     "[| \<tau>.?P \<longmapsto> ?Rs;
         !!P. [| \<tau>.?P = \<tau>.P; ?Rs = \<tau> \<prec> P |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.tauCases",
     "[| \<tau>.?P \<longmapsto> ?\<alpha> \<prec> ?P';
         [| ?\<alpha> = \<tau>; ?P = ?P' |] ==> ?Prop (\<tau>) ?P |]
      ==> ?Prop ?\<alpha> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 1)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_predicate
             (
                template_app
                 (template_app (template_var 0, template_hole 1),
                  template_var 3)
                )))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Late_Semantics.matchCases",
     "[| [?a\<frown>?b]?P \<longmapsto> ?Rs;
         [| ?P \<longmapsto> ?Rs; ?a = ?b |] ==> ?F ?a ?a |]
      ==> ?F ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_equation (template_var 4, template_var 3)],
            template_predicate
             (
                template_app
                 (template_app (template_var 0, template_var 4),
                  template_var 4)
                )))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 4), template_var 3)
           ))),
    ("Late_Semantics.bangCases",
     "[| !?P \<longmapsto> ?Rs;
         !!P. [| !?P = !P; P \<parallel> !P \<longmapsto> ?Rs |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.mismatchCases",
     "[| [?a\<noteq>?b]?P \<longmapsto> ?Rs;
         [| ?P \<longmapsto> ?Rs; ?a ~= ?b |] ==> ?F ?a ?b |]
      ==> ?F ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_negation
              (template_equation (template_var 4, template_var 3))],
            template_predicate
             (
                template_app
                 (template_app (template_var 0, template_var 4),
                  template_var 3)
                )))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 4), template_var 3)
           ))),
    ("Late_Semantics.ResB",
     "[| ?P \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?P';
         ?y \<sharp> ?a; ?y ~= ?x |]
      ==> <\<nu>?y>?P \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> <\<nu>?y>?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            ),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Late_Semantics.Comm1",
     "[| ?P \<longmapsto> ?a<?x> \<prec> ?P';
         ?Q \<longmapsto> ?a[?b] \<prec> ?Q' |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> \<tau> \<prec> ?P'[?x::=?b] \<parallel> ?Q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 5)),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_hole 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 4),
                     template_var 1)),
                 template_var 0)))
           ))),
    ("Late_Semantics.Comm2",
     "[| ?P \<longmapsto> ?a[?b] \<prec> ?P';
         ?Q \<longmapsto> ?a<?x> \<prec> ?Q' |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> \<tau> \<prec> ?P' \<parallel> ?Q'[?x::=?b]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4)),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 5)),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_hole 1),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1),
                   template_var 4))))
           ))),
    ("Late_Semantics.resCasesF",
     "[| <\<nu>?x>?P \<longmapsto> ?\<alpha> \<prec> ?xP';
         !!P'. [| ?P \<longmapsto> ?\<alpha> \<prec> P';
                  ?x \<sharp> ?\<alpha> |]
               ==> ?F (<\<nu>?x>P') |]
      ==> ?F ?xP'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Late_Semantics.outputCases",
     "[| ?a{?b}.?P \<longmapsto> ?\<alpha> \<prec> ?P';
         [| ?\<alpha> = ?a[?b]; ?P = ?P' |] ==> ?Prop (?a[?b]) ?P |]
      ==> ?Prop ?\<alpha> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4))],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 0,
                    template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4)),
                  template_var 3)
                )))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Late_Semantics.matchCases'",
     "[| [?a\<frown>?b]?P \<longmapsto> ?Rs;
         !!P b.
            [| ?a = b & ?b = b & ?P = P; P \<longmapsto> ?Rs |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.Close2",
     "[| ?P \<longmapsto> ?a<\<nu>?y> \<prec> ?P';
         ?Q \<longmapsto> ?a<?x> \<prec> ?Q'; ?y \<sharp> ?Q |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> \<tau> \<prec> <\<nu>?y>(?P' \<parallel>
              ?Q'[?x::=?y])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 5)),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 6, template_var 5)),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 4, template_var 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1),
                     template_var 4)))))
           ))),
    ("Late_Semantics.Close1",
     "[| ?P \<longmapsto> ?a<?x> \<prec> ?P';
         ?Q \<longmapsto> ?a<\<nu>?y> \<prec> ?Q'; ?y \<sharp> ?P |]
      ==> ?P \<parallel>
          ?Q \<longmapsto> \<tau> \<prec> <\<nu>?y>(?P'[?x::=?y] \<parallel>
              ?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 5)),
                  template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 6, template_var 5)),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 4, template_var 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 4),
                       template_var 1)),
                   template_var 0))))
           ))),
    ("Late_Semantics.outputCases'",
     "[| ?a{?b}.?P \<longmapsto> ?Rs;
         !!a b P.
            [| ?a = a & ?b = b & ?P = P; ?Rs = a[b] \<prec> P |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.mismatchCases'",
     "[| [?a\<noteq>?b]?P \<longmapsto> ?Rs;
         !!P a b.
            [| ?a = a & ?b = b & ?P = P; P \<longmapsto> ?Rs; a ~= b |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.inputCases'",
     "[| ?a<?b>.?P \<longmapsto> ?Rs;
         !!x a P.
            [| ?a = a & [?b].?P = [x].P; ?Rs = a<x> \<prec> P; x ~= a |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.sumCases'",
     "[| ?P \<oplus> ?Q \<longmapsto> ?Rs;
         !!P Q. [| ?P = P & ?Q = Q; P \<longmapsto> ?Rs |] ==> ?Pa;
         !!Q P. [| ?P = P & ?Q = Q; Q \<longmapsto> ?Rs |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.resCasesF'",
     "[| <\<nu>?x>?P \<longmapsto> ?\<alpha> \<prec> ?P';
         !!P \<alpha> P' y.
            [| <\<nu>?x>?P = <\<nu>y>P;
               ?\<alpha> \<prec> ?P' = \<alpha> \<prec> <\<nu>y>P';
               P \<longmapsto> \<alpha> \<prec> P'; y \<sharp> \<alpha> |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.parCasesB",
     "[| ?P \<parallel>
         ?Q \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?PQ';
         ?x \<sharp> ?P; ?x \<sharp> ?Q;
         !!P'. ?P \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> P' ==>
               ?Prop (P' \<parallel> ?Q);
         !!Q'. ?Q \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> Q' ==>
               ?Prop (?P \<parallel> Q') |]
      ==> ?Prop ?PQ'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 0, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Late_Semantics.inputCases",
     "[| ?a<?x>.?P \<longmapsto> ?b\<guillemotleft>?y\<guillemotright> \<prec> ?yP';
         ?y ~= ?a; ?y ~= ?x; ?y \<sharp> ?P;
         [| ?b = InputS ?a; ?yP' = [(?x, ?y)] \<bullet> ?P |]
         ==> ?Prop (InputS ?a) ?y ([(?x, ?y)] \<bullet> ?P) |]
      ==> ?Prop ?b ?y ?yP'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 6),
                    template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 2, template_var 6)),
        template_negation
         (template_equation (template_var 2, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 4)
            ),
        template_implication
         ([template_equation
            (template_var 3,
             template_app (template_hole 5, template_var 6))],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 2)),
                     template_hole 0)),
                 template_var 4))],
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_var 0,
                      template_app (template_hole 5, template_var 6)),
                    template_var 2),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app
                         (template_hole 2,
                          template_app
                           (template_app (template_hole 1, template_var 5),
                            template_var 2)),
                        template_hole 0)),
                    template_var 4))
                )))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Late_Semantics.resCasesB",
     "[| <\<nu>?y>?P \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> ?yP';
         ?x ~= ?y; ?x \<sharp> ?P;
         !!b P'.
            [| ?P \<longmapsto> b[?y] \<prec> P'; b ~= ?y;
               ?a = BoundOutputS b |]
            ==> ?F (BoundOutputS b) ([(?x, ?y)] \<bullet> P');
         !!P'. [| ?P \<longmapsto> ?a\<guillemotleft>?x\<guillemotright> \<prec> P';
                  ?y \<sharp> ?a |]
               ==> ?F ?a (<\<nu>?y>P') |]
      ==> ?F ?a ?yP'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 2, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 3), template_var 1)
           ))),
    ("Late_Semantics.resCasesB'",
     "[| <\<nu>?x'>?P \<longmapsto> ?a\<guillemotleft>?y'\<guillemotright> \<prec> ?P';
         !!P a b P'.
            [| <\<nu>?x'>?P = <\<nu>b>P;
               ?a\<guillemotleft>?y'\<guillemotright> \<prec> ?P' =
               a<\<nu>b> \<prec> P';
               P \<longmapsto> a[b] \<prec> P'; a ~= b |]
            ==> ?Pa;
         !!P a x P' y.
            [| <\<nu>?x'>?P = <\<nu>y>P;
               ?a\<guillemotleft>?y'\<guillemotright> \<prec> ?P' =
               a\<guillemotleft>x\<guillemotright> \<prec> <\<nu>y>P';
               P \<longmapsto> a\<guillemotleft>x\<guillemotright> \<prec> P';
               y \<sharp> a; y ~= x; x \<sharp> P; x \<sharp> a |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.parCasesB'",
     "[| ?P \<parallel>
         ?Q \<longmapsto> ?b\<guillemotleft>?y\<guillemotright> \<prec> ?P';
         !!P a x P' Q.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?b\<guillemotleft>?y\<guillemotright> \<prec> ?P' =
               a\<guillemotleft>x\<guillemotright> \<prec> P' \<parallel> Q;
               P \<longmapsto> a\<guillemotleft>x\<guillemotright> \<prec> P';
               x \<sharp> P; x \<sharp> Q; x \<sharp> a |]
            ==> ?Pa;
         !!Q a x Q' P.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?b\<guillemotleft>?y\<guillemotright> \<prec> ?P' =
               a\<guillemotleft>x\<guillemotright> \<prec> P \<parallel> Q';
               Q \<longmapsto> a\<guillemotleft>x\<guillemotright> \<prec> Q';
               x \<sharp> P; x \<sharp> Q; x \<sharp> a |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.resCases'",
     "[| <\<nu>?x>?P \<longmapsto> ?Rs;
         !!P a b P'.
            [| <\<nu>?x>?P = <\<nu>b>P; ?Rs = a<\<nu>b> \<prec> P';
               P \<longmapsto> a[b] \<prec> P'; a ~= b |]
            ==> ?Pa;
         !!P a x P' y.
            [| <\<nu>?x>?P = <\<nu>y>P;
               ?Rs = a\<guillemotleft>x\<guillemotright> \<prec> <\<nu>y>P';
               P \<longmapsto> a\<guillemotleft>x\<guillemotright> \<prec> P';
               y \<sharp> a; y ~= x; x \<sharp> P; x \<sharp> a |]
            ==> ?Pa;
         !!P \<alpha> P' y.
            [| <\<nu>?x>?P = <\<nu>y>P; ?Rs = \<alpha> \<prec> <\<nu>y>P';
               P \<longmapsto> \<alpha> \<prec> P'; y \<sharp> \<alpha> |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.outputInduct",
     "[| ?P \<longmapsto> ?a[?b] \<prec> ?P';
         !!a b P C. ?F C (a{b}.P) a b P;
         !!P a b P' c C.
            [| P \<longmapsto> a[b] \<prec> P'; !!C. ?F C P a b P' |]
            ==> ?F C ([c\<frown>c]P) a b P';
         !!P a b P' c d C.
            [| P \<longmapsto> a[b] \<prec> P'; !!C. ?F C P a b P';
               c ~= d |]
            ==> ?F C ([c\<noteq>d]P) a b P';
         !!P a b P' Q C.
            [| P \<longmapsto> a[b] \<prec> P'; !!C. ?F C P a b P' |]
            ==> ?F C (P \<oplus> Q) a b P';
         !!Q a b Q' P C.
            [| Q \<longmapsto> a[b] \<prec> Q'; !!C. ?F C Q a b Q' |]
            ==> ?F C (P \<oplus> Q) a b Q';
         !!P a b P' Q C.
            [| P \<longmapsto> a[b] \<prec> P'; !!C. ?F C P a b P' |]
            ==> ?F C (P \<parallel> Q) a b (P' \<parallel> Q);
         !!Q a b Q' P C.
            [| Q \<longmapsto> a[b] \<prec> Q'; !!C. ?F C Q a b Q' |]
            ==> ?F C (P \<parallel> Q) a b (P \<parallel> Q');
         !!P a b P' x C.
            [| P \<longmapsto> a[b] \<prec> P'; x ~= a; x ~= b;
               x \<sharp> C; !!C. ?F C P a b P' |]
            ==> ?F C (<\<nu>x>P) a b (<\<nu>x>P');
         !!P a b P' C.
            [| P \<parallel> !P \<longmapsto> a[b] \<prec> P';
               !!C. ?F C (P \<parallel> !P) a b P' |]
            ==> ?F C (!P) a b P' |]
      ==> ?F ?C ?P ?a ?b ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 3)),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 1, template_var 0),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Late_Semantics.parCasesF",
     "[| ?P \<parallel> ?Q \<longmapsto> ?\<alpha> \<prec> ?PQ';
         !!P'. ?P \<longmapsto> ?\<alpha> \<prec> P' ==>
               ?F ?\<alpha> (P' \<parallel> ?Q);
         !!Q'. ?Q \<longmapsto> ?\<alpha> \<prec> Q' ==>
               ?F ?\<alpha> (?P \<parallel> Q');
         !!P' Q' a b x.
            [| ?P \<longmapsto> a<x> \<prec> P';
               ?Q \<longmapsto> a[b] \<prec> Q'; x \<sharp> ?P;
               x \<sharp> ?Q; x ~= a; x ~= b; x \<sharp> Q'; x \<sharp> ?C;
               ?\<alpha> = \<tau> |]
            ==> ?F (\<tau>) (P'[x::=b] \<parallel> Q');
         !!P' Q' a b x.
            [| ?P \<longmapsto> a[b] \<prec> P';
               ?Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> ?P;
               x \<sharp> ?Q; x ~= a; x ~= b; x \<sharp> P'; x \<sharp> ?C;
               ?\<alpha> = \<tau> |]
            ==> ?F (\<tau>) (P' \<parallel> Q'[x::=b]);
         !!P' Q' a x y.
            [| ?P \<longmapsto> a<x> \<prec> P';
               ?Q \<longmapsto> a<\<nu>y> \<prec> Q'; x \<sharp> ?P;
               x \<sharp> ?Q; x ~= a; x ~= y; x \<sharp> Q'; y \<sharp> ?P;
               y \<sharp> ?Q; y ~= a; y \<sharp> P'; x \<sharp> ?C;
               y \<sharp> ?C; ?\<alpha> = \<tau> |]
            ==> ?F (\<tau>) (<\<nu>y>(P'[x::=y] \<parallel> Q'));
         !!P' Q' a x y.
            [| ?P \<longmapsto> a<\<nu>y> \<prec> P';
               ?Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> ?P;
               x \<sharp> ?Q; x ~= a; x ~= y; x \<sharp> P'; y \<sharp> ?P;
               y \<sharp> ?Q; y ~= a; y \<sharp> Q'; x \<sharp> ?C;
               y \<sharp> ?C; ?\<alpha> = \<tau> |]
            ==> ?F (\<tau>) (<\<nu>y>(P' \<parallel> Q'[x::=y])) |]
      ==> ?F ?\<alpha> ?PQ'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 14, template_var 3),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 3), template_var 2)
           ))),
    ("Late_Semantics.boundOutputInduct",
     "[| ?P \<longmapsto> ?a<\<nu>?x> \<prec> ?P'; ?x \<sharp> ?P;
         !!P a x P' b C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; !!C. ?F C P a x P' |]
            ==> ?F C ([b\<frown>b]P) a x P';
         !!P a x P' b c C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; !!C. ?F C P a x P';
               b ~= c |]
            ==> ?F C ([b\<noteq>c]P) a x P';
         !!P a x P' C.
            [| P \<longmapsto> a[x] \<prec> P'; a ~= x |]
            ==> ?F C (<\<nu>x>P) a x P';
         !!P Q a x P' C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; !!C. ?F C P a x P' |]
            ==> ?F C (P \<oplus> Q) a x P';
         !!P Q a x Q' C.
            [| Q \<longmapsto> a<\<nu>x> \<prec> Q'; !!C. ?F C Q a x Q' |]
            ==> ?F C (P \<oplus> Q) a x Q';
         !!P P' Q a x C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; x \<sharp> Q;
               !!C. ?F C P a x P' |]
            ==> ?F C (P \<parallel> Q) a x (P' \<parallel> Q);
         !!P Q Q' a x C.
            [| Q \<longmapsto> a<\<nu>x> \<prec> Q'; x \<sharp> P;
               !!C. ?F C Q a x Q' |]
            ==> ?F C (P \<parallel> Q) a x (P \<parallel> Q');
         !!P P' a x y C.
            [| P \<longmapsto> a<\<nu>x> \<prec> P'; y ~= a; y ~= x;
               y \<sharp> C; !!C. ?F C P a x P' |]
            ==> ?F C (<\<nu>y>P) a x (<\<nu>y>P');
         !!P a x P' C.
            [| P \<parallel> !P \<longmapsto> a<\<nu>x> \<prec> P';
               !!C. ?F C (P \<parallel> !P) a x P' |]
            ==> ?F C (!P) a x P' |]
      ==> ?F ?C ?P ?a ?x ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 5),
              template_app
               (template_app
                 (template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 4)),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 1, template_var 0),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Late_Semantics.inputInduct",
     "[| ?P \<longmapsto> ?a<?x> \<prec> ?P'; ?x \<sharp> ?P;
         !!a x P C. ?F C (a<x>.P) a x P;
         !!P a x P' b C.
            [| P \<longmapsto> a<x> \<prec> P'; !!C. ?F C P a x P' |]
            ==> ?F C ([b\<frown>b]P) a x P';
         !!P a x P' b c C.
            [| P \<longmapsto> a<x> \<prec> P'; !!C. ?F C P a x P';
               b ~= c |]
            ==> ?F C ([b\<noteq>c]P) a x P';
         !!P Q a x P' C.
            [| P \<longmapsto> a<x> \<prec> P'; !!C. ?F C P a x P' |]
            ==> ?F C (P \<oplus> Q) a x P';
         !!P Q a x Q' C.
            [| Q \<longmapsto> a<x> \<prec> Q'; !!C. ?F C Q a x Q' |]
            ==> ?F C (P \<oplus> Q) a x Q';
         !!P P' Q a x C.
            [| P \<longmapsto> a<x> \<prec> P'; x \<sharp> P; x \<sharp> Q;
               x ~= a; !!C. ?F C P a x P' |]
            ==> ?F C (P \<parallel> Q) a x (P' \<parallel> Q);
         !!P Q Q' a x C.
            [| Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> P; x \<sharp> Q;
               x ~= a; !!C. ?F C Q a x Q' |]
            ==> ?F C (P \<parallel> Q) a x (P \<parallel> Q');
         !!P P' a x y C.
            [| P \<longmapsto> a<x> \<prec> P'; y ~= a; y ~= x;
               y \<sharp> C; !!C. ?F C P a x P' |]
            ==> ?F C (<\<nu>y>P) a x (<\<nu>y>P');
         !!P a x P' C.
            [| P \<parallel> !P \<longmapsto> a<x> \<prec> P';
               !!C. ?F C (P \<parallel> !P) a x P' |]
            ==> ?F C (!P) a x P' |]
      ==> ?F ?C ?P ?a ?x ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 5),
              template_app
               (template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 4)),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 1, template_var 0),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Late_Semantics.parCasesF'",
     "[| ?P \<parallel> ?Q \<longmapsto> ?\<alpha> \<prec> ?P';
         !!P \<alpha> P' Q.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' = \<alpha> \<prec> P' \<parallel> Q;
               P \<longmapsto> \<alpha> \<prec> P' |]
            ==> ?Pa;
         !!Q \<alpha> Q' P.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' = \<alpha> \<prec> P \<parallel> Q';
               Q \<longmapsto> \<alpha> \<prec> Q' |]
            ==> ?Pa;
         !!P a x P' Q b Q'.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' =
               \<tau> \<prec> P'[x::=b] \<parallel> Q';
               P \<longmapsto> a<x> \<prec> P';
               Q \<longmapsto> a[b] \<prec> Q'; x \<sharp> P; x \<sharp> Q;
               x ~= a; x ~= b; x \<sharp> Q' |]
            ==> ?Pa;
         !!P a b P' Q x Q'.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' =
               \<tau> \<prec> P' \<parallel> Q'[x::=b];
               P \<longmapsto> a[b] \<prec> P';
               Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> P; x \<sharp> Q;
               x ~= a; x ~= b; x \<sharp> P' |]
            ==> ?Pa;
         !!P a x P' Q y Q'.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' =
               \<tau> \<prec> <\<nu>y>(P'[x::=y] \<parallel> Q');
               P \<longmapsto> a<x> \<prec> P';
               Q \<longmapsto> a<\<nu>y> \<prec> Q'; x \<sharp> P;
               x \<sharp> Q; y \<sharp> P; y \<sharp> Q; x ~= a;
               x \<sharp> Q'; y ~= a; y \<sharp> P'; x ~= y |]
            ==> ?Pa;
         !!P a y P' Q x Q'.
            [| ?P \<parallel> ?Q = P \<parallel> Q;
               ?\<alpha> \<prec> ?P' =
               \<tau> \<prec> <\<nu>y>(P' \<parallel> Q'[x::=y]);
               P \<longmapsto> a<\<nu>y> \<prec> P';
               Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> P; x \<sharp> Q;
               y \<sharp> P; y \<sharp> Q; x ~= a; x \<sharp> P'; y ~= a;
               y \<sharp> Q'; x ~= y |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 15, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("Late_Semantics.bangInduct",
     "[| !?P \<longmapsto> ?Rs;
         !!a x P' C.
            [| ?P \<longmapsto> a\<guillemotleft>x\<guillemotright> \<prec> P';
               x \<sharp> ?P; x \<sharp> C |]
            ==> ?F C (?P \<parallel> !?P)
                 (a\<guillemotleft>x\<guillemotright> \<prec> P' \<parallel>
                        !?P);
         !!\<alpha> P' C.
            ?P \<longmapsto> \<alpha> \<prec> P' ==>
            ?F C (?P \<parallel> !?P) (\<alpha> \<prec> P' \<parallel> !?P);
         !!a x P' C.
            [| !?P \<longmapsto> a\<guillemotleft>x\<guillemotright> \<prec> P';
               x \<sharp> ?P; x \<sharp> C;
               !!C. ?F C (!?P)
                     (a\<guillemotleft>x\<guillemotright> \<prec> P') |]
            ==> ?F C (?P \<parallel> !?P)
                 (a\<guillemotleft>x\<guillemotright> \<prec> ?P \<parallel>
                        P');
         !!\<alpha> P' C.
            [| !?P \<longmapsto> \<alpha> \<prec> P';
               !!C. ?F C (!?P) (\<alpha> \<prec> P') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<alpha> \<prec> ?P \<parallel> P');
         !!a x P' b P'' C.
            [| ?P \<longmapsto> a<x> \<prec> P';
               !?P \<longmapsto> a[b] \<prec> P''; x \<sharp> C;
               !!C. ?F C (!?P) (a[b] \<prec> P'') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<tau> \<prec> P'[x::=b] \<parallel> P'');
         !!a b P' x P'' C.
            [| ?P \<longmapsto> a[b] \<prec> P';
               !?P \<longmapsto> a<x> \<prec> P''; x \<sharp> C;
               !!C. ?F C (!?P) (a<x> \<prec> P'') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<tau> \<prec> P' \<parallel> P''[x::=b]);
         !!a x P' y P'' C.
            [| ?P \<longmapsto> a<x> \<prec> P';
               !?P \<longmapsto> a<\<nu>y> \<prec> P''; y \<sharp> ?P;
               x \<sharp> C; y \<sharp> C;
               !!C. ?F C (!?P) (a<\<nu>y> \<prec> P'') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<tau> \<prec> <\<nu>y>(P'[x::=y] \<parallel> P''));
         !!a y P' x P'' C.
            [| ?P \<longmapsto> a<\<nu>y> \<prec> P';
               !?P \<longmapsto> a<x> \<prec> P''; y \<sharp> ?P;
               x \<sharp> C; y \<sharp> C;
               !!C. ?F C (!?P) (a<x> \<prec> P'') |]
            ==> ?F C (?P \<parallel> !?P)
                 (\<tau> \<prec> <\<nu>y>(P' \<parallel> P''[x::=y]));
         !!Rs C.
            [| ?P \<parallel> !?P \<longmapsto> Rs;
               !!C. ?F C (?P \<parallel> !?P) Rs |]
            ==> ?F C (!?P) Rs |]
      ==> ?F ?C (!?P) ?Rs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 0),
               template_app (template_hole 17, template_var 3)),
             template_var 2)
           ))),
    ("Late_Semantics.tauInduct",
     "[| ?P \<longmapsto> \<tau> \<prec> ?P'; !!P C. ?F C (\<tau>.P) P;
         !!P P' c C.
            [| P \<longmapsto> \<tau> \<prec> P'; !!C. ?F C P P' |]
            ==> ?F C ([c\<frown>c]P) P';
         !!P P' c d C.
            [| P \<longmapsto> \<tau> \<prec> P'; !!C. ?F C P P'; c ~= d |]
            ==> ?F C ([c\<noteq>d]P) P';
         !!P P' Q C.
            [| P \<longmapsto> \<tau> \<prec> P'; !!C. ?F C P P' |]
            ==> ?F C (P \<oplus> Q) P';
         !!Q Q' P C.
            [| Q \<longmapsto> \<tau> \<prec> Q'; !!C. ?F C Q Q' |]
            ==> ?F C (P \<oplus> Q) Q';
         !!P P' Q C.
            [| P \<longmapsto> \<tau> \<prec> P'; !!C. ?F C P P' |]
            ==> ?F C (P \<parallel> Q) (P' \<parallel> Q);
         !!Q Q' P C.
            [| Q \<longmapsto> \<tau> \<prec> Q'; !!C. ?F C Q Q' |]
            ==> ?F C (P \<parallel> Q) (P \<parallel> Q');
         !!P a x P' Q b Q' C.
            [| P \<longmapsto> a<x> \<prec> P';
               Q \<longmapsto> a[b] \<prec> Q'; x \<sharp> P; x \<sharp> Q;
               x \<sharp> C |]
            ==> ?F C (P \<parallel> Q) (P'[x::=b] \<parallel> Q');
         !!P a b P' Q x Q' C.
            [| P \<longmapsto> a[b] \<prec> P';
               Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> P; x \<sharp> Q;
               x \<sharp> C |]
            ==> ?F C (P \<parallel> Q) (P' \<parallel> Q'[x::=b]);
         !!P a x P' Q y Q' C.
            [| P \<longmapsto> a<x> \<prec> P';
               Q \<longmapsto> a<\<nu>y> \<prec> Q'; x \<sharp> P;
               x \<sharp> Q; x \<sharp> C; y \<sharp> P; y \<sharp> Q;
               y \<sharp> C; x ~= y |]
            ==> ?F C (P \<parallel> Q) (<\<nu>y>(P'[x::=y] \<parallel> Q'));
         !!P a y P' Q x Q' C.
            [| P \<longmapsto> a<\<nu>y> \<prec> P';
               Q \<longmapsto> a<x> \<prec> Q'; x \<sharp> P; x \<sharp> Q;
               x \<sharp> C; y \<sharp> P; y \<sharp> Q; y \<sharp> C;
               x ~= y |]
            ==> ?F C (P \<parallel> Q) (<\<nu>y>(P' \<parallel> Q'[x::=y]));
         !!P P' x C.
            [| P \<longmapsto> \<tau> \<prec> P'; x \<sharp> C;
               !!C. ?F C P P' |]
            ==> ?F C (<\<nu>x>P) (<\<nu>x>P');
         !!P P' C.
            [| P \<parallel> !P \<longmapsto> \<tau> \<prec> P';
               !!C. ?F C (P \<parallel> !P) P' |]
            ==> ?F C (!P) P' |]
      ==> ?F ?C ?P ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 3),
              template_app
               (template_app (template_hole 20, template_hole 19),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 0),
               template_var 3),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.Late_SemanticsTemplates"
### 0.506s elapsed time, 0.708s cpu time, 0.055s GC time
val it = (): unit
