Loading theory "Draft.Agent" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.Weak_Early_Semantics" via "Draft.Weak_Early_Step_Semantics" via "Draft.Early_Tau_Chain" via "Draft.Early_Semantics")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.510s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.858s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.341s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.977s elapsed time, 3.695s cpu time, 0.824s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.054s elapsed time, 3.827s cpu time, 0.791s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.963s elapsed time, 6.162s cpu time, 1.041s GC time
Loading theory "Draft.Templates" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Weak_Early_SemanticsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.150s cpu time, 0.145s GC time
### length descr: 3
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: pi_Rep_set
Proofs for inductive predicate(s) "pi_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "pi_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 125 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.PiNil") ("_position" c)
###       ("_position" d))
###     ("\<^const>Agent.pi.PiNil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Tau"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Output"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Output"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###           ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" d))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Input"
###         ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###         ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Pi_Calculus/Agent.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Match"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Match"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" b) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/Pi_Calculus/Agent.thy") produces 80 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Mismatch"
###       ("\<^fixed>subs" ("_position" a) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Sum"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^const>Agent.subst_name" ("_position" Q) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Par"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d))
###       ("\<^fixed>subs" ("_position" Q) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^fixed>subs"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" d)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###         ("_position" c) ("_position" d))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^fixed>subs" ("_position" P) ("_position" c)
###           ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/Pi_Calculus/Agent.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>subs" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("\<^const>Agent.pi.Bang" ("_position" P))
###       ("_position" c) ("_position" d))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Bang"
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" c)
###         ("_position" d)))
###     ("\<^const>Agent.pi.Bang"
###       ("\<^fixed>subs" ("_position" P) ("_position" c) ("_position" d)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" a))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" a))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a) ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" c) ("_tuple_arg" ("_position" a))))
###         ("_position" P))
###       ("_position" c) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###       ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Nominal.fresh" ("_position" a)
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subs"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm" ("_position" p)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 220 of "$AFP/Pi_Calculus/Agent.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subst_name" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" b) ("_position" c))
###     ("\<^const>Agent.pi.Input"
###       ("\<^const>Agent.subs" ("_position" a) ("_position" b)
###         ("_position" c))
###       ("_position" x)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" b)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 243 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###       ("_position" P))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 255 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 285 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subs"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.subst_name"
###       ("\<^const>Agent.pi.Res" ("_position" a) ("_position" P))
###       ("_position" a) ("_position" b))
###     ("\<^const>Agent.pi.Res" ("_position" b)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("_position" supp)
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" b)))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_position" b)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" supp) ("_position" P))
###           ("_Finset" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subs" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>seqSubs" ("_position" P)
###       ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>)))
###     ("\<^fixed>seqSubs"
###       ("\<^const>Agent.subst_name" ("_position" P)
###         ("_applC" ("_position" fst) ("_position" x))
###         ("_applC" ("_position" snd) ("_position" x)))
###       ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seqSubs :: "pi => (name * name) list => pi"
### Ambiguous input (line 310 of "$AFP/Pi_Calculus/Agent.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subs" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs" ("_position" a)
###         ("\<^const>List.list.Cons" ("_position" x) ("_position" \<sigma>))))
###     ("_applC" ("_position" seq_subst_name)
###       ("_cargs"
###         ("\<^const>Agent.subst_name" ("_position" a)
###           ("_applC" ("_position" fst) ("_position" x))
###           ("_applC" ("_position" snd) ("_position" x)))
###         ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  seq_subst_name :: "name => (name * name) list => name"
### Ambiguous input (line 377 of "$AFP/Pi_Calculus/Agent.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("\<^const>Agent.pi.Mismatch"
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" a) ("_position" \<sigma>)))
###       ("_applC" ("_position" seq_subst_name)
###         ("_cargs" ("_position" b) ("_position" \<sigma>)))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Agent.seqSubs"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<sigma>))
###     ("_applC"
###       ("_list"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" a) ("_position" \<sigma>)))
###           ("_applC" ("_position" seq_subst_name)
###             ("_cargs" ("_position" b) ("_position" \<sigma>)))))
###       ("\<^const>Agent.seqSubs" ("_position" P) ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Agent"
### 3.873s elapsed time, 9.685s cpu time, 2.000s GC time
Loading theory "Draft.Early_Semantics" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.Weak_Early_Semantics" via "Draft.Weak_Early_Step_Semantics" via "Draft.Early_Tau_Chain")
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: freeRes_Rep_set
Proofs for inductive predicate(s) "freeRes_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "freeRes_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: residual_Rep_set
Proofs for inductive predicate(s) "residual_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "residual_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 42 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^fixed>TransitionsEarly" ("\<^const>Agent.pi.Tau" ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>TransitionsEarly" ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" Q)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" Q) ("_position" \<alpha>))
###         ("_position" Q'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u)))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###           ("_position" u))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###           ("_position" P))
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u)))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###           ("_position" u))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>TransitionsEarly"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>TransitionsEarly"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" V)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" V))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" V)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" b) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_applC" ("_position" a) ("_list" ("_position" b)))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("_applC" ("_position" a) ("_list" ("_position" b))))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b))
###           ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###             ("_position" b)))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x))
###           ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###             ("_position" x)))
###         ("_position" P')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" Q'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^fixed>TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" Q')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" x)
###                 ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR")
###         ("\<^const>Agent.pi.Res" ("_position" x)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^fixed>TransitionsEarly"
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###         ("_position" \<alpha>))
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^fixed>TransitionsEarly" ("_position" P) ("_position" \<alpha>))
###         ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" y) ("_position" \<alpha>)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>)
###         ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "TransitionsEarly"
  Proving monotonicity ...
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto> x2_ =
pi_ \<bullet> x1_ \<longmapsto> pi_ \<bullet> x2_
### Ambiguous input (line 81 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 99 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subs"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subs"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Agent.subst_name"
###         ("\<^const>Agent.subst_name"
###           ("_constrain" ("_position" P) ("_type_name" pi)) ("_position" a)
###           ("_position" b))
###         ("_position" b) ("_position" c))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" a)
###         ("_position" c)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###         ("_position" u)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 274 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P) ("_idts" ("_position" u) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" a))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###                   ("_position" u))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P) ("_idts" ("_position" u) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" a))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###                   ("_position" u))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 276 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" b) ("_position" b)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 277 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 278 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 279 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 280 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 281 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" u)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" u)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" u)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 283 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" u) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" u)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" u) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" u) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 291 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" r)))
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" u) ("_tuple_arg" ("_position" r))))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" r))
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" u) ("_tuple_arg" ("_position" r))))
###         ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 338 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 365 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x)))
###     ("_position" Q')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x))
###       ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 368 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 413 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 415 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" c) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 416 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" c) ("_position" d)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" c)
###             ("_idts" ("_position" d) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" c) ("_position" d))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" c) ("_position" d)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 418 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 419 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" Q))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" Q')
###           ("_idts" ("_position" P) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" Q'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Par" ("_position" P)
###                   ("_position" Q'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 421 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" x) ("_position" C))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" b)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("_position" P)
###                         ("_cargs" ("_position" a)
###                           ("_cargs" ("_position" b)
###                             ("_position" P')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b)
###                 ("\<^const>Agent.pi.Res" ("_position" x)
###                   ("_position" P'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 423 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" b) ("_position" P'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" b) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 441 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" b) ("_position" c)
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" b)
###             ("_idts" ("_position" c) ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P)
###                   ("_cargs" ("_position" a)
###                     ("_cargs" ("_position" x) ("_position" P'))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" b) ("_position" c))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" b) ("_position" c)))
###               ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 442 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x) ("_idts" ("_position" P') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" x))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" x)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x) ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 638 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 640 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" a) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" a) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 641 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###               ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" a) ("_position" b))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("_applC"
###               ("_list"
###                 ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###               ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 642 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 643 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###             ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 644 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" Q) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" P) ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 645 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" Q'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" Q)
###     ("_idts" ("_position" Q') ("_idts" ("_position" P) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" Q')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("_position" Q) ("_position" Q'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 646 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 647 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 648 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 649 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" P')
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" Q') ("_position" C)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" x) ("_position" a)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Nominal.fresh" ("_position" x)
###                     ("_position" C)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###             ("\<^const>Agent.pi.Res" ("_position" x)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" Q')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 650 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P)
###     ("_idts" ("_position" P') ("_idts" ("_position" x) ("_position" C))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("_position" P) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###             ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 652 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Par" ("_position" P)
###             ("\<^const>Agent.pi.Bang" ("_position" P)))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P) ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs"
###                   ("\<^const>Agent.pi.Par" ("_position" P)
###                     ("\<^const>Agent.pi.Bang" ("_position" P)))
###                   ("_position" P'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "bangPred"
  Proving monotonicity ...
### Ambiguous input (line 668 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 671 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 673 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" A))
###       ("_position" \<alpha>))
###     ("_position" A')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" A))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" A'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 680 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Tau" ("_position" P)) ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 693 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 694 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" u)
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###           ("_position" u))))))
### ("\<^const>Pure.all_binder" ("_position" u)
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###           ("_position" u))
###         ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###           ("_position" u))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 727 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 748 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" a)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" a)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 775 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" Rs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" Rs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 875 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" PQ'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 876 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 877 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 890 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b)))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b))
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 891 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 892 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 905 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>))
###     ("_position" PQ')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" PQ'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 906 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 907 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### ("\<^const>Pure.all_binder" ("_position" Q')
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("_position" \<alpha>))
###           ("_position" Q'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>)
###           ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 908 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" a) ("_list" ("_position" b)))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("_applC" ("_position" a) ("_list" ("_position" b))))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 909 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 8 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" Q'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" a) ("_list" ("_position" b)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" b))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" a) ("_list" ("_position" b))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" Q')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 910 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 911 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x))
###               ("_position" Q'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" P')
###     ("_idts" ("_position" Q') ("_idts" ("_position" a) ("_position" x))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" Q)
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x)))
###             ("_position" Q')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" Q)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x)
###                 ("_position" C)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("\<^const>Early_Semantics.freeRes.TauR")
###           ("\<^const>Agent.pi.Res" ("_position" x)
###             ("\<^const>Agent.pi.Par" ("_position" P')
###               ("_position" Q'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1033 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly"
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###       ("_position" \<alpha>))
###     ("_position" RP')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" RP'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1035 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("_position" \<alpha>))
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1090 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" y)))
###             ("_position" P'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" y)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Nominal.perm"
###           ("_list"
###             ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###           ("_position" P'))))))
### ("\<^const>Pure.all_binder" ("_position" P')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" y))))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" y)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("\<^const>Nominal.perm"
###           ("_list"
###             ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1198 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" \<alpha>) ("_type_name" freeRes))
###     ("_idts" ("_idtyp" ("_position" P') ("_type_name" pi)) ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" \<alpha>) ("_type_name" freeRes))
###     ("_idts" ("_idtyp" ("_position" P') ("_type_name" pi)) ("_position" C)))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_position" \<alpha>))
###           ("_position" P'))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("\<^const>Agent.pi.Bang" ("_position" P))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1200 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly"
###           ("\<^const>Agent.pi.Bang" ("_position" P))
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P'))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Early_Semantics.Transitions_Freejudge"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" \<alpha>)
###     ("_idts" ("_position" P') ("_position" C)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("_position" \<alpha>))
###           ("_position" P')))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" C)
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F)
###               ("_cargs" ("_position" C)
###                 ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                   ("\<^const>Early_Semantics.Transitions_Freejudge"
###                     ("_position" \<alpha>) ("_position" P')))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>)
###               ("\<^const>Agent.pi.Par" ("_position" P)
###                 ("_position" P')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1201 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b)))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" P')
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" b)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("_applC" ("_position" OutputR)
###                 ("_cargs" ("_position" a) ("_position" b))))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("_applC" ("_position" OutputR)
###                         ("_cargs" ("_position" a) ("_position" b)))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1203 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b))
###               ("_position" P''))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b)))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" b)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("_applC" ("_position" OutputR)
###               ("_cargs" ("_position" a) ("_position" b))))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" b)))
###             ("_position" P'')))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" C)
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" F)
###                 ("_cargs" ("_position" C)
###                   ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                     ("\<^const>Early_Semantics.Transitions_Freejudge"
###                       ("\<^const>Early_Semantics.freeRes.InputR"
###                         ("_position" a) ("_position" b))
###                       ("_position" P''))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Par" ("_position" P')
###                 ("_position" P'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1205 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x))
###             ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.residual.BoundOutputR"
###                           ("_position" a) ("_position" x)
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###               ("_position" x)))
###           ("_position" P')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.residual.BoundOutputR"
###                           ("_position" a) ("_position" x)
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1207 of "$AFP/Pi_Calculus/Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly"
###             ("\<^const>Agent.pi.Bang" ("_position" P))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x))
###               ("_position" P''))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.Transitions_Freejudge"
###                           ("\<^const>Early_Semantics.freeRes.InputR"
###                             ("_position" a) ("_position" x))
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" a)
###     ("_idts" ("_position" x)
###       ("_idts" ("_position" P')
###         ("_idts" ("_position" P'') ("_position" C)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly"
###               ("\<^const>Agent.pi.Bang" ("_position" P))
###               ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###                 ("_position" x)))
###             ("_position" P'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Nominal.fresh" ("_position" x) ("_position" P)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Nominal.fresh" ("_position" x) ("_position" C)))
###             ("_asm"
###               ("\<^const>Pure.all_binder" ("_position" C)
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" F)
###                     ("_cargs" ("_position" C)
###                       ("_cargs" ("\<^const>Agent.pi.Bang" ("_position" P))
###                         ("\<^const>Early_Semantics.Transitions_Freejudge"
###                           ("\<^const>Early_Semantics.freeRes.InputR"
###                             ("_position" a) ("_position" x))
###                           ("_position" P''))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" C)
###           ("_cargs"
###             ("\<^const>Agent.pi.Par" ("_position" P)
###               ("\<^const>Agent.pi.Bang" ("_position" P)))
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("\<^const>Agent.pi.Res" ("_position" x)
###                 ("\<^const>Agent.pi.Par" ("_position" P')
###                   ("_position" P''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Early_Semantics"
### 1.653s elapsed time, 1.777s cpu time, 0.151s GC time
Loading theory "Draft.Early_Tau_Chain" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.Weak_Early_Semantics" via "Draft.Weak_Early_Step_Semantics")
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Early_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>tauChain" ("_position" P) ("_position" P'))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###     ("\<^const>Transitive_Closure.rtrancl"
###       ("_Setcompr"
###         ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###         ("_idts" ("_position" P) ("_position" P'))
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P')))))))
### ("\<^const>Pure.eq" ("\<^fixed>tauChain" ("_position" P) ("_position" P'))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###     ("\<^const>Transitive_Closure.rtrancl"
###       ("_Setcompr"
###         ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###         ("_idts" ("_position" P) ("_position" P'))
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###             ("\<^const>Early_Semantics.freeRes.TauR"))
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/Pi_Calculus/Early_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/Pi_Calculus/Early_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P')
###           ("\<^const>Early_Semantics.freeRes.TauR"))
###         ("_position" P'')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P'')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P')
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P''))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P'')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 28 of "$AFP/Pi_Calculus/Early_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P')
###         ("_position" P'')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P'')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P')
###         ("_position" P'')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P'')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/Pi_Calculus/Early_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" P'') ("_position" P'''))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###           ("_position" P'')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P'')
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.freeRes.TauR")
###               ("_position" P'''))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F) ("_position" P''))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F) ("_position" P''')))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" P'') ("_position" P'''))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###           ("_position" P'')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P'')
###               ("\<^const>Early_Semantics.freeRes.TauR"))
###             ("_position" P''')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" F) ("_position" P''))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F) ("_position" P''')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/Pi_Calculus/Early_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Tau_Chain.tauChain"
###     ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Tau_Chain.tauChain"
###     ("_applC"
###       ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###       ("_position" P))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 307 of "$AFP/Pi_Calculus/Early_Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Tau_Chain.tauChain"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x) ("_position" b))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Tau_Chain.tauChain"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" b))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 309 of "$AFP/Pi_Calculus/Early_Tau_Chain.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Tau_Chain.tauChain"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x) ("_position" b))
###     ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Tau_Chain.tauChain"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" b))
###     ("\<^const>Agent.subs" ("_position" P') ("_position" x)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Tau_Chain.tauChain"
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x) ("_position" b))
###     ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###       ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Tau_Chain.tauChain"
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" b))
###     ("\<^const>Agent.subst_name" ("_position" P') ("_position" x)
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Early_Tau_Chain"
### 0.076s elapsed time, 0.098s cpu time, 0.000s GC time
Loading theory "Draft.Weak_Early_Step_Semantics" (required by "Draft.Weak_Early_SemanticsTemplates" via "Draft.Weak_Early_Semantics")
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_applC" ("_position" a) ("_list" ("_position" b))))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b)))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.TauR"))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>outputTransition" ("_position" P) ("_position" a)
###     ("_position" x) ("_position" P'))
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P''') ("_position" P''))
###     ("\<^const>HOL.conj"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P'')))
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###           ("_position" P'))))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.eq"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x) ("_position" P'))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P''') ("_position" P''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" P'')))
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.eq"
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P''') ("_position" P''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>) ("_position" P'')))
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>freeTransition" ("_position" P) ("_position" \<alpha>)
###     ("_position" P'))
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P''') ("_position" P''))
###     ("\<^const>HOL.conj"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P'')))
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###           ("_position" P'))))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.eq"
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P''') ("_position" P''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###               ("_position" \<alpha>))
###             ("_position" P''))
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>freeTransition" ("_position" P) ("_position" \<alpha>)
###     ("_position" P'))
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P''') ("_position" P''))
###     ("\<^const>HOL.conj"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###             ("_position" \<alpha>))
###           ("_position" P''))
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###           ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###             ("_position" \<alpha>))
###           ("_position" P'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###             ("_position" \<alpha>))
###           ("_position" P'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 135 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P''')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P''))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" a) ("_position" x) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P'') ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###             ("_position" P''))
###           ("\<^const>HOL.conj"
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P'')
###                 ("_position" \<alpha>))
###               ("_position" P'''))
###             ("\<^const>Early_Tau_Chain.tauChain" ("_position" P''')
###               ("_position" P'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###           ("_position" P''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P'')
###               ("_position" \<alpha>))
###             ("_position" P'''))
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P''')
###             ("_position" P')))))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P'') ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###             ("_position" P''))
###           ("\<^const>HOL.conj"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P'')
###               ("\<^const>Early_Semantics.Transitions_Freejudge"
###                 ("_position" \<alpha>) ("_position" P''')))
###             ("\<^const>Early_Tau_Chain.tauChain" ("_position" P''')
###               ("_position" P'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###           ("_position" P''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P'')
###             ("\<^const>Early_Semantics.Transitions_Freejudge"
###               ("_position" \<alpha>) ("_position" P''')))
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P''')
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" P'') ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###             ("_position" P'''))
###           ("\<^const>HOL.conj"
###             ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###               ("\<^const>Early_Semantics.residual.BoundOutputR"
###                 ("_position" a) ("_position" x) ("_position" P'')))
###             ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###               ("_position" P'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" a) ("_position" x) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" P'') ("_position" P'''))
###       ("\<^const>HOL.conj"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###           ("_position" P'''))
###         ("\<^const>HOL.conj"
###           ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P''')
###             ("\<^const>Early_Semantics.residual.BoundOutputR"
###               ("_position" a) ("_position" x) ("_position" P'')))
###           ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###             ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###     ("_position" a) ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" y)
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###         ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###     ("_position" a) ("_position" y)
###     ("\<^const>Nominal.perm"
###       ("_list" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 182 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" a) ("_position" x) ("_position" P'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P'))))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 183 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###         ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P'))))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###         ("_position" \<alpha>))
###       ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 201 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("\<^const>Agent.pi.Tau" ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Tau" ("_position" P))
###     ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###       ("_position" u))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###       ("_position" u))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" u))
###       ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###       ("_position" u))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" u))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 228 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_applC" ("_position" a) ("_list" ("_position" b))) ("_position" P)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###       ("_position" b))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 244 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" b)
###         ("_position" x) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###         ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###           ("_position" P))
###         ("_position" b) ("_position" x) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" b) ("_position" x) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###         ("_position" P))
###       ("_position" b) ("_position" x) ("_position" P'))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" b)
###         ("_position" x) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###           ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" b)
###           ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" b) ("_position" x) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" b)
###         ("_position" x) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 245 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###           ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###         ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###           ("_position" P))
###         ("_position" \<alpha>) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("\<^const>Agent.pi.Match" ("_position" a) ("_position" a)
###         ("_position" P))
###       ("_position" \<alpha>) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 293 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###         ("_position" c) ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" x) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" c)
###           ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" c) ("_position" x) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###         ("_position" c) ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" c)
###         ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" c)
###           ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" c)
###         ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###         ("_position" c) ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" c)
###         ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" c)
###           ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" c)
###         ("_position" x) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###         ("_position" c) ("_position" x) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" x) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" c)
###           ("_position" x) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" c) ("_position" x) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 294 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###         ("_position" \<alpha>) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###         ("_position" \<alpha>) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###         ("_position" \<alpha>) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("\<^const>Agent.pi.Mismatch" ("_position" a) ("_position" b)
###         ("_position" P))
###       ("_position" \<alpha>) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###         ("_position" \<alpha>) ("_position" P')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<alpha>) ("_position" P'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("_applC"
###         ("_list" ("\<^const>HOL.not_equal" ("_position" a) ("_position" b)))
###         ("_position" P))
###       ("_position" \<alpha>) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 341 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("_applC" ("_position" a) ("_list" ("_position" b))) ("_position" P')))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###       ("_position" b))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 344 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" b) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###     ("\<^const>Agent.pi.Res" ("_position" b) ("_position" P))
###     ("_position" a) ("_position" b) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 363 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###         ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###         ("_position" a) ("_position" x) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" a) ("_position" x) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" a) ("_position" x) ("_position" P'))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" a) ("_position" x) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 364 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###         ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 409 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###         ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###         ("_position" a) ("_position" x) ("_position" Q')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" Q)
###       ("_position" a) ("_position" x) ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" a) ("_position" x) ("_position" Q'))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" Q')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" Q'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" Q)
###       ("_position" a) ("_position" x) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 410 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" Q')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" Q'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" Q)
###       ("_position" \<alpha>) ("_position" Q')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" Q')))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" Q')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###         ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###         ("_position" \<alpha>) ("_position" Q')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" Q)
###       ("_position" \<alpha>) ("_position" Q')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("\<^const>Agent.pi.Sum" ("_position" P) ("_position" Q))
###       ("_position" \<alpha>) ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 454 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###     ("_position" a) ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 457 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("_position" a) ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 475 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("_position" \<alpha>) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 477 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("_position" \<alpha>)
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 496 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" Q)
###     ("_position" a) ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 499 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("_position" a) ("_position" x)
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 517 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" Q)
###     ("_position" \<alpha>) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 519 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("_position" \<alpha>)
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 539 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###       ("_position" b))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 540 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" Q)
###     ("_applC" ("_position" a) ("_list" ("_position" b))) ("_position" Q')))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" Q)
###     ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###       ("_position" b))
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 542 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.freeRes.TauR")
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 568 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("_applC" ("_position" a) ("_list" ("_position" b))) ("_position" P')))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###       ("_position" b))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 569 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" Q)
###     ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###       ("_position" b))
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 571 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.freeRes.TauR")
###     ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###       ("_position" x))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 598 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x) ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" Q)
###     ("_position" a) ("_position" x) ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 601 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.freeRes.TauR")
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 630 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###     ("_position" a) ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 631 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" Q))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" x))
###       ("_position" Q'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" Q)
###     ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###       ("_position" x))
###     ("_position" Q')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 634 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR")
###       ("\<^const>Agent.pi.Res" ("_position" x)
###         ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Par" ("_position" P) ("_position" Q))
###     ("\<^const>Early_Semantics.freeRes.TauR")
###     ("\<^const>Agent.pi.Res" ("_position" x)
###       ("\<^const>Agent.pi.Par" ("_position" P') ("_position" Q')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 661 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("_position" \<alpha>) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 664 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P))
###     ("_position" \<alpha>)
###     ("\<^const>Agent.pi.Res" ("_position" x) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 685 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###     ("_position" a) ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 689 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x)
###       ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P))
###     ("_position" a) ("_position" x)
###     ("\<^const>Agent.pi.Res" ("_position" y) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 708 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P)
###       ("\<^const>Agent.pi.Bang" ("_position" P))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###         ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a)
###         ("_position" x) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("\<^const>Agent.pi.Par" ("_position" P)
###         ("\<^const>Agent.pi.Bang" ("_position" P)))
###       ("_position" a) ("_position" x) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P)
###       ("\<^const>Agent.pi.Bang" ("_position" P))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("\<^const>Agent.pi.Bang" ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("\<^const>Agent.pi.Par" ("_position" P)
###         ("\<^const>Agent.pi.Bang" ("_position" P)))
###       ("_position" a) ("_position" x) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("\<^const>Agent.pi.Bang" ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 709 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P)
###       ("\<^const>Agent.pi.Bang" ("_position" P))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("\<^const>Agent.pi.Bang" ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("\<^const>Agent.pi.Par" ("_position" P)
###         ("\<^const>Agent.pi.Bang" ("_position" P)))
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("\<^const>Agent.pi.Bang" ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Agent.pi.Par" ("_position" P)
###       ("\<^const>Agent.pi.Bang" ("_position" P))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###         ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" \<alpha>)
###         ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("\<^const>Agent.pi.Par" ("_position" P)
###         ("\<^const>Agent.pi.Bang" ("_position" P)))
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("\<^const>Agent.pi.Bang" ("_position" P)) ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 754 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 769 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P'')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###           ("_position" P')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###           ("_position" P) ("_position" a) ("_position" x)
###           ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" a) ("_position" x) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###         ("_position" a) ("_position" x) ("_position" P')))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P'')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###           ("_position" P')))
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" a) ("_position" x) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 770 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P'')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###           ("_position" P')))
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P'')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###           ("_position" P')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###           ("_position" \<alpha>) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P'')
###         ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###         ("_position" \<alpha>) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 771 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###         ("_position" P'') ("_position" a) ("_position" x) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###         ("_position" a) ("_position" x) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P'')))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P''))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###           ("_position" P) ("_position" a) ("_position" x)
###           ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###         ("_position" P'') ("_position" a) ("_position" x) ("_position" P')))
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P'')))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P''))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###           ("_position" x) ("_position" P')))
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###             ("_position" x) ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 772 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P'')))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P''))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P')))
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Early_Semantics.Transitions_Freejudge"
###             ("_position" \<alpha>) ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P'')
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P'')))
###   ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P''))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("_position" \<alpha>) ("_position" P')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###           ("_position" \<alpha>) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P'')
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###         ("_position" \<alpha>) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 826 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###       ("_position" x) ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###     ("_position" a) ("_position" x) ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 846 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 862 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("_applC" ("_position" a) ("_list" ("_position" b)))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("_applC" ("_position" a) ("_list" ("_position" b))) ("_position" P')))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###       ("_position" b))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 885 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" x))
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" a) ("_position" x) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" x))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P')))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR" ("_position" a)
###         ("_position" x) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.residual.BoundOutputR"
###           ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###           ("\<^const>Nominal.perm" ("_position" p) ("_position" x))
###           ("\<^const>Nominal.perm" ("_position" p) ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.outputTransition" ("_position" P)
###       ("_position" a) ("_position" x) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.residual.BoundOutputR"
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" a))
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" x))
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" P'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 886 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 4 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" P)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Early_Semantics.Transitions_Freejudge"
###           ("\<^const>Nominal.perm" ("_position" p) ("_position" \<alpha>))
###           ("\<^const>Nominal.perm" ("_position" p) ("_position" P')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" \<alpha>))
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" P'))))))
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" \<alpha>))
###         ("\<^const>Nominal.perm" ("_position" p) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition"
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" \<alpha>))
###       ("\<^const>Nominal.perm" ("_position" p) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### equivariance lemma of the relational form
p_ \<bullet> P_ \<Longrightarrow>a_<\<nu>x_> \<prec> P'_ =
p_ \<bullet>
P_ \<Longrightarrow>p_ \<bullet>
                    a_<\<nu>p_ \<bullet> x_> \<prec> p_ \<bullet> P'_
### equivariance lemma of the relational form
p_ \<bullet> P_ \<Longrightarrow>\<alpha>_ \<prec> P'_ =
p_ \<bullet>
P_ \<Longrightarrow>p_ \<bullet> \<alpha>_ \<prec> p_ \<bullet> P'_
### equivariance lemma of the relational form
p_ \<bullet> P_ \<Longrightarrow>a_<\<nu>x_> \<prec> P'_ =
p_ \<bullet>
P_ \<Longrightarrow>p_ \<bullet>
                    a_<\<nu>p_ \<bullet> x_> \<prec> p_ \<bullet> P'_
### equivariance lemma of the relational form
p_ \<bullet> P_ \<Longrightarrow>\<alpha>_ \<prec> P'_ =
p_ \<bullet>
P_ \<Longrightarrow>p_ \<bullet> \<alpha>_ \<prec> p_ \<bullet> P'_
### equivariance lemma of the relational form
p_ \<bullet> P_ \<Longrightarrow>a_<\<nu>x_> \<prec> P'_ =
p_ \<bullet>
P_ \<Longrightarrow>p_ \<bullet>
                    a_<\<nu>p_ \<bullet> x_> \<prec> p_ \<bullet> P'_
### equivariance lemma of the relational form
p_ \<bullet> P_ \<Longrightarrow>\<alpha>_ \<prec> P'_ =
p_ \<bullet>
P_ \<Longrightarrow>p_ \<bullet> \<alpha>_ \<prec> p_ \<bullet> P'_
### equivariance lemma of the relational form
p_ \<bullet> P_ \<Longrightarrow>a_<\<nu>x_> \<prec> P'_ =
p_ \<bullet>
P_ \<Longrightarrow>p_ \<bullet>
                    a_<\<nu>p_ \<bullet> x_> \<prec> p_ \<bullet> P'_
### equivariance lemma of the relational form
p_ \<bullet> P_ \<Longrightarrow>\<alpha>_ \<prec> P'_ =
p_ \<bullet>
P_ \<Longrightarrow>p_ \<bullet> \<alpha>_ \<prec> p_ \<bullet> P'_
### Ambiguous input (line 926 of "$AFP/Pi_Calculus/Weak_Early_Step_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Early_Semantics.Transitions_Freejudge"
###       ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###         ("_position" b))
###       ("_position" P'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###     ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###       ("_position" b))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Weak_Early_Step_Semantics"
### 0.243s elapsed time, 0.284s cpu time, 0.057s GC time
Loading theory "Draft.Weak_Early_Semantics" (required by "Draft.Weak_Early_SemanticsTemplates")
### Ambiguous input (line 10 of "$AFP/Pi_Calculus/Weak_Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.eq"
###     ("\<^fixed>weakFreeTransition" ("_position" P) ("_position" \<alpha>)
###       ("_position" P'))
###     ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" \<alpha>)
###           ("\<^const>Early_Semantics.freeRes.TauR"))
###         ("\<^const>HOL.eq" ("_position" P) ("_position" P'))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>weakFreeTransition" ("_position" P) ("_position" \<alpha>)
###     ("_position" P'))
###   ("\<^const>HOL.disj"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P'))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" \<alpha>)
###         ("\<^const>Early_Semantics.freeRes.TauR"))
###       ("\<^const>HOL.eq" ("_position" P) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Pi_Calculus/Weak_Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Weak_Early_Semantics.weakFreeTransition" ("_position" P)
###         ("_position" \<alpha>) ("_position" P')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Semantics.weakFreeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/Pi_Calculus/Weak_Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("_position" \<alpha>) ("_position" P')))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" F)
###         ("_cargs" ("_position" \<alpha>) ("_position" P'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("_position" \<alpha>) ("_position" P')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" F)
###       ("_cargs" ("_position" \<alpha>) ("_position" P')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/Pi_Calculus/Weak_Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.Transitions_Freejudge"
###     ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###       ("_position" \<alpha>))
###     ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Early_Semantics.TransitionsEarly" ("_position" P)
###     ("\<^const>Early_Semantics.Transitions_Freejudge" ("_position" \<alpha>)
###       ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/Pi_Calculus/Weak_Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Semantics.weakFreeTransition"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###       ("_position" u))
###     ("\<^const>Agent.subs" ("_position" P) ("_position" x)
###       ("_position" u))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Semantics.weakFreeTransition"
###     ("\<^const>Agent.pi.Input" ("_position" a) ("_position" x)
###       ("_position" P))
###     ("\<^const>Early_Semantics.freeRes.InputR" ("_position" a)
###       ("_position" u))
###     ("\<^const>Agent.subst_name" ("_position" P) ("_position" x)
###       ("_position" u))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/Pi_Calculus/Weak_Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Semantics.weakFreeTransition"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("_applC" ("_position" a) ("_list" ("_position" b))) ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Semantics.weakFreeTransition"
###     ("\<^const>Agent.pi.Output" ("_position" a) ("_position" b)
###       ("_position" P))
###     ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###       ("_position" b))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/Pi_Calculus/Weak_Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" P))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Early_Semantics.Transitions_Freejudge"
###         ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))
###       ("\<^const>Early_Tau_Chain.tauChain" ("_position" P)
###         ("_position" P')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Weak_Early_Step_Semantics.freeTransition" ("_position" P)
###       ("\<^const>Early_Semantics.freeRes.TauR") ("_position" P'))
###     ("\<^const>Early_Tau_Chain.tauChain" ("_position" P) ("_position" P'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 177 of "$AFP/Pi_Calculus/Weak_Early_Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Semantics.weakFreeTransition" ("_position" P)
###     ("_applC" ("_position" a) ("_list" ("_position" b))) ("_position" P')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Weak_Early_Semantics.weakFreeTransition" ("_position" P)
###     ("\<^const>Early_Semantics.freeRes.OutputR" ("_position" a)
###       ("_position" b))
###     ("_position" P')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Weak_Early_Semantics"
### 0.059s elapsed time, 0.059s cpu time, 0.000s GC time
Loading theory "Draft.Weak_Early_SemanticsTemplates"
val templateLemmas =
   [("Weak_Early_Semantics.weakTransitionI",
     "?P \<Longrightarrow>\<^sup>^\<tau> \<prec> ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           template_var 0)
         )),
    ("Weak_Early_Semantics.Tau",
     "\<tau>.?P \<Longrightarrow>\<^sup>^\<tau> \<prec> ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0),
           template_var 0)
         )),
    ("Weak_Early_Semantics.Output",
     "?a{?b}.?P \<Longrightarrow>\<^sup>^?a[?b] \<prec> ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)
         )),
    ("Weak_Early_Semantics.weakTransitionI",
     "?P \<Longrightarrow>?\<alpha> \<prec> ?P' ==>
      ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Weak_Early_Semantics.singleActionChain",
     "?P \<longmapsto> ?\<alpha> \<prec> ?P' ==>
      ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Weak_Early_Semantics.Input",
     "?a<?x>.?P \<Longrightarrow>\<^sup>^?a<?u> \<prec> ?P[?x::=?u]",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0))
         )),
    ("Weak_Early_Semantics.Par1F",
     "?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P' ==>
      ?P \<parallel>
      ?Q \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P' \<parallel> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Weak_Early_Semantics.Par2F",
     "?Q \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?Q' ==>
      ?P \<parallel>
      ?Q \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P \<parallel> ?Q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Weak_Early_Semantics.freshTauTransition",
     "[| ?P \<Longrightarrow>\<^sup>^\<tau> \<prec> ?P'; ?c \<sharp> ?P |]
      ==> ?c \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Weak_Early_Semantics.eqvtI",
     "?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P' ==>
      ?p \<bullet>
      ?P \<Longrightarrow>\<^sup>^?p \<bullet>
                                  ?\<alpha> \<prec> ?p \<bullet> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("Weak_Early_Semantics.freshOutputTransition",
     "[| ?P \<Longrightarrow>\<^sup>^?a[?b] \<prec> ?P'; ?c \<sharp> ?P |]
      ==> ?c \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Weak_Early_Semantics.ResF",
     "[| ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P';
         ?x \<sharp> ?\<alpha> |]
      ==> <\<nu>?x>?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> <\<nu>?x>?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Weak_Early_Semantics.freshTransition",
     "[| ?P \<Longrightarrow>?a<\<nu>?x> \<prec> ?P'; ?c \<sharp> ?P;
         ?c ~= ?x |]
      ==> ?c \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), template_var 1)
           ))),
    ("Weak_Early_Semantics.freshInputTransition",
     "[| ?P \<Longrightarrow>\<^sup>^?a<?b> \<prec> ?P'; ?c \<sharp> ?P;
         ?c ~= ?b |]
      ==> ?c \<sharp> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), template_var 1)
           ))),
    ("Weak_Early_Semantics.Bang",
     "[| ?P \<parallel> !?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P';
         ?P' ~= ?P \<parallel> !?P |]
      ==> !?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app (template_hole 2, template_var 2))),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 2, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Weak_Early_Semantics.transitionCases",
     "[| ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P';
         ?P \<Longrightarrow>?\<alpha> \<prec> ?P' ==> ?F ?\<alpha> ?P';
         ?F (\<tau>) ?P |]
      ==> ?F ?\<alpha> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 0, template_var 2),
                template_var 1)
              )),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Weak_Early_Semantics.tauTransitionChain",
     "?P \<Longrightarrow>\<^sup>^\<tau> \<prec> ?P' =
      ?P \<Longrightarrow>\<^sub>\<tau> ?P'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 1),
           template_hole 9),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("Weak_Early_Semantics.tauStepTransitionChain",
     "?P ~= ?P' ==>
      ?P \<Longrightarrow>\<tau> \<prec> ?P' =
      ?P \<Longrightarrow>\<^sub>\<tau> ?P'",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 10, template_var 1),
             template_hole 9),
           template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)),
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty)))))),
    ("Weak_Early_Semantics.chainTransitionAppend",
     "[| ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'';
         ?P'' \<Longrightarrow>\<^sub>\<tau> ?P' |]
      ==> ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 7, template_app (template_hole 6, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Weak_Early_Semantics.chainTransitionAppend",
     "[| ?P \<Longrightarrow>\<^sub>\<tau> ?P'';
         ?P'' \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P' |]
      ==> ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 8, template_app (template_hole 7, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Weak_Early_SemanticsTemplates"
### 0.680s elapsed time, 1.483s cpu time, 0.924s GC time
val it = (): unit
