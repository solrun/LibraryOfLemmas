Loading theory "Draft.Term_Context" (required by "Draft.Ground_CtxtTemplates" via "Draft.Ground_Ctxt" via "Draft.Ground_Terms" via "Draft.Basic_Utils")
Loading theory "Draft.Templates" (required by "Draft.Ground_CtxtTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.163s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ground_CtxtTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 1.116s cpu time, 0.094s GC time
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Term_Context"
### 1.211s elapsed time, 1.939s cpu time, 0.144s GC time
Loading theory "Draft.Basic_Utils" (required by "Draft.Ground_CtxtTemplates" via "Draft.Ground_Ctxt" via "Draft.Ground_Terms")
consts
  is_Inl :: "'a + 'b => bool"
consts
  is_Inr :: "'b + 'a => bool"
Found termination order: "{}"
consts
  add_elem_list_lists :: "'a => 'a list => 'a list list"
Found termination order: "{}"
### theory "Draft.Basic_Utils"
### 0.214s elapsed time, 0.261s cpu time, 0.060s GC time
Loading theory "Draft.Ground_Terms" (required by "Draft.Ground_CtxtTemplates" via "Draft.Ground_Ctxt")
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v. gterm_of_term (Var v) = undefined
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  funas_gterm :: "'f gterm => ('f * nat) set"
Proofs for inductive predicate(s) "\<T>\<^sub>Gp"
  Proving monotonicity ...
### theory "Draft.Ground_Terms"
### 1.182s elapsed time, 1.523s cpu time, 0.503s GC time
Loading theory "Draft.Ground_Ctxt" (required by "Draft.Ground_CtxtTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### Partially applied constant "Ground_Ctxt.gctxt_compose" on left hand side of equation, in theorem:
### monoid_mult.prod_list \<box>\<^sub>G (\<circ>\<^sub>G\<^sub>c) ?xs ==
### foldr (\<circ>\<^sub>G\<^sub>c) ?xs \<box>\<^sub>G
instantiation
  gctxt :: (type) monoid_mult
  one_gctxt == one_class.one :: 'a gctxt
  times_gctxt == times :: 'a gctxt => 'a gctxt => 'a gctxt
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ground_Ctxt"
### 0.901s elapsed time, 0.950s cpu time, 0.053s GC time
Loading theory "Draft.Ground_CtxtTemplates"
val templateLemmas =
   [("Ground_Ctxt.inj_ctxt_of_gctxt", "inj_on ctxt_of_gctxt ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Ground_Ctxt.ground_ctxt_of_gctxt", "ground_ctxt (ctxt_of_gctxt ?s)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Ground_Ctxt.gctxt_apply_inj_term", "inj (gctxt_apply_term ?C)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Ground_Ctxt.gctxt_apply_inj_on_term",
     "inj_on (gctxt_apply_term ?C) ?S",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Ground_Ctxt.vars_ctxt_of_gctxt", "vars_ctxt (ctxt_of_gctxt ?C) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Ground_Ctxt.ctxt_of_gctxt_inv",
     "gctxt_of_ctxt (ctxt_of_gctxt ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Ground_Ctxt.gpos_less_eq_append", "?p \<le>\<^sub>p (?p @ ?q)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Ground_Ctxt.gctxt_set_funs_ctxt",
     "gfuns_ctxt ?C = funs_ctxt (ctxt_of_gctxt ?C)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ground_Ctxt.funas_ctxt_of_gctxt_conv",
     "funas_ctxt (ctxt_of_gctxt ?C) = funas_gctxt ?C",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ground_Ctxt.vars_ctxt_of_gctxt_subseteq",
     "(vars_ctxt (ctxt_of_gctxt ?C) <= ?Q) = True",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_var 0),
       template_hole 0)),
    ("Ground_Ctxt.gsubt_at_gctxt_apply_ghole",
     "gsubt_at ?C\<langle>?u\<rangle>\<^sub>G (ghole_pos ?C) = ?u",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)),
       template_var 0)),
    ("Ground_Ctxt.gctxt_of_ctxt_inv",
     "ground_ctxt ?C ==> ctxt_of_gctxt (gctxt_of_ctxt ?C) = ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Ground_Ctxt.funas_gctxt_compose",
     "funas_gctxt (?C \<circ>\<^sub>G\<^sub>c ?D) =
      funas_gctxt ?C Un funas_gctxt ?D",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ground_Ctxt.funas_gterm_ctxt_apply",
     "funas_gterm ?C\<langle>?s\<rangle>\<^sub>G =
      funas_gctxt ?C Un funas_gterm ?s",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Ground_Ctxt.ctxt_of_gctxt_apply_gterm",
     "gterm_of_term (ctxt_of_gctxt ?C)\<langle>?t\<rangle> =
      ?C\<langle>gterm_of_term ?t\<rangle>\<^sub>G",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, template_var 0)))),
    ("Ground_Ctxt.ctxt_of_gctxt_apply",
     "gterm_of_term (ctxt_of_gctxt ?C)\<langle>term_of_gterm ?t\<rangle> =
      ?C\<langle>?t\<rangle>\<^sub>G",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Ground_Ctxt.map_ctxt_of_gctxt",
     "map_ctxt ?f ?g (ctxt_of_gctxt ?C) = ctxt_of_gctxt (map_gctxt ?f ?C)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Ground_Ctxt.ctxt_set_funs_gctxt",
     "ground_ctxt ?C ==> gfuns_ctxt (gctxt_of_ctxt ?C) = funs_ctxt ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Ground_Ctxt.funas_gctxt_of_ctxt",
     "ground_ctxt ?C ==> funas_gctxt (gctxt_of_ctxt ?C) = funas_ctxt ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Ground_Ctxt.ground_hole_pos_to_ghole",
     "ground_ctxt ?C ==> ghole_pos (gctxt_of_ctxt ?C) = hole_pos ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Ground_Ctxt.gctxt_compose_HoleE",
     "?C \<circ>\<^sub>G\<^sub>c ?D = \<box>\<^sub>G ==>
      ?C = \<box>\<^sub>G",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_hole 0)],
       template_equation (template_var 1, template_hole 0))),
    ("Ground_Ctxt.gctxt_compose_HoleE",
     "?C \<circ>\<^sub>G\<^sub>c ?D = \<box>\<^sub>G ==>
      ?D = \<box>\<^sub>G",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Ground_Ctxt.term_of_gterm_ctxt_apply_ground",
     "term_of_gterm ?s = ?C\<langle>?l\<rangle> ==> ground ?l",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Ground_Ctxt.term_of_gterm_ctxt_apply_ground",
     "term_of_gterm ?s = ?C\<langle>?l\<rangle> ==> ground_ctxt ?C",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Ground_Ctxt.gctxt_eq",
     "(?C\<langle>?s\<rangle>\<^sub>G = ?C\<langle>?t\<rangle>\<^sub>G) =
      (?s = ?t)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Ground_Ctxt.ctxt_ctxt",
     "?C\<langle>?D\<langle>?t\<rangle>\<^sub>G\<rangle>\<^sub>G =
      (?C \<circ>\<^sub>G\<^sub>c ?D)\<langle>?t\<rangle>\<^sub>G",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Ground_Ctxt.ctxt_ctxt_compose",
     "(?C \<circ>\<^sub>G\<^sub>c ?D)\<langle>?t\<rangle>\<^sub>G =
      ?C\<langle>?D\<langle>?t\<rangle>\<^sub>G\<rangle>\<^sub>G",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Ground_Ctxt.map_gctxt_nempty",
     "?C ~= \<box>\<^sub>G ==> map_gctxt ?f ?C ~= \<box>\<^sub>G",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("Ground_Ctxt.ghole_pos_in_apply",
     "ghole_pos ?C = ?p ==> ?p : gposs ?C\<langle>?u\<rangle>\<^sub>G",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2), template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Ground_Ctxt.ghole_pos_gctxt_at_pos",
     "?p : gposs ?t ==> ghole_pos (gctxt_at_pos ?t ?p) = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Ground_Ctxt.ghole_pos_id_ctxt",
     "?C\<langle>?s\<rangle>\<^sub>G = ?t ==>
      gctxt_at_pos ?t (ghole_pos ?C) = ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 2)),
         template_var 2))),
    ("Ground_Ctxt.ground_gctxt_of_ctxt_apply_gterm",
     "ground_ctxt ?C ==>
      term_of_gterm (gctxt_of_ctxt ?C)\<langle>?t\<rangle>\<^sub>G =
      ?C\<langle>term_of_gterm ?t\<rangle>",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 3, template_var 0))))),
    ("Ground_Ctxt.map_gctxt_of_ctxt",
     "ground_ctxt ?C ==>
      gctxt_of_ctxt (map_ctxt ?f ?g ?C) = map_gctxt ?f (gctxt_of_ctxt ?C)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 2))))),
    ("Ground_Ctxt.gctxt_of_gpos_gterm_gsubt_at_to_gterm",
     "?p : gposs ?t ==>
      (gctxt_at_pos ?t ?p)\<langle>gsubt_at ?t ?p\<rangle>\<^sub>G = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Ground_Ctxt.gctxt_at_pos_gsubt_at_pos",
     "?p : gposs ?t ==>
      gsubt_at (gctxt_at_pos ?t ?p)\<langle>?u\<rangle>\<^sub>G ?p = ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0)),
           template_var 2),
         template_var 0))),
    ("Ground_Ctxt.ctxt_of_pos_gterm",
     "?p : gposs ?t ==>
      ctxt_at_pos (term_of_gterm ?t) ?p =
      ctxt_of_gctxt (gctxt_at_pos ?t ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Ground_Ctxt.term_of_gterm_ctxt_apply",
     "term_of_gterm ?s = ?C\<langle>?l\<rangle> ==>
      (gctxt_of_ctxt ?C)\<langle>gterm_of_term ?l\<rangle>\<^sub>G = ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_var 2))),
    ("Ground_Ctxt.nempty_ground_ctxt_gctxt",
     "[| ?C ~= \<box>; ground_ctxt ?C |]
      ==> gctxt_of_ctxt ?C ~= \<box>\<^sub>G",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Ground_Ctxt.ground_ctxt_of_gctxt'",
     "ctxt_of_gctxt ?C = More ?f ?ss ?D ?ts ==>
      ground_ctxt (More ?f ?ss ?D ?ts)",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Ground_Ctxt.ground_gctxt_of_ctxt_apply",
     "[| ground_ctxt ?C; ground ?t |]
      ==> term_of_gterm
           (gctxt_of_ctxt ?C)\<langle>gterm_of_term ?t\<rangle>\<^sub>G =
          ?C\<langle>?t\<rangle>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ground_Ctxt.term_of_gterm_ctxt_subst_apply_ground",
     "[| term_of_gterm ?s = ?C\<langle>?l \<cdot> ?\<sigma>\<rangle>;
         ?x : vars_term ?l |]
      ==> ground (?\<sigma> ?x)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Ground_Ctxt.gsubst_at_gctxt_at_eq_gtermD",
     "[| ?s = ?t; ?p : gposs ?t |]
      ==> gsubt_at ?s ?p = gsubt_at ?t ?p &
          gctxt_at_pos ?s ?p = gctxt_at_pos ?t ?p",
     template_implication
      ([template_equation (template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Ground_Ctxt.gfun_at_gctxt_at_pos_not_after",
     "[| ?p : gposs ?t; ?q : gposs ?t; ~ ?p \<le>\<^sub>p ?q |]
      ==> gfun_at (gctxt_at_pos ?t ?p)\<langle>?v\<rangle>\<^sub>G ?q =
          gfun_at ?t ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 1)))),
    ("Ground_Ctxt.gposs_gctxt_at_pos",
     "?p : gposs ?t ==>
      gposs (gctxt_at_pos ?t ?p)\<langle>?v\<rangle>\<^sub>G =
      {q: gposs ?t. ~ ?p \<le>\<^sub>p q} Un (@) ?p ` gposs ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 10, template_var 0)))))),
    ("Ground_Ctxt.gposs_gctxt_at_pos_not_after",
     "[| ?p : gposs ?t; ?q : gposs ?t; ~ ?p \<le>\<^sub>p ?q |]
      ==> (?q : gposs (gctxt_at_pos ?t ?p)\<langle>?v\<rangle>\<^sub>G) =
          (?q : gposs ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3)),
               template_var 0))),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app (template_hole 5, template_var 2))))),
    ("Ground_Ctxt.gsubst_at_gctxt_at_eq_gtermI",
     "[| ?p : gposs ?s; ?p : gposs ?t; gsubt_at ?s ?p = gsubt_at ?t ?p;
         gctxt_at_pos ?s ?p = gctxt_at_pos ?t ?p |]
      ==> ?s = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 0))
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Ground_Ctxt.gposs_ConsE",
     "[| ?i # ?p : gposs ?t;
         !!f ts.
            [| ?t = GFun f ts; ts ~= []; ?i < length ts;
               ?p : gposs (ts ! ?i) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2)),
              template_app (template_hole 10, template_var 1))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Ground_Ctxt.eq_gctxt_at_pos",
     "[| ?p : gposs ?s; ?p : gposs ?t;
         !!q. ~ ?p \<le>\<^sub>p q ==> (q : gposs ?s) = (q : gposs ?t);
         !!q. [| q : gposs ?s; ~ ?p \<le>\<^sub>p q |]
              ==> gfun_at ?s q = gfun_at ?t q |]
      ==> gctxt_at_pos ?s ?p = gctxt_at_pos ?t ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 0))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Ground_CtxtTemplates"
### 0.416s elapsed time, 0.580s cpu time, 0.062s GC time
val it = (): unit
