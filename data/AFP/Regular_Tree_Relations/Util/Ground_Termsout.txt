Loading theory "Draft.Templates" (required by "Draft.Ground_TermsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Term_Context" (required by "Draft.Ground_TermsTemplates" via "Draft.Ground_Terms" via "Draft.Basic_Utils")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.154s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ground_TermsTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.542s elapsed time, 1.132s cpu time, 0.104s GC time
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Term_Context"
### 1.199s elapsed time, 1.933s cpu time, 0.156s GC time
Loading theory "Draft.Basic_Utils" (required by "Draft.Ground_TermsTemplates" via "Draft.Ground_Terms")
consts
  is_Inl :: "'a + 'b => bool"
consts
  is_Inr :: "'b + 'a => bool"
Found termination order: "{}"
consts
  add_elem_list_lists :: "'a => 'a list => 'a list list"
Found termination order: "{}"
### theory "Draft.Basic_Utils"
### 0.211s elapsed time, 0.258s cpu time, 0.062s GC time
Loading theory "Draft.Ground_Terms" (required by "Draft.Ground_TermsTemplates")
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v. gterm_of_term (Var v) = undefined
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  funas_gterm :: "'f gterm => ('f * nat) set"
Proofs for inductive predicate(s) "\<T>\<^sub>Gp"
  Proving monotonicity ...
### theory "Draft.Ground_Terms"
### 1.194s elapsed time, 1.542s cpu time, 0.512s GC time
Loading theory "Draft.Ground_TermsTemplates"
val templateLemmas =
   [("Ground_Terms.finite_funas_gterm", "finite (funas_gterm ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Ground_Terms.inj_term_of_gterm", "inj_on term_of_gterm ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Ground_Terms.ground_term_of_gterm", "ground (term_of_gterm ?s)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Ground_Terms.gposs_Nil", "[] : gposs ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Ground_Terms.\<T>\<^sub>G_UNIV", "?s : \<T>\<^sub>G UNIV",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Ground_Terms.vars_term_of_gterm", "vars_term (term_of_gterm ?t) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Ground_Terms.term_of_gterm_inv",
     "gterm_of_term (term_of_gterm ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Ground_Terms.gunion_idemp", "gunion ?s ?s = ?s",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Ground_Terms.groot_sym_groot_conv", "groot_sym ?t = fst (groot ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ground_Terms.gterm_set_gterm_funs_terms",
     "set_gterm ?t = funs_term (term_of_gterm ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ground_Terms.poss_gposs_conv", "poss (term_of_gterm ?t) = gposs ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ground_Terms.funas_term_of_gterm_conv",
     "funas_term (term_of_gterm ?t) = funas_gterm ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ground_Terms.gdomain_id", "gdomain ?t = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_var 0)),
    ("Ground_Terms.gposs_glabel", "gposs (glabel ?f ?t) = gposs ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ground_Terms.gposs_map_gterm", "gposs (map_gterm ?f ?s) = gposs ?s",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ground_Terms.vars_term_of_gterm_subseteq",
     "(vars_term (term_of_gterm ?t) <= ?Q) = True",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_var 0),
       template_hole 0)),
    ("Ground_Terms.gunion_commute", "gunion ?s ?t = gunion ?t ?s",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Ground_Terms.gunion_unit", "gunion ?s (GFun () []) = ?s",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)),
       template_var 0)),
    ("Ground_Terms.gunion_unit", "gunion (GFun () []) ?s = ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Ground_Terms.length_args_length_gargs",
     "length (args (term_of_gterm ?t)) = length (gargs ?t)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ground_Terms.replace_gterm_gsubt_at_id",
     "?s[?p \<leftarrow> gsubt_at ?s ?p]\<^sub>G = ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Ground_Terms.\<T>\<^sub>G_funas_gterm_conv",
     "(?s : \<T>\<^sub>G ?\<F>) = (funas_gterm ?s <= ?\<F>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Ground_Terms.gterm_of_term_inv",
     "ground ?t ==> term_of_gterm (gterm_of_term ?t) = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Ground_Terms.gposs_gunion",
     "gposs (gunion ?s ?t) = gposs ?s Un gposs ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ground_Terms.poss_gposs_mem_conv",
     "(?p : poss (term_of_gterm ?t)) = (?p : gposs ?t)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Ground_Terms.map_term_of_gterm",
     "map_term ?f ?g (term_of_gterm ?t) = term_of_gterm (map_gterm ?f ?t)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Ground_Terms.gunions_append",
     "gunions (?ss @ ?ts) = gunion (gunions ?ss) (gunions ?ts)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ground_Terms.ground_term_to_gtermD",
     "ground ?t ==> EX t'. ?t = term_of_gterm t'",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Ground_Terms.term_set_gterm_funs_terms",
     "ground ?t ==> set_gterm (gterm_of_term ?t) = funs_term ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Ground_Terms.funas_gterm_gterm_of_term",
     "ground ?t ==> funas_gterm (gterm_of_term ?t) = funas_term ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Ground_Terms.\<T>\<^sub>G_mono",
     "?\<G> <= ?\<F> ==> \<T>\<^sub>G ?\<G> <= \<T>\<^sub>G ?\<F>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Ground_Terms.\<T>\<^sub>G_complete",
     "funas_gterm ?s <= ?\<F> ==> ?s : \<T>\<^sub>G ?\<F>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Ground_Terms.\<T>\<^sub>G_sound",
     "?s : \<T>\<^sub>G ?\<F> ==> funas_gterm ?s <= ?\<F>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Ground_Terms.gfun_at_None_ngposs_iff",
     "(gfun_at ?s ?p = None) = (?p ~: gposs ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Ground_Terms.gfun_at_map_gterm",
     "gfun_at (map_gterm ?f ?t) ?p = map_option ?f (gfun_at ?t ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ground_Terms.map_gterm_glabel",
     "map_gterm ?f (glabel ?h ?t) = glabel (?f o ?h) ?t",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Ground_Terms.gunion_assoc",
     "gunion ?s (gunion ?t ?u) = gunion (gunion ?s ?t) ?u",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Ground_Terms.gposs_to_poss",
     "?p : gposs ?t ==> ?p : poss (term_of_gterm ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Ground_Terms.gfun_at_domain",
     "gfun_at ?t ?p = (if ?p : gposs ?t then Some () else None)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 1))),
           template_app (template_hole 2, template_hole 1)),
         template_hole 0))),
    ("Ground_Terms.groot_sym_gterm_of_term",
     "ground ?t ==>
      groot_sym (gterm_of_term ?t) = fst (the (Term.root ?t))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Ground_Terms.gfun_at_nongposs",
     "?p ~: gposs ?t ==> gfun_at ?t ?p = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Ground_Terms.ground_term_of_gterm'",
     "term_of_gterm ?s = Fun ?f ?ss ==> ground (Fun ?f ?ss)",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Ground_Terms.gfun_at_poss_gpossD",
     "gfun_at ?t ?p = Some ?f ==> ?p : gposs ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Ground_Terms.funas_gterm_gsubt_at_subseteq",
     "?p : gposs ?s ==> funas_gterm (gsubt_at ?s ?p) <= funas_gterm ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Ground_Terms.replace_gterm_at_not_poss",
     "?p ~: gposs ?s ==> ?s[?p \<leftarrow> ?t]\<^sub>G = ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0),
         template_var 1))),
    ("Ground_Terms.\<T>\<^sub>Gp_\<T>\<^sub>G_eq",
     "\<T>\<^sub>Gp (%x xa. (x, xa) : ?\<F>) =
      (%x. x : \<T>\<^sub>G ?\<F>)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("Ground_Terms.gfun_at_gterm_of_term'",
     "map_option exInl (fun_at (term_of_gterm ?s) ?p) = gfun_at ?s ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app (template_app (template_hole 4, t_empty), t_empty)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Ground_Terms.map_gterm_of_term",
     "ground ?t ==>
      gterm_of_term (map_term ?f ?g ?t) = map_gterm ?f (gterm_of_term ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 2))))),
    ("Ground_Terms.groot_sym_replace_gterm",
     "?p ~= [] ==> groot_sym ?s[?p \<leftarrow> ?t]\<^sub>G = groot_sym ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Ground_Terms.gfun_at_poss",
     "?p : gposs ?t ==> EX f. gfun_at ?t ?p = Some f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Ground_Terms.gterm_of_term_inj",
     "(!!t. t : ?S ==> ground t) ==> inj_on gterm_of_term ?S",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Ground_Terms.gfun_at_glabel",
     "gfun_at (glabel ?f ?t) ?p =
      (if ?p : gposs ?t then Some (?f ?p) else None)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0))),
         template_hole 0))),
    ("Ground_Terms.glabel_map_gterm_conv",
     "glabel (?f o gfun_at ?t) (gdomain ?t) = map_gterm (?f o Some) ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app (template_hole 4, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Ground_Terms.term_of_gterm_gsubt",
     "?p : gposs ?s ==>
      term_of_gterm ?s |_ ?p = term_of_gterm (gsubt_at ?s ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Ground_Terms.gsubt_at_to_subt_at",
     "?p : gposs ?s ==>
      gterm_of_term (term_of_gterm ?s |_ ?p) = gsubt_at ?s ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Ground_Terms.gposs_gsubst_at_subst_at_eq",
     "?p : gposs ?s ==>
      gposs (gsubt_at ?s ?p) = poss (term_of_gterm ?s |_ ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1))))),
    ("Ground_Terms.fun_at_gfun_at_conv",
     "(fun_at (term_of_gterm ?s) ?p = fun_at (term_of_gterm ?t) ?p) =
      (gfun_at ?s ?p = gfun_at ?t ?p)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1)),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Ground_Terms.replace_gterm_at_above",
     "?p \<le>\<^sub>p ?q ==>
      ?s[?q \<leftarrow> ?t]\<^sub>G[?p \<leftarrow> ?u]\<^sub>G =
      ?s[?p \<leftarrow> ?u]\<^sub>G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 1)),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 4),
           template_var 0)))),
    ("Ground_Terms.set_gterm_gposs_conv",
     "set_gterm ?t = {the (gfun_at ?t p) |p. p : gposs ?t}",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app (template_hole 7, t_empty))),
    ("Ground_Terms.gfun_at_gterm_of_term",
     "ground ?s ==>
      map_option exInl (fun_at ?s ?p) = gfun_at (gterm_of_term ?s) ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), t_empty)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Ground_Terms.gterms_mono",
     "?\<G> <= ?\<F> ==> gterms ?\<G> <= gterms ?\<F>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 1, t_empty),
         template_app (template_hole 1, t_empty)))),
    ("Ground_Terms.replace_gterm_conv",
     "?p : gposs ?s ==>
      (term_of_gterm ?s)[?p \<leftarrow> term_of_gterm ?t] =
      term_of_gterm ?s[?p \<leftarrow> ?t]\<^sub>G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 2),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0))))),
    ("Ground_Terms.\<T>\<^sub>G_intersection",
     "[| ?s : \<T>\<^sub>G ?\<F>; ?s : \<T>\<^sub>G ?\<G> |]
      ==> ?s : \<T>\<^sub>G (?\<F> Int ?\<G>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Ground_Terms.gdomain_gsubt",
     "?p : gposs ?t ==>
      gdomain (gsubt_at ?t ?p) = gsubt_at (gdomain ?t) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, t_empty), template_var 0)),
           template_var 1)))),
    ("Ground_Terms.parallel_replace_gterm_commute",
     "?p \<bottom> ?q ==>
      ?s[?p \<leftarrow> ?t]\<^sub>G[?q \<leftarrow> ?u]\<^sub>G =
      ?s[?q \<leftarrow> ?u]\<^sub>G[?p \<leftarrow> ?t]\<^sub>G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_var 4),
           template_var 1)))),
    ("Ground_Terms.funas_gterm_map_gterm",
     "funas_gterm ?t <= ?\<F> ==>
      funas_gterm (map_gterm ?f ?t) <= (%(h, n). (?f h, n)) ` ?\<F>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 1)))),
    ("Ground_Terms.gpos_append_gposs",
     "[| ?p : gposs ?t; ?q : gposs (gsubt_at ?t ?p) |]
      ==> ?p @ ?q : gposs ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 2, template_var 1))
           ))),
    ("Ground_Terms.gfun_at_possE",
     "[| ?p : gposs ?t; !!f. gfun_at ?t ?p = Some f ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Ground_Terms.gposs_gunions",
     "gposs (gunions ?ts) = {[]} Un \<Union> {gposs t |t. t : set ?ts}",
     template_equation
      (template_app
        (template_hole 11, template_app (template_hole 10, template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_hole 6)),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Ground_Terms.gunion_gsubt_at_nt_poss1",
     "[| ?p : gposs ?s; ?p ~: gposs ?t |]
      ==> gsubt_at (gunion ?s ?t) ?p = gsubt_at ?s ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Ground_Terms.gunion_gsubt_at_nt_poss2",
     "[| ?p : gposs ?t; ?p ~: gposs ?s |]
      ==> gsubt_at (gunion ?s ?t) ?p = gsubt_at ?t ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Ground_Terms.gsubt_at_gposs",
     "?p : gposs ?s ==> gposs (gsubt_at ?s ?p) = {x |x. ?p @ x : gposs ?s}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Ground_Terms.gfun_at_gsub_at",
     "[| ?p : gposs ?s; ?p @ ?q : gposs ?s |]
      ==> gfun_at (gsubt_at ?s ?p) ?q = gfun_at ?s (?p @ ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0)),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))))),
    ("Ground_Terms.gunion_gsubt_at_poss",
     "[| ?p : gposs ?s; ?p : gposs ?t |]
      ==> gunion (gsubt_at ?s ?p) (gsubt_at ?t ?p) =
          gsubt_at (gunion ?s ?t) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Ground_Terms.gterm_idx_induct",
     "(!!f ts. (!!i. i < length ts ==> ?P (ts ! i)) ==> ?P (GFun f ts)) ==>
      ?P ?t",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Ground_Terms.replace_gterm_at_below",
     "?p <\<^sub>p ?q ==>
      ?s[?p \<leftarrow> ?t]\<^sub>G[?q \<leftarrow> ?u]\<^sub>G =
      ?s[?p \<leftarrow> ?t[?q -\<^sub>p
                            ?p \<leftarrow> ?u]\<^sub>G]\<^sub>G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3))),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 4),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 0))))),
    ("Ground_Terms.eq_gterm_by_gposs_gfun_at",
     "[| gposs ?s = gposs ?t;
         !!p. p : gposs ?s ==> gfun_at ?s p = gfun_at ?t p |]
      ==> ?s = ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Ground_TermsTemplates"
### 0.432s elapsed time, 0.586s cpu time, 0.000s GC time
val it = (): unit
