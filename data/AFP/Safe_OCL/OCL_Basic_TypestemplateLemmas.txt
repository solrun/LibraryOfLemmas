   [("OCL_Basic_Types.type_less_eq_OclVoid_x_intro", "OclVoid <= ?\<tau>",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("OCL_Basic_Types.type_less_eq_x_OclAny_intro", "?\<tau> <= OclAny",
     template_inequation (less_equals, template_var 0, template_hole 0)),
    ("OCL_Basic_Types.order_refl_basic_type", "?\<tau> <= ?\<tau>",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(OclAny < ?\<sigma>) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < OclVoid) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("OCL_Basic_Types.sup_ge1_basic_type",
     "?\<tau> <= ?\<tau> \<squnion> ?\<sigma>",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OCL_Basic_Types.basic_subtype_OclAny_x",
     "OclAny \<sqsubset>\<^sub>B ?\<sigma> ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_hole 0),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_subtype_x_OclVoid",
     "?\<tau> \<sqsubset>\<^sub>B OclVoid ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_x_OclVoid", "?\<tau> < OclVoid ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 0)],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_subtype_irrefl", "?\<tau> < ?\<tau> ==> False",
     template_implication
      ([template_inequation (less_than, template_var 0, template_var 0)],
       template_predicate (template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(Boolean < ?\<sigma>) = (?\<sigma> = OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(Real < ?\<sigma>) = (?\<sigma> = OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(String < ?\<sigma>) = (?\<sigma> = OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < Boolean) = (?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < String) = (?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < UnlimitedNatural) = (?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.sup_commut_basic_type",
     "?\<tau> \<squnion> ?\<sigma> = ?\<sigma> \<squnion> ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("OCL_Basic_Types.sup_ge1_ObjectType",
     "\<langle>?\<C>\<rangle>\<^sub>\<T>
      <= \<langle>?\<C>\<rangle>\<^sub>\<T> \<squnion> ?\<sigma>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(OclVoid < ?\<sigma>) = (?\<sigma> ~= OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 2)))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < OclAny) = (?\<tau> ~= OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 2)))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < Enum ?\<E>) = (?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(Enum ?\<E> < ?\<sigma>) = (?\<sigma> = OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.type_less_x_Real_intro",
     "?\<tau> = Integer ==> ?\<tau> < Real",
     template_implication
      ([template_equation (template_var 0, template_hole 2)],
       template_inequation (less_than, template_var 0, template_hole 0))),
    ("OCL_Basic_Types.type_less_eq_x_Real_intro",
     "?\<tau> = Integer ==> ?\<tau> <= Real",
     template_implication
      ([template_equation (template_var 0, template_hole 2)],
       template_inequation (less_equals, template_var 0, template_hole 0))),
    ("OCL_Basic_Types.type_less_x_Integer_intro",
     "?\<tau> = UnlimitedNatural ==> ?\<tau> < Integer",
     template_implication
      ([template_equation (template_var 0, template_hole 2)],
       template_inequation (less_than, template_var 0, template_hole 0))),
    ("OCL_Basic_Types.type_less_x_Real_intro",
     "?\<tau> = UnlimitedNatural ==> ?\<tau> < Real",
     template_implication
      ([template_equation (template_var 0, template_hole 2)],
       template_inequation (less_than, template_var 0, template_hole 0))),
    ("OCL_Basic_Types.type_less_eq_x_Integer_intro",
     "?\<tau> = UnlimitedNatural ==> ?\<tau> <= Integer",
     template_implication
      ([template_equation (template_var 0, template_hole 2)],
       template_inequation (less_equals, template_var 0, template_hole 0))),
    ("OCL_Basic_Types.type_less_eq_x_Real_intro",
     "?\<tau> = UnlimitedNatural ==> ?\<tau> <= Real",
     template_implication
      ([template_equation (template_var 0, template_hole 2)],
       template_inequation (less_equals, template_var 0, template_hole 0))),
    ("OCL_Basic_Types.type_less_x_OclAny_intro",
     "?\<tau> ~= OclAny ==> ?\<tau> < OclAny",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_inequation (less_than, template_var 0, template_hole 1))),
    ("OCL_Basic_Types.type_less_OclVoid_x_intro",
     "?\<tau> ~= OclVoid ==> OclVoid < ?\<tau>",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_inequation (less_than, template_hole 1, template_var 0))),
    ("OCL_Basic_Types.basic_subtype_i_iI",
     "?x \<sqsubset>\<^sub>B ?xa ==>
      pred.eval (basic_subtype_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(Integer < ?\<sigma>) = (?\<sigma> = OclAny | ?\<sigma> = Real)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < Integer) =
      (?\<tau> = UnlimitedNatural | ?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("OCL_Basic_Types.basic_subtype_asym",
     "[| ?\<tau> \<sqsubset>\<^sub>B ?\<sigma>;
         ?\<sigma> \<sqsubset>\<^sub>B ?\<tau> |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate (template_hole 0))),
    ("OCL_Basic_Types.less_le_not_le_basic_type",
     "(?\<tau> < ?\<sigma>) =
      (?\<tau> <= ?\<sigma> & ~ ?\<sigma> <= ?\<tau>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("OCL_Basic_Types.antisym_basic_type",
     "[| ?\<tau> <= ?\<sigma>; ?\<sigma> <= ?\<tau> |]
      ==> ?\<tau> = ?\<sigma>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Basic_Types.basic_subtype_x_Boolean",
     "[| ?\<tau> \<sqsubset>\<^sub>B Boolean; ?\<tau> = OclVoid ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_subtype_x_Integer",
     "[| ?\<tau> \<sqsubset>\<^sub>B Integer;
         ?\<tau> = UnlimitedNatural ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_subtype_x_Real",
     "[| ?\<tau> \<sqsubset>\<^sub>B Real; ?\<tau> = Integer ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_subtype_x_String",
     "[| ?\<tau> \<sqsubset>\<^sub>B String; ?\<tau> = OclVoid ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_subtype_x_UnlimitedNatural",
     "[| ?\<tau> \<sqsubset>\<^sub>B UnlimitedNatural;
         ?\<tau> = OclVoid ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_x_Boolean",
     "[| ?\<tau> < Boolean; ?\<tau> = OclVoid ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 2),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_x_String",
     "[| ?\<tau> < String; ?\<tau> = OclVoid ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 2),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_x_UnlimitedNatural",
     "[| ?\<tau> < UnlimitedNatural; ?\<tau> = OclVoid ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 2),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_eq_x_OclVoid",
     "[| ?\<tau> <= OclVoid; ?\<tau> = OclVoid ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 1),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(UnlimitedNatural < ?\<sigma>) =
      (?\<sigma> = OclAny | ?\<sigma> = Real | ?\<sigma> = Integer)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 1)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 0)))
           ))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < Real) =
      (?\<tau> = Integer | ?\<tau> = UnlimitedNatural | ?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 1)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 0)))
           ))),
    ("OCL_Basic_Types.sup_least_basic_type",
     "[| ?\<tau> <= ?\<rho>; ?\<sigma> <= ?\<rho> |]
      ==> ?\<tau> \<squnion> ?\<sigma> <= ?\<rho>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("OCL_Basic_Types.type_less_x_ObjectType_intro",
     "[| ?\<tau> = \<langle>?\<C>\<rangle>\<^sub>\<T>; ?\<C> < ?\<D> |]
      ==> ?\<tau> < \<langle>?\<D>\<rangle>\<^sub>\<T>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 2, template_var 0)))),
    ("OCL_Basic_Types.type_less_eq_x_ObjectType_intro",
     "[| ?\<tau> = \<langle>?\<C>\<rangle>\<^sub>\<T>; ?\<C> <= ?\<D> |]
      ==> ?\<tau> <= \<langle>?\<D>\<rangle>\<^sub>\<T>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 2, template_var 0)))),
    ("OCL_Basic_Types.basic_subtype_x_Enum",
     "[| ?\<tau> \<sqsubset>\<^sub>B Enum ?\<E>; ?\<tau> = OclVoid ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_x_Enum",
     "[| ?\<tau> < Enum ?\<E>; ?\<tau> = OclVoid ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.tranclp_less_basic_type",
     "((?\<tau>, ?\<sigma>)
       : {(\<tau>, \<sigma>). \<tau> \<sqsubset>\<^sub>B \<sigma>}^+) =
      (?\<tau> < ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OCL_Basic_Types.basic_subtype_i_iE",
     "[| pred.eval (basic_subtype_i_i ?x ?xa) ?y;
         ?x \<sqsubset>\<^sub>B ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < \<langle>?\<D>\<rangle>\<^sub>\<T>) =
      (EX \<C>.
          ?\<tau> = \<langle>\<C>\<rangle>\<^sub>\<T> & \<C> < ?\<D> |
          ?\<tau> = OclVoid)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(\<langle>?\<C>\<rangle>\<^sub>\<T> < ?\<sigma>) =
      (EX \<D>.
          ?\<sigma> = OclAny |
          ?\<sigma> = \<langle>\<D>\<rangle>\<^sub>\<T> & ?\<C> < \<D>)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app (template_hole 5, t_empty))),
    ("OCL_Basic_Types.type_less_x_Integer",
     "[| ?\<tau> < Integer; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = UnlimitedNatural ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 3),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_eq_x_Boolean",
     "[| ?\<tau> <= Boolean; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = Boolean ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 2),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_eq_x_String",
     "[| ?\<tau> <= String; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = String ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 2),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_eq_x_UnlimitedNatural",
     "[| ?\<tau> <= UnlimitedNatural; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = UnlimitedNatural ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 2),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_eq_x_Enum",
     "[| ?\<tau> <= Enum ?\<E>; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = Enum ?\<E> ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_x_Real",
     "[| ?\<tau> < Real; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = UnlimitedNatural ==> ?P; ?\<tau> = Integer ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 4),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_eq_x_Integer",
     "[| ?\<tau> <= Integer; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = UnlimitedNatural ==> ?P; ?\<tau> = Integer ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 3)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_subtype_x_ObjectType",
     "[| ?\<tau> \<sqsubset>\<^sub>B \<langle>?\<C>\<rangle>\<^sub>\<T>;
         ?\<tau> = OclVoid ==> ?P;
         !!\<C>.
            [| ?\<tau> = \<langle>\<C>\<rangle>\<^sub>\<T>; \<C> < ?\<C> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_subtype_ObjectType_x",
     "[| \<langle>?\<C>\<rangle>\<^sub>\<T> \<sqsubset>\<^sub>B ?\<sigma>;
         !!\<D>.
            [| ?\<sigma> = \<langle>\<D>\<rangle>\<^sub>\<T>;
               ?\<C> < \<D> |]
            ==> ?P;
         ?\<sigma> = OclAny ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_x_ObjectType",
     "[| ?\<tau> < \<langle>?\<D>\<rangle>\<^sub>\<T>;
         ?\<tau> = OclVoid ==> ?P;
         !!\<C>.
            [| ?\<tau> = \<langle>\<C>\<rangle>\<^sub>\<T>; \<C> < ?\<D> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_implication
         ([template_equation (template_var 2, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_eq_x_ObjectType",
     "[| ?\<tau> <= \<langle>?\<D>\<rangle>\<^sub>\<T>;
         ?\<tau> = OclVoid ==> ?P;
         !!\<C>.
            [| ?\<tau> = \<langle>\<C>\<rangle>\<^sub>\<T>; \<C> <= ?\<D> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_implication
         ([template_equation (template_var 2, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_eq_x_Real",
     "[| ?\<tau> <= Real; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = UnlimitedNatural ==> ?P; ?\<tau> = Integer ==> ?P;
         ?\<tau> = Real ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 4),
        template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 4)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.basic_subtype_x_OclAny",
     "[| ?\<tau> \<sqsubset>\<^sub>B OclAny; ?\<tau> = Boolean ==> ?P;
         ?\<tau> = Real ==> ?P; ?\<tau> = String ==> ?P;
         !!\<C>. ?\<tau> = \<langle>\<C>\<rangle>\<^sub>\<T> ==> ?P;
         !!\<E>. ?\<tau> = Enum \<E> ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_hole 8)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 6)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 5)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 4)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_x_OclAny",
     "[| ?\<tau> < OclAny; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = Boolean ==> ?P; ?\<tau> = Integer ==> ?P;
         ?\<tau> = UnlimitedNatural ==> ?P; ?\<tau> = Real ==> ?P;
         ?\<tau> = String ==> ?P; !!\<E>. ?\<tau> = Enum \<E> ==> ?P;
         !!\<C>. ?\<tau> = \<langle>\<C>\<rangle>\<^sub>\<T> ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 11),
        template_implication
         ([template_equation (template_var 1, template_hole 9)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 8)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 7)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 6)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 5)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 4)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Basic_Types.type_less_eq_x_OclAny",
     "[| ?\<tau> <= OclAny; ?\<tau> = OclVoid ==> ?P;
         ?\<tau> = OclAny ==> ?P; ?\<tau> = Boolean ==> ?P;
         ?\<tau> = Integer ==> ?P; ?\<tau> = UnlimitedNatural ==> ?P;
         ?\<tau> = Real ==> ?P; ?\<tau> = String ==> ?P;
         !!\<E>. ?\<tau> = Enum \<E> ==> ?P;
         !!\<C>. ?\<tau> = \<langle>\<C>\<rangle>\<^sub>\<T> ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 11),
        template_implication
         ([template_equation (template_var 1, template_hole 9)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 11)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 8)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 7)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 6)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 5)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 4)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0)))]
