Loading theory "Draft.Transitive_Closure_Ext" (required by "Draft.TupleTemplates" via "Draft.Tuple")
Loading theory "Draft.Finite_Map_Ext" (required by "Draft.TupleTemplates" via "Draft.Tuple")
Loading theory "Draft.Templates" (required by "Draft.TupleTemplates" via "Draft.ExtrEqs")
### theory "Draft.Transitive_Closure_Ext"
### 0.068s elapsed time, 0.230s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.089s elapsed time, 0.276s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TupleTemplates")
### theory "Draft.Finite_Map_Ext"
### 0.213s elapsed time, 0.528s cpu time, 0.028s GC time
Loading theory "Draft.Tuple" (required by "Draft.TupleTemplates")
### theory "Draft.Tuple"
### 0.333s elapsed time, 0.697s cpu time, 0.071s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 1.043s cpu time, 0.099s GC time
Loading theory "Draft.TupleTemplates"
val templateLemmas =
   [("Tuple.subtuple_refl", "reflp ?R ==> subtuple ?R ?xm ?xm",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("Tuple.fmrel_to_subtuple", "fmrel ?r ?xm ?ym ==> subtuple ?r ?xm ?ym",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Tuple.subtuple_eq_fmrel_fmrestrict_fset",
     "subtuple ?r ?xm ?ym = fmrel ?r (fmrestrict_fset (fmdom ?ym) ?xm) ?ym",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0),
         template_var 2),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2)),
             template_var 0)),
         template_var 2))),
    ("Tuple.subtuple_fun_simp",
     "subtuple_fun ?f ?xm ?ym = subtuple ?f ?xm ?ym",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         t_empty),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 2)),
             template_var 1),
           template_var 0),
         template_var 2))),
    ("Tuple.rtrancl_to_subtuple",
     "(subtuple ?r)^** ?xm ?ym ==> subtuple ?r^** ?xm ?ym",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Tuple.trancl_to_subtuple",
     "(subtuple ?r)^++ ?xm ?ym ==> subtuple ?r^++ ?xm ?ym",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Tuple.subtuple_fmdom",
     "[| subtuple ?f ?xm ?ym; subtuple ?g ?ym ?xm |]
      ==> fmdom ?xm = fmdom ?ym",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_var 0),
                template_var 3),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 3, template_var 3)))),
    ("Tuple.subtuple_to_trancl",
     "[| reflp ?r; subtuple ?r^++ ?xm ?ym |] ==> (subtuple ?r)^++ ?xm ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)),
                  template_app (template_hole 1, template_var 2)),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 0),
             template_var 1)
           ))),
    ("Tuple.fmrel_to_subtuple_trancl",
     "[| reflp ?r; (fmrel ?r)^++ (fmrestrict_fset (fmdom ?ym) ?xm) ?ym |]
      ==> (subtuple ?r)^++ ?xm ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), template_var 0),
             template_var 1)
           ))),
    ("Tuple.strict_subtuple_fun_simp",
     "strict_subtuple_fun ?f ?xm ?ym = strict_subtuple ?f ?xm ?ym",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)),
                 t_empty)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 5, template_var 2)),
                     template_var 1),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))
           ))),
    ("Tuple.subtuple_fmmerge2",
     "(!!x y. x : fmran' ?xm ==> ?f x (?g x y)) ==>
      subtuple ?f ?xm (fmmerge ?g ?xm ?ym)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 3),
                       template_var 0))),
                 template_var 2),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0))
           ))),
    ("Tuple.subtuple_mono",
     "(!!x y.
          [| x : fmran' ?xm; y : fmran' ?ym |] ==> ?f x y --> ?g x y) ==>
      subtuple ?f ?xm ?ym --> subtuple ?g ?xm ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 2)),
                     template_var 1),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_var 0),
                 template_var 3),
               template_var 2))
           ))),
    ("Tuple.subtuple_antisym",
     "[| subtuple (%x y. ?f x y | x = y) ?xm ?ym;
         subtuple (%x y. ?f x y & ~ ?f y x | x = y) ?ym ?xm |]
      ==> ?xm = ?ym",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 2)),
                  t_empty),
                template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 0)),
                  t_empty),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 2))),
    ("Tuple.subtuple_acyclic''",
     "[| acyclicP_on (fmran' ?ym) ?R; subtuple ?R^** ?xm ?ym;
         subtuple ?R ?ym ?xm |]
      ==> ?xm = ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  template_app (template_hole 1, template_var 1)),
                template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 0)),
                  template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 2))),
    ("Tuple.strict_subtuple_mono",
     "(!!x y.
          [| x : fmran' ?xm; y : fmran' ?ym |] ==> ?f x y --> ?g x y) ==>
      strict_subtuple ?f ?xm ?ym --> strict_subtuple ?g ?xm ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 2)),
                         template_var 1),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 2)),
                       template_var 0),
                     template_var 3),
                   template_var 2)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2))))
           ))),
    ("Tuple.strict_subtuple_antisym",
     "[| strict_subtuple (%x y. ?f x y | x = y) ?xm ?ym;
         strict_subtuple (%x y. ?f x y & ~ ?f y x | x = y) ?ym ?xm |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_var 2)),
                      t_empty),
                    template_var 0),
                  template_var 2)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_var 0)),
                      t_empty),
                    template_var 2),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)))
            )],
       template_predicate (template_hole 0))),
    ("Tuple.trancl_to_strict_subtuple",
     "[| acyclicP_on (fmran' ?ym) ?R; (strict_subtuple ?R)^++ ?xm ?ym |]
      ==> strict_subtuple ?R^** ?xm ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty), template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 2)),
                     template_app (template_hole 0, template_var 1)),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))
           ))),
    ("Tuple.subtuple_acyclic",
     "[| acyclicP_on (fmran' ?xm) ?P;
         subtuple (%x y. ?P x y | x = y)^++ ?xm ?ym;
         subtuple (%x y. ?P x y | x = y) ?ym ?xm |]
      ==> ?xm = ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0)),
                  template_app (template_hole 3, t_empty)),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  t_empty),
                template_var 0),
              template_var 2)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Tuple.subtuple_acyclic'",
     "[| acyclicP_on (fmran' ?ym) ?P;
         subtuple (%x y. ?P x y | x = y)^++ ?xm ?ym;
         subtuple (%x y. ?P x y | x = y) ?ym ?xm |]
      ==> ?xm = ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_app (template_hole 3, t_empty)),
                template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0)),
                  t_empty),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 2))),
    ("Tuple.strict_subtuple_trans''",
     "[| acyclicP_on (fmran' ?zm) ?R; strict_subtuple ?R ?xm ?ym;
         strict_subtuple ?R^** ?ym ?zm |]
      ==> strict_subtuple ?R^** ?xm ?zm",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_var 1)),
                      template_var 2),
                    template_var 0),
                  template_var 1)),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_var 3)),
                      template_app (template_hole 0, template_var 2)),
                    template_var 1),
                  template_var 3)),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 3)),
                     template_app (template_hole 0, template_var 2)),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3)))
           ))),
    ("Tuple.subtuple_rtranclp_intro",
     "[| !!xm ym. ?R (?f xm) (?f ym) ==> subtuple ?R xm ym;
         bij_on_trancl ?R ?f; ?R^** (?f ?xm) (?f ?ym) |]
      ==> subtuple ?R^** ?xm ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_hole 7)),
              template_app (template_hole 6, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_app (template_var 2, template_var 1)),
              template_app (template_var 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 0)),
                 template_app (template_hole 0, template_var 3)),
               template_var 1),
             template_var 0)
           ))),
    ("Tuple.trancl_to_strict_subtuple'",
     "[| acyclicP_on (fmran' ?ym) ?R;
         (strict_subtuple (%x y. ?R x y | x = y))^++ ?xm ?ym |]
      ==> strict_subtuple (%x y. ?R x y | x = y)^** ?xm ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, t_empty), template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 2)),
                     template_app (template_hole 0, t_empty)),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))
           ))),
    ("Tuple.strict_subtuple_trans",
     "[| acyclicP_on (fmran' ?xm) ?P;
         strict_subtuple (%x y. ?P x y | x = y)^++ ?xm ?ym;
         strict_subtuple (%x y. ?P x y | x = y) ?ym ?zm |]
      ==> strict_subtuple (%x y. ?P x y | x = y)^++ ?xm ?zm",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 1)),
                      template_app (template_hole 3, t_empty)),
                    template_var 3),
                  template_var 1)),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 0)),
                      t_empty),
                    template_var 1),
                  template_var 0)),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 0)),
                     template_app (template_hole 3, t_empty)),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("Tuple.strict_subtuple_trans'''",
     "[| acyclicP_on (fmran' ?zm) ?P;
         strict_subtuple (%x y. ?P x y | x = y) ?xm ?ym;
         strict_subtuple (%x y. ?P x y | x = y)^** ?ym ?zm |]
      ==> strict_subtuple (%x y. ?P x y | x = y)^** ?xm ?zm",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 1)),
                      t_empty),
                    template_var 0),
                  template_var 1)),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 3)),
                      template_app (template_hole 0, t_empty)),
                    template_var 1),
                  template_var 3)),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     template_app (template_hole 0, t_empty)),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3)))
           ))),
    ("Tuple.strict_subtuple_trans'",
     "[| acyclicP_on (fmran' ?zm) ?P;
         strict_subtuple (%x y. ?P x y | x = y) ?xm ?ym;
         strict_subtuple (%x y. ?P x y | x = y)^++ ?ym ?zm |]
      ==> strict_subtuple (%x y. ?P x y | x = y)^++ ?xm ?zm",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 1)),
                      t_empty),
                    template_var 0),
                  template_var 1)),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 3)),
                      template_app (template_hole 0, t_empty)),
                    template_var 1),
                  template_var 3)),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 3)),
                     template_app (template_hole 0, t_empty)),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3)))
           ))),
    ("Tuple.strict_subtuple_rtranclp_intro",
     "[| !!xm ym.
            ?R (?f xm) (?f ym) ==>
            strict_subtuple (%x y. ?R x y | x = y) xm ym;
         bij_on_trancl ?R ?f; acyclicP_on (fmran' ?ym) ?R;
         ?R^++ (?f ?xm) (?f ?ym) |]
      ==> strict_subtuple ?R^** ?xm ?ym",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_hole 13)),
              template_app (template_hole 12, t_empty))
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app (template_var 2, template_var 0)),
              template_app (template_var 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 20,
                       template_app (template_hole 19, template_var 1)),
                     template_app (template_hole 0, template_var 3)),
                   template_var 0),
                 template_var 1)),
             template_app
              (template_hole 16,
               template_app
                (template_app (template_hole 15, template_var 0),
                 template_var 1)))
           )))]:
   (string * thm * template) list
### theory "Draft.TupleTemplates"
### 0.369s elapsed time, 0.496s cpu time, 0.051s GC time
val it = (): unit
