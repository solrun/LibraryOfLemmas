Loading theory "Draft.Errorable" (required by "Draft.OCL_TypesTemplates" via "Draft.OCL_Types")
Loading theory "Draft.Transitive_Closure_Ext" (required by "Draft.OCL_TypesTemplates" via "Draft.OCL_Types" via "Draft.Tuple")
Loading theory "Draft.Templates" (required by "Draft.OCL_TypesTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.OCL_Basic_Types" (required by "Draft.OCL_TypesTemplates" via "Draft.OCL_Types")
instantiation
  errorable :: (type) bot
  bot_errorable == bot :: 'a\<^sub>\<bottom>
### theory "Draft.Transitive_Closure_Ext"
### 0.080s elapsed time, 0.352s cpu time, 0.000s GC time
Loading theory "Draft.Finite_Map_Ext" (required by "Draft.OCL_TypesTemplates" via "Draft.OCL_Types" via "Draft.Tuple")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.085s elapsed time, 0.372s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OCL_TypesTemplates")
### The transfer theorems can't be generated:
### No quotient theorem has been registered for errorable.
### Use setup_lifting to register a quotient or type definition theorem.
### theory "Draft.Errorable"
### 0.171s elapsed time, 0.689s cpu time, 0.032s GC time
### theory "Draft.Finite_Map_Ext"
### 0.195s elapsed time, 0.651s cpu time, 0.032s GC time
Loading theory "Draft.Tuple" (required by "Draft.OCL_TypesTemplates" via "Draft.OCL_Types")
### theory "Draft.Tuple"
### 0.346s elapsed time, 1.044s cpu time, 0.138s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.589s elapsed time, 1.793s cpu time, 0.170s GC time
Proofs for inductive predicate(s) "basic_subtype"
  Proving monotonicity ...
instantiation
  basic_type :: (order) order
  less_eq_basic_type == less_eq :: 'a basic_type => 'a basic_type => bool
  less_basic_type == less :: 'a basic_type => 'a basic_type => bool
instantiation
  basic_type :: (semilattice_sup) semilattice_sup
  sup_basic_type == sup :: 'a basic_type => 'a basic_type => 'a basic_type
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.OCL_Basic_Types"
### 1.638s elapsed time, 3.245s cpu time, 0.281s GC time
Loading theory "Draft.OCL_Types" (required by "Draft.OCL_TypesTemplates")
instantiation
  OCL_Types.type :: (type) size
  size_type == size :: 'a OCL_Types.type => nat
consts
  size_type :: "'a OCL_Types.type => nat"
Proofs for inductive predicate(s) "subtype"
  Proving monotonicity ...
instantiation
  OCL_Types.type :: (order) order
  less_eq_type == less_eq :: 'a OCL_Types.type => 'a OCL_Types.type => bool
  less_type == less :: 'a OCL_Types.type => 'a OCL_Types.type => bool
instantiation
  OCL_Types.type :: (semilattice_sup) semilattice_sup
  sup_type == sup ::
    'a OCL_Types.type => 'a OCL_Types.type => 'a OCL_Types.type
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "element_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "update_element_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "to_unique_collection"
  Proving monotonicity ...
Proofs for inductive predicate(s) "to_nonunique_collection"
  Proving monotonicity ...
Proofs for inductive predicate(s) "to_ordered_collection"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OCL_Types"
### 3.060s elapsed time, 3.601s cpu time, 0.692s GC time
Loading theory "Draft.OCL_TypesTemplates"
val templateLemmas =
   [("OCL_Types.type_less_eq_x_OclSuper_intro", "?\<tau> <= OclSuper",
     template_inequation (less_equals, template_var 0, template_hole 0)),
    ("OCL_Types.order_refl_type", "?\<tau> <= ?\<tau>",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("OCL_Types.type_less_left_simps", "(OclSuper < ?\<sigma>) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("OCL_Types.sup_ge1_type", "?\<tau> <= ?\<tau> \<squnion> ?\<sigma>",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OCL_Types.subtype_OclSuper_x",
     "OclSuper \<sqsubset> ?\<sigma> ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_hole 0),
              template_var 1)
            )],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_irrefl", "?\<tau> < ?\<tau> ==> False",
     template_implication
      ([template_inequation (less_than, template_var 0, template_var 0)],
       template_predicate (template_hole 0))),
    ("OCL_Types.sup_commut_type",
     "?\<tau> \<squnion> ?\<sigma> = ?\<sigma> \<squnion> ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("OCL_Types.type_less_right_simps",
     "(?\<tau> < OclSuper) = (?\<tau> ~= OclSuper)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 2)))),
    ("OCL_Types.element_type_i_oI",
     "element_type ?x ?xa ==> pred.eval (element_type_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("OCL_Types.element_type_o_iI",
     "element_type ?x ?xa ==> pred.eval (element_type_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("OCL_Types.to_nonunique_collection_i_oI",
     "to_nonunique_collection ?x ?xa ==>
      pred.eval (to_nonunique_collection_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("OCL_Types.to_nonunique_collection_o_iI",
     "to_nonunique_collection ?x ?xa ==>
      pred.eval (to_nonunique_collection_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("OCL_Types.to_ordered_collection_i_oI",
     "to_ordered_collection ?x ?xa ==>
      pred.eval (to_ordered_collection_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("OCL_Types.to_ordered_collection_o_iI",
     "to_ordered_collection ?x ?xa ==>
      pred.eval (to_ordered_collection_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("OCL_Types.to_unique_collection_i_oI",
     "to_unique_collection ?x ?xa ==>
      pred.eval (to_unique_collection_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("OCL_Types.to_unique_collection_o_iI",
     "to_unique_collection ?x ?xa ==>
      pred.eval (to_unique_collection_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("OCL_Types.eq_i_oI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("OCL_Types.eq_o_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("OCL_Types.type_less_x_OclSuper_intro",
     "?\<tau> ~= OclSuper ==> ?\<tau> < OclSuper",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_inequation (less_than, template_var 0, template_hole 1))),
    ("OCL_Types.fun_or_eq_refl", "reflp (%x y. ?f x y | x = y)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("OCL_Types.element_type_i_iI",
     "element_type ?x ?xa ==> pred.eval (element_type_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Types.subtype_i_iI",
     "?x \<sqsubset> ?xa ==> pred.eval (subtype_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Types.to_nonunique_collection_i_iI",
     "to_nonunique_collection ?x ?xa ==>
      pred.eval (to_nonunique_collection_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Types.to_ordered_collection_i_iI",
     "to_ordered_collection ?x ?xa ==>
      pred.eval (to_ordered_collection_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Types.to_unique_collection_i_iI",
     "to_unique_collection ?x ?xa ==>
      pred.eval (to_unique_collection_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Types.eq_i_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Types.update_element_type_i_i_oI",
     "update_element_type ?x ?xa ?xb ==>
      pred.eval (update_element_type_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("OCL_Types.update_element_type_i_o_iI",
     "update_element_type ?x ?xa ?xb ==>
      pred.eval (update_element_type_i_o_i ?x ?xb) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("OCL_Types.subtype_asym",
     "[| ?\<tau> \<sqsubset> ?\<sigma>; ?\<sigma> \<sqsubset> ?\<tau> |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate (template_hole 0))),
    ("OCL_Types.less_le_not_le_type",
     "(?\<tau> < ?\<sigma>) =
      (?\<tau> <= ?\<sigma> & ~ ?\<sigma> <= ?\<tau>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("OCL_Types.update_element_type_i_i_iI",
     "update_element_type ?x ?xa ?xb ==>
      pred.eval (update_element_type_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Types.element_type_det",
     "[| element_type ?\<tau> ?\<sigma>\<^sub>1;
         element_type ?\<tau> ?\<sigma>\<^sub>2 |]
      ==> ?\<sigma>\<^sub>1 = ?\<sigma>\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Types.to_nonunique_collection_det",
     "[| to_nonunique_collection ?\<tau> ?\<sigma>\<^sub>1;
         to_nonunique_collection ?\<tau> ?\<sigma>\<^sub>2 |]
      ==> ?\<sigma>\<^sub>1 = ?\<sigma>\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Types.to_ordered_collection_det",
     "[| to_ordered_collection ?\<tau> ?\<sigma>\<^sub>1;
         to_ordered_collection ?\<tau> ?\<sigma>\<^sub>2 |]
      ==> ?\<sigma>\<^sub>1 = ?\<sigma>\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Types.to_unique_collection_det",
     "[| to_unique_collection ?\<tau> ?\<sigma>\<^sub>1;
         to_unique_collection ?\<tau> ?\<sigma>\<^sub>2 |]
      ==> ?\<sigma>\<^sub>1 = ?\<sigma>\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Types.order_trans_type",
     "[| ?\<tau> <= ?\<sigma>; ?\<sigma> <= ?\<rho> |]
      ==> ?\<tau> <= ?\<rho>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("OCL_Types.antisym_type",
     "[| ?\<tau> <= ?\<sigma>; ?\<sigma> <= ?\<tau> |]
      ==> ?\<tau> = ?\<sigma>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Types.not_subtype_Optional_Required",
     "[| (\<sqsubset>)^++ ?\<tau>[?] ?\<sigma>; ?\<sigma> = ?\<rho>[1] |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_app (template_hole 2, template_var 3)),
              template_var 2)
            ),
        template_equation
         (template_var 2, template_app (template_hole 0, template_var 1))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_right_simps",
     "(?\<tau> < Bag ?\<sigma>) =
      (EX \<phi>. ?\<tau> = Bag \<phi> & \<phi> < ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("OCL_Types.type_less_right_simps",
     "(?\<tau> < OrderedSet ?\<sigma>) =
      (EX \<phi>. ?\<tau> = OrderedSet \<phi> & \<phi> < ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("OCL_Types.type_less_right_simps",
     "(?\<tau> < ?\<upsilon>[1]) =
      (EX \<rho>. ?\<tau> = \<rho>[1] & \<rho> < ?\<upsilon>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("OCL_Types.type_less_right_simps",
     "(?\<tau> < Sequence ?\<sigma>) =
      (EX \<phi>. ?\<tau> = Sequence \<phi> & \<phi> < ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("OCL_Types.type_less_right_simps",
     "(?\<tau> < Set ?\<sigma>) =
      (EX \<phi>. ?\<tau> = Set \<phi> & \<phi> < ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("OCL_Types.type_less_x_OclSuper",
     "[| ?\<tau> < OclSuper; ?\<tau> ~= OclSuper ==> ?P |] ==> ?P",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 2),
        template_implication
         ([template_negation
            (template_equation (template_var 1, template_hole 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.sup_least_type",
     "[| ?\<tau> <= ?\<rho>; ?\<sigma> <= ?\<rho> |]
      ==> ?\<tau> \<squnion> ?\<sigma> <= ?\<rho>",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("OCL_Types.type_less_x_Bag_intro",
     "[| ?\<tau> = Bag ?\<rho>; ?\<rho> < ?\<sigma> |]
      ==> ?\<tau> < Bag ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.type_less_x_Collection_intro",
     "[| ?\<tau> = Bag ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> < Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Bag_intro",
     "[| ?\<tau> = Bag ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= Bag ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Collection_intro",
     "[| ?\<tau> = Bag ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_x_Collection_intro",
     "[| ?\<tau> = Collection ?\<rho>; ?\<rho> < ?\<sigma> |]
      ==> ?\<tau> < Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Collection_intro",
     "[| ?\<tau> = Collection ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.type_less_x_Optional_intro",
     "[| ?\<tau> = ?\<rho>[?]; ?\<rho> < ?\<sigma> |]
      ==> ?\<tau> < ?\<sigma>[?]",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 2, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Optional_intro",
     "[| ?\<tau> = ?\<rho>[?]; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= ?\<sigma>[?]",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 2, template_var 0)))),
    ("OCL_Types.type_less_x_OrderedSet_intro",
     "[| ?\<tau> = OrderedSet ?\<rho>; ?\<rho> < ?\<sigma> |]
      ==> ?\<tau> < OrderedSet ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.type_less_x_Collection_intro",
     "[| ?\<tau> = OrderedSet ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> < Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Collection_intro",
     "[| ?\<tau> = OrderedSet ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_eq_x_OrderedSet_intro",
     "[| ?\<tau> = OrderedSet ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= OrderedSet ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.type_less_x_Required_intro",
     "[| ?\<tau> = ?\<rho>[1]; ?\<rho> < ?\<sigma> |]
      ==> ?\<tau> < ?\<sigma>[1]",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 2, template_var 0)))),
    ("OCL_Types.type_less_x_Optional_intro",
     "[| ?\<tau> = ?\<rho>[1]; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> < ?\<sigma>[?]",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Optional_intro",
     "[| ?\<tau> = ?\<rho>[1]; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= ?\<sigma>[?]",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Required_intro",
     "[| ?\<tau> = ?\<rho>[1]; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= ?\<sigma>[1]",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 2, template_var 0)))),
    ("OCL_Types.type_less_x_Sequence_intro",
     "[| ?\<tau> = Sequence ?\<rho>; ?\<rho> < ?\<sigma> |]
      ==> ?\<tau> < Sequence ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.type_less_x_Collection_intro",
     "[| ?\<tau> = Sequence ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> < Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Collection_intro",
     "[| ?\<tau> = Sequence ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Sequence_intro",
     "[| ?\<tau> = Sequence ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= Sequence ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.type_less_x_Set_intro",
     "[| ?\<tau> = Set ?\<rho>; ?\<rho> < ?\<sigma> |]
      ==> ?\<tau> < Set ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.type_less_x_Collection_intro",
     "[| ?\<tau> = Set ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> < Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 3, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Collection_intro",
     "[| ?\<tau> = Set ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= Collection ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, template_var 0)))),
    ("OCL_Types.type_less_eq_x_Set_intro",
     "[| ?\<tau> = Set ?\<rho>; ?\<rho> <= ?\<sigma> |]
      ==> ?\<tau> <= Set ?\<sigma>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 1, template_var 1)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 1, template_var 0)))),
    ("OCL_Types.update_element_type_det",
     "[| update_element_type ?\<tau> ?\<sigma> ?\<rho>\<^sub>1;
         update_element_type ?\<tau> ?\<sigma> ?\<rho>\<^sub>2 |]
      ==> ?\<rho>\<^sub>1 = ?\<rho>\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Types.eq_i_oE",
     "[| pred.eval (eq_i_o ?x) ?xa; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.eq_o_iE",
     "[| pred.eval (eq_o_i ?xa) ?x; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.element_type_i_oE",
     "[| pred.eval (element_type_i_o ?x) ?xa; element_type ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.element_type_o_iE",
     "[| pred.eval (element_type_o_i ?xa) ?x; element_type ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.to_nonunique_collection_i_oE",
     "[| pred.eval (to_nonunique_collection_i_o ?x) ?xa;
         to_nonunique_collection ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.to_nonunique_collection_o_iE",
     "[| pred.eval (to_nonunique_collection_o_i ?xa) ?x;
         to_nonunique_collection ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.to_ordered_collection_i_oE",
     "[| pred.eval (to_ordered_collection_i_o ?x) ?xa;
         to_ordered_collection ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.to_ordered_collection_o_iE",
     "[| pred.eval (to_ordered_collection_o_i ?xa) ?x;
         to_ordered_collection ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.to_unique_collection_i_oE",
     "[| pred.eval (to_unique_collection_i_o ?x) ?xa;
         to_unique_collection ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.to_unique_collection_o_iE",
     "[| pred.eval (to_unique_collection_o_i ?xa) ?x;
         to_unique_collection ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.element_type_i_iE",
     "[| pred.eval (element_type_i_i ?x ?xa) ?y;
         element_type ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.eq_i_iE",
     "[| pred.eval (eq_i_i ?x ?xa) ?y; Predicate.eq ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_i_iE",
     "[| pred.eval (subtype_i_i ?x ?xa) ?y; ?x \<sqsubset> ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.to_nonunique_collection_i_iE",
     "[| pred.eval (to_nonunique_collection_i_i ?x ?xa) ?y;
         to_nonunique_collection ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.to_ordered_collection_i_iE",
     "[| pred.eval (to_ordered_collection_i_i ?x ?xa) ?y;
         to_ordered_collection ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.to_unique_collection_i_iE",
     "[| pred.eval (to_unique_collection_i_i ?x ?xa) ?y;
         to_unique_collection ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.update_element_type_i_i_oE",
     "[| pred.eval (update_element_type_i_i_o ?x ?xa) ?xb;
         update_element_type ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.update_element_type_i_o_iE",
     "[| pred.eval (update_element_type_i_o_i ?x ?xb) ?xa;
         update_element_type ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_eq_x_Tuple_intro",
     "[| ?\<tau> = Tuple ?\<pi>; subtuple (<=) ?\<pi> ?\<xi> |]
      ==> ?\<tau> <= Tuple ?\<xi>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 0)),
                  template_hole 0),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 3, template_var 0)))),
    ("OCL_Types.update_element_type_i_i_iE",
     "[| pred.eval (update_element_type_i_i_i ?x ?xa ?xb) ?y;
         update_element_type ?x ?xa ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_left_simps",
     "(Collection ?\<tau> < ?\<sigma>) =
      (EX \<phi>.
          ?\<sigma> = OclSuper |
          ?\<sigma> = Collection \<phi> & ?\<tau> < \<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("OCL_Types.type_less_left_simps",
     "(?\<rho>[?] < ?\<sigma>) =
      (EX \<upsilon>.
          ?\<sigma> = OclSuper |
          ?\<sigma> = \<upsilon>[?] & ?\<rho> < \<upsilon>)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app (template_hole 5, t_empty))),
    ("OCL_Types.type_less_right_simps",
     "(?\<tau> < Tuple ?\<xi>) =
      (EX \<pi>.
          ?\<tau> = Tuple \<pi> & strict_subtuple (<=) \<pi> ?\<xi>)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("OCL_Types.type_less_x_Tuple_intro",
     "[| ?\<tau> = Tuple ?\<pi>; strict_subtuple (<=) ?\<pi> ?\<xi> |]
      ==> ?\<tau> < Tuple ?\<xi>",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 0)),
                      template_hole 3),
                    template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 7, template_var 0)))),
    ("OCL_Types.subtype_x_Bag",
     "[| ?\<tau> \<sqsubset> Bag ?\<sigma>;
         !!\<tau>.
            [| ?\<tau> = Bag \<tau>; \<tau> \<sqsubset> ?\<sigma> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_x_OrderedSet",
     "[| ?\<tau> \<sqsubset> OrderedSet ?\<sigma>;
         !!\<tau>.
            [| ?\<tau> = OrderedSet \<tau>; \<tau> \<sqsubset> ?\<sigma> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_x_Required",
     "[| ?\<tau> \<sqsubset> ?\<sigma>[1];
         !!\<tau>.
            [| ?\<tau> = \<tau>[1]; \<tau> \<sqsubset>\<^sub>B ?\<sigma> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_x_Sequence",
     "[| ?\<tau> \<sqsubset> Sequence ?\<sigma>;
         !!\<tau>.
            [| ?\<tau> = Sequence \<tau>; \<tau> \<sqsubset> ?\<sigma> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_x_Set",
     "[| ?\<tau> \<sqsubset> Set ?\<sigma>;
         !!\<tau>.
            [| ?\<tau> = Set \<tau>; \<tau> \<sqsubset> ?\<sigma> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_x_Bag",
     "[| ?\<tau> < Bag ?\<sigma>;
         !!\<rho>. [| ?\<tau> = Bag \<rho>; \<rho> < ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_x_OrderedSet",
     "[| ?\<tau> < OrderedSet ?\<sigma>;
         !!\<rho>.
            [| ?\<tau> = OrderedSet \<rho>; \<rho> < ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_x_Required",
     "[| ?\<tau> < ?\<sigma>[1];
         !!\<rho>. [| ?\<tau> = \<rho>[1]; \<rho> < ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_x_Sequence",
     "[| ?\<tau> < Sequence ?\<sigma>;
         !!\<rho>.
            [| ?\<tau> = Sequence \<rho>; \<rho> < ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_x_Set",
     "[| ?\<tau> < Set ?\<sigma>;
         !!\<rho>. [| ?\<tau> = Set \<rho>; \<rho> < ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_eq_x_Bag",
     "[| ?\<tau> <= Bag ?\<sigma>;
         !!\<rho>. [| ?\<tau> = Bag \<rho>; \<rho> <= ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_eq_x_OrderedSet",
     "[| ?\<tau> <= OrderedSet ?\<sigma>;
         !!\<rho>.
            [| ?\<tau> = OrderedSet \<rho>; \<rho> <= ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_eq_x_Required",
     "[| ?\<tau> <= ?\<sigma>[1];
         !!\<rho>. [| ?\<tau> = \<rho>[1]; \<rho> <= ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_eq_x_Sequence",
     "[| ?\<tau> <= Sequence ?\<sigma>;
         !!\<rho>.
            [| ?\<tau> = Sequence \<rho>; \<rho> <= ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_eq_x_Set",
     "[| ?\<tau> <= Set ?\<sigma>;
         !!\<rho>. [| ?\<tau> = Set \<rho>; \<rho> <= ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_right_simps",
     "(?\<tau> < ?\<upsilon>[?]) =
      (EX \<rho>.
          ?\<tau> = \<rho>[1] & \<rho> <= ?\<upsilon> |
          ?\<tau> = \<rho>[?] & \<rho> < ?\<upsilon>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("OCL_Types.type_less_eq_x_Tuple",
     "[| ?\<tau> <= Tuple ?\<xi>;
         !!\<pi>.
            [| ?\<tau> = Tuple \<pi>; subtuple (<=) \<pi> ?\<xi> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_left_simps",
     "(Tuple ?\<pi> < ?\<sigma>) =
      (EX \<xi>.
          ?\<sigma> = OclSuper |
          ?\<sigma> = Tuple \<xi> & strict_subtuple (<=) ?\<pi> \<xi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app (template_hole 9, t_empty))),
    ("OCL_Types.element_type_alt_simps",
     "element_type ?\<tau> ?\<sigma> =
      (Collection ?\<sigma> = ?\<tau> |
       Set ?\<sigma> = ?\<tau> |
       OrderedSet ?\<sigma> = ?\<tau> |
       Bag ?\<sigma> = ?\<tau> | Sequence ?\<sigma> = ?\<tau>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 3, template_var 0)),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 1, template_var 0)),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 0, template_var 0)),
                     template_var 1)))))
           ))),
    ("OCL_Types.type_less_left_simps",
     "(Bag ?\<tau> < ?\<sigma>) =
      (EX \<phi>.
          ?\<sigma> = OclSuper |
          ?\<sigma> = Collection \<phi> & ?\<tau> <= \<phi> |
          ?\<sigma> = Bag \<phi> & ?\<tau> < \<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("OCL_Types.type_less_left_simps",
     "(OrderedSet ?\<tau> < ?\<sigma>) =
      (EX \<phi>.
          ?\<sigma> = OclSuper |
          ?\<sigma> = Collection \<phi> & ?\<tau> <= \<phi> |
          ?\<sigma> = OrderedSet \<phi> & ?\<tau> < \<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("OCL_Types.type_less_left_simps",
     "(?\<rho>[1] < ?\<sigma>) =
      (EX \<upsilon>.
          ?\<sigma> = OclSuper |
          ?\<sigma> = \<upsilon>[1] & ?\<rho> < \<upsilon> |
          ?\<sigma> = \<upsilon>[?] & ?\<rho> <= \<upsilon>)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_var 0),
       template_app (template_hole 7, t_empty))),
    ("OCL_Types.type_less_left_simps",
     "(Sequence ?\<tau> < ?\<sigma>) =
      (EX \<phi>.
          ?\<sigma> = OclSuper |
          ?\<sigma> = Collection \<phi> & ?\<tau> <= \<phi> |
          ?\<sigma> = Sequence \<phi> & ?\<tau> < \<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("OCL_Types.type_less_left_simps",
     "(Set ?\<tau> < ?\<sigma>) =
      (EX \<phi>.
          ?\<sigma> = OclSuper |
          ?\<sigma> = Collection \<phi> & ?\<tau> <= \<phi> |
          ?\<sigma> = Set \<phi> & ?\<tau> < \<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("OCL_Types.type_less_x_Tuple",
     "[| ?\<tau> < Tuple ?\<xi>;
         !!\<pi>.
            [| ?\<tau> = Tuple \<pi>; strict_subtuple (<=) \<pi> ?\<xi> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_x_Optional",
     "[| ?\<tau> \<sqsubset> ?\<sigma>[?];
         !!\<tau>.
            [| ?\<tau> = \<tau>[?]; \<tau> \<sqsubset>\<^sub>B ?\<sigma> |]
            ==> ?P;
         ?\<tau> = ?\<sigma>[1] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 0, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_tranclp_Collection_x",
     "[| (\<sqsubset>)^++ (Collection ?\<tau>) ?\<sigma>;
         !!\<rho>.
            [| ?\<sigma> = Collection \<rho>;
               (\<sqsubset>)^++ ?\<tau> \<rho> |]
            ==> ?P;
         ?\<sigma> = OclSuper ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_x_OclSuper",
     "[| ?\<tau> \<sqsubset> OclSuper; ?\<tau> = OclAny[?] ==> ?P;
         ?\<tau> = Collection OclSuper ==> ?P;
         !!\<pi>. ?\<tau> = Tuple \<pi> ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 4, template_hole 3))],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 2, template_hole 6))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_Collection_x",
     "[| Collection ?\<tau> \<sqsubset> ?\<sigma>;
         !!\<sigma>.
            [| ?\<sigma> = Collection \<sigma>;
               ?\<tau> \<sqsubset> \<sigma> |]
            ==> ?P;
         [| ?\<tau> = OclSuper; ?\<sigma> = OclSuper |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_implication
           ([template_equation (template_var 1, template_hole 0)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_x_Optional",
     "[| ?\<tau> < ?\<sigma>[?];
         !!\<rho>. [| ?\<tau> = \<rho>[1]; \<rho> <= ?\<sigma> |] ==> ?P;
         !!\<rho>. [| ?\<tau> = \<rho>[?]; \<rho> < ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_eq_x_Optional",
     "[| ?\<tau> <= ?\<sigma>[?];
         !!\<rho>. [| ?\<tau> = \<rho>[1]; \<rho> <= ?\<sigma> |] ==> ?P;
         !!\<rho>. [| ?\<tau> = \<rho>[?]; \<rho> <= ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_x_Tuple",
     "[| ?\<tau> \<sqsubset> Tuple ?\<pi>;
         !!\<pi>.
            [| ?\<tau> = Tuple \<pi>;
               subtuple
                (%\<tau> \<sigma>.
                    \<tau> \<sqsubset> \<sigma> | \<tau> = \<sigma>)
                \<pi> ?\<pi>;
               \<pi> ~= ?\<pi> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_right_simps",
     "(?\<tau> < Collection ?\<sigma>) =
      (EX \<phi>.
          ?\<tau> = Collection \<phi> & \<phi> < ?\<sigma> |
          ?\<tau> = Set \<phi> & \<phi> <= ?\<sigma> |
          ?\<tau> = OrderedSet \<phi> & \<phi> <= ?\<sigma> |
          ?\<tau> = Bag \<phi> & \<phi> <= ?\<sigma> |
          ?\<tau> = Sequence \<phi> & \<phi> <= ?\<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("OCL_Types.type_less_x_Tuple'",
     "[| ?\<tau> < Tuple ?\<xi>; acyclicP_on (fmran' ?\<xi>) (\<sqsubset>);
         !!\<pi>.
            [| ?\<tau> = Tuple \<pi>; strict_subtuple (<=) \<pi> ?\<xi> |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 18, template_var 1)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.subtype_x_Collection",
     "[| ?\<tau> \<sqsubset> Collection ?\<sigma>;
         !!\<tau>.
            [| ?\<tau> = Collection \<tau>; \<tau> \<sqsubset> ?\<sigma> |]
            ==> ?P;
         ?\<tau> = Set ?\<sigma> ==> ?P;
         ?\<tau> = OrderedSet ?\<sigma> ==> ?P;
         ?\<tau> = Bag ?\<sigma> ==> ?P;
         ?\<tau> = Sequence ?\<sigma> ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 3, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 2, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_var 2,
             template_app (template_hole 0, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_x_Collection",
     "[| ?\<tau> < Collection ?\<sigma>;
         !!\<rho>.
            [| ?\<tau> = Collection \<rho>; \<rho> < ?\<sigma> |] ==> ?P;
         !!\<rho>. [| ?\<tau> = Set \<rho>; \<rho> <= ?\<sigma> |] ==> ?P;
         !!\<rho>.
            [| ?\<tau> = OrderedSet \<rho>; \<rho> <= ?\<sigma> |] ==> ?P;
         !!\<rho>. [| ?\<tau> = Bag \<rho>; \<rho> <= ?\<sigma> |] ==> ?P;
         !!\<rho>.
            [| ?\<tau> = Sequence \<rho>; \<rho> <= ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Types.type_less_eq_x_Collection",
     "[| ?\<tau> <= Collection ?\<sigma>;
         !!\<rho>. [| ?\<tau> = Set \<rho>; \<rho> <= ?\<sigma> |] ==> ?P;
         !!\<rho>.
            [| ?\<tau> = OrderedSet \<rho>; \<rho> <= ?\<sigma> |] ==> ?P;
         !!\<rho>. [| ?\<tau> = Bag \<rho>; \<rho> <= ?\<sigma> |] ==> ?P;
         !!\<rho>.
            [| ?\<tau> = Sequence \<rho>; \<rho> <= ?\<sigma> |] ==> ?P;
         !!\<rho>.
            [| ?\<tau> = Collection \<rho>; \<rho> <= ?\<sigma> |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.OCL_TypesTemplates"
### 0.434s elapsed time, 0.604s cpu time, 0.058s GC time
val it = (): unit
