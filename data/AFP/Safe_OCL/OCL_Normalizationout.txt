Loading theory "Draft.Transitive_Closure_Ext" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization" via "Draft.OCL_Typing" via "Draft.OCL_Object_Model" via "Draft.OCL_Syntax" via "Draft.OCL_Types" via "Draft.Tuple")
Loading theory "Draft.OCL_Basic_Types" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization" via "Draft.OCL_Typing" via "Draft.OCL_Object_Model" via "Draft.OCL_Syntax" via "Draft.OCL_Types")
Loading theory "Draft.Errorable" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization" via "Draft.OCL_Typing" via "Draft.OCL_Object_Model" via "Draft.OCL_Syntax" via "Draft.OCL_Types")
Loading theory "Draft.Templates" (required by "Draft.OCL_NormalizationTemplates" via "Draft.ExtrEqs")
instantiation
  errorable :: (type) bot
  bot_errorable == bot :: 'a\<^sub>\<bottom>
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.312s cpu time, 0.000s GC time
Loading theory "Draft.Finite_Map_Ext" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization" via "Draft.OCL_Typing" via "Draft.OCL_Object_Model" via "Draft.OCL_Syntax" via "Draft.Object_Model")
### theory "Draft.Transitive_Closure_Ext"
### 0.082s elapsed time, 0.363s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OCL_NormalizationTemplates")
### The transfer theorems can't be generated:
### No quotient theorem has been registered for errorable.
### Use setup_lifting to register a quotient or type definition theorem.
### theory "Draft.Errorable"
### 0.162s elapsed time, 0.654s cpu time, 0.041s GC time
### theory "Draft.Finite_Map_Ext"
### 0.195s elapsed time, 0.653s cpu time, 0.041s GC time
Loading theory "Draft.Tuple" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization" via "Draft.OCL_Typing" via "Draft.OCL_Object_Model" via "Draft.OCL_Syntax" via "Draft.OCL_Types")
Loading theory "Draft.Object_Model" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization" via "Draft.OCL_Typing" via "Draft.OCL_Object_Model" via "Draft.OCL_Syntax")
### theory "Draft.Tuple"
### 0.377s elapsed time, 1.461s cpu time, 0.176s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.620s elapsed time, 2.253s cpu time, 0.217s GC time
Proofs for inductive predicate(s) "owned_attribute'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "attribute_not_closest"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_attribute"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_attribute_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_closest_attribute"
  Proving monotonicity ...
Proofs for inductive predicate(s) "role_refer_class"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_ends'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_ends_not_unique'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "basic_subtype"
Proofs for inductive predicate(s) "owned_association_end'"
  Proving monotonicity ...
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_end_not_closest"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_association_end"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_association_end_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_closest_association_end"
  Proving monotonicity ...
instantiation
  basic_type :: (order) order
  less_eq_basic_type == less_eq :: 'a basic_type => 'a basic_type => bool
  less_basic_type == less :: 'a basic_type => 'a basic_type => bool
Proofs for inductive predicate(s) "referred_by_association_class''"
  Proving monotonicity ...
Proofs for inductive predicate(s) "referred_by_association_class'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_class_not_closest"
  Proving monotonicity ...
instantiation
  basic_type :: (semilattice_sup) semilattice_sup
  sup_basic_type == sup :: 'a basic_type => 'a basic_type => 'a basic_type
Proofs for inductive predicate(s) "closest_association_class"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_association_class_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_closest_association_class"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_class_end'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_class_end_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_association_class_end"
  Proving monotonicity ...
Found termination order: "{}"
Proofs for inductive predicate(s) "any_operation'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "operation'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "operation_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_operation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "operation_defined'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "static_operation'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "static_operation_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_static_operation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "static_operation_defined'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "has_literal'"
  Proving monotonicity ...
Found termination order: "{}"
locale object_model
  fixes classes :: "'a fset"
    and
    attributes ::
      "'a \<rightharpoonup>\<^sub>f 
       String.literal \<rightharpoonup>\<^sub>f 't"
    and
    associations ::
      "String.literal \<rightharpoonup>\<^sub>f 
       String.literal \<rightharpoonup>\<^sub>f 
       ('a * nat * enat * bool * bool)"
    and association_classes :: "'a \<rightharpoonup>\<^sub>f String.literal"
    and
    operations ::
      "(String.literal *
        't *
        (String.literal * 't * param_dir) list *
        't * bool * 'e option) list"
    and literals :: "'n \<rightharpoonup>\<^sub>f String.literal fset"
  assumes "object_model classes associations"
### theory "Draft.OCL_Basic_Types"
### 2.161s elapsed time, 5.815s cpu time, 0.879s GC time
Loading theory "Draft.OCL_Types" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization" via "Draft.OCL_Typing" via "Draft.OCL_Object_Model" via "Draft.OCL_Syntax")
instantiation
  OCL_Types.type :: (type) size
  size_type == size :: 'a OCL_Types.type => nat
consts
  size_type :: "'a OCL_Types.type => nat"
Proofs for inductive predicate(s) "subtype"
  Proving monotonicity ...
instantiation
  OCL_Types.type :: (order) order
  less_eq_type == less_eq :: 'a OCL_Types.type => 'a OCL_Types.type => bool
  less_type == less :: 'a OCL_Types.type => 'a OCL_Types.type => bool
instantiation
  OCL_Types.type :: (semilattice_sup) semilattice_sup
  sup_type == sup ::
    'a OCL_Types.type => 'a OCL_Types.type => 'a OCL_Types.type
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "element_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "update_element_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "to_unique_collection"
  Proving monotonicity ...
Proofs for inductive predicate(s) "to_nonunique_collection"
  Proving monotonicity ...
Proofs for inductive predicate(s) "to_ordered_collection"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OCL_Types"
### 3.411s elapsed time, 7.018s cpu time, 0.526s GC time
### theory "Draft.Object_Model"
### 9.918s elapsed time, 16.590s cpu time, 1.557s GC time
Loading theory "Draft.OCL_Syntax" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization" via "Draft.OCL_Typing" via "Draft.OCL_Object_Model")
instantiation
  unat :: infinity
  infinity_unat == infinity :: unat
### theory "Draft.OCL_Syntax"
### 17.439s elapsed time, 21.425s cpu time, 5.742s GC time
Loading theory "Draft.OCL_Object_Model" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization" via "Draft.OCL_Typing")
class ocl_object_model = semilattice_sup +
  fixes classes :: "'a fset"
    and
    attributes ::
      "'a \<rightharpoonup>\<^sub>f 
       String.literal \<rightharpoonup>\<^sub>f 'a OCL_Types.type"
    and
    associations ::
      "String.literal \<rightharpoonup>\<^sub>f 
       String.literal \<rightharpoonup>\<^sub>f 
       ('a * nat * enat * bool * bool)"
    and association_classes :: "'a \<rightharpoonup>\<^sub>f String.literal"
    and
    operations ::
      "(String.literal *
        'a OCL_Types.type *
        (String.literal * 'a OCL_Types.type * param_dir) list *
        'a OCL_Types.type * bool * 'a expr option) list"
    and
    literals ::
      "('a, String.literal) phantom \<rightharpoonup>\<^sub>f 
       String.literal fset"
  assumes
    "assoc_end_min_less_eq_max":
      "!!assoc ends role end.
          [| assoc |\<in>| fmdom associations;
             fmlookup associations assoc = Some ends;
             role |\<in>| fmdom ends; fmlookup ends role = Some end |]
          ==> enat (assoc_end_min end) <= assoc_end_max end"
  assumes
    "association_ends_unique":
      "!!\<C> from role end\<^sub>1 end\<^sub>2.
          [| association_ends' classes associations \<C> from role
              end\<^sub>1;
             association_ends' classes associations \<C> from role
              end\<^sub>2 |]
          ==> end\<^sub>1 = end\<^sub>2"
### theory "Draft.OCL_Object_Model"
### 0.176s elapsed time, 0.228s cpu time, 0.019s GC time
Loading theory "Draft.OCL_Typing" (required by "Draft.OCL_NormalizationTemplates" via "Draft.OCL_Normalization")
Proofs for inductive predicate(s) "mataop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "typeop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "super_binop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "any_unop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "boolean_unop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "boolean_binop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "numeric_unop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "numeric_binop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "string_unop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "string_binop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "string_ternop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "collection_unop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "collection_binop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "collection_ternop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "binop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ternop_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "op_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "typing", "collection_parts_typing", "collection_part_typing", "iterator_typing", "expr_list_typing"
  Proving monotonicity ...
### theory "Draft.OCL_Typing"
### 24.288s elapsed time, 26.546s cpu time, 3.771s GC time
Loading theory "Draft.OCL_Normalization" (required by "Draft.OCL_NormalizationTemplates")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "normalize", "normalize_call", "normalize_expr_list"
  Proving monotonicity ...
Proofs for inductive predicate(s) "nf_typing"
  Proving monotonicity ...
### theory "Draft.OCL_Normalization"
### 6.528s elapsed time, 8.242s cpu time, 2.480s GC time
Loading theory "Draft.OCL_NormalizationTemplates"
val templateLemmas =
   [("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile>\<^sub>L [] \<Rrightarrow> ?ys) = (?ys = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> Literal ?a \<Rrightarrow> ?b) =
      (?b = Literal ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_var 1)))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> Var ?v \<Rrightarrow> ?b) = (?b = Var ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_var 1)))),
    ("OCL_Normalization.nf_typing_i_i_oI",
     "?x \<turnstile> ?xa : ?xb ==> pred.eval (nf_typing_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("OCL_Normalization.normalize_i_i_oI",
     "?x \<turnstile> ?xa \<Rrightarrow> ?xb ==>
      pred.eval (normalize_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("OCL_Normalization.normalize_call_Pii_i_oI",
     "?x \<turnstile>\<^sub>C ?xa \<Rrightarrow> ?xb ==>
      pred.eval (normalize_call_Pii_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("OCL_Normalization.normalize_expr_list_i_i_oI",
     "?x \<turnstile>\<^sub>L ?xa \<Rrightarrow> ?xb ==>
      pred.eval (normalize_expr_list_i_i_o ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> MetaOperationCall ?\<tau> ?op \<Rrightarrow>
       ?b) =
      (?b = MetaOperationCall ?\<tau> ?op)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("OCL_Normalization.nf_typing_i_i_iI",
     "?x \<turnstile> ?xa : ?xb ==>
      pred.eval (nf_typing_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Normalization.normalize_i_i_iI",
     "?x \<turnstile> ?xa \<Rrightarrow> ?xb ==>
      pred.eval (normalize_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Normalization.normalize_call_Pii_i_iI",
     "?x \<turnstile>\<^sub>C ?xa \<Rrightarrow> ?xb ==>
      pred.eval (normalize_call_Pii_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Normalization.normalize_expr_list_i_i_iI",
     "?x \<turnstile>\<^sub>L ?xa \<Rrightarrow> ?xb ==>
      pred.eval (normalize_expr_list_i_i_i ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("OCL_Normalization.any_has_not_element_type'",
     "[| element_type ?\<tau> ?\<sigma>; OclVoid[?] <= ?\<tau> |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, template_hole 1),
          template_var 1)],
       template_predicate (template_hole 0))),
    ("OCL_Normalization.nf_typing_det",
     "[| ?\<Gamma> \<turnstile> ?expr : ?\<tau>;
         ?\<Gamma> \<turnstile> ?expr : ?\<sigma> |]
      ==> ?\<tau> = ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Normalization.normalize_det",
     "[| ?\<Gamma> \<turnstile> ?expr \<Rrightarrow> ?expr\<^sub>1;
         ?\<Gamma> \<turnstile> ?expr \<Rrightarrow> ?expr\<^sub>2 |]
      ==> ?expr\<^sub>1 = ?expr\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Normalization.normalize_call_det",
     "[| ?\<Gamma>_\<tau> \<turnstile>\<^sub>C ?call \<Rrightarrow>
         ?call\<^sub>1;
         ?\<Gamma>_\<tau> \<turnstile>\<^sub>C ?call \<Rrightarrow>
         ?call\<^sub>2 |]
      ==> ?call\<^sub>1 = ?call\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Normalization.normalize_expr_list_det",
     "[| ?\<Gamma> \<turnstile>\<^sub>L ?xs \<Rrightarrow> ?ys;
         ?\<Gamma> \<turnstile>\<^sub>L ?xs \<Rrightarrow> ?zs |]
      ==> ?ys = ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OCL_Normalization.any_has_not_element_type",
     "[| element_type ?\<tau> ?\<sigma>;
         ?\<tau> <= OclAny[?] | ?\<tau> <= Tuple fmempty |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app (template_hole 4, template_hole 3))),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app (template_hole 2, template_hole 1)))
            )],
       template_predicate (template_hole 0))),
    ("OCL_Normalization.LiteralNE",
     "[| ?\<Gamma> \<turnstile> Literal ?a \<Rrightarrow> ?b;
         ?b = Literal ?a ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.VarNE",
     "[| ?\<Gamma> \<turnstile> Var ?v \<Rrightarrow> ?b;
         ?b = Var ?v ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_expr_list_i_i_oE",
     "[| pred.eval (normalize_expr_list_i_i_o ?x ?xa) ?xb;
         ?x \<turnstile>\<^sub>L ?xa \<Rrightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.nf_typing_i_i_oE",
     "[| pred.eval (nf_typing_i_i_o ?x ?xa) ?xb;
         ?x \<turnstile> ?xa : ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_i_i_oE",
     "[| pred.eval (normalize_i_i_o ?x ?xa) ?xb;
         ?x \<turnstile> ?xa \<Rrightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_call_Pii_i_oE",
     "[| pred.eval (normalize_call_Pii_i_o ?x ?xa) ?xb;
         ?x \<turnstile>\<^sub>C ?xa \<Rrightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.nf_typing_i_i_iE",
     "[| pred.eval (nf_typing_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile> ?xa : ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_call_Pii_i_iE",
     "[| pred.eval (normalize_call_Pii_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile>\<^sub>C ?xa \<Rrightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_expr_list_i_i_iE",
     "[| pred.eval (normalize_expr_list_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile>\<^sub>L ?xa \<Rrightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_i_i_iE",
     "[| pred.eval (normalize_i_i_i ?x ?xa ?xb) ?y;
         ?x \<turnstile> ?xa \<Rrightarrow> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.MetaOperationCallNE",
     "[| ?\<Gamma> \<turnstile> MetaOperationCall ?\<tau> ?op \<Rrightarrow>
         ?b;
         ?b = MetaOperationCall ?\<tau> ?op ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> StaticOperationCall ?\<tau> ?op
                               ?as \<Rrightarrow>
       ?b) =
      (EX params\<^sub>2.
          ?b = StaticOperationCall ?\<tau> ?op params\<^sub>2 &
          ?\<Gamma> \<turnstile>\<^sub>L ?as \<Rrightarrow>
          params\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("OCL_Normalization.normalize_alt_simps",
     "((?\<Gamma>,
        ?\<tau>) \<turnstile>\<^sub>C Operation ?op ?as \<Rrightarrow>
       ?call) =
      (EX params\<^sub>2.
          ?call = Operation ?op params\<^sub>2 &
          ?\<Gamma> \<turnstile>\<^sub>L ?as \<Rrightarrow>
          params\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile>\<^sub>L ?x # ?xs \<Rrightarrow> ?ys) =
      (EX y ys.
          ?ys = y # ys &
          ?\<Gamma> \<turnstile> ?x \<Rrightarrow> y &
          ?\<Gamma> \<turnstile>\<^sub>L ?xs \<Rrightarrow> ys)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("OCL_Normalization.StaticOperationCallNE",
     "[| ?\<Gamma> \<turnstile> StaticOperationCall ?\<tau> ?op
                                 ?as \<Rrightarrow>
         ?b;
         !!params\<^sub>2.
            [| ?b = StaticOperationCall ?\<tau> ?op params\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>L ?as \<Rrightarrow>
               params\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.OperationCallNE",
     "[| (?\<Gamma>,
          ?\<tau>) \<turnstile>\<^sub>C Operation ?op ?as \<Rrightarrow>
         ?call;
         !!params\<^sub>2.
            [| ?call = Operation ?op params\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>L ?as \<Rrightarrow>
               params\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4)),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> expr.If ?a ?b ?c \<Rrightarrow> ?d) =
      (EX a\<^sub>2 b\<^sub>2 c\<^sub>2.
          ?d = expr.If a\<^sub>2 b\<^sub>2 c\<^sub>2 &
          ?\<Gamma> \<turnstile> ?a \<Rrightarrow> a\<^sub>2 &
          ?\<Gamma> \<turnstile> ?b \<Rrightarrow> b\<^sub>2 &
          ?\<Gamma> \<turnstile> ?c \<Rrightarrow> c\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("OCL_Normalization.IfNE",
     "[| ?\<Gamma> \<turnstile> expr.If ?a ?b ?c \<Rrightarrow> ?d;
         !!a\<^sub>2 b\<^sub>2 c\<^sub>2.
            [| ?d = expr.If a\<^sub>2 b\<^sub>2 c\<^sub>2;
               ?\<Gamma> \<turnstile> ?a \<Rrightarrow> a\<^sub>2;
               ?\<Gamma> \<turnstile> ?b \<Rrightarrow> b\<^sub>2;
               ?\<Gamma> \<turnstile> ?c \<Rrightarrow> c\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.ExprListNE",
     "[| ?\<Gamma> \<turnstile>\<^sub>L ?xs \<Rrightarrow> ?ys;
         [| ?xs = []; ?ys = [] |] ==> ?P;
         !!x y xs ys.
            [| ?xs = x # xs; ?ys = y # ys;
               ?\<Gamma> \<turnstile> x \<Rrightarrow> y;
               ?\<Gamma> \<turnstile>\<^sub>L xs \<Rrightarrow> ys |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 4)],
          template_implication
           ([template_equation (template_var 1, template_hole 4)],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> Call ?src SafeArrowCall ?call \<Rrightarrow>
       ?b) =
      (EX src\<^sub>2 \<tau> \<sigma> \<rho> call\<^sub>2.
          ?b =
          Call
           (TypeOperationCall src\<^sub>2 ArrowCall SelectByKindOp
             (to_required_type \<sigma>))
           ArrowCall call\<^sub>2 &
          ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2 &
          ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau> &
          element_type \<tau> \<sigma> &
          OclVoid[?] <= \<sigma> &
          ?\<Gamma> \<turnstile>\<^sub>E
           TypeOperationCall src\<^sub>2 ArrowCall SelectByKindOp
            (to_required_type \<sigma>) :
           \<rho> &
          (?\<Gamma>, \<rho>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
          call\<^sub>2)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 18, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 17, template_var 2),
               template_hole 16),
             template_var 1)),
         template_var 0),
       template_app (template_hole 15, t_empty))),
    ("OCL_Normalization.normalize_alt_simps",
     "((?\<Gamma>,
        ?\<tau>) \<turnstile>\<^sub>C Iterator ?iter ?its ?its_ty
 ?body \<Rrightarrow>
       ?call) =
      ((EX \<sigma>.
           ?its_ty = Some \<sigma> &
           (EX body\<^sub>2.
               ?call = Iterator ?iter ?its (Some \<sigma>) body\<^sub>2 &
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  ?its) \<turnstile> ?body \<Rrightarrow>
               body\<^sub>2)) |
       ?its_ty = None &
       (EX \<sigma> body\<^sub>2.
           ?call = Iterator ?iter ?its (Some \<sigma>) body\<^sub>2 &
           element_type ?\<tau> \<sigma> &
           ?\<Gamma> ++\<^sub>f
           fmap_of_list
            (map (%it. (it, \<sigma>))
              ?its) \<turnstile> ?body \<Rrightarrow>
           body\<^sub>2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_app (template_hole 15, template_var 6),
                    template_var 5)),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13, template_app (template_hole 12, t_empty)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_hole 1)),
               template_app (template_hole 12, t_empty)))
           ))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> expr.Let ?v ?t ?init ?body \<Rrightarrow>
       ?b) =
      ((EX init\<^sub>2 \<tau>.
           ?t = Some \<tau> &
           (EX body\<^sub>2.
               ?b = expr.Let ?v (Some \<tau>) init\<^sub>2 body\<^sub>2 &
               ?\<Gamma> \<turnstile> ?init \<Rrightarrow> init\<^sub>2 &
               ?\<Gamma>(?v |->f \<tau>) \<turnstile> ?body \<Rrightarrow>
               body\<^sub>2)) |
       ?t = None &
       (EX init\<^sub>2 \<tau> body\<^sub>2.
           ?b = expr.Let ?v (Some \<tau>) init\<^sub>2 body\<^sub>2 &
           ?\<Gamma> \<turnstile> ?init \<Rrightarrow> init\<^sub>2 &
           ?\<Gamma> \<turnstile>\<^sub>E init\<^sub>2 : \<tau> & ?\<Gamma>
           (?v |->f \<tau>) \<turnstile> ?body \<Rrightarrow>
           body\<^sub>2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_hole 1)),
               template_app (template_hole 8, t_empty)))
           ))),
    ("OCL_Normalization.SafeArrowCallNE",
     "[| ?\<Gamma> \<turnstile> Call ?src SafeArrowCall ?call \<Rrightarrow>
         ?b;
         !!src\<^sub>2 \<tau> \<sigma> \<rho> call\<^sub>2.
            [| ?b =
               Call
                (TypeOperationCall src\<^sub>2 ArrowCall SelectByKindOp
                  (to_required_type \<sigma>))
                ArrowCall call\<^sub>2;
               ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau>;
               element_type \<tau> \<sigma>; OclVoid[?] <= \<sigma>;
               ?\<Gamma> \<turnstile>\<^sub>E
                TypeOperationCall src\<^sub>2 ArrowCall SelectByKindOp
                 (to_required_type \<sigma>) :
                \<rho>;
               (?\<Gamma>, \<rho>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
               call\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 3),
                    template_hole 15),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.IteratorCallNE",
     "[| (?\<Gamma>,
          ?\<tau>) \<turnstile>\<^sub>C Iterator ?iter ?its ?its_ty
   ?body \<Rrightarrow>
         ?call;
         !!\<sigma> body\<^sub>2.
            [| ?its_ty = Some \<sigma>;
               ?call = Iterator ?iter ?its (Some \<sigma>) body\<^sub>2;
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  ?its) \<turnstile> ?body \<Rrightarrow>
               body\<^sub>2 |]
            ==> ?P;
         !!\<sigma> body\<^sub>2.
            [| ?its_ty = None;
               ?call = Iterator ?iter ?its (Some \<sigma>) body\<^sub>2;
               element_type ?\<tau> \<sigma>;
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  ?its) \<turnstile> ?body \<Rrightarrow>
               body\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 7),
                    template_var 6)),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> Call ?src DotCall ?call \<Rrightarrow> ?b) =
      ((EX src\<^sub>2 \<tau> call\<^sub>2.
           ?b = Call src\<^sub>2 DotCall call\<^sub>2 &
           ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2 &
           ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau> &
           (\<tau> <= OclAny[?] | \<tau> <= Tuple fmempty) &
           (?\<Gamma>, \<tau>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
           call\<^sub>2) |
       (EX src\<^sub>2 \<tau> \<sigma> call\<^sub>2.
           ?b =
           CollectIteratorCall src\<^sub>2 ArrowCall [new_vname ?\<Gamma>]
            (Some \<sigma>)
            (Call (Var (new_vname ?\<Gamma>)) DotCall call\<^sub>2) &
           ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2 &
           ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau> &
           element_type \<tau> \<sigma> &
           (?\<Gamma>, \<sigma>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
           call\<^sub>2))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 25, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 24, template_var 2),
               template_hole 23),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 22, template_app (template_hole 21, t_empty)),
         template_app (template_hole 21, t_empty)))),
    ("OCL_Normalization.LetNE",
     "[| ?\<Gamma> \<turnstile> expr.Let ?v ?t ?init ?body \<Rrightarrow>
         ?b;
         !!init\<^sub>2 \<tau> body\<^sub>2.
            [| ?t = Some \<tau>;
               ?b = expr.Let ?v (Some \<tau>) init\<^sub>2 body\<^sub>2;
               ?\<Gamma> \<turnstile> ?init \<Rrightarrow> init\<^sub>2;
               ?\<Gamma>(?v |->f \<tau>) \<turnstile> ?body \<Rrightarrow>
               body\<^sub>2 |]
            ==> ?P;
         !!init\<^sub>2 \<tau> body\<^sub>2.
            [| ?t = None;
               ?b = expr.Let ?v (Some \<tau>) init\<^sub>2 body\<^sub>2;
               ?\<Gamma> \<turnstile> ?init \<Rrightarrow> init\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>E init\<^sub>2 : \<tau>;
               ?\<Gamma>(?v |->f \<tau>) \<turnstile> ?body \<Rrightarrow>
               body\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> Call ?src ArrowCall ?call \<Rrightarrow> ?b) =
      ((EX src\<^sub>2 \<tau> \<sigma> call\<^sub>2.
           ?b =
           Call
            (OperationCall src\<^sub>2 DotCall (Inl (Inl OclAsSetOp)) [])
            ArrowCall call\<^sub>2 &
           ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2 &
           ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau> &
           (\<tau> <= OclAny[?] | \<tau> <= Tuple fmempty) &
           ?\<Gamma> \<turnstile>\<^sub>E
            OperationCall src\<^sub>2 DotCall (Inl (Inl OclAsSetOp)) [] :
            \<sigma> &
           (?\<Gamma>, \<sigma>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
           call\<^sub>2) |
       (EX src\<^sub>2 \<tau> uu_ call\<^sub>2.
           ?b = Call src\<^sub>2 ArrowCall call\<^sub>2 &
           ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2 &
           ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau> &
           element_type \<tau> uu_ &
           (?\<Gamma>, \<tau>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
           call\<^sub>2))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 23, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 22, template_var 2),
               template_hole 21),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 20, template_app (template_hole 19, t_empty)),
         template_app (template_hole 19, t_empty)))),
    ("OCL_Normalization.normalize_alt_simps",
     "((?\<Gamma>,
        ?\<tau>) \<turnstile>\<^sub>C Iterate ?its ?its_ty ?res ?res_t
 ?res_init ?body \<Rrightarrow>
       ?call) =
      ((EX res_init\<^sub>2 \<sigma>.
           ?its_ty = Some \<sigma> &
           (EX res_t\<^sub>2 body\<^sub>2.
               ?call =
               Iterate ?its (Some \<sigma>) ?res res_t\<^sub>2
                res_init\<^sub>2 body\<^sub>2 &
               ?\<Gamma> \<turnstile> ?res_init \<Rrightarrow>
               res_init\<^sub>2 &
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  ?its) \<turnstile> expr.Let ?res ?res_t ?res_init
?body \<Rrightarrow>
               expr.Let ?res res_t\<^sub>2 res_init\<^sub>2 body\<^sub>2)) |
       ?its_ty = None &
       (EX \<sigma> res_init\<^sub>2 res_t\<^sub>2 body\<^sub>2.
           ?call =
           Iterate ?its (Some \<sigma>) ?res res_t\<^sub>2 res_init\<^sub>2
            body\<^sub>2 &
           element_type ?\<tau> \<sigma> &
           ?\<Gamma> \<turnstile> ?res_init \<Rrightarrow>
           res_init\<^sub>2 &
           ?\<Gamma> ++\<^sub>f
           fmap_of_list
            (map (%it. (it, \<sigma>))
              ?its) \<turnstile> expr.Let ?res ?res_t ?res_init
                                  ?body \<Rrightarrow>
           expr.Let ?res res_t\<^sub>2 res_init\<^sub>2 body\<^sub>2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_app (template_hole 17, template_var 8),
                    template_var 7)),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 6),
                          template_var 5),
                        template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15, template_app (template_hole 14, t_empty)),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 5),
                   template_hole 1)),
               template_app (template_hole 13, t_empty)))
           ))),
    ("OCL_Normalization.DotCallNE",
     "[| ?\<Gamma> \<turnstile> Call ?src DotCall ?call \<Rrightarrow> ?b;
         !!src\<^sub>2 \<tau> call\<^sub>2.
            [| ?b = Call src\<^sub>2 DotCall call\<^sub>2;
               ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau>;
               \<tau> <= OclAny[?] | \<tau> <= Tuple fmempty;
               (?\<Gamma>, \<tau>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
               call\<^sub>2 |]
            ==> ?P;
         !!src\<^sub>2 \<tau> \<sigma> call\<^sub>2.
            [| ?b =
               CollectIteratorCall src\<^sub>2 ArrowCall
                [new_vname ?\<Gamma>] (Some \<sigma>)
                (Call (Var (new_vname ?\<Gamma>)) DotCall call\<^sub>2);
               ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau>;
               element_type \<tau> \<sigma>;
               (?\<Gamma>,
                \<sigma>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
               call\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 24, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 23, template_var 3),
                    template_hole 22),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.ArrowCallNE",
     "[| ?\<Gamma> \<turnstile> Call ?src ArrowCall ?call \<Rrightarrow> ?b;
         !!src\<^sub>2 \<tau> \<sigma> call\<^sub>2.
            [| ?b =
               Call
                (OperationCall src\<^sub>2 DotCall (Inl (Inl OclAsSetOp))
                  [])
                ArrowCall call\<^sub>2;
               ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau>;
               \<tau> <= OclAny[?] | \<tau> <= Tuple fmempty;
               ?\<Gamma> \<turnstile>\<^sub>E
                OperationCall src\<^sub>2 DotCall (Inl (Inl OclAsSetOp))
                 [] :
                \<sigma>;
               (?\<Gamma>,
                \<sigma>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
               call\<^sub>2 |]
            ==> ?P;
         !!src\<^sub>2 \<tau> uu_ call\<^sub>2.
            [| ?b = Call src\<^sub>2 ArrowCall call\<^sub>2;
               ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau>;
               element_type \<tau> uu_;
               (?\<Gamma>, \<tau>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
               call\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 21, template_var 3),
                    template_hole 20),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_alt_simps",
     "(?\<Gamma> \<turnstile> Call ?src SafeDotCall ?call \<Rrightarrow>
       ?b) =
      ((EX src\<^sub>2 \<tau> call\<^sub>2.
           ?b =
           expr.If
            (OperationCall src\<^sub>2 DotCall (Inr (Inl (Inl NotEqualOp)))
              [Literal NullLiteral])
            (Call
              (TypeOperationCall src\<^sub>2 DotCall OclAsTypeOp
                (to_required_type \<tau>))
              DotCall call\<^sub>2)
            (Literal NullLiteral) &
           ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2 &
           ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau> &
           OclVoid[?] <= \<tau> &
           (?\<Gamma>,
            to_required_type
             \<tau>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
           call\<^sub>2) |
       (EX src\<^sub>2 \<tau> \<sigma> call\<^sub>2.
           ?b =
           CollectIteratorCall
            (TypeOperationCall src\<^sub>2 ArrowCall SelectByKindOp
              (to_required_type \<sigma>))
            ArrowCall [new_vname ?\<Gamma>]
            (Some (to_required_type \<sigma>))
            (Call (Var (new_vname ?\<Gamma>)) DotCall call\<^sub>2) &
           ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2 &
           ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau> &
           element_type \<tau> \<sigma> &
           OclVoid[?] <= \<sigma> &
           (?\<Gamma>,
            to_required_type
             \<sigma>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
           call\<^sub>2))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 38, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 37, template_var 2),
               template_hole 36),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 35, template_app (template_hole 34, t_empty)),
         template_app (template_hole 34, t_empty)))),
    ("OCL_Normalization.IterateCallNE",
     "[| (?\<Gamma>,
          ?\<tau>) \<turnstile>\<^sub>C Iterate ?its ?its_ty ?res ?res_t
   ?res_init ?body \<Rrightarrow>
         ?call;
         !!res_init\<^sub>2 \<sigma> res_t\<^sub>2 body\<^sub>2.
            [| ?its_ty = Some \<sigma>;
               ?call =
               Iterate ?its (Some \<sigma>) ?res res_t\<^sub>2
                res_init\<^sub>2 body\<^sub>2;
               ?\<Gamma> \<turnstile> ?res_init \<Rrightarrow>
               res_init\<^sub>2;
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  ?its) \<turnstile> expr.Let ?res ?res_t ?res_init
?body \<Rrightarrow>
               expr.Let ?res res_t\<^sub>2 res_init\<^sub>2 body\<^sub>2 |]
            ==> ?P;
         !!\<sigma> res_init\<^sub>2 res_t\<^sub>2 body\<^sub>2.
            [| ?its_ty = None;
               ?call =
               Iterate ?its (Some \<sigma>) ?res res_t\<^sub>2
                res_init\<^sub>2 body\<^sub>2;
               element_type ?\<tau> \<sigma>;
               ?\<Gamma> \<turnstile> ?res_init \<Rrightarrow>
               res_init\<^sub>2;
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  ?its) \<turnstile> expr.Let ?res ?res_t ?res_init
?body \<Rrightarrow>
               expr.Let ?res res_t\<^sub>2 res_init\<^sub>2 body\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_app (template_hole 15, template_var 9),
                    template_var 8)),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 14, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.SafeDotCallNE",
     "[| ?\<Gamma> \<turnstile> Call ?src SafeDotCall ?call \<Rrightarrow>
         ?b;
         !!src\<^sub>2 \<tau> call\<^sub>2.
            [| ?b =
               expr.If
                (OperationCall src\<^sub>2 DotCall
                  (Inr (Inl (Inl NotEqualOp))) [Literal NullLiteral])
                (Call
                  (TypeOperationCall src\<^sub>2 DotCall OclAsTypeOp
                    (to_required_type \<tau>))
                  DotCall call\<^sub>2)
                (Literal NullLiteral);
               ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau>;
               OclVoid[?] <= \<tau>;
               (?\<Gamma>,
                to_required_type
                 \<tau>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
               call\<^sub>2 |]
            ==> ?P;
         !!src\<^sub>2 \<tau> \<sigma> call\<^sub>2.
            [| ?b =
               CollectIteratorCall
                (TypeOperationCall src\<^sub>2 ArrowCall SelectByKindOp
                  (to_required_type \<sigma>))
                ArrowCall [new_vname ?\<Gamma>]
                (Some (to_required_type \<sigma>))
                (Call (Var (new_vname ?\<Gamma>)) DotCall call\<^sub>2);
               ?\<Gamma> \<turnstile> ?src \<Rrightarrow> src\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>E src\<^sub>2 : \<tau>;
               element_type \<tau> \<sigma>; OclVoid[?] <= \<sigma>;
               (?\<Gamma>,
                to_required_type
                 \<sigma>) \<turnstile>\<^sub>C ?call \<Rrightarrow>
               call\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 36, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 35, template_var 3),
                    template_hole 34),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty))],
       template_predicate (template_var 0))),
    ("OCL_Normalization.normalize_alt_simps",
     "((?\<Gamma>, ?\<tau>) \<turnstile>\<^sub>C ?call \<Rrightarrow> ?b) =
      ((EX op ty. ?call = TypeOperation op ty & ?b = TypeOperation op ty) |
       (EX attr. ?call = Attribute attr & ?b = Attribute attr) |
       (EX role from.
           ?call = AssociationEnd role from &
           ?b = AssociationEnd role from) |
       (EX \<A> from.
           ?call = AssociationClass \<A> from &
           ?b = AssociationClass \<A> from) |
       (EX role.
           ?call = AssociationClassEnd role &
           ?b = AssociationClassEnd role) |
       (EX params\<^sub>1 params\<^sub>2 op.
           ?call = Operation op params\<^sub>1 &
           ?b = Operation op params\<^sub>2 &
           ?\<Gamma> \<turnstile>\<^sub>L params\<^sub>1 \<Rrightarrow>
           params\<^sub>2) |
       (EX elem. ?call = TupleElement elem & ?b = TupleElement elem) |
       (EX res_init\<^sub>1 res_init\<^sub>2 \<sigma> its res res_t\<^sub>1
           body\<^sub>1.
           ?call =
           Iterate its (Some \<sigma>) res res_t\<^sub>1 res_init\<^sub>1
            body\<^sub>1 &
           (EX res_t\<^sub>2 body\<^sub>2.
               ?b =
               Iterate its (Some \<sigma>) res res_t\<^sub>2
                res_init\<^sub>2 body\<^sub>2 &
               ?\<Gamma> \<turnstile> res_init\<^sub>1 \<Rrightarrow>
               res_init\<^sub>2 &
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  its) \<turnstile> expr.Let res res_t\<^sub>1
                                     res_init\<^sub>1
                                     body\<^sub>1 \<Rrightarrow>
               expr.Let res res_t\<^sub>2 res_init\<^sub>2 body\<^sub>2)) |
       (EX \<sigma> res_init\<^sub>1 res_init\<^sub>2 its res res_t\<^sub>1
           body\<^sub>1.
           ?call =
           Iterate its None res res_t\<^sub>1 res_init\<^sub>1
            body\<^sub>1 &
           (EX res_t\<^sub>2 body\<^sub>2.
               ?b =
               Iterate its (Some \<sigma>) res res_t\<^sub>2
                res_init\<^sub>2 body\<^sub>2 &
               element_type ?\<tau> \<sigma> &
               ?\<Gamma> \<turnstile> res_init\<^sub>1 \<Rrightarrow>
               res_init\<^sub>2 &
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  its) \<turnstile> expr.Let res res_t\<^sub>1
                                     res_init\<^sub>1
                                     body\<^sub>1 \<Rrightarrow>
               expr.Let res res_t\<^sub>2 res_init\<^sub>2 body\<^sub>2)) |
       (EX \<sigma> its body\<^sub>1 body\<^sub>2 iter.
           ?call = Iterator iter its (Some \<sigma>) body\<^sub>1 &
           ?b = Iterator iter its (Some \<sigma>) body\<^sub>2 &
           ?\<Gamma> ++\<^sub>f
           fmap_of_list
            (map (%it. (it, \<sigma>))
              its) \<turnstile> body\<^sub>1 \<Rrightarrow>
           body\<^sub>2) |
       (EX \<sigma> its body\<^sub>1 body\<^sub>2 iter.
           ?call = Iterator iter its None body\<^sub>1 &
           ?b = Iterator iter its (Some \<sigma>) body\<^sub>2 &
           element_type ?\<tau> \<sigma> &
           ?\<Gamma> ++\<^sub>f
           fmap_of_list
            (map (%it. (it, \<sigma>))
              its) \<turnstile> body\<^sub>1 \<Rrightarrow>
           body\<^sub>2))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 34,
             template_app
              (template_app (template_hole 33, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 32, template_app (template_hole 31, t_empty)),
         template_app
          (template_app
            (template_hole 32, template_app (template_hole 26, t_empty)),
           template_app
            (template_app
              (template_hole 32, template_app (template_hole 24, t_empty)),
             template_app
              (template_app
                (template_hole 32,
                 template_app (template_hole 24, t_empty)),
               template_app
                (template_app
                  (template_hole 32,
                   template_app (template_hole 26, t_empty)),
                 template_app
                  (template_app
                    (template_hole 32,
                     template_app (template_hole 19, t_empty)),
                   template_app
                    (template_app
                      (template_hole 32,
                       template_app (template_hole 26, t_empty)),
                     template_app
                      (template_app
                        (template_hole 32,
                         template_app (template_hole 14, t_empty)),
                       template_app
                        (template_app
                          (template_hole 32,
                           template_app (template_hole 30, t_empty)),
                         template_app
                          (template_app
                            (template_hole 32,
                             template_app (template_hole 30, t_empty)),
                           template_app
                            (template_hole 30, t_empty))))))))))))),
    ("OCL_Normalization.CallNE",
     "[| (?\<Gamma>, ?\<tau>) \<turnstile>\<^sub>C ?call \<Rrightarrow> ?b;
         !!op ty.
            [| ?call = TypeOperation op ty; ?b = TypeOperation op ty |]
            ==> ?P;
         !!attr. [| ?call = Attribute attr; ?b = Attribute attr |] ==> ?P;
         !!role from.
            [| ?call = AssociationEnd role from;
               ?b = AssociationEnd role from |]
            ==> ?P;
         !!\<A> from.
            [| ?call = AssociationClass \<A> from;
               ?b = AssociationClass \<A> from |]
            ==> ?P;
         !!role.
            [| ?call = AssociationClassEnd role;
               ?b = AssociationClassEnd role |]
            ==> ?P;
         !!params\<^sub>1 params\<^sub>2 op.
            [| ?call = Operation op params\<^sub>1;
               ?b = Operation op params\<^sub>2;
               ?\<Gamma> \<turnstile>\<^sub>L params\<^sub>1 \<Rrightarrow>
               params\<^sub>2 |]
            ==> ?P;
         !!elem.
            [| ?call = TupleElement elem; ?b = TupleElement elem |] ==> ?P;
         !!res_init\<^sub>1 res_init\<^sub>2 \<sigma> its res res_t\<^sub>1
            body\<^sub>1 res_t\<^sub>2 body\<^sub>2.
            [| ?call =
               Iterate its (Some \<sigma>) res res_t\<^sub>1
                res_init\<^sub>1 body\<^sub>1;
               ?b =
               Iterate its (Some \<sigma>) res res_t\<^sub>2
                res_init\<^sub>2 body\<^sub>2;
               ?\<Gamma> \<turnstile> res_init\<^sub>1 \<Rrightarrow>
               res_init\<^sub>2;
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  its) \<turnstile> expr.Let res res_t\<^sub>1
                                     res_init\<^sub>1
                                     body\<^sub>1 \<Rrightarrow>
               expr.Let res res_t\<^sub>2 res_init\<^sub>2 body\<^sub>2 |]
            ==> ?P;
         !!\<sigma> res_init\<^sub>1 res_init\<^sub>2 its res res_t\<^sub>1
            body\<^sub>1 res_t\<^sub>2 body\<^sub>2.
            [| ?call =
               Iterate its None res res_t\<^sub>1 res_init\<^sub>1
                body\<^sub>1;
               ?b =
               Iterate its (Some \<sigma>) res res_t\<^sub>2
                res_init\<^sub>2 body\<^sub>2;
               element_type ?\<tau> \<sigma>;
               ?\<Gamma> \<turnstile> res_init\<^sub>1 \<Rrightarrow>
               res_init\<^sub>2;
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  its) \<turnstile> expr.Let res res_t\<^sub>1
                                     res_init\<^sub>1
                                     body\<^sub>1 \<Rrightarrow>
               expr.Let res res_t\<^sub>2 res_init\<^sub>2 body\<^sub>2 |]
            ==> ?P;
         !!\<sigma> its body\<^sub>1 body\<^sub>2 iter.
            [| ?call = Iterator iter its (Some \<sigma>) body\<^sub>1;
               ?b = Iterator iter its (Some \<sigma>) body\<^sub>2;
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  its) \<turnstile> body\<^sub>1 \<Rrightarrow>
               body\<^sub>2 |]
            ==> ?P;
         !!\<sigma> its body\<^sub>1 body\<^sub>2 iter.
            [| ?call = Iterator iter its None body\<^sub>1;
               ?b = Iterator iter its (Some \<sigma>) body\<^sub>2;
               element_type ?\<tau> \<sigma>;
               ?\<Gamma> ++\<^sub>f
               fmap_of_list
                (map (%it. (it, \<sigma>))
                  its) \<turnstile> body\<^sub>1 \<Rrightarrow>
               body\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app
                   (template_app (template_hole 31, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 30, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate (template_app (template_hole 29, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.OCL_NormalizationTemplates"
### 9.157s elapsed time, 24.797s cpu time, 23.755s GC time
val it = (): unit
