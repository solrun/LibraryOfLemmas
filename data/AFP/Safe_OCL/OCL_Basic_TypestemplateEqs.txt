   [("OCL_Basic_Types.basic_type_less_left_simps",
     "(OclAny < ?\<sigma>) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < OclVoid) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(Boolean < ?\<sigma>) = (?\<sigma> = OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(Real < ?\<sigma>) = (?\<sigma> = OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(String < ?\<sigma>) = (?\<sigma> = OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < Boolean) = (?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < String) = (?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < UnlimitedNatural) = (?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.sup_commut_basic_type",
     "?\<tau> \<squnion> ?\<sigma> = ?\<sigma> \<squnion> ?\<tau>",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(OclVoid < ?\<sigma>) = (?\<sigma> ~= OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 2)))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < OclAny) = (?\<tau> ~= OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 2)))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < Enum ?\<E>) = (?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(Enum ?\<E> < ?\<sigma>) = (?\<sigma> = OclAny)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(Integer < ?\<sigma>) = (?\<sigma> = OclAny | ?\<sigma> = Real)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_dunno)),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < Integer) =
      (?\<tau> = UnlimitedNatural | ?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_dunno)),
    ("OCL_Basic_Types.less_le_not_le_basic_type",
     "(?\<tau> < ?\<sigma>) =
      (?\<tau> <= ?\<sigma> & ~ ?\<sigma> <= ?\<tau>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(UnlimitedNatural < ?\<sigma>) =
      (?\<sigma> = OclAny | ?\<sigma> = Real | ?\<sigma> = Integer)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_dunno)),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < Real) =
      (?\<tau> = Integer | ?\<tau> = UnlimitedNatural | ?\<tau> = OclVoid)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_dunno)),
    ("OCL_Basic_Types.tranclp_less_basic_type",
     "((?\<tau>, ?\<sigma>)
       : {(\<tau>, \<sigma>). \<tau> \<sqsubset>\<^sub>B \<sigma>}^+) =
      (?\<tau> < ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("OCL_Basic_Types.basic_type_less_right_simps",
     "(?\<tau> < \<langle>?\<D>\<rangle>\<^sub>\<T>) =
      (EX \<C>.
          ?\<tau> = \<langle>\<C>\<rangle>\<^sub>\<T> & \<C> < ?\<D> |
          ?\<tau> = OclVoid)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("OCL_Basic_Types.basic_type_less_left_simps",
     "(\<langle>?\<C>\<rangle>\<^sub>\<T> < ?\<sigma>) =
      (EX \<D>.
          ?\<sigma> = OclAny |
          ?\<sigma> = \<langle>\<D>\<rangle>\<^sub>\<T> & ?\<C> < \<D>)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app (template_hole 5, t_empty)))]
