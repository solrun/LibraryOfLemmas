Loading theory "Draft.Errorable" (required by "Draft.OCL_SyntaxTemplates" via "Draft.OCL_Syntax" via "Draft.OCL_Types")
Loading theory "Draft.OCL_Basic_Types" (required by "Draft.OCL_SyntaxTemplates" via "Draft.OCL_Syntax" via "Draft.OCL_Types")
Loading theory "Draft.Transitive_Closure_Ext" (required by "Draft.OCL_SyntaxTemplates" via "Draft.OCL_Syntax" via "Draft.OCL_Types" via "Draft.Tuple")
Loading theory "Draft.Templates" (required by "Draft.OCL_SyntaxTemplates" via "Draft.ExtrEqs")
instantiation
  errorable :: (type) bot
  bot_errorable == bot :: 'a\<^sub>\<bottom>
### theory "Draft.Transitive_Closure_Ext"
### 0.072s elapsed time, 0.313s cpu time, 0.000s GC time
Loading theory "Draft.Finite_Map_Ext" (required by "Draft.OCL_SyntaxTemplates" via "Draft.OCL_Syntax" via "Draft.Object_Model")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.361s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OCL_SyntaxTemplates")
### The transfer theorems can't be generated:
### No quotient theorem has been registered for errorable.
### Use setup_lifting to register a quotient or type definition theorem.
### theory "Draft.Errorable"
### 0.171s elapsed time, 0.682s cpu time, 0.036s GC time
### theory "Draft.Finite_Map_Ext"
### 0.194s elapsed time, 0.655s cpu time, 0.036s GC time
Loading theory "Draft.Tuple" (required by "Draft.OCL_SyntaxTemplates" via "Draft.OCL_Syntax" via "Draft.OCL_Types")
Loading theory "Draft.Object_Model" (required by "Draft.OCL_SyntaxTemplates" via "Draft.OCL_Syntax")
### theory "Draft.Tuple"
### 0.354s elapsed time, 1.371s cpu time, 0.168s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.596s elapsed time, 2.165s cpu time, 0.204s GC time
Proofs for inductive predicate(s) "owned_attribute'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "attribute_not_closest"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_attribute"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_attribute_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_closest_attribute"
  Proving monotonicity ...
Proofs for inductive predicate(s) "role_refer_class"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_ends'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_ends_not_unique'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "basic_subtype"
  Proving monotonicity ...
Proofs for inductive predicate(s) "owned_association_end'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_end_not_closest"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_association_end"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_association_end_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_closest_association_end"
instantiation
  basic_type :: (order) order
  less_eq_basic_type == less_eq :: 'a basic_type => 'a basic_type => bool
  less_basic_type == less :: 'a basic_type => 'a basic_type => bool
  Proving monotonicity ...
Proofs for inductive predicate(s) "referred_by_association_class''"
  Proving monotonicity ...
Proofs for inductive predicate(s) "referred_by_association_class'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_class_not_closest"
  Proving monotonicity ...
instantiation
  basic_type :: (semilattice_sup) semilattice_sup
  sup_basic_type == sup :: 'a basic_type => 'a basic_type => 'a basic_type
Proofs for inductive predicate(s) "closest_association_class"
  Proving monotonicity ...
Proofs for inductive predicate(s) "closest_association_class_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_closest_association_class"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_class_end'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "association_class_end_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_association_class_end"
Found termination order: "{}"
  Proving monotonicity ...
Proofs for inductive predicate(s) "any_operation'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "operation'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "operation_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_operation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "operation_defined'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "static_operation'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "static_operation_not_unique"
  Proving monotonicity ...
Proofs for inductive predicate(s) "unique_static_operation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "static_operation_defined'"
  Proving monotonicity ...
Proofs for inductive predicate(s) "has_literal'"
  Proving monotonicity ...
Found termination order: "{}"
locale object_model
  fixes classes :: "'a fset"
    and
    attributes ::
      "'a \<rightharpoonup>\<^sub>f 
       String.literal \<rightharpoonup>\<^sub>f 't"
    and
    associations ::
      "String.literal \<rightharpoonup>\<^sub>f 
       String.literal \<rightharpoonup>\<^sub>f 
       ('a * nat * enat * bool * bool)"
    and association_classes :: "'a \<rightharpoonup>\<^sub>f String.literal"
    and
    operations ::
      "(String.literal *
        't *
        (String.literal * 't * param_dir) list *
        't * bool * 'e option) list"
    and literals :: "'n \<rightharpoonup>\<^sub>f String.literal fset"
  assumes "object_model classes associations"
### theory "Draft.OCL_Basic_Types"
### 2.152s elapsed time, 5.803s cpu time, 0.911s GC time
Loading theory "Draft.OCL_Types" (required by "Draft.OCL_SyntaxTemplates" via "Draft.OCL_Syntax")
instantiation
  OCL_Types.type :: (type) size
  size_type == size :: 'a OCL_Types.type => nat
consts
  size_type :: "'a OCL_Types.type => nat"
Proofs for inductive predicate(s) "subtype"
  Proving monotonicity ...
instantiation
  OCL_Types.type :: (order) order
  less_eq_type == less_eq :: 'a OCL_Types.type => 'a OCL_Types.type => bool
  less_type == less :: 'a OCL_Types.type => 'a OCL_Types.type => bool
instantiation
  OCL_Types.type :: (semilattice_sup) semilattice_sup
  sup_type == sup ::
    'a OCL_Types.type => 'a OCL_Types.type => 'a OCL_Types.type
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "element_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "update_element_type"
  Proving monotonicity ...
Proofs for inductive predicate(s) "to_unique_collection"
  Proving monotonicity ...
Proofs for inductive predicate(s) "to_nonunique_collection"
  Proving monotonicity ...
Proofs for inductive predicate(s) "to_ordered_collection"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.OCL_Types"
### 3.400s elapsed time, 6.989s cpu time, 0.556s GC time
### theory "Draft.Object_Model"
### 9.851s elapsed time, 16.501s cpu time, 1.630s GC time
Loading theory "Draft.OCL_Syntax" (required by "Draft.OCL_SyntaxTemplates")
instantiation
  unat :: infinity
  infinity_unat == infinity :: unat
### theory "Draft.OCL_Syntax"
### 17.752s elapsed time, 23.119s cpu time, 7.607s GC time
Loading theory "Draft.OCL_SyntaxTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.OCL_SyntaxTemplates"
### 0.852s elapsed time, 1.242s cpu time, 0.171s GC time
val it = (): unit
