   [("Term_Abstraction.abs_set_empty",
     "{} \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t ?\<alpha> = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Term_Abstraction.abs_fv", "fv (?t \<cdot>\<^sub>\<alpha> ?a) = fv ?t",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Term_Abstraction.abs_list_set_is_set_abs_set",
     "set (?M \<cdot>\<^sub>\<alpha>\<^sub>l\<^sub>i\<^sub>s\<^sub>t
           ?\<alpha>) =
      set ?M \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t ?\<alpha>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Term_Abstraction.abs_subterms",
     "subterms (?t \<cdot>\<^sub>\<alpha> ?\<alpha>) =
      subterms ?t \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t ?\<alpha>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Term_Abstraction.abs_in",
     "?t : ?M ==>
      ?t \<cdot>\<^sub>\<alpha> ?\<alpha>
      : ?M \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t ?\<alpha>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Term_Abstraction.abs_set_union",
     "(?A Un ?B) \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t ?a =
      ?A \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t ?a Un
      ?B \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Term_Abstraction.abs_term_apply_const",
     "~ is_Val ?f ==> Fun ?f [] \<cdot>\<^sub>\<alpha> ?a = Fun ?f []",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Term_Abstraction.abs_subterms_in",
     "?s \<sqsubseteq> ?t ==>
      ?s \<cdot>\<^sub>\<alpha> ?a \<sqsubseteq>
      ?t \<cdot>\<^sub>\<alpha> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Term_Abstraction.abs_term_apply_const",
     "is_Val ?f ==>
      Fun ?f [] \<cdot>\<^sub>\<alpha> ?a = Fun (Abs (?a (the_Val ?f))) []",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_var 0,
                 template_app (template_hole 0, template_var 1)))),
           template_hole 2)))),
    ("Term_Abstraction.abs_eq_if_no_Val",
     "ALL f:funs_term ?t. ~ is_Val f ==>
      ?t \<cdot>\<^sub>\<alpha> ?a = ?t \<cdot>\<^sub>\<alpha> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Term_Abstraction.to_abs_list_insert'",
     "insert ?s (\<alpha>\<^sub>0 ?D ?n) =
      \<alpha>\<^sub>0 (List.insert (Fun (Val ?n) [], Fun (Set ?s) ?S) ?D)
       ?n",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 3),
         template_app
          (template_app (template_hole 7, template_var 2), template_var 1)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)),
                     template_hole 2)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 0))),
             template_var 2)),
         template_var 1))),
    ("Term_Abstraction.to_abs_in",
     "(Fun (Val ?n) [], Fun (Set ?s) []) : set ?D ==>
      ?s : \<alpha>\<^sub>0 ?D ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_var 2)),
                      template_hole 6)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1)),
                    template_hole 3))),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Term_Abstraction.abs_val_in_funs_term",
     "[| ?f : funs_term ?t; is_Val ?f |]
      ==> Abs (?\<alpha> (the_Val ?f))
          : funs_term (?t \<cdot>\<^sub>\<alpha> ?\<alpha>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 2,
                 template_app
                  (template_var 0,
                   template_app (template_hole 1, template_var 2)))),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Term_Abstraction.to_abs_list_insert",
     "Fun (Val ?n) [] ~= ?t ==>
      \<alpha>\<^sub>0 ?D ?n =
      \<alpha>\<^sub>0 (List.insert (?t, ?s) ?D) ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 3)),
                template_hole 4),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1)),
           template_var 3)))),
    ("Term_Abstraction.to_abs_list_remove_all",
     "Fun (Val ?n) [] ~= ?t ==>
      \<alpha>\<^sub>0 ?D ?n = \<alpha>\<^sub>0 (removeAll (?t, ?s) ?D) ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 3)),
                template_hole 4),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1)),
           template_var 3)))),
    ("Term_Abstraction.to_abs_list_remove_all'",
     "\<alpha>\<^sub>0 ?D ?n - {?s} =
      \<alpha>\<^sub>0
       (filter (%d. \<nexists>S. d = (Fun (Val ?n) [], Fun (Set ?s) S)) ?D)
       ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 11, template_var 0),
           template_hole 10)),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 9, t_empty), template_var 2)),
         template_var 1))),
    ("Term_Abstraction.to_abs_empty_iff_notin_db",
     "(Fun (Val ?n) [] \<cdot>\<^sub>\<alpha> \<alpha>\<^sub>0 ?D =
       Fun (Abs {}) []) =
      (\<nexists>s S. (Fun (Val ?n) [], Fun (Set s) S) : set ?D)",
     template_equation
      (template_app
        (template_app
          (template_hole 18,
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_hole 16,
                   template_app (template_hole 15, template_var 1)),
                 template_hole 14)),
             template_app (template_hole 13, template_var 0))),
         template_app
          (template_app
            (template_hole 16,
             template_app (template_hole 12, template_hole 11)),
           template_hole 14)),
       template_app
        (template_hole 10, template_app (template_hole 9, t_empty)))),
    ("Term_Abstraction.abs_ik_append",
     "(ik\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) \<cdot>\<^sub>s\<^sub>e\<^sub>t
       ?I) \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t
      ?a =
      (ik\<^sub>s\<^sub>s\<^sub>t ?A \<cdot>\<^sub>s\<^sub>e\<^sub>t
       ?I) \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t
      ?a Un
      (ik\<^sub>s\<^sub>s\<^sub>t ?B \<cdot>\<^sub>s\<^sub>e\<^sub>t
       ?I) \<cdot>\<^sub>\<alpha>\<^sub>s\<^sub>e\<^sub>t
      ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty),
                 template_app (template_hole 2, template_var 2))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty),
               template_app (template_hole 2, template_var 1))),
           template_var 0)))),
    ("Term_Abstraction.abs_term_subst_eq'",
     "[| ALL x:fv ?t. ?\<delta> x \<cdot>\<^sub>\<alpha> ?a = ?\<theta> x;
         \<nexists>n T. Fun (Val n) T \<sqsubseteq> ?t |]
      ==> ?t \<cdot> ?\<delta> \<cdot>\<^sub>\<alpha> ?a =
          ?t \<cdot> ?\<theta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 3)),
              t_empty)
            ),
        template_negation
         (template_predicate (template_app (template_hole 6, t_empty)))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Term_Abstraction.abs_term_subst_eq",
     "[| ALL x:fv ?t.
            ?\<delta> x \<cdot>\<^sub>\<alpha> ?a =
            ?\<theta> x \<cdot>\<^sub>\<alpha> ?b;
         \<nexists>n T. Fun (Val n) T \<sqsubseteq> ?t |]
      ==> ?t \<cdot> ?\<delta> \<cdot>\<^sub>\<alpha> ?a =
          ?t \<cdot> ?\<theta> \<cdot>\<^sub>\<alpha> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 4)),
              t_empty)
            ),
        template_negation
         (template_predicate (template_app (template_hole 6, t_empty)))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0)))),
    ("Term_Abstraction.to_abs_neq_imp_db_update",
     "\<alpha>\<^sub>0 (db\<^sub>s\<^sub>s\<^sub>t ?A ?I) ?n ~=
      \<alpha>\<^sub>0 (db\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) ?I) ?n ==>
      EX u s.
         u \<cdot> ?I = Fun (Val ?n) [] &
         (insert\<langle>u,s\<rangle> : set ?B |
          delete\<langle>u,s\<rangle> : set ?B)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 3),
                    template_var 2)),
                template_var 1),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app (template_hole 12, template_var 3),
                        template_var 0)),
                    template_var 2)),
                template_var 1))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Term_Abstraction.to_abs_db\<^sub>s\<^sub>s\<^sub>t_append",
     "[| ALL u s.
            insert\<langle>u,s\<rangle> : set ?B -->
            Fun (Val ?n) [] ~= u \<cdot> ?\<I>;
         ALL u s.
            delete\<langle>u,s\<rangle> : set ?B -->
            Fun (Val ?n) [] ~= u \<cdot> ?\<I> |]
      ==> \<alpha>\<^sub>0 (db'\<^sub>s\<^sub>s\<^sub>t ?A ?\<I> ?D) ?n =
          \<alpha>\<^sub>0 (db'\<^sub>s\<^sub>s\<^sub>t (?A @ ?B) ?\<I> ?D)
           ?n",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 4)),
                 template_var 2),
               template_var 0)),
           template_var 3))))]
