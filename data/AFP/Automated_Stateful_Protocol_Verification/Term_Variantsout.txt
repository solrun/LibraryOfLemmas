Loading theory "Draft.Term_Variants" (required by "Draft.Term_VariantsTemplates")
Loading theory "Draft.Templates" (required by "Draft.Term_VariantsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.168s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Term_VariantsTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "term_variants_pred"
  Proving monotonicity ...
### theory "Draft.Term_Variants"
### 0.275s elapsed time, 0.586s cpu time, 0.024s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.542s elapsed time, 0.761s cpu time, 0.024s GC time
Loading theory "Draft.Term_VariantsTemplates"
val templateLemmas =
   [("Term_Variants.term_variants_pred_refl", "term_variants_pred ?P ?t ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Term_Variants.term_variants_pred_finite",
     "finite {s. term_variants_pred ?P ?t s}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("Term_Variants.term_variants_pred_inv_Var",
     "term_variants_pred ?P ?t (Var ?x) = (?t = Var ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Term_Variants.term_variants_pred_inv_Var",
     "term_variants_pred ?P (Var ?x) ?t = (?t = Var ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0, template_app (template_hole 1, template_var 1)))),
    ("Term_Variants.term_variants_pred_iff_in_term_variants",
     "term_variants_pred ?P ?t ?s = (?s : set (term_variants ?P ?t))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Term_Variants.term_variants_pred_fv_eq",
     "term_variants_pred ?P ?s ?t ==> fv ?s = fv ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Term_Variants.term_variants_pred_inv''",
     "term_variants_pred ?P ?t (Fun ?f ?T) ==> is_Fun ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 2))
           ))),
    ("Term_Variants.term_variants_pred_inv'",
     "term_variants_pred ?P (Fun ?f ?T) ?t ==> is_Fun ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Term_Variants.term_variants_pred_subst",
     "term_variants_pred ?P ?t ?s ==>
      term_variants_pred ?P (?t \<cdot> ?\<delta>) (?s \<cdot> ?\<delta>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Term_Variants.term_variants_pred_inv''",
     "term_variants_pred ?P ?t (Fun ?f ?T) ==>
      length ?T = length (args ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 2))))),
    ("Term_Variants.term_variants_pred_inv'",
     "term_variants_pred ?P (Fun ?f ?T) ?t ==>
      length ?T = length (args ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Term_Variants.term_variants_pred_const",
     "?b : set (?P ?a) ==> term_variants_pred ?P (Fun ?a []) (Fun ?b [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_var 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Term_Variants.term_variants_pred_inv",
     "term_variants_pred ?P (Fun ?f ?T) (Fun ?h ?S) ==>
      length ?T = length ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Term_Variants.term_variants_pred_const_cases",
     "?P ?a = [] ==>
      term_variants_pred ?P (Fun ?a []) ?t = (?t = Fun ?a [])",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 5)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_hole 1)),
                template_var 0)
              )],
         template_equation
          (template_var 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1))))),
    ("Term_Variants.term_variants_pred_eq_case",
     "[| term_variants_pred ?P ?t ?s; ALL f:funs_term ?t. ?P f = [] |]
      ==> ?t = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Term_Variants.term_variants_pred_refl_inv",
     "[| term_variants_pred ?P ?s ?t; ALL f. ALL g:set (?P f). f = g |]
      ==> ?s = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Term_Variants.term_variants_pred_inv''",
     "[| term_variants_pred ?P ?t (Fun ?f ?T); ?f ~= the_Fun ?t |]
      ==> ?f : set (?P (the_Fun ?t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_var 3,
                 template_app (template_hole 2, template_var 2))))
           ))),
    ("Term_Variants.term_variants_pred_inv'",
     "[| term_variants_pred ?P (Fun ?f ?T) ?t; ?f ~= the_Fun ?t |]
      ==> the_Fun ?t : set (?P ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 0,
               template_app (template_var 3, template_var 2)))
           ))),
    ("Term_Variants.term_variants_pred_inv",
     "[| term_variants_pred ?P (Fun ?f ?T) (Fun ?h ?S); ?f ~= ?h |]
      ==> ?h : set (?P ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app (template_var 4, template_var 3)))
           ))),
    ("Term_Variants.term_variants_pred_inv_const",
     "term_variants_pred ?P (Fun ?c []) ?t =
      ((EX g:set (?P ?c). ?t = Fun g []) | ?t = Fun ?c [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_var 2, template_var 1))),
                 t_empty)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4)))
           ))),
    ("Term_Variants.term_variants_pred_inv''",
     "[| term_variants_pred ?P ?t (Fun ?f ?T); ?i < length ?T |]
      ==> term_variants_pred ?P (args ?t ! ?i) (?T ! ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Term_Variants.term_variants_pred_inv'",
     "[| term_variants_pred ?P (Fun ?f ?T) ?t; ?i < length ?T |]
      ==> term_variants_pred ?P (?T ! ?i) (args ?t ! ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Term_Variants.term_variants_pred_inv",
     "[| term_variants_pred ?P (Fun ?f ?T) (Fun ?h ?S); ?i < length ?T |]
      ==> term_variants_pred ?P (?T ! ?i) (?S ! ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Term_Variants.term_variants_pred_funs_term",
     "[| term_variants_pred ?P ?s ?t; ?f : funs_term ?t |]
      ==> ?f : funs_term ?s | (EX g:funs_term ?s. ?f : set (?P g))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 2)),
               t_empty))
           ))),
    ("Term_Variants.term_variants_pred_const_cases",
     "?P ?a ~= [] ==>
      term_variants_pred ?P (Fun ?a []) ?t =
      (?t = Fun ?a [] | (EX b:set (?P ?a). ?t = Fun b []))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 1),
              template_hole 8)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_hole 4)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 4))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 2, template_var 1))),
                 t_empty))
             )))),
    ("Term_Variants.term_variants_pred_param",
     "[| term_variants_pred ?P ?t ?s; ?f = ?g | ?g : set (?P ?f) |]
      ==> term_variants_pred ?P (Fun ?f (?S @ ?t # ?T))
           (Fun ?g (?S @ ?s # ?T))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_hole 3,
                  template_app (template_var 6, template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 6),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 0)))),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0))))
           ))),
    ("Term_Variants.term_variants_pred_dense'",
     "term_variants_pred ((%_. [])(?a := [?b])) ?u ?t ==>
      EX s. term_variants_pred ((%_. [])(?a := [?c])) ?u s &
            term_variants_pred ((%_. [])(?c := [?b])) s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_app (template_hole 4, t_empty),
                      template_var 4),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_hole 3))),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Term_Variants.term_variants_pred_Cons",
     "[| term_variants_pred ?P ?t ?s;
         term_variants_pred ?P (Fun ?f ?T) (Fun ?f ?S);
         ?f = ?g | ?g : set (?P ?f) |]
      ==> term_variants_pred ?P (Fun ?f (?t # ?T)) (Fun ?g (?s # ?S))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_app
                 (template_hole 1,
                  template_app (template_var 6, template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 6),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 2))),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)))
           ))),
    ("Term_Variants.term_variants_pred_dense",
     "[| term_variants_pred (%x. if x : ?P then ?fs else []) ?u ?t; ?g : ?Q;
         ?g : set ?gs |]
      ==> EX s. term_variants_pred (%x. if x : ?P then ?gs else []) ?u s &
                term_variants_pred (%x. if x : ?Q then ?fs else []) s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, t_empty), template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Term_Variants.term_variants_pred_subst'",
     "[| term_variants_pred ?P (?t \<cdot> ?\<delta>) ?s;
         ALL x:fv ?t Un fv ?s.
            (EX y. ?\<delta> x = Var y) |
            (EX f. ?\<delta> x = Fun f [] & ?P f = []) |]
      ==> EX u. term_variants_pred ?P ?t u & ?s = u \<cdot> ?\<delta>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 3),
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 2)),
                  template_app (template_hole 11, template_var 0))),
              t_empty)
            )],
       template_predicate (template_app (template_hole 0, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Term_VariantsTemplates"
### 0.428s elapsed time, 0.573s cpu time, 0.000s GC time
val it = (): unit
