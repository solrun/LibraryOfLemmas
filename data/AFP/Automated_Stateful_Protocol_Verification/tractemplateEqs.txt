   [("HOL.eta_contract_eq", "?f = ?f",
     template_equation (t_empty, template_var 0)),
    ("List.extract_Nil_code", "List.extract ?P [] = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("List.extract_None_iff",
     "(List.extract ?P ?xs = None) = (~ (EX x:set ?xs. ?P x))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("Groups_Big.sum_subtractf",
     "(SUM x:?A. ?f x - ?g x) = sum ?f ?A - sum ?g ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("List.extract_Some_iff",
     "(List.extract ?P ?xs = Some (?ys, ?y, ?zs)) =
      (?xs = ?ys @ ?y # ?zs & ?P ?y & ~ (EX y:set ?ys. ?P y))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 10, template_var 4), template_var 3),
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)))),
       template_dunno)),
    ("List.extract_Cons_code",
     "List.extract ?P (?x # ?xs) =
      (if ?P ?x then Some ([], ?x, ?xs)
       else case List.extract ?P ?xs of None => None
            | Some (ys, y, zs) => Some (?x # ys, y, zs))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 0)))))]
