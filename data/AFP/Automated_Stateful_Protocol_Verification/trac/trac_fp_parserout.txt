Loading theory "Draft.ml_yacc_lib" (required by "Draft.trac_fp_parserTemplates" via "Draft.trac_fp_parser" via "Draft.trac_term")
Loading theory "Draft.Templates" (required by "Draft.trac_fp_parserTemplates" via "Draft.ExtrEqs")
signature STREAM =
  sig
    val cons: 'a * 'a stream -> 'a stream
    val get: 'a stream -> 'a * 'a stream
    type 'a stream
    val streamify: (unit -> 'a) -> 'a stream
  end
signature LR_TABLE =
  sig
    exception Goto of state * nonterm
    val action: table -> state * term -> action
    datatype action = ACCEPT | ERROR | REDUCE of int | SHIFT of state
    val describeActions: table -> state -> (term, action) pairlist * action
    val describeGoto: table -> state -> (nonterm, state) pairlist
    val goto: table -> state * nonterm -> state
    val initialState: table -> state
    val mkLrTable:
       {actions: ((term, action) pairlist * action) array,
        gotos: (nonterm, state) pairlist array,
        initialState: state, numRules: int, numStates: int}
         -> table
    datatype nonterm = NT of int
    val numRules: table -> int
    val numStates: table -> int
    datatype ('a, 'b) pairlist = EMPTY | PAIR of 'a * 'b * ('a, 'b) pairlist
    datatype state = STATE of int
    type table
    datatype term = T of int
  end
signature TOKEN =
  sig
    structure LrTable: LR_TABLE
    val sameToken: ('a, 'b) token * ('a, 'b) token -> bool
    datatype ('a, 'b) token = TOKEN of LrTable.term * ('a * 'b * 'b)
  end
signature LR_PARSER =
  sig
    structure LrTable: LR_TABLE
    exception ParseError
    structure Stream: STREAM
    structure Token: TOKEN
    val parse:
       {arg: 'a,
        ec:
        {error: string * 'b * 'b -> unit,
         errtermvalue: LrTable.term -> 'c,
         is_keyword: LrTable.term -> bool,
         noShift: LrTable.term -> bool,
         preferred_change: (LrTable.term list * LrTable.term list) list,
         showTerminal: LrTable.term -> string, terms: LrTable.term list}
        ,
        lexer: ('c, 'b) Token.token Stream.stream,
        lookahead: int,
        saction:
        int * 'b * (LrTable.state * ('c * 'b * 'b)) list * 'a ->
          LrTable.nonterm * ('c * 'b * 'b) *
          (LrTable.state * ('c * 'b * 'b)) list
        ,
        table: LrTable.table, void: 'c}
         -> 'c * ('c, 'b) Token.token Stream.stream
  end
signature LEXER =
  sig
    structure UserDeclarations:
      sig type pos type svalue type ('a, 'b) token end
    val makeLexer:
       (int -> string) ->
         unit ->
           (UserDeclarations.svalue, UserDeclarations.pos)
           UserDeclarations.token
  end
signature ARG_LEXER =
  sig
    structure UserDeclarations:
      sig type arg type pos type svalue type ('a, 'b) token end
    val makeLexer:
       (int -> string) ->
         UserDeclarations.arg ->
           unit ->
             (UserDeclarations.svalue, UserDeclarations.pos)
             UserDeclarations.token
  end
signature PARSER_DATA =
  sig
    structure Actions:
      sig
        val actions:
           int * pos * (LrTable.state * (svalue * pos * pos)) list * arg ->
             LrTable.nonterm * (svalue * pos * pos) *
             (LrTable.state * (svalue * pos * pos)) list
        val extract: svalue -> result
        val void: svalue
      end
    structure EC:
      sig
        val errtermvalue: LrTable.term -> svalue
        val is_keyword: LrTable.term -> bool
        val noShift: LrTable.term -> bool
        val preferred_change: (LrTable.term list * LrTable.term list) list
        val showTerminal: LrTable.term -> string
        val terms: LrTable.term list
      end
    structure LrTable: LR_TABLE
    structure Token: TOKEN
    type arg
    type pos
    type result
    type svalue
    val table: LrTable.table
  end
signature PARSER =
  sig
    exception ParseError
    structure Stream: STREAM
    structure Token: TOKEN
    type arg
    val makeLexer:
       (int -> string) -> (svalue, pos) Token.token Stream.stream
    val parse:
       int * (svalue, pos) Token.token Stream.stream *
       (string * pos * pos -> unit) * arg
         -> result * (svalue, pos) Token.token Stream.stream
    type pos
    type result
    val sameToken:
       (svalue, pos) Token.token * (svalue, pos) Token.token -> bool
    type svalue
  end
signature ARG_PARSER =
  sig
    exception ParseError
    structure Stream: STREAM
    structure Token: TOKEN
    type arg
    type lexarg
    val makeLexer:
       (int -> string) -> lexarg -> (svalue, pos) Token.token Stream.stream
    val parse:
       int * (svalue, pos) Token.token Stream.stream *
       (string * pos * pos -> unit) * arg
         -> result * (svalue, pos) Token.token Stream.stream
    type pos
    type result
    val sameToken:
       (svalue, pos) Token.token * (svalue, pos) Token.token -> bool
    type svalue
  end
functor Join (
  sig
    structure Lex: LEXER
    structure LrParser: LR_PARSER
    structure ParserData: PARSER_DATA
  end
  ): 
  PARSER
functor JoinWithArg (
  sig
    structure Lex: ARG_LEXER
    structure LrParser: LR_PARSER
    structure ParserData: PARSER_DATA
  end
  ): 
  ARG_PARSER
structure LrTable: LR_TABLE
### Opaque signature matching (:>) fails to work with ML pretty printing --
### prefer non-opaque matching (:) possibly with abstype (line 30 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/stream.sml")
structure Stream: STREAM
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.172s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.trac_fp_parserTemplates")
### Opaque signature matching (:>) fails to work with ML pretty printing --
### prefer non-opaque matching (:) possibly with abstype (line 121 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml")
### Opaque signature matching (:>) fails to work with ML pretty printing --
### prefer non-opaque matching (:) possibly with abstype (line 144 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml")
### ML warning (line 207 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (action) has not been referenced.
### ML warning (line 193 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (next) has not been referenced.
### ML warning (line 310 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (stack) has not been referenced.
### ML warning (line 310 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (value) has not been referenced.
### ML warning (line 310 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (lexv) has not been referenced.
### ML warning (line 363 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (printChangeList) has not been referenced.
### ML warning (line 398 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (term) has not been referenced.
### ML warning (line 403 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (right) has not been referenced.
### ML warning (line 421 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (lexPair) has not been referenced.
### ML warning (line 442 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (r) has not been referenced.
### ML warning (line 445 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (l') has not been referenced.
### ML warning (line 515 of "$AFP/Automated_Stateful_Protocol_Verification/trac/ml-yacc-lib/parser2.sml"):
### Value identifier (h) has not been referenced.
signature FIFO =
  sig
    exception Empty
    val empty: 'a queue
    val get: 'a queue -> 'a * 'a queue
    val put: 'a * 'a queue -> 'a queue
    type 'a queue
  end
structure LrParser: LR_PARSER
### theory "Draft.ml_yacc_lib"
### 0.162s elapsed time, 0.351s cpu time, 0.033s GC time
Loading theory "Draft.trac_term" (required by "Draft.trac_fp_parserTemplates" via "Draft.trac_fp_parser")
structure Trac_Utils:
  sig
    val list_find: ('a -> bool) -> 'a list -> ('a * int) option
    val list_intersect: ''a list -> ''a list -> bool
    val list_minus: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    val list_partitions: ''a list -> (''a * ''a) list -> ''a list list list
    val list_product: 'a list list -> 'a list list
    val list_rm_pair: ('a -> ''b) -> 'a list -> ''b -> 'a list
    val list_subseqs: 'a list -> 'a list list
    val list_toString: ('a -> string) -> 'a list -> string
    val list_to_str: string list -> string
    val list_triangle_product: ('a -> 'a -> 'b) -> 'a list -> 'b list
    val list_upto: int -> int list
    val map_prod: ('a -> 'b) -> 'a * 'a -> 'b * 'b
    val mk_unique: ''a list -> ''a list
  end
structure Trac_Term:
  sig
    datatype Msg
    = Attack | Const of string | Fun of string * Msg list | Var of string
    type TypeDecl = string * string
    exception TypeError
    datatype VarType = EnumType of string | Untyped | ValueType
    datatype cMsg
    =
         cAbs of (string * string list) list
       | cAttack
       | cConst of string
       | cEnum of string
       | cFun of string * cMsg list
       | cOccursFact of cMsg
       | cPrivFunSec
       | cSet of string * cMsg list
       | cVar of string * VarType
    val certifyMsg: (string * string) list -> string list -> Msg -> cMsg
    val fv_Msg: Msg -> string list
    val fv_cMsg: cMsg -> (string * VarType) list
    val list_find: ('a -> bool) -> 'a list -> ('a * int) option
    val list_intersect: ''a list -> ''a list -> bool
    val list_minus: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    val list_partitions: ''a list -> (''a * ''a) list -> ''a list list list
    val list_product: 'a list list -> 'a list list
    val list_rm_pair: ('a -> ''b) -> 'a list -> ''b -> 'a list
    val list_subseqs: 'a list -> 'a list list
    val list_toString: ('a -> string) -> 'a list -> string
    val list_to_str: string list -> string
    val list_triangle_product: ('a -> 'a -> 'b) -> 'a list -> 'b list
    val list_upto: int -> int list
    val map_prod: ('a -> 'b) -> 'a * 'a -> 'b * 'b
    val mk_Value_cVar: string -> cMsg
    val mk_unique: ''a list -> ''a list
    val subst_apply: (string * cMsg) list -> cMsg -> cMsg
    val subst_apply': (string * VarType -> cMsg) -> cMsg -> cMsg
    val type_of: (''a * string) list -> ''a list -> ''a -> VarType
  end
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.099s cpu time, 0.089s GC time
structure TracProtocol:
  sig
    exception TypeError
    datatype action
    =
         ATTACK
       | DELETE of Trac_Term.Msg * (string * Trac_Term.Msg list)
       | IN of Trac_Term.Msg * (string * Trac_Term.Msg list)
       | INSERT of Trac_Term.Msg * (string * Trac_Term.Msg list)
       | NEW of string
       | NOTIN of Trac_Term.Msg * (string * Trac_Term.Msg list)
       | NOTINANY of Trac_Term.Msg * string
       | RECEIVE of Trac_Term.Msg
       | SEND of Trac_Term.Msg
    type anaT = ruleT list
    datatype cAction
    =
         cAssertAttack
       | cDelete of Trac_Term.cMsg * Trac_Term.cMsg
       | cInSet of Trac_Term.cMsg * Trac_Term.cMsg
       | cInequality of Trac_Term.cMsg * Trac_Term.cMsg
       | cInsert of Trac_Term.cMsg * Trac_Term.cMsg
       | cNew of string
       | cNotInAny of Trac_Term.cMsg * string
       | cNotInSet of Trac_Term.cMsg * Trac_Term.cMsg
       | cReceive of Trac_Term.cMsg
       | cSend of Trac_Term.cMsg
    type cTransaction =
       {attack_actions: (prot_label * cAction) list,
        checkall_actions: (prot_label * cAction) list,
        checksingle_actions: (prot_label * cAction) list,
        fresh_actions: (prot_label * cAction) list,
        receive_actions: (prot_label * cAction) list,
        send_actions: (prot_label * cAction) list,
        transaction: transaction_name,
        update_actions: (prot_label * cAction) list}
    val certifyAction:
       (string * string) list -> string list -> 'a * action -> 'a * cAction
    val certifyTransaction: transaction -> cTransaction
    val empty: protocol
    val extract_Consts: type_spec -> string list
    type funT = string * string
    val fun_empty: fun_spec
    type fun_spec = {private: funT list, public: funT list}
    val is_ATTACK: action -> bool
    val is_Attack: cAction -> bool
    val is_Consts: type_spec_elem -> bool
    val is_DELETE: action -> bool
    val is_Delete: cAction -> bool
    val is_Fresh: cAction -> bool
    val is_IN: action -> bool
    val is_INSERT: action -> bool
    val is_InSet: cAction -> bool
    val is_Inequality: cAction -> bool
    val is_Insert: cAction -> bool
    val is_NEW: action -> bool
    val is_NOTIN: action -> bool
    val is_NOTINANY: action -> bool
    val is_NotInAny: cAction -> bool
    val is_NotInSet: cAction -> bool
    val is_RECEIVE: action -> bool
    val is_Receive: cAction -> bool
    val is_SEND: action -> bool
    val is_Send: cAction -> bool
    val list_find: ('a -> bool) -> 'a list -> ('a * int) option
    val list_intersect: ''a list -> ''a list -> bool
    val list_minus: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    val list_partitions: ''a list -> (''a * ''a) list -> ''a list list list
    val list_product: 'a list list -> 'a list list
    val list_rm_pair: ('a -> ''b) -> 'a list -> ''b -> 'a list
    val list_subseqs: 'a list -> 'a list list
    val list_toString: ('a -> string) -> 'a list -> string
    val list_to_str: string list -> string
    val list_triangle_product: ('a -> 'a -> 'b) -> 'a list -> 'b list
    val list_upto: int -> int list
    val map_prod: ('a -> 'b) -> 'a * 'a -> 'b * 'b
    val maybe_the_DELETE:
       action -> (Trac_Term.Msg * (string * Trac_Term.Msg list)) option
    val maybe_the_Delete:
       cAction -> (Trac_Term.cMsg * Trac_Term.cMsg) option
    val maybe_the_Fresh: cAction -> string option
    val maybe_the_IN:
       action -> (Trac_Term.Msg * (string * Trac_Term.Msg list)) option
    val maybe_the_INSERT:
       action -> (Trac_Term.Msg * (string * Trac_Term.Msg list)) option
    val maybe_the_InSet: cAction -> (Trac_Term.cMsg * Trac_Term.cMsg) option
    val maybe_the_Inequality:
       cAction -> (Trac_Term.cMsg * Trac_Term.cMsg) option
    val maybe_the_Insert:
       cAction -> (Trac_Term.cMsg * Trac_Term.cMsg) option
    val maybe_the_NEW: action -> string option
    val maybe_the_NOTIN:
       action -> (Trac_Term.Msg * (string * Trac_Term.Msg list)) option
    val maybe_the_NOTINANY: action -> (Trac_Term.Msg * string) option
    val maybe_the_NotInAny: cAction -> (Trac_Term.cMsg * string) option
    val maybe_the_NotInSet:
       cAction -> (Trac_Term.cMsg * Trac_Term.cMsg) option
    val maybe_the_RECEIVE: action -> Trac_Term.Msg option
    val maybe_the_Receive: cAction -> Trac_Term.cMsg option
    val maybe_the_SEND: action -> Trac_Term.Msg option
    val maybe_the_Send: cAction -> Trac_Term.cMsg option
    val mkTransaction:
       transaction_name -> (prot_label * action) list -> transaction
    val mk_unique: ''a list -> ''a list
    datatype prot_label = LabelN | LabelS
    type protocol =
       {analysis_spec: anaT,
        fixed_point:
        (Trac_Term.cMsg list * (string * string list) list list *
         ((string * string list) list * (string * string list) list) list
        )
        option
        ,
        function_spec: fun_spec option,
        name: string,
        set_spec: set_spec list,
        transaction_spec: (string option * transaction list) list,
        type_spec: type_spec}
    type ruleT = (string * string list) * Trac_Term.Msg list * string list
    type set_spec = string * string
    val subst_apply_action:
       (string * Trac_Term.cMsg) list ->
         prot_label * cAction -> prot_label * cAction
    val subst_apply_actions:
       (string * Trac_Term.cMsg) list ->
         (prot_label * cAction) list -> (prot_label * cAction) list
    val the_Consts: type_spec_elem -> string list
    val the_DELETE: action -> Trac_Term.Msg * (string * Trac_Term.Msg list)
    val the_Delete: cAction -> Trac_Term.cMsg * Trac_Term.cMsg
    val the_Fresh: cAction -> string
    val the_IN: action -> Trac_Term.Msg * (string * Trac_Term.Msg list)
    val the_INSERT: action -> Trac_Term.Msg * (string * Trac_Term.Msg list)
    val the_InSet: cAction -> Trac_Term.cMsg * Trac_Term.cMsg
    val the_Inequality: cAction -> Trac_Term.cMsg * Trac_Term.cMsg
    val the_Insert: cAction -> Trac_Term.cMsg * Trac_Term.cMsg
    val the_NEW: action -> string
    val the_NOTIN: action -> Trac_Term.Msg * (string * Trac_Term.Msg list)
    val the_NOTINANY: action -> Trac_Term.Msg * string
    val the_NotInAny: cAction -> Trac_Term.cMsg * string
    val the_NotInSet: cAction -> Trac_Term.cMsg * Trac_Term.cMsg
    val the_RECEIVE: action -> Trac_Term.Msg
    val the_Receive: cAction -> Trac_Term.cMsg
    val the_SEND: action -> Trac_Term.Msg
    val the_Send: cAction -> Trac_Term.cMsg
    type transaction =
       {actions: (prot_label * action) list, transaction: transaction_name}
    type transaction_name =
       string * (string * string) list * (string * string) list
    type type_spec = (string * type_spec_elem) list
    datatype type_spec_elem = Consts of string list | Union of string list
    val update_analysis:
       protocol ->
         ((string * string list) * Trac_Term.Msg list * string list) list ->
           protocol
    val update_fixed_point:
       protocol ->
         (Trac_Term.cMsg list * (string * string list) list list *
          ((string * string list) list * (string * string list) list) list
         )
         option
           -> protocol
    val update_fun_private: fun_spec -> funT list -> fun_spec
    val update_fun_public: fun_spec -> funT list -> fun_spec
    val update_functions: protocol -> fun_spec option -> protocol
    val update_name: protocol -> string -> protocol
    val update_sets: protocol -> (string * string) list -> protocol
    val update_transactions:
       string option -> protocol -> transaction list -> protocol
    val update_type_spec:
       protocol -> (string * type_spec_elem) list -> protocol
  end
### theory "Draft.trac_term"
### 0.462s elapsed time, 0.930s cpu time, 0.056s GC time
Loading theory "Draft.trac_fp_parser" (required by "Draft.trac_fp_parserTemplates")
signature Trac_TOKENS =
  sig
    val ASTERISK: string * 'a * 'a -> (svalue, 'a) token
    val ATTACK: string * 'a * 'a -> (svalue, 'a) token
    val COLON: string * 'a * 'a -> (svalue, 'a) token
    val COMMA: string * 'a * 'a -> (svalue, 'a) token
    val DOUBLE_ASTERISK: string * 'a * 'a -> (svalue, 'a) token
    val DOUBLE_RARROW: string * 'a * 'a -> (svalue, 'a) token
    val EOF: 'a * 'a -> (svalue, 'a) token
    val FIXEDPOINT: string * 'a * 'a -> (svalue, 'a) token
    val INTEGER_LITERAL: string * 'a * 'a -> (svalue, 'a) token
    val LOWER_STRING_LITERAL: string * 'a * 'a -> (svalue, 'a) token
    val ONE: string * 'a * 'a -> (svalue, 'a) token
    val PAREN_CLOSE: string * 'a * 'a -> (svalue, 'a) token
    val PAREN_OPEN: string * 'a * 'a -> (svalue, 'a) token
    val STRING_LITERAL: string * 'a * 'a -> (svalue, 'a) token
    val UPPER_STRING_LITERAL: string * 'a * 'a -> (svalue, 'a) token
    val WHERE: string * 'a * 'a -> (svalue, 'a) token
    val ZERO: string * 'a * 'a -> (svalue, 'a) token
    type svalue
    type ('a, 'b) token
  end
signature Trac_LRVALS =
  sig structure ParserData: PARSER_DATA structure Tokens: Trac_TOKENS end
### ML warning (line 556 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.lex.sml"):
### Value identifier (i) has not been referenced.
### ML warning (line 650 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.lex.sml"):
### Value identifier (YYBEGIN) has not been referenced.
### ML warning (line 654 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.lex.sml"):
### Value identifier (continue) has not been referenced.
### ML warning (line 658 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.lex.sml"):
### Value identifier (l) has not been referenced.
### ML warning (line 658 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.lex.sml"):
### Value identifier (acts) has not been referenced.
### ML warning (line 656 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.lex.sml"):
### Value identifier (i) has not been referenced.
functor TracLexFun (sig structure Tokens: Trac_TOKENS end): 
  sig
    structure Internal:
      sig
        exception LexerError
        structure StartStates:
          sig
            val INITIAL: yystartstate
            datatype yystartstate = STARTSTATE of int
          end
        type result = UserDeclarations.lexresult
        type statedata = {fin: yyfinstate list, trans: string}
        val tab: {fin: yyfinstate list, trans: string} vector
        datatype yyfinstate = N of int
      end
    exception LexError
    structure UserDeclarations:
      sig
        datatype Msg
        =
             Attack
           | Const of string
           | Fun of string * Msg list
           | Var of string
        structure Tokens: Trac_TOKENS
        type TypeDecl = string * string
        exception TypeError
        datatype VarType = EnumType of string | Untyped | ValueType
        datatype cMsg
        =
             cAbs of (string * string list) list
           | cAttack
           | cConst of string
           | cEnum of string
           | cFun of string * cMsg list
           | cOccursFact of cMsg
           | cPrivFunSec
           | cSet of string * cMsg list
           | cVar of string * VarType
        val certifyMsg: (string * string) list -> string list -> Msg -> cMsg
        val eof: unit -> (svalue, int * int * int) token
        val error: string * (int * int * int) * 'a -> unit
        val fv_Msg: Msg -> string list
        val fv_cMsg: cMsg -> (string * VarType) list
        val inputPos: int -> (int * int * int) * (int * int * int)
        val inputPos_half: int -> int * int * int
        type lexresult = (svalue, pos) token
        val list_find: ('a -> bool) -> 'a list -> ('a * int) option
        val list_intersect: ''a list -> ''a list -> bool
        val list_minus: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
        val list_partitions:
           ''a list -> (''a * ''a) list -> ''a list list list
        val list_product: 'a list list -> 'a list list
        val list_rm_pair: ('a -> ''b) -> 'a list -> ''b -> 'a list
        val list_subseqs: 'a list -> 'a list list
        val list_toString: ('a -> string) -> 'a list -> string
        val list_to_str: string list -> string
        val list_triangle_product: ('a -> 'a -> 'b) -> 'a list -> 'b list
        val list_upto: int -> int list
        val map_prod: ('a -> 'b) -> 'a * 'a -> 'b * 'b
        val mk_Value_cVar: string -> cMsg
        val mk_unique: ''a list -> ''a list
        val pos: (int * int * int) ref
        type pos = int * int * int
        val subst_apply: (string * cMsg) list -> cMsg -> cMsg
        val subst_apply': (string * VarType -> cMsg) -> cMsg -> cMsg
        type svalue
        type ('a, 'b) token
        val type_of: (''a * string) list -> ''a list -> ''a -> VarType
      end
    val makeLexer:
       (int -> string) ->
         unit -> (Tokens.svalue, int * int * int) Tokens.token
  end
### ML warning (line 309 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (defaultPos) has not been referenced.
### ML warning (line 314 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (trac_file1) has not been referenced.
### ML warning (line 323 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (FIXEDPOINT1) has not been referenced.
### ML warning (line 324 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (symfact_list_exp1) has not been referenced.
### ML warning (line 333 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (symfact_list_exp1) has not been referenced.
### ML warning (line 342 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (symfact_exp1) has not been referenced.
### ML warning (line 352 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (symfact_exp1) has not been referenced.
### ML warning (line 353 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (symfact_list_exp1) has not been referenced.
### ML warning (line 362 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (DOUBLE_RARROW1) has not been referenced.
### ML warning (line 363 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (ATTACK1) has not been referenced.
### ML warning (line 373 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (rule_exp1) has not been referenced.
### ML warning (line 374 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (WHERE1) has not been referenced.
### ML warning (line 375 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (type_list_exp1) has not been referenced.
### ML warning (line 385 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (DOUBLE_RARROW1) has not been referenced.
### ML warning (line 387 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (rule_exp1) has not been referenced.
### ML warning (line 388 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (WHERE1) has not been referenced.
### ML warning (line 389 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (type_list_exp1) has not been referenced.
### ML warning (line 400 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (DOUBLE_ASTERISK1) has not been referenced.
### ML warning (line 402 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (DOUBLE_RARROW1) has not been referenced.
### ML warning (line 403 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (rule_exp1) has not been referenced.
### ML warning (line 404 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (WHERE1) has not been referenced.
### ML warning (line 405 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (type_list_exp1) has not been referenced.
### ML warning (line 413 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (rule_exp1) has not been referenced.
### ML warning (line 423 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (DOUBLE_RARROW1) has not been referenced.
### ML warning (line 424 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (rule_exp1) has not been referenced.
### ML warning (line 434 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (DOUBLE_ASTERISK1) has not been referenced.
### ML warning (line 435 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (DOUBLE_RARROW1) has not been referenced.
### ML warning (line 436 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (rule_exp1) has not been referenced.
### ML warning (line 445 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (upper_literal1) has not been referenced.
### ML warning (line 454 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (lower_literal1) has not been referenced.
### ML warning (line 465 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (lower_literal1) has not been referenced.
### ML warning (line 466 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (PAREN_OPEN1) has not been referenced.
### ML warning (line 467 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (arg_list_exp1) has not been referenced.
### ML warning (line 468 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (PAREN_CLOSE1) has not been referenced.
### ML warning (line 476 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (arg_exp1) has not been referenced.
### ML warning (line 486 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (arg_exp1) has not been referenced.
### ML warning (line 488 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (COMMA1) has not been referenced.
### ML warning (line 489 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (arg_list_exp1) has not been referenced.
### ML warning (line 497 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (rule_exp1) has not been referenced.
### ML warning (line 506 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (ASTERISK1) has not been referenced.
### ML warning (line 507 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (int_literal1) has not been referenced.
### ML warning (line 515 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (int_literal1) has not been referenced.
### ML warning (line 524 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (type_exp1) has not been referenced.
### ML warning (line 534 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (type_exp1) has not been referenced.
### ML warning (line 536 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (type_list_exp1) has not been referenced.
### ML warning (line 546 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (ASTERISK1) has not been referenced.
### ML warning (line 548 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (int_literal1) has not been referenced.
### ML warning (line 549 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (COLON1) has not been referenced.
### ML warning (line 550 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (string_literal1) has not been referenced.
### ML warning (line 560 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (upper_literal1) has not been referenced.
### ML warning (line 561 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (COLON1) has not been referenced.
### ML warning (line 562 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (string_literal1) has not been referenced.
### ML warning (line 571 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (UPPER_STRING_LITERAL1) has not been referenced.
### ML warning (line 581 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (LOWER_STRING_LITERAL1) has not been referenced.
### ML warning (line 591 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (upper_literal1) has not been referenced.
### ML warning (line 600 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (lower_literal1) has not been referenced.
### ML warning (line 609 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (INTEGER_LITERAL1) has not been referenced.
### ML warning (line 617 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (ZERO1) has not been referenced.
### ML warning (line 623 of "$AFP/Automated_Stateful_Protocol_Verification/trac/trac_parser/trac_fp.grm.sml"):
### Value identifier (ONE1) has not been referenced.
functor TracLrValsFun (sig structure Token: TOKEN end): 
  sig structure ParserData: PARSER_DATA structure Tokens: Trac_TOKENS end
structure TracFpParser:
  sig
    val attack: Trac_Term.cMsg list -> bool
    val parse_file: string -> Trac_Term.cMsg list
    val parse_str: string -> Trac_Term.cMsg list
  end
### theory "Draft.trac_fp_parser"
### 0.123s elapsed time, 0.123s cpu time, 0.000s GC time
Loading theory "Draft.trac_fp_parserTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.trac_fp_parserTemplates"
### 0.306s elapsed time, 0.398s cpu time, 0.025s GC time
val it = (): unit
