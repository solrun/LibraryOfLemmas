   [("HOL.eta_contract_eq", "?f = ?f",
     template_equation (t_empty, template_var 0)),
    ("List.extract_Nil_code", "List.extract ?P [] = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("List.extract_None_iff",
     "(List.extract ?P ?xs = None) = (~ (EX x:set ?xs. ?P x))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("Extraction.exI_realizer",
     "?P ?y ?x ==> ?P (snd (?x, ?y)) (fst (?x, ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)))
           ))),
    ("Extraction.conjI_realizer",
     "[| ?P ?p; ?Q ?q |] ==> ?P (fst (?p, ?q)) & ?Q (snd (?p, ?q))",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_var 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)))),
             template_app
              (template_var 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))))
           ))),
    ("Groups_Big.sum_subtractf",
     "(SUM x:?A. ?f x - ?g x) = sum ?f ?A - sum ?g ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Extraction.exE_realizer'",
     "[| ?P (snd ?p) (fst ?p); !!x y. ?P y x ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 2,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Extraction.disjE_realizer3",
     "[| case ?x of Left => ?P | Right => ?Q; ?P ==> ?R ?f; ?Q ==> ?R ?g |]
      ==> ?R (case ?x of Left => ?f | Right => ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_implication
         ([template_predicate (template_var 5)],
          template_predicate
           (template_app (template_var 2, template_var 1))),
        template_implication
         ([template_predicate (template_var 4)],
          template_predicate
           (template_app (template_var 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3))
           ))),
    ("List.extract_Some_iff",
     "(List.extract ?P ?xs = Some (?ys, ?y, ?zs)) =
      (?xs = ?ys @ ?y # ?zs & ?P ?y & ~ (EX y:set ?ys. ?P y))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 10, template_var 4), template_var 3),
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_var 4, template_var 1)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   t_empty))))
           ))),
    ("List.extract_SomeE",
     "List.extract ?P ?xs = Some (?ys, ?y, ?zs) ==>
      ?xs = ?ys @ ?y # ?zs & ?P ?y & ~ (EX y:set ?ys. ?P y)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 4),
            template_var 3),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_var 4, template_var 1)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   t_empty))))
           ))),
    ("Extraction.exE_realizer",
     "[| ?P (snd ?p) (fst ?p); !!x y. ?P y x ==> ?Q (?f x y) |]
      ==> ?Q (let (x, y) = ?p in ?f x y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, t_empty)))
           ))),
    ("Extraction.disjE_realizer2",
     "[| case ?x of None => ?P | Some q => ?Q q; ?P ==> ?R ?f;
         !!q. ?Q q ==> ?R (?g q) |]
      ==> ?R (case ?x of None => ?f | Some q => ?g q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5), t_empty),
              template_var 3)
            ),
        template_implication
         ([template_predicate (template_var 5)],
          template_predicate
           (template_app (template_var 2, template_var 1))),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1), t_empty),
               template_var 3))
           ))),
    ("Groups_Big.sum_subtractf_nat",
     "(!!x. x : ?A ==> ?g x <= ?f x) ==>
      (SUM x:?A. ?f x - ?g x) = sum ?f ?A - sum ?g ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 1, t_empty), template_var 2))))),
    ("List.extract_Cons_code",
     "List.extract ?P (?x # ?xs) =
      (if ?P ?x then Some ([], ?x, ?xs)
       else case List.extract ?P ?xs of None => None
            | Some (ys, y, zs) => Some (?x # ys, y, zs))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 0))))),
    ("Extraction.disjE_realizer",
     "[| case ?x of Inl p => ?P p | Inr q => ?Q q; !!p. ?P p ==> ?R (?f p);
         !!q. ?Q q ==> ?R (?g q) |]
      ==> ?R (case ?x of Inl p => ?f p | Inr q => ?g q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), t_empty),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_var 2,
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), t_empty),
               template_var 3))
           )))]
