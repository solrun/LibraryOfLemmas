Loading theory "Draft.Term_Variants" (required by "Draft.Term_ImplicationTemplates" via "Draft.Term_Implication")
Loading theory "Draft.Transactions" (required by "Draft.Term_ImplicationTemplates" via "Draft.Term_Implication" via "Draft.Stateful_Protocol_Model")
Loading theory "Draft.Templates" (required by "Draft.Term_ImplicationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.197s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Term_ImplicationTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "term_variants_pred"
  Proving monotonicity ...
### theory "Draft.Term_Variants"
### 0.358s elapsed time, 1.085s cpu time, 0.258s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.652s elapsed time, 1.627s cpu time, 0.353s GC time
Found termination order: "{}"
Found termination order: "{}"
instantiation
  prot_atom :: (enum) enum
  enum_prot_atom == enum_class.enum :: 'a prot_atom list
  enum_all_prot_atom == enum_class.enum_all ::
    ('a prot_atom => bool) => bool
  enum_ex_prot_atom == enum_class.enum_ex :: ('a prot_atom => bool) => bool
### theory "Draft.Transactions"
### 5.478s elapsed time, 7.399s cpu time, 1.565s GC time
Loading theory "Draft.Term_Abstraction" (required by "Draft.Term_ImplicationTemplates" via "Draft.Term_Implication" via "Draft.Stateful_Protocol_Model")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Term_Abstraction"
### 3.117s elapsed time, 3.887s cpu time, 0.425s GC time
Loading theory "Draft.Stateful_Protocol_Model" (required by "Draft.Term_ImplicationTemplates" via "Draft.Term_Implication")
locale stateful_protocol_model
  fixes arity\<^sub>f :: "'fun => nat"
    and arity\<^sub>s :: "'sets => nat"
    and public\<^sub>f :: "'fun => bool"
    and
    Ana\<^sub>f ::
      "'fun
       => (('fun, 'atom, 'sets) prot_fun, nat) Term.term list * nat list"
    and \<Gamma>\<^sub>f :: "'fun => 'atom option"
    and label_witness1 :: "'lbl"
    and label_witness2 :: "'lbl"
  assumes
    "stateful_protocol_model arity\<^sub>f public\<^sub>f Ana\<^sub>f
      \<Gamma>\<^sub>f label_witness1 label_witness2"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "reachable_constraintsp"
  Proving monotonicity ...
### theory "Draft.Stateful_Protocol_Model"
### 4.746s elapsed time, 6.133s cpu time, 1.889s GC time
Loading theory "Draft.Term_Implication" (required by "Draft.Term_ImplicationTemplates")
Proofs for inductive predicate(s) "timpl_closurep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "timpl_closure'_stepp"
  Proving monotonicity ...
locale stateful_protocol_model
  fixes arity\<^sub>f :: "'fun => nat"
    and arity\<^sub>s :: "'sets => nat"
    and public\<^sub>f :: "'fun => bool"
    and
    Ana\<^sub>f ::
      "'fun
       => (('fun, 'atom, 'sets) prot_fun, nat) Term.term list * nat list"
    and \<Gamma>\<^sub>f :: "'fun => 'atom option"
    and label_witness1 :: "'lbl"
    and label_witness2 :: "'lbl"
  assumes
    "stateful_protocol_model arity\<^sub>f public\<^sub>f Ana\<^sub>f
      \<Gamma>\<^sub>f label_witness1 label_witness2"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "timpls_transformable_to_pred"
  Proving monotonicity ...
### theory "Draft.Term_Implication"
### 10.575s elapsed time, 12.952s cpu time, 3.530s GC time
Loading theory "Draft.Term_ImplicationTemplates"
val templateLemmas =
   [("Term_Implication.timpl_closure'_timpls_rtrancl_eq",
     "timpl_closure' (?c^*) = timpl_closure' ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Term_Implication.timpl_closure'_timpls_trancl_eq",
     "timpl_closure' (?c^+) = timpl_closure' ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Term_Implication.timpl_closure'_timpls_rtrancl_supset",
     "timpl_closure' ?c <= timpl_closure' (?c^*)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Term_Implication.timpl_closure'_timpls_trancl_supset",
     "timpl_closure' ?c <= timpl_closure' (?c^+)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Term_Implication.timpl_closure'_timpls_rtrancl_subset",
     "timpl_closure' (?c^*) <= timpl_closure' ?c",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Term_Implication.timpl_closure'_timpls_trancl_subset",
     "timpl_closure' (?c^+) <= timpl_closure' ?c",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Term_Implication.timpl_closure_set_empty_timpls",
     "timpl_closure ?t {} = {?t}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Term_Implication.timpl_apply_refl",
     "?t : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>?t\<rangle>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2)))
         )),
    ("Term_Implication.timpl_closure_timpls_trancl_eq",
     "timpl_closure ?t (?c^+) = timpl_closure ?t ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Term_Implication.timpl_closure_set_timpls_trancl_eq",
     "timpl_closure_set ?M (?c^+) = timpl_closure_set ?M ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Term_Implication.timpl_closure_set_timpls_trancl_subset",
     "timpl_closure_set ?M (?c^+) <= timpl_closure_set ?M ?c",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Term_Implication.timpl_closure_Var_not_Fun",
     "Var ?x ~: timpl_closure (Fun ?f ?T) ?TI",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 3)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0))
             )
         )),
    ("Term_Implication.timpl_closure_Fun_not_Var",
     "Fun ?f ?T ~: timpl_closure (Var ?x) ?TI",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0))
             )
         )),
    ("Term_Implication.timpl_closureton_is_timpl_closure",
     "timpl_closure_set {?t} ?TI = timpl_closure ?t ?TI",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Term_Implication.timpl_closure_idem",
     "timpl_closure_set (timpl_closure ?t ?TI) ?TI = timpl_closure ?t ?TI",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Term_Implication.timpl_closure_set_idem",
     "timpl_closure_set (timpl_closure_set ?M ?TI) ?TI =
      timpl_closure_set ?M ?TI",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Term_Implication.timpl_closure'_mono",
     "?TI <= ?TI' ==> timpl_closure' ?TI <= timpl_closure' ?TI'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Term_Implication.timpl_closure_setI",
     "?t : ?M ==> ?t : timpl_closure_set ?M ?TI",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Term_Implication.timpl_closure_set_is_timpl_closure_union",
     "timpl_closure_set ?M ?TI = (UN t:?M. timpl_closure t ?TI)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 1)))),
    ("Term_Implication.timpl_closure_Var_in_iff",
     "(Var ?x : timpl_closure ?t ?TI) = (?t = Var ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 2, template_var 2)))),
    ("Term_Implication.timpl_closure_set_Var_in_iff",
     "(Var ?x : timpl_closure_set ?M ?TI) = (Var ?x : ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 1))),
    ("Term_Implication.timpl_closure_set_Union",
     "timpl_closure_set (\<Union> ?Ms) ?T =
      (UN M:?Ms. timpl_closure_set M ?T)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Term_Implication.timpl_closure_is_timpl_closure'",
     "(?s : timpl_closure ?t ?TI) = ((?t, ?s) : timpl_closure' ?TI)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app (template_hole 0, template_var 0)))),
    ("Term_Implication.timpl_closure_mono",
     "?TI <= ?TI' ==> timpl_closure ?t ?TI <= timpl_closure ?t ?TI'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Term_Implication.timpl_closure_fv_eq",
     "?s : timpl_closure ?t ?T ==> fv ?s = fv ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Term_Implication.timpl_closure_Var_inv",
     "?t : timpl_closure (Var ?x) ?TI ==> ?t = Var ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1)),
                template_var 0))
            )],
       template_equation
        (template_var 2, template_app (template_hole 1, template_var 1)))),
    ("Term_Implication.timpl_apply_term_Var_iff",
     "(Var ?x
       : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>?t\<rangle>) =
      (?t = Var ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_var 0, template_app (template_hole 3, template_var 3)))),
    ("Term_Implication.timpl_apply_const",
     "Fun (Abs ?b) []
      : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>Fun (Abs ?a)
                           []\<rangle>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_hole 2)),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2))))
         )),
    ("Term_Implication.timpl_closure_set_mono_timpl_closure_set",
     "?N <= timpl_closure_set ?M ?TI ==>
      timpl_closure_set ?N ?TI <= timpl_closure_set ?M ?TI",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Term_Implication.timpl_closure_funs_term_subset",
     "\<Union> (funs_term ` timpl_closure ?t ?TI)
      <= funs_term ?t Un Abs ` snd ` ?TI",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Term_Implication.timpl_closurep_timpl_closure_eq",
     "timpl_closurep ?t (%x xa. (x, xa) : ?TI) =
      (%x. x : timpl_closure ?t ?TI)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), t_empty),
       t_empty)),
    ("Term_Implication.timpl_closure_Fun_inv'",
     "Fun ?g ?S : timpl_closure (Fun ?f ?T) ?TI ==> length ?S = length ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 1)))),
    ("Term_Implication.timpl_closure'_stepp_timpl_closure'_step_eq",
     "timpl_closure'_stepp (%x xa. (x, xa) : ?TI) =
      (%x xa. (x, xa) : timpl_closure'_step ?TI)",
     template_equation (template_app (template_hole 5, t_empty), t_empty)),
    ("Term_Implication.timpl_closure_set_funs_term_subset",
     "\<Union> (funs_term ` timpl_closure_set ?FP ?TI)
      <= \<Union> (funs_term ` ?FP) Un Abs ` snd ` ?TI",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Term_Implication.timpl_closure'_inv''",
     "(Fun ?f ?S, Fun ?g ?T) : timpl_closure' ?TI ==>
      length ?S = length ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 1)))),
    ("Term_Implication.timpl_closure_set_mono",
     "[| ?M <= ?M'; ?TI <= ?TI' |]
      ==> timpl_closure_set ?M ?TI <= timpl_closure_set ?M' ?TI'",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Term_Implication.timpl_closure_Fun_inv",
     "?s : timpl_closure (Fun ?f ?T) ?TI ==> EX g S. ?s = Fun g S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Term_Implication.timpl_apply_inv",
     "Fun ?h ?S
      : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>Fun ?f
                           ?T\<rangle> ==>
      length ?T = length ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4)),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 4)))),
    ("Term_Implication.timpl_closure'_timpls_trancl_eq'",
     "timpl_closure' {(a, b). (a, b) : ?c^+ & a ~= b} = timpl_closure' ?c",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))),
       template_app (template_hole 8, template_var 0))),
    ("Term_Implication.timpl_closure'_timpls_trancl_supset'",
     "timpl_closure' ?c <= timpl_closure' {(a, b). (a, b) : ?c^+ & a ~= b}",
     template_inequation
      (less_equals, template_app (template_hole 8, template_var 0),
       template_app
        (template_hole 8,
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))))),
    ("Term_Implication.timpl_closure'_timpls_trancl_subset'",
     "timpl_closure' {(a, b). (a, b) : ?c^+ & a ~= b} <= timpl_closure' ?c",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8,
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))),
       template_app (template_hole 8, template_var 0))),
    ("Term_Implication.timpls_Un_mono",
     "mono
       (%X. ?FP Un
            (UN x:X.
                UN (a, b):?TI.
                   set \<langle>a --\<guillemotright> b\<rangle>\<langle>x\<rangle>))",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Term_Implication.timpl_closure_no_Abs_eq",
     "[| ?t : timpl_closure ?s ?TI; ALL f:funs_term ?t. ~ is_Abs f |]
      ==> ?t = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              t_empty)
            )],
       template_equation (template_var 2, template_var 1))),
    ("Term_Implication.timpl_closure_set_no_Abs_in_set",
     "[| ?t : timpl_closure_set ?FP ?TI; ALL f:funs_term ?t. ~ is_Abs f |]
      ==> ?t : ?FP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), template_var 1)
           ))),
    ("Term_Implication.timpl_apply_term_subst",
     "?s : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>?t\<rangle> ==>
      ?s \<cdot> ?\<delta>
      : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>?t \<cdot>
                          ?\<delta>\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))))
           ))),
    ("Term_Implication.timpl_apply_inv'",
     "?s : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>Fun ?f
                              ?T\<rangle> ==>
      EX g S. ?s = Fun g S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Term_Implication.timpl_closure_set_timpls_trancl_eq'",
     "timpl_closure_set ?M {(a, b). (a, b) : ?c^+ & a ~= b} =
      timpl_closure_set ?M ?c",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))),
       template_app
        (template_app (template_hole 8, template_var 1), template_var 0))),
    ("Term_Implication.timpl_closure_set_timpls_trancl_subset'",
     "timpl_closure_set ?M {(a, b). (a, b) : ?c^+ & a ~= b}
      <= timpl_closure_set ?M ?c",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))),
       template_app
        (template_app (template_hole 8, template_var 1), template_var 0))),
    ("Term_Implication.timpl_apply_const'",
     "?c ~= ?a ==>
      set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>Fun (Abs ?c)
                         []\<rangle> =
      {Fun (Abs ?c) []}",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_hole 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_hole 2)),
           template_hole 0)))),
    ("Term_Implication.timpl_closure_set_lfp",
     "lfp (%X. ?M Un
               (UN x:X.
                   UN (a, b):?TI.
                      set \<langle>a --\<guillemotright> b\<rangle>\<langle>x\<rangle>)) =
      timpl_closure_set ?M ?TI",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Term_Implication.timpl_closure_Fu_inv",
     "?t : timpl_closure (Fun (Fu ?f) ?T) ?TI ==>
      EX S. length S = length ?T & ?t = Fun (Fu ?f) S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2)),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Term_Implication.timpl_closure_Fu_inv'",
     "Fun (Fu ?f) ?T : timpl_closure ?t ?TI ==>
      EX S. length S = length ?T & ?t = Fun (Fu ?f) S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Term_Implication.timpl_apply_const'",
     "?c = ?a ==>
      set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>Fun (Abs ?c)
                         []\<rangle> =
      {Fun (Abs ?b) [], Fun (Abs ?c) []}",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_hole 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_hole 2)),
             template_hole 0))))),
    ("Term_Implication.timpl_closure_set_supset'",
     "ALL t:?FP.
         ALL (a, b):?TI.
            ALL s:set \<langle>a --\<guillemotright> b\<rangle>\<langle>t\<rangle>.
               s : ?FP ==>
      timpl_closure_set ?FP ?TI <= ?FP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Term_Implication.timpl_closure'_param'",
     "(?t, ?s) : timpl_closure' ?c ==>
      (Fun ?f (?S @ ?t # ?T), Fun ?f (?S @ ?s # ?T)) : timpl_closure' ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4)),
              template_app (template_hole 3, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 0)))),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 0))))),
             template_app (template_hole 3, template_var 3))
           ))),
    ("Term_Implication.timpl_closure_Fun_inv'",
     "[| Fun ?g ?S : timpl_closure (Fun ?f ?T) ?TI; ?i < length ?S |]
      ==> ?S ! ?i : timpl_closure (?T ! ?i) ?TI",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1))
           ))),
    ("Term_Implication.term_variants_pred_eq_case_Abs",
     "[| term_variants_pred ((%_. [])(Abs ?a := [Abs ?b])) ?t ?s;
         ALL f:funs_term ?s. ~ is_Abs f |]
      ==> ?t = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_app (template_hole 8, t_empty),
                      template_app (template_hole 6, template_var 3)),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 6, template_var 2)),
                      template_hole 7))),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Term_Implication.timpl_closure'_inv''",
     "[| (Fun ?f ?S, Fun ?g ?T) : timpl_closure' ?TI; ?i < length ?T |]
      ==> (?S ! ?i, ?T ! ?i) : timpl_closure' ?TI",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app (template_hole 3, template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app (template_hole 3, template_var 1))
           ))),
    ("Term_Implication.timpl_apply_inv",
     "[| Fun ?h ?S
         : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>Fun ?f
                              ?T\<rangle>;
         ?f ~= ?h |]
      ==> ?f = Abs ?a & ?h = Abs ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4)),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))))
            ),
        template_negation
         (template_equation (template_var 1, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 0, template_var 3))),
             template_app
              (template_app (template_hole 2, template_var 5),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Term_Implication.timpl_apply_inv",
     "[| Fun ?h ?S
         : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>Fun ?f
                              ?T\<rangle>;
         ?i < length ?T |]
      ==> ?S ! ?i
          : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>?T !
                              ?i\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5)),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("Term_Implication.timpl_closure_Fun_inv'",
     "[| Fun ?g ?S : timpl_closure (Fun ?f ?T) ?TI; ?f ~= ?g |]
      ==> is_Abs ?f & is_Abs ?g & (the_Abs ?f, the_Abs ?g) : ?TI^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 1)),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 2, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 4)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 2)),
                     template_app (template_hole 1, template_var 4))),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Term_Implication.timpl_closure_set_Union_subst_singleton",
     "?s : timpl_closure_set {?t \<cdot> \<delta> |\<delta>. ?P \<delta>}
            ?T ==>
      EX \<delta>.
         ?P \<delta> & ?s : timpl_closure_set {?t \<cdot> \<delta>} ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_hole 7, template_app (template_hole 6, t_empty)),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Term_Implication.timpl_closure'_inv''",
     "[| (Fun ?f ?S, Fun ?g ?T) : timpl_closure' ?TI; ?f ~= ?g |]
      ==> is_Abs ?f & is_Abs ?g & (the_Abs ?f, the_Abs ?g) : ?TI^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 1))),
              template_app (template_hole 8, template_var 0))
            ),
        template_negation
         (template_equation (template_var 4, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 4)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 4)),
                     template_app (template_hole 1, template_var 2))),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Term_Implication.timpl_closure_set_supset",
     "[| ALL t:?FP. t : ?closure;
         ALL t:?closure.
            ALL (a, b):?TI.
               ALL s:set \<langle>a --\<guillemotright> b\<rangle>\<langle>t\<rangle>.
                  s : ?closure |]
      ==> timpl_closure_set ?FP ?TI <= ?closure",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Term_Implication.timpl_closure_set_absc_subset_in",
     "[| timpl_closure_set ((%a. Fun (Abs a) []) ` ?A) ?TI
         <= (%a. Fun (Abs a) []) ` ?A;
         ?a : ?A; (?a, ?b) : ?TI^+ |]
      ==> ?b : ?A",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, t_empty), template_var 3)),
            template_var 2),
          template_app
           (template_app (template_hole 7, t_empty), template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), template_var 3)
           ))),
    ("Term_Implication.timpl_closure_set_Union_subst_set",
     "?s : timpl_closure_set
            (\<Union>
              {?M \<cdot>\<^sub>s\<^sub>e\<^sub>t \<delta> |\<delta>.
               ?P \<delta>})
            ?T ==>
      EX \<delta>.
         ?P \<delta> &
         ?s : timpl_closure_set
               (?M \<cdot>\<^sub>s\<^sub>e\<^sub>t \<delta>) ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, t_empty))),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Term_Implication.timpl_closure'_step_inv",
     "[| (?t, ?s) : timpl_closure'_step ?TI;
         !!a b.
            [| (a, b) : ?TI;
               term_variants_pred ((%_. [])(Abs a := [Abs b])) ?t ?s |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Term_Implication.timpl_closure_FunI'",
     "[| !!i. i < length ?T ==> (?T ! i, ?S ! i) : timpl_closure' ?c;
         length ?T = length ?S |]
      ==> (Fun ?f ?T, Fun ?f ?S) : timpl_closure' ?c",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_app (template_hole 6, template_var 3),
          template_app (template_hole 6, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_app (template_hole 2, template_var 1))
           ))),
    ("Term_Implication.timpl_apply_Fun",
     "[| !!i. i < length ?T ==>
              ?S ! i
              : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>?T !
                                  i\<rangle>;
         length ?T = length ?S |]
      ==> Fun ?f ?S
          : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>Fun ?f
                               ?T\<rangle>",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_app (template_hole 6, template_var 4),
          template_app (template_hole 6, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4))))
           ))),
    ("Term_Implication.funs_term_OCC_TI_subset",
     "[| ALL t:?FP. ALL f:funs_term t. is_Abs f --> f : Abs ` ?OCC;
         snd ` ?TI <= ?OCC |]
      ==> ALL t:timpl_closure_set ?FP ?TI.
             ALL f:funs_term t. is_Abs f --> f : Abs ` ?OCC",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2), t_empty)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 0),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Term_Implication.timpl_apply_Abs",
     "[| !!i. i < length ?T ==>
              ?S ! i
              : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>?T !
                                  i\<rangle>;
         length ?T = length ?S |]
      ==> Fun (Abs ?b) ?S
          : set \<langle>?a --\<guillemotright> ?b\<rangle>\<langle>Fun
                               (Abs ?a) ?T\<rangle>",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_equation
         (template_app (template_hole 7, template_var 3),
          template_app (template_hole 7, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 2)),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 3))))
           ))),
    ("Term_Implication.timpl_closure'_inv",
     "(?s, ?t) : timpl_closure' ?TI ==>
      (EX x. ?s = Var x & ?t = Var x) |
      (EX f g S T. ?s = Fun f S & ?t = Fun g T & length S = length T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_var 1)),
              template_app (template_hole 10, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app (template_hole 4, t_empty))
           ))),
    ("Term_Implication.timpl_closure'_param",
     "[| (?t, ?s) : timpl_closure' ?c;
         ?f = ?g | (EX a b. (a, b) : ?c & ?f = Abs a & ?g = Abs b) |]
      ==> (Fun ?f (?S @ ?t # ?T), Fun ?g (?S @ ?s # ?T))
          : timpl_closure' ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 6),
                  template_var 5)),
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_app (template_hole 7, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 0)))),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 0))))),
             template_app (template_hole 10, template_var 4))
           ))),
    ("Term_Implication.funs_term_OCC_TI_subset",
     "[| ALL t:?FP. ALL f:funs_term t. is_Abs f --> f : Abs ` ?OCC;
         snd ` ?TI <= ?OCC |]
      ==> ALL t:(%a. Fun (Abs a) []) ` ?OCC.
             ALL (a, b):?TI.
                ALL s:set \<langle>a --\<guillemotright> b\<rangle>\<langle>t\<rangle>.
                   s : (%a. Fun (Abs a) []) ` ?OCC",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2), t_empty)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 11, template_hole 10),
            template_var 0),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, t_empty), template_var 1)),
             t_empty)
           ))),
    ("Term_Implication.timpl_closure_FunI",
     "[| !!i. i < length ?T ==> (?T ! i, ?S ! i) : timpl_closure' ?c;
         length ?T = length ?S;
         ?f = ?g | (EX a b. (a, b) : ?c^+ & ?f = Abs a & ?g = Abs b) |]
      ==> (Fun ?f ?T, Fun ?g ?S) : timpl_closure' ?c",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_equation
         (template_app (template_hole 14, template_var 4),
          template_app (template_hole 14, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app (template_hole 6, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3))),
             template_app (template_hole 10, template_var 2))
           ))),
    ("Term_Implication.timpl_closure'_inv'",
     "(?s, ?t) : timpl_closure' ?TI ==>
      (EX x. ?s = Var x & ?t = Var x) |
      (EX f g S T.
          ?s = Fun f S &
          ?t = Fun g T &
          length S = length T &
          (ALL i<length T. (S ! i, T ! i) : timpl_closure' ?TI) &
          (f ~= g -->
           is_Abs f & is_Abs g & (the_Abs f, the_Abs g) : ?TI^+))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 2),
                  template_var 1)),
              template_app (template_hole 21, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 20, template_app (template_hole 19, t_empty)),
             template_app (template_hole 15, t_empty))
           ))),
    ("Term_Implication.timpl_closure_FunI3",
     "[| !!i. i < length ?T ==>
              EX u. (?T ! i, u) : timpl_closure' ?c &
                    (?S ! i, u) : timpl_closure' ?c;
         length ?T = length ?S;
         ?f = ?g |
         (EX a b d. (a, d) : ?c & (b, d) : ?c & ?f = Abs a & ?g = Abs b) |]
      ==> EX h U.
             (Fun ?f ?T, Fun h U) : timpl_closure' ?c &
             (Fun ?g ?S, Fun h U) : timpl_closure' ?c",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_equation
         (template_app (template_hole 16, template_var 4),
          template_app (template_hole 16, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app (template_hole 6, t_empty))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Term_Implication.timpl_closure_FunI2",
     "[| !!i. i < length ?T ==>
              EX u. (?T ! i, u) : timpl_closure' ?c &
                    (?S ! i, u) : timpl_closure' ?c;
         length ?T = length ?S;
         ?f = ?g |
         (EX a b d.
             (a, d) : ?c^+ & (b, d) : ?c^+ & ?f = Abs a & ?g = Abs b) |]
      ==> EX h U.
             (Fun ?f ?T, Fun h U) : timpl_closure' ?c &
             (Fun ?g ?S, Fun h U) : timpl_closure' ?c",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_equation
         (template_app (template_hole 17, template_var 4),
          template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)),
              template_app (template_hole 7, t_empty))
            )],
       template_predicate (template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Term_ImplicationTemplates"
### 1.124s elapsed time, 2.545s cpu time, 1.764s GC time
val it = (): unit
