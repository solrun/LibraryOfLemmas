Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.540s cpu time, 0.053s GC time
Loading theory "Draft.Lib" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras" via "Draft.BigStep")
### theory "HOL-Library.Set_Algebras"
### 0.230s elapsed time, 0.930s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.923s elapsed time, 3.602s cpu time, 0.374s GC time
Loading theory "Draft.Namespace" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras" via "Draft.BigStep")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.070s elapsed time, 4.028s cpu time, 0.941s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.212s elapsed time, 7.731s cpu time, 1.208s GC time
Loading theory "Draft.Templates" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.241s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Big_Step_ClockedTemplates")
Found termination order: "{}"
### theory "Draft.Lib"
### 2.633s elapsed time, 8.887s cpu time, 1.292s GC time
Loading theory "Draft.Ffi" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras" via "Draft.BigStep" via "Draft.SemanticPrimitives")
Loading theory "Draft.FpSem" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras" via "Draft.BigStep" via "Draft.Ast")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.682s elapsed time, 2.231s cpu time, 0.208s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Namespace"
### 3.971s elapsed time, 12.390s cpu time, 1.549s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.FpSem"
### 2.558s elapsed time, 7.474s cpu time, 0.668s GC time
Loading theory "Draft.Ast" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras" via "Draft.BigStep")
### Ambiguous input (line 48 of "$AFP/CakeML/generated/CakeML/Ffi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" initial_ffi_state)
###       ("_cargs" ("_position" oc) ("_position" ffi1)))
###     ("_record"
###       ("_fields" ("_field" ("_constify" oracle0) ("_position" oc))
###         ("_fields" ("_field" ("_constify" ffi_state) ("_position" ffi1))
###           ("_fields" ("_field" ("_constify" final_event) ("_position" None))
###             ("_field" ("_constify" io_events)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" initial_ffi_state)
###       ("_cargs" ("_position" oc) ("_position" ffi1)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" oracle0) ("_position" oc))
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" ffi_state) ("_position" ffi1))
###           ("_datatype_fields"
###             ("_datatype_field" ("_constify" final_event) ("_position" None))
###             ("_datatype_field" ("_constify" io_events)
###               ("\<^const>List.list.Nil"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/CakeML/generated/CakeML/Ffi.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Ffi"
### 5.461s elapsed time, 13.962s cpu time, 2.358s GC time
Found termination order: "{}"
### theory "Draft.Ast"
### 11.852s elapsed time, 17.051s cpu time, 3.976s GC time
Loading theory "Draft.AstAuxiliary" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras")
Loading theory "Draft.SemanticPrimitives" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras" via "Draft.BigStep")
### theory "Draft.AstAuxiliary"
### 0.052s elapsed time, 0.148s cpu time, 0.025s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
### Ambiguous input (line 377 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Closure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" n) ("_position" e))))
###           ("_position" v2))))
###     ("_applC" ("_position" Some)
###       ("_tuple"
###         ("_datatype_record_update" ("_position" env)
###           ("_datatype_field_update" ("_constify" v)
###             ("_applC" ("_position" nsBind)
###               ("_cargs" ("_position" n)
###                 ("_cargs" ("_position" v2)
###                   ("_applC" ("_position" v) ("_position" env)))))))
###         ("_tuple_arg" ("_position" e))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Closure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" n) ("_position" e))))
###           ("_position" v2))))
###     ("_applC" ("_position" Some)
###       ("_tuple"
###         ("_record_update" ("_position" env)
###           ("_field_update" ("_constify" v)
###             ("_applC" ("_position" nsBind)
###               ("_cargs" ("_position" n)
###                 ("_cargs" ("_position" v2)
###                   ("_applC" ("_position" v) ("_position" env)))))))
###         ("_tuple_arg" ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 379 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Recclosure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" funs) ("_position" n))))
###           ("_position" v2))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" f)
###                     ("_tuple_args" ("_position" x)
###                       ("_tuple_arg" ("_position" e))))
###                   ("_position" f))))
###             ("_position" funs))))
###       ("_case_syntax"
###         ("_applC" ("_position" find_recfun)
###           ("_cargs" ("_position" n) ("_position" funs)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" n) ("_tuple_arg" ("_position" e))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_record_update" ("_position" env)
###                   ("_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsBind)
###                       ("_cargs" ("_position" n)
###                         ("_cargs" ("_position" v2)
###                           ("_applC" ("_position" build_rec_env)
###                             ("_cargs" ("_position" funs)
###                               ("_cargs" ("_position" env)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env))))))))))
###                 ("_tuple_arg" ("_position" e)))))
###           ("_case1" ("_position" None) ("_position" None))))
###       ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Recclosure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" funs) ("_position" n))))
###           ("_position" v2))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" f)
###                     ("_tuple_args" ("_position" x)
###                       ("_tuple_arg" ("_position" e))))
###                   ("_position" f))))
###             ("_position" funs))))
###       ("_case_syntax"
###         ("_applC" ("_position" find_recfun)
###           ("_cargs" ("_position" n) ("_position" funs)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" n) ("_tuple_arg" ("_position" e))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" env)
###                   ("_datatype_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsBind)
###                       ("_cargs" ("_position" n)
###                         ("_cargs" ("_position" v2)
###                           ("_applC" ("_position" build_rec_env)
###                             ("_cargs" ("_position" funs)
###                               ("_cargs" ("_position" env)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env))))))))))
###                 ("_tuple_arg" ("_position" e)))))
###           ("_case1" ("_position" None) ("_position" None))))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 939 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" combine_dec_result)
###       ("_cargs" ("_position" env)
###         ("_applC" ("_position" Rval) ("_position" env'))))
###     ("_applC" ("_position" Rval)
###       ("_record"
###         ("_fields"
###           ("_field" ("_constify" v)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" v) ("_position" env'))
###                 ("_applC" ("_position" v) ("_position" env)))))
###           ("_field" ("_constify" c)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env'))
###                 ("_applC" ("_position" c) ("_position" env))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" combine_dec_result)
###       ("_cargs" ("_position" env)
###         ("_applC" ("_position" Rval) ("_position" env'))))
###     ("_applC" ("_position" Rval)
###       ("_datatype_record"
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" v)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" v) ("_position" env'))
###                 ("_applC" ("_position" v) ("_position" env)))))
###           ("_datatype_field" ("_constify" c)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env'))
###                 ("_applC" ("_position" c) ("_position" env))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 944 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extend_dec_env)
###       ("_cargs" ("_position" new_env) ("_position" env)))
###     ("_record"
###       ("_fields"
###         ("_field" ("_constify" v)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" v) ("_position" new_env))
###               ("_applC" ("_position" v) ("_position" env)))))
###         ("_field" ("_constify" c)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" c) ("_position" new_env))
###               ("_applC" ("_position" c) ("_position" env)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extend_dec_env)
###       ("_cargs" ("_position" new_env) ("_position" env)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" v)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" v) ("_position" new_env))
###               ("_applC" ("_position" v) ("_position" env)))))
###         ("_datatype_field" ("_constify" c)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" c) ("_position" new_env))
###               ("_applC" ("_position" c) ("_position" env)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SemanticPrimitives"
### 26.619s elapsed time, 47.696s cpu time, 30.411s GC time
Loading theory "Draft.Evaluate" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras")
Loading theory "Draft.SmallStep" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras" via "Draft.BigStep")
Loading theory "Draft.SemanticPrimitivesAuxiliary" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras")
### Ambiguous input (line 29 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fix_clock)
###       ("_cargs" ("_position" s)
###         ("_tuple" ("_position" s') ("_tuple_arg" ("_position" res)))))
###     ("_tuple"
###       ("_datatype_record_update" ("_position" s')
###         ("_datatype_field_update" ("_constify" clock)
###           ("\<^const>HOL.If"
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("_applC" ("_position" clock) ("_position" s)))
###             ("_applC" ("_position" clock) ("_position" s'))
###             ("_applC" ("_position" clock) ("_position" s)))))
###       ("_tuple_arg" ("_position" res)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fix_clock)
###       ("_cargs" ("_position" s)
###         ("_tuple" ("_position" s') ("_tuple_arg" ("_position" res)))))
###     ("_tuple"
###       ("_record_update" ("_position" s')
###         ("_field_update" ("_constify" clock)
###           ("\<^const>HOL.If"
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("_applC" ("_position" clock) ("_position" s)))
###             ("_applC" ("_position" clock) ("_position" s'))
###             ("_applC" ("_position" clock) ("_position" s)))))
###       ("_tuple_arg" ("_position" res)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 35 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" dec_clock) ("_position" s))
###     ("_record_update" ("_position" s)
###       ("_field_update" ("_constify" clock)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" clock) ("_position" s))
###           ("_constrain" ("\<^const>Groups.one_class.one")
###             ("_type_name" nat)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" dec_clock) ("_position" s))
###     ("_datatype_record_update" ("_position" s)
###       ("_datatype_field_update" ("_constify" clock)
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" clock) ("_position" s))
###           ("_constrain" ("\<^const>Groups.one_class.one")
###             ("_type_name" nat)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SemanticPrimitivesAuxiliary"
### 0.175s elapsed time, 0.559s cpu time, 0.040s GC time
Found termination order: "{}"
### Ambiguous input (line 148 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" Let)
###               ("_cargs" ("_position" xo)
###                 ("_cargs" ("_position" e1) ("_position" e2))))))))
###     ("_case_syntax"
###       ("_applC" ("_position" fix_clock)
###         ("_cargs" ("_position" st)
###           ("_applC" ("_position" fun_evaluate)
###             ("_cargs" ("_position" st)
###               ("_cargs" ("_position" env) ("_list" ("_position" e1)))))))
###       ("_case2"
###         ("_case1"
###           ("_tuple" ("_position" st')
###             ("_tuple_arg" ("_applC" ("_position" Rval) ("_position" v2))))
###           ("_applC" ("_position" fun_evaluate)
###             ("_cargs" ("_position" st')
###               ("_cargs"
###                 ("_record_update" ("_position" env)
###                   ("_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsOptBind)
###                       ("_cargs" ("_position" xo)
###                         ("_cargs"
###                           ("_applC" ("_position" List.hd) ("_position" v2))
###                           ("_applC" ("_position" v) ("_position" env)))))))
###                 ("_list" ("_position" e2))))))
###         ("_case1" ("_position" res) ("_position" res))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" Let)
###               ("_cargs" ("_position" xo)
###                 ("_cargs" ("_position" e1) ("_position" e2))))))))
###     ("_case_syntax"
###       ("_applC" ("_position" fix_clock)
###         ("_cargs" ("_position" st)
###           ("_applC" ("_position" fun_evaluate)
###             ("_cargs" ("_position" st)
###               ("_cargs" ("_position" env) ("_list" ("_position" e1)))))))
###       ("_case2"
###         ("_case1"
###           ("_tuple" ("_position" st')
###             ("_tuple_arg" ("_applC" ("_position" Rval) ("_position" v2))))
###           ("_applC" ("_position" fun_evaluate)
###             ("_cargs" ("_position" st')
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" env)
###                   ("_datatype_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsOptBind)
###                       ("_cargs" ("_position" xo)
###                         ("_cargs"
###                           ("_applC" ("_position" List.hd) ("_position" v2))
###                           ("_applC" ("_position" v) ("_position" env)))))))
###                 ("_list" ("_position" e2))))))
###         ("_case1" ("_position" res) ("_position" res))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" Letrec)
###               ("_cargs" ("_position" funs) ("_position" e)))))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" y)
###                       ("_tuple_arg" ("_position" z))))
###                   ("_position" x))))
###             ("_position" funs))))
###       ("_applC" ("_position" fun_evaluate)
###         ("_cargs" ("_position" st)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" env)
###               ("_datatype_field_update" ("_constify" v)
###                 ("_applC" ("_position" build_rec_env)
###                   ("_cargs" ("_position" funs)
###                     ("_cargs" ("_position" env)
###                       ("_applC" ("_position" v) ("_position" env)))))))
###             ("_list" ("_position" e)))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" Letrec)
###               ("_cargs" ("_position" funs) ("_position" e)))))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" y)
###                       ("_tuple_arg" ("_position" z))))
###                   ("_position" x))))
###             ("_position" funs))))
###       ("_applC" ("_position" fun_evaluate)
###         ("_cargs" ("_position" st)
###           ("_cargs"
###             ("_record_update" ("_position" env)
###               ("_field_update" ("_constify" v)
###                 ("_applC" ("_position" build_rec_env)
###                   ("_cargs" ("_position" funs)
###                     ("_cargs" ("_position" env)
###                       ("_applC" ("_position" v) ("_position" env)))))))
###             ("_list" ("_position" e)))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_match)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" v2)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_tuple" ("_position" p) ("_tuple_arg" ("_position" e)))
###                 ("_position" pes))
###               ("_position" err_v))))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" pat_bindings)
###           ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###       ("_case_syntax"
###         ("_applC" ("_position" pmatch)
###           ("_cargs" ("_applC" ("_position" c) ("_position" env))
###             ("_cargs" ("_applC" ("_position" refs) ("_position" st))
###               ("_cargs" ("_position" p)
###                 ("_cargs" ("_position" v2) ("\<^const>List.list.Nil"))))))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Match) ("_position" env_v'))
###             ("_applC" ("_position" fun_evaluate)
###               ("_cargs" ("_position" st)
###                 ("_cargs"
###                   ("_record_update" ("_position" env)
###                     ("_field_update" ("_constify" v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env_v'))
###                           ("_applC" ("_position" v) ("_position" env))))))
###                   ("_list" ("_position" e))))))
###           ("_case2"
###             ("_case1" ("_position" No_match)
###               ("_applC" ("_position" fun_evaluate_match)
###                 ("_cargs" ("_position" st)
###                   ("_cargs" ("_position" env)
###                     ("_cargs" ("_position" v2)
###                       ("_cargs" ("_position" pes) ("_position" err_v)))))))
###             ("_case1" ("_position" Match_type_error)
###               ("_tuple" ("_position" st)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" Rerr)
###                     ("_applC" ("_position" Rabort)
###                       ("_position" Rtype_error)))))))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_match)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" v2)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_tuple" ("_position" p) ("_tuple_arg" ("_position" e)))
###                 ("_position" pes))
###               ("_position" err_v))))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" pat_bindings)
###           ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###       ("_case_syntax"
###         ("_applC" ("_position" pmatch)
###           ("_cargs" ("_applC" ("_position" c) ("_position" env))
###             ("_cargs" ("_applC" ("_position" refs) ("_position" st))
###               ("_cargs" ("_position" p)
###                 ("_cargs" ("_position" v2) ("\<^const>List.list.Nil"))))))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Match) ("_position" env_v'))
###             ("_applC" ("_position" fun_evaluate)
###               ("_cargs" ("_position" st)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" env)
###                     ("_datatype_field_update" ("_constify" v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env_v'))
###                           ("_applC" ("_position" v) ("_position" env))))))
###                   ("_list" ("_position" e))))))
###           ("_case2"
###             ("_case1" ("_position" No_match)
###               ("_applC" ("_position" fun_evaluate_match)
###                 ("_cargs" ("_position" st)
###                   ("_cargs" ("_position" env)
###                     ("_cargs" ("_position" v2)
###                       ("_cargs" ("_position" pes) ("_position" err_v)))))))
###             ("_case1" ("_position" Match_type_error)
###               ("_tuple" ("_position" st)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" Rerr)
###                     ("_applC" ("_position" Rabort)
###                       ("_position" Rtype_error)))))))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" op1) ("_position" es)))))))
###     ("_case_syntax"
###       ("_applC" ("_position" fix_clock)
###         ("_cargs" ("_position" st)
###           ("_applC" ("_position" fun_evaluate)
###             ("_cargs" ("_position" st)
###               ("_cargs" ("_position" env)
###                 ("_applC" ("_position" List.rev) ("_position" es)))))))
###       ("_case2"
###         ("_case1"
###           ("_tuple" ("_position" st')
###             ("_tuple_arg" ("_applC" ("_position" Rval) ("_position" vs))))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" op1) ("_position" Opapp))
###             ("_case_syntax"
###               ("_applC" ("_position" do_opapp)
###                 ("_applC" ("_position" List.rev) ("_position" vs)))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" env')
###                       ("_tuple_arg" ("_position" e))))
###                   ("\<^const>HOL.If"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" clock) ("_position" st'))
###                       ("_constrain" ("\<^const>Groups.zero_class.zero")
###                         ("_type_name" nat)))
###                     ("_tuple" ("_position" st')
###                       ("_tuple_arg"
###                         ("_applC" ("_position" Rerr)
###                           ("_applC" ("_position" Rabort)
###                             ("_position" Rtimeout_error)))))
###                     ("_applC" ("_position" fun_evaluate)
###                       ("_cargs"
###                         ("_applC" ("_position" dec_clock) ("_position" st'))
###                         ("_cargs" ("_position" env')
###                           ("_list" ("_position" e)))))))
###                 ("_case1" ("_position" None)
###                   ("_tuple" ("_position" st')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rerr)
###                         ("_applC" ("_position" Rabort)
###                           ("_position" Rtype_error))))))))
###             ("_case_syntax"
###               ("_applC" ("_position" do_app)
###                 ("_cargs"
###                   ("_tuple" ("_applC" ("_position" refs) ("_position" st'))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" ffi) ("_position" st'))))
###                   ("_cargs" ("_position" op1)
###                     ("_applC" ("_position" List.rev) ("_position" vs)))))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("_tuple"
###                       ("_tuple" ("_position" refs1)
###                         ("_tuple_arg" ("_position" ffi1)))
###                       ("_tuple_arg" ("_position" r))))
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" st')
###                       ("_datatype_field_updates"
###                         ("_datatype_field_update" ("_constify" refs)
###                           ("_position" refs1))
###                         ("_datatype_field_update" ("_constify" ffi)
###                           ("_position" ffi1))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" list_result)
###                         ("_position" r)))))
###                 ("_case1" ("_position" None)
###                   ("_tuple" ("_position" st')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rerr)
###                         ("_applC" ("_position" Rabort)
###                           ("_position" Rtype_error))))))))))
###         ("_case1" ("_position" res) ("_position" res))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" App)
###               ("_cargs" ("_position" op1) ("_position" es)))))))
###     ("_case_syntax"
###       ("_applC" ("_position" fix_clock)
###         ("_cargs" ("_position" st)
###           ("_applC" ("_position" fun_evaluate)
###             ("_cargs" ("_position" st)
###               ("_cargs" ("_position" env)
###                 ("_applC" ("_position" List.rev) ("_position" es)))))))
###       ("_case2"
###         ("_case1"
###           ("_tuple" ("_position" st')
###             ("_tuple_arg" ("_applC" ("_position" Rval) ("_position" vs))))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq" ("_position" op1) ("_position" Opapp))
###             ("_case_syntax"
###               ("_applC" ("_position" do_opapp)
###                 ("_applC" ("_position" List.rev) ("_position" vs)))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("_tuple" ("_position" env')
###                       ("_tuple_arg" ("_position" e))))
###                   ("\<^const>HOL.If"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" clock) ("_position" st'))
###                       ("_constrain" ("\<^const>Groups.zero_class.zero")
###                         ("_type_name" nat)))
###                     ("_tuple" ("_position" st')
###                       ("_tuple_arg"
###                         ("_applC" ("_position" Rerr)
###                           ("_applC" ("_position" Rabort)
###                             ("_position" Rtimeout_error)))))
###                     ("_applC" ("_position" fun_evaluate)
###                       ("_cargs"
###                         ("_applC" ("_position" dec_clock) ("_position" st'))
###                         ("_cargs" ("_position" env')
###                           ("_list" ("_position" e)))))))
###                 ("_case1" ("_position" None)
###                   ("_tuple" ("_position" st')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rerr)
###                         ("_applC" ("_position" Rabort)
###                           ("_position" Rtype_error))))))))
###             ("_case_syntax"
###               ("_applC" ("_position" do_app)
###                 ("_cargs"
###                   ("_tuple" ("_applC" ("_position" refs) ("_position" st'))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" ffi) ("_position" st'))))
###                   ("_cargs" ("_position" op1)
###                     ("_applC" ("_position" List.rev) ("_position" vs)))))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("_tuple"
###                       ("_tuple" ("_position" refs1)
###                         ("_tuple_arg" ("_position" ffi1)))
###                       ("_tuple_arg" ("_position" r))))
###                   ("_tuple"
###                     ("_record_update" ("_position" st')
###                       ("_field_updates"
###                         ("_field_update" ("_constify" refs)
###                           ("_position" refs1))
###                         ("_field_update" ("_constify" ffi)
###                           ("_position" ffi1))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" list_result)
###                         ("_position" r)))))
###                 ("_case1" ("_position" None)
###                   ("_tuple" ("_position" st')
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rerr)
###                         ("_applC" ("_position" Rabort)
###                           ("_position" Rtype_error))))))))))
###         ("_case1" ("_position" res) ("_position" res))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/CakeML/generated/CakeML/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" continue)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" v2)
###           ("\<^const>List.list.Cons"
###             ("_tuple"
###               ("_applC" ("_position" Cmat)
###                 ("_cargs" ("\<^const>Pure.dummy_pattern")
###                   ("_cargs"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" p)
###                         ("_tuple_arg" ("_position" e)))
###                       ("_position" pes))
###                     ("_position" err_v))))
###               ("_tuple_arg" ("_position" env)))
###             ("_position" c2)))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" Lem_list.allDistinct)
###         ("_applC" ("_position" pat_bindings)
###           ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###       ("_case_syntax"
###         ("_applC" ("_position" pmatch)
###           ("_cargs" ("_applC" ("_position" c) ("_position" env))
###             ("_cargs" ("_applC" ("_position" fst) ("_position" s))
###               ("_cargs" ("_position" p)
###                 ("_cargs" ("_position" v2) ("\<^const>List.list.Nil"))))))
###         ("_case2"
###           ("_case1" ("_position" Match_type_error)
###             ("_applC" ("_position" Eabort) ("_position" Rtype_error)))
###           ("_case2"
###             ("_case1" ("_position" No_match)
###               ("_applC" ("_position" Estep)
###                 ("_tuple" ("_position" env)
###                   ("_tuple_args" ("_position" s)
###                     ("_tuple_args"
###                       ("_applC" ("_position" Val) ("_position" v2))
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple"
###                             ("_applC" ("_position" Cmat)
###                               ("_cargs" ("\<^const>Product_Type.Unity")
###                                 ("_cargs" ("_position" pes)
###                                   ("_position" err_v))))
###                             ("_tuple_arg" ("_position" env)))
###                           ("_position" c2))))))))
###             ("_case1" ("_applC" ("_position" Match) ("_position" env'))
###               ("_applC" ("_position" Estep)
###                 ("_tuple"
###                   ("_record_update" ("_position" env)
###                     ("_field_update" ("_constify" v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env'))
###                           ("_applC" ("_position" v) ("_position" env))))))
###                   ("_tuple_args" ("_position" s)
###                     ("_tuple_args"
###                       ("_applC" ("_position" Exp) ("_position" e))
###                       ("_tuple_arg" ("_position" c2))))))))))
###       ("_applC" ("_position" Eabort) ("_position" Rtype_error)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" continue)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" v2)
###           ("\<^const>List.list.Cons"
###             ("_tuple"
###               ("_applC" ("_position" Cmat)
###                 ("_cargs" ("\<^const>Pure.dummy_pattern")
###                   ("_cargs"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" p)
###                         ("_tuple_arg" ("_position" e)))
###                       ("_position" pes))
###                     ("_position" err_v))))
###               ("_tuple_arg" ("_position" env)))
###             ("_position" c2)))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" Lem_list.allDistinct)
###         ("_applC" ("_position" pat_bindings)
###           ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###       ("_case_syntax"
###         ("_applC" ("_position" pmatch)
###           ("_cargs" ("_applC" ("_position" c) ("_position" env))
###             ("_cargs" ("_applC" ("_position" fst) ("_position" s))
###               ("_cargs" ("_position" p)
###                 ("_cargs" ("_position" v2) ("\<^const>List.list.Nil"))))))
###         ("_case2"
###           ("_case1" ("_position" Match_type_error)
###             ("_applC" ("_position" Eabort) ("_position" Rtype_error)))
###           ("_case2"
###             ("_case1" ("_position" No_match)
###               ("_applC" ("_position" Estep)
###                 ("_tuple" ("_position" env)
###                   ("_tuple_args" ("_position" s)
###                     ("_tuple_args"
###                       ("_applC" ("_position" Val) ("_position" v2))
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple"
###                             ("_applC" ("_position" Cmat)
###                               ("_cargs" ("\<^const>Product_Type.Unity")
###                                 ("_cargs" ("_position" pes)
###                                   ("_position" err_v))))
###                             ("_tuple_arg" ("_position" env)))
###                           ("_position" c2))))))))
###             ("_case1" ("_applC" ("_position" Match) ("_position" env'))
###               ("_applC" ("_position" Estep)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" env)
###                     ("_datatype_field_update" ("_constify" v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env'))
###                           ("_applC" ("_position" v) ("_position" env))))))
###                   ("_tuple_args" ("_position" s)
###                     ("_tuple_args"
###                       ("_applC" ("_position" Exp) ("_position" e))
###                       ("_tuple_arg" ("_position" c2))))))))))
###       ("_applC" ("_position" Eabort) ("_position" Rtype_error)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/CakeML/generated/CakeML/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" continue)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" v2)
###           ("\<^const>List.list.Cons"
###             ("_tuple"
###               ("_applC" ("_position" Clet)
###                 ("_cargs" ("_position" n)
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_position" e))))
###               ("_tuple_arg" ("_position" env)))
###             ("_position" c2)))))
###     ("_applC" ("_position" Estep)
###       ("_tuple"
###         ("_datatype_record_update" ("_position" env)
###           ("_datatype_field_update" ("_constify" v)
###             ("_applC" ("_position" nsOptBind)
###               ("_cargs" ("_position" n)
###                 ("_cargs" ("_position" v2)
###                   ("_applC" ("_position" v) ("_position" env)))))))
###         ("_tuple_args" ("_position" s)
###           ("_tuple_args" ("_applC" ("_position" Exp) ("_position" e))
###             ("_tuple_arg" ("_position" c2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" continue)
###       ("_cargs" ("_position" s)
###         ("_cargs" ("_position" v2)
###           ("\<^const>List.list.Cons"
###             ("_tuple"
###               ("_applC" ("_position" Clet)
###                 ("_cargs" ("_position" n)
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_position" e))))
###               ("_tuple_arg" ("_position" env)))
###             ("_position" c2)))))
###     ("_applC" ("_position" Estep)
###       ("_tuple"
###         ("_record_update" ("_position" env)
###           ("_field_update" ("_constify" v)
###             ("_applC" ("_position" nsOptBind)
###               ("_cargs" ("_position" n)
###                 ("_cargs" ("_position" v2)
###                   ("_applC" ("_position" v) ("_position" env)))))))
###         ("_tuple_args" ("_position" s)
###           ("_tuple_args" ("_applC" ("_position" Exp) ("_position" e))
###             ("_tuple_arg" ("_position" c2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 169 of "$AFP/CakeML/generated/CakeML/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" e_step)
###       ("_tuple" ("_position" env)
###         ("_tuple_args" ("_position" s)
###           ("_tuple_args" ("_applC" ("_position" Exp) ("_position" e))
###             ("_tuple_arg" ("_position" c2))))))
###     ("_case_syntax" ("_position" e)
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Lit) ("_position" l))
###           ("_applC" ("_position" return)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_applC" ("_position" Litv) ("_position" l))
###                   ("_position" c2))))))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Raise) ("_position" e))
###             ("_applC" ("_position" push)
###               ("_cargs" ("_position" env)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" e)
###                     ("_cargs"
###                       ("_applC" ("_position" Craise)
###                         ("\<^const>Product_Type.Unity"))
###                       ("_position" c2)))))))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" Handle)
###                 ("_cargs" ("_position" e) ("_position" pes)))
###               ("_applC" ("_position" push)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" e)
###                       ("_cargs"
###                         ("_applC" ("_position" Chandle)
###                           ("_cargs" ("\<^const>Product_Type.Unity")
###                             ("_position" pes)))
###                         ("_position" c2)))))))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" Con)
###                   ("_cargs" ("_position" n) ("_position" es)))
###                 ("\<^const>HOL.If"
###                   ("_applC" ("_position" do_con_check)
###                     ("_cargs" ("_applC" ("_position" c) ("_position" env))
###                       ("_cargs" ("_position" n)
###                         ("_applC" ("_position" List.length)
###                           ("_position" es)))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" List.rev) ("_position" es))
###                     ("_case2"
###                       ("_case1" ("\<^const>List.list.Nil")
###                         ("_case_syntax"
###                           ("_applC" ("_position" build_conv)
###                             ("_cargs"
###                               ("_applC" ("_position" c) ("_position" env))
###                               ("_cargs" ("_position" n)
###                                 ("\<^const>List.list.Nil"))))
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("_position" Eabort)
###                                 ("_position" Rtype_error)))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" v2))
###                               ("_applC" ("_position" return)
###                                 ("_cargs" ("_position" env)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" v2)
### ("_position" c2)))))))))
###                       ("_case1"
###                         ("\<^const>List.list.Cons" ("_position" e)
###                           ("_position" es))
###                         ("_applC" ("_position" push)
###                           ("_cargs" ("_position" env)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" e)
###                                 ("_cargs"
###                                   ("_applC" ("_position" Ccon)
###                                     ("_cargs" ("_position" n)
### ("_cargs" ("\<^const>List.list.Nil")
###   ("_cargs" ("\<^const>Product_Type.Unity") ("_position" es)))))
###                                   ("_position" c2)))))))))
###                   ("_applC" ("_position" Eabort)
###                     ("_position" Rtype_error))))
###               ("_case2"
###                 ("_case1" ("_applC" ("_position" Var) ("_position" n))
###                   ("_case_syntax"
###                     ("_applC" ("_position" nsLookup)
###                       ("_cargs" ("_applC" ("_position" v) ("_position" env))
###                         ("_position" n)))
###                     ("_case2"
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Eabort)
###                           ("_position" Rtype_error)))
###                       ("_case1"
###                         ("_applC" ("_position" Some) ("_position" v2))
###                         ("_applC" ("_position" return)
###                           ("_cargs" ("_position" env)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" v2)
###                                 ("_position" c2)))))))))
###                 ("_case2"
###                   ("_case1"
###                     ("_applC" ("_position" Fun)
###                       ("_cargs" ("_position" n) ("_position" e)))
###                     ("_applC" ("_position" return)
###                       ("_cargs" ("_position" env)
###                         ("_cargs" ("_position" s)
###                           ("_cargs"
###                             ("_applC" ("_position" Closure)
###                               ("_cargs" ("_position" env)
###                                 ("_cargs" ("_position" n) ("_position" e))))
###                             ("_position" c2))))))
###                   ("_case2"
###                     ("_case1"
###                       ("_applC" ("_position" App)
###                         ("_cargs" ("_position" op1) ("_position" es)))
###                       ("_case_syntax"
###                         ("_applC" ("_position" List.rev) ("_position" es))
###                         ("_case2"
###                           ("_case1" ("\<^const>List.list.Nil")
###                             ("_applC" ("_position" application)
###                               ("_cargs" ("_position" op1)
###                                 ("_cargs" ("_position" env)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("\<^const>List.list.Nil")
### ("_position" c2)))))))
###                           ("_case1"
###                             ("\<^const>List.list.Cons" ("_position" e)
###                               ("_position" es))
###                             ("_applC" ("_position" push)
###                               ("_cargs" ("_position" env)
###                                 ("_cargs" ("_position" s)
###                                   ("_cargs" ("_position" e)
###                                     ("_cargs"
### ("_applC" ("_position" Capp)
###   ("_cargs" ("_position" op1)
###     ("_cargs" ("\<^const>List.list.Nil")
###       ("_cargs" ("\<^const>Product_Type.Unity") ("_position" es)))))
### ("_position" c2))))))))))
###                     ("_case2"
###                       ("_case1"
###                         ("_applC" ("_position" Log)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" e1) ("_position" e2))))
###                         ("_applC" ("_position" push)
###                           ("_cargs" ("_position" env)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" e1)
###                                 ("_cargs"
###                                   ("_applC" ("_position" Clog)
###                                     ("_cargs" ("_position" l)
### ("_cargs" ("\<^const>Product_Type.Unity") ("_position" e2))))
###                                   ("_position" c2)))))))
###                       ("_case2"
###                         ("_case1"
###                           ("_applC" ("_position" If)
###                             ("_cargs" ("_position" e1)
###                               ("_cargs" ("_position" e2) ("_position" e3))))
###                           ("_applC" ("_position" push)
###                             ("_cargs" ("_position" env)
###                               ("_cargs" ("_position" s)
###                                 ("_cargs" ("_position" e1)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Cif)
### ("_cargs" ("\<^const>Product_Type.Unity")
###   ("_cargs" ("_position" e2) ("_position" e3))))
###                                     ("_position" c2)))))))
###                         ("_case2"
###                           ("_case1"
###                             ("_applC" ("_position" Mat)
###                               ("_cargs" ("_position" e) ("_position" pes)))
###                             ("_applC" ("_position" push)
###                               ("_cargs" ("_position" env)
###                                 ("_cargs" ("_position" s)
###                                   ("_cargs" ("_position" e)
###                                     ("_cargs"
### ("_applC" ("_position" Cmat)
###   ("_cargs" ("\<^const>Product_Type.Unity")
###     ("_cargs" ("_position" pes)
###       ("_applC" ("_position" Conv)
###         ("_cargs"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_String" ("_position" ''Bind''))
###               ("_tuple_arg"
###                 ("_applC" ("_position" TypeExn)
###                   ("_applC" ("_position" Short)
###                     ("_String" ("_position" ''Bind'')))))))
###           ("\<^const>List.list.Nil"))))))
### ("_position" c2)))))))
###                           ("_case2"
###                             ("_case1"
###                               ("_applC" ("_position" Let)
###                                 ("_cargs" ("_position" n)
###                                   ("_cargs" ("_position" e1)
###                                     ("_position" e2))))
###                               ("_applC" ("_position" push)
###                                 ("_cargs" ("_position" env)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" e1)
### ("_cargs"
###   ("_applC" ("_position" Clet)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("\<^const>Product_Type.Unity") ("_position" e2))))
###   ("_position" c2)))))))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Letrec)
###                                   ("_cargs" ("_position" funs)
###                                     ("_position" e)))
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.Not"
###                                     ("_applC" ("_position" allDistinct)
### ("_applC" ("_position" List.map)
###   ("_cargs"
###     ("_lambda" ("_position" x)
###       ("_case_syntax" ("_position" x)
###         ("_case1"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" y) ("_tuple_arg" ("_position" z))))
###           ("_position" x))))
###     ("_position" funs)))))
###                                   ("_applC" ("_position" Eabort)
###                                     ("_position" Rtype_error))
###                                   ("_applC" ("_position" Estep)
###                                     ("_tuple"
### ("_record_update" ("_position" env)
###   ("_field_update" ("_constify" v)
###     ("_applC" ("_position" build_rec_env)
###       ("_cargs" ("_position" funs)
###         ("_cargs" ("_position" env)
###           ("_applC" ("_position" v) ("_position" env)))))))
### ("_tuple_args" ("_position" s)
###   ("_tuple_args" ("_applC" ("_position" Exp) ("_position" e))
###     ("_tuple_arg" ("_position" c2))))))))
###                               ("_case2"
###                                 ("_case1"
###                                   ("_applC" ("_position" Tannot)
###                                     ("_cargs" ("_position" e)
### ("_position" t1)))
###                                   ("_applC" ("_position" push)
###                                     ("_cargs" ("_position" env)
### ("_cargs" ("_position" s)
###   ("_cargs" ("_position" e)
###     ("_cargs"
###       ("_applC" ("_position" Ctannot)
###         ("_cargs" ("\<^const>Product_Type.Unity") ("_position" t1)))
###       ("_position" c2)))))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Lannot)
###                                     ("_cargs" ("_position" e)
### ("_position" l)))
###                                   ("_applC" ("_position" push)
###                                     ("_cargs" ("_position" env)
### ("_cargs" ("_position" s)
###   ("_cargs" ("_position" e)
###     ("_cargs"
###       ("_applC" ("_position" Clannot)
###         ("_cargs" ("\<^const>Product_Type.Unity") ("_position" l)))
###       ("_position" c2)))))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" e_step)
###       ("_tuple" ("_position" env)
###         ("_tuple_args" ("_position" s)
###           ("_tuple_args" ("_applC" ("_position" Exp) ("_position" e))
###             ("_tuple_arg" ("_position" c2))))))
###     ("_case_syntax" ("_position" e)
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Lit) ("_position" l))
###           ("_applC" ("_position" return)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_applC" ("_position" Litv) ("_position" l))
###                   ("_position" c2))))))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Raise) ("_position" e))
###             ("_applC" ("_position" push)
###               ("_cargs" ("_position" env)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" e)
###                     ("_cargs"
###                       ("_applC" ("_position" Craise)
###                         ("\<^const>Product_Type.Unity"))
###                       ("_position" c2)))))))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" Handle)
###                 ("_cargs" ("_position" e) ("_position" pes)))
###               ("_applC" ("_position" push)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" e)
###                       ("_cargs"
###                         ("_applC" ("_position" Chandle)
###                           ("_cargs" ("\<^const>Product_Type.Unity")
###                             ("_position" pes)))
###                         ("_position" c2)))))))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" Con)
###                   ("_cargs" ("_position" n) ("_position" es)))
###                 ("\<^const>HOL.If"
###                   ("_applC" ("_position" do_con_check)
###                     ("_cargs" ("_applC" ("_position" c) ("_position" env))
###                       ("_cargs" ("_position" n)
###                         ("_applC" ("_position" List.length)
###                           ("_position" es)))))
###                   ("_case_syntax"
###                     ("_applC" ("_position" List.rev) ("_position" es))
###                     ("_case2"
###                       ("_case1" ("\<^const>List.list.Nil")
###                         ("_case_syntax"
###                           ("_applC" ("_position" build_conv)
###                             ("_cargs"
###                               ("_applC" ("_position" c) ("_position" env))
###                               ("_cargs" ("_position" n)
###                                 ("\<^const>List.list.Nil"))))
###                           ("_case2"
###                             ("_case1" ("_position" None)
###                               ("_applC" ("_position" Eabort)
###                                 ("_position" Rtype_error)))
###                             ("_case1"
###                               ("_applC" ("_position" Some) ("_position" v2))
###                               ("_applC" ("_position" return)
###                                 ("_cargs" ("_position" env)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" v2)
### ("_position" c2)))))))))
###                       ("_case1"
###                         ("\<^const>List.list.Cons" ("_position" e)
###                           ("_position" es))
###                         ("_applC" ("_position" push)
###                           ("_cargs" ("_position" env)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" e)
###                                 ("_cargs"
###                                   ("_applC" ("_position" Ccon)
###                                     ("_cargs" ("_position" n)
### ("_cargs" ("\<^const>List.list.Nil")
###   ("_cargs" ("\<^const>Product_Type.Unity") ("_position" es)))))
###                                   ("_position" c2)))))))))
###                   ("_applC" ("_position" Eabort)
###                     ("_position" Rtype_error))))
###               ("_case2"
###                 ("_case1" ("_applC" ("_position" Var) ("_position" n))
###                   ("_case_syntax"
###                     ("_applC" ("_position" nsLookup)
###                       ("_cargs" ("_applC" ("_position" v) ("_position" env))
###                         ("_position" n)))
###                     ("_case2"
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Eabort)
###                           ("_position" Rtype_error)))
###                       ("_case1"
###                         ("_applC" ("_position" Some) ("_position" v2))
###                         ("_applC" ("_position" return)
###                           ("_cargs" ("_position" env)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" v2)
###                                 ("_position" c2)))))))))
###                 ("_case2"
###                   ("_case1"
###                     ("_applC" ("_position" Fun)
###                       ("_cargs" ("_position" n) ("_position" e)))
###                     ("_applC" ("_position" return)
###                       ("_cargs" ("_position" env)
###                         ("_cargs" ("_position" s)
###                           ("_cargs"
###                             ("_applC" ("_position" Closure)
###                               ("_cargs" ("_position" env)
###                                 ("_cargs" ("_position" n) ("_position" e))))
###                             ("_position" c2))))))
###                   ("_case2"
###                     ("_case1"
###                       ("_applC" ("_position" App)
###                         ("_cargs" ("_position" op1) ("_position" es)))
###                       ("_case_syntax"
###                         ("_applC" ("_position" List.rev) ("_position" es))
###                         ("_case2"
###                           ("_case1" ("\<^const>List.list.Nil")
###                             ("_applC" ("_position" application)
###                               ("_cargs" ("_position" op1)
###                                 ("_cargs" ("_position" env)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("\<^const>List.list.Nil")
### ("_position" c2)))))))
###                           ("_case1"
###                             ("\<^const>List.list.Cons" ("_position" e)
###                               ("_position" es))
###                             ("_applC" ("_position" push)
###                               ("_cargs" ("_position" env)
###                                 ("_cargs" ("_position" s)
###                                   ("_cargs" ("_position" e)
###                                     ("_cargs"
### ("_applC" ("_position" Capp)
###   ("_cargs" ("_position" op1)
###     ("_cargs" ("\<^const>List.list.Nil")
###       ("_cargs" ("\<^const>Product_Type.Unity") ("_position" es)))))
### ("_position" c2))))))))))
###                     ("_case2"
###                       ("_case1"
###                         ("_applC" ("_position" Log)
###                           ("_cargs" ("_position" l)
###                             ("_cargs" ("_position" e1) ("_position" e2))))
###                         ("_applC" ("_position" push)
###                           ("_cargs" ("_position" env)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" e1)
###                                 ("_cargs"
###                                   ("_applC" ("_position" Clog)
###                                     ("_cargs" ("_position" l)
### ("_cargs" ("\<^const>Product_Type.Unity") ("_position" e2))))
###                                   ("_position" c2)))))))
###                       ("_case2"
###                         ("_case1"
###                           ("_applC" ("_position" If)
###                             ("_cargs" ("_position" e1)
###                               ("_cargs" ("_position" e2) ("_position" e3))))
###                           ("_applC" ("_position" push)
###                             ("_cargs" ("_position" env)
###                               ("_cargs" ("_position" s)
###                                 ("_cargs" ("_position" e1)
###                                   ("_cargs"
###                                     ("_applC" ("_position" Cif)
### ("_cargs" ("\<^const>Product_Type.Unity")
###   ("_cargs" ("_position" e2) ("_position" e3))))
###                                     ("_position" c2)))))))
###                         ("_case2"
###                           ("_case1"
###                             ("_applC" ("_position" Mat)
###                               ("_cargs" ("_position" e) ("_position" pes)))
###                             ("_applC" ("_position" push)
###                               ("_cargs" ("_position" env)
###                                 ("_cargs" ("_position" s)
###                                   ("_cargs" ("_position" e)
###                                     ("_cargs"
### ("_applC" ("_position" Cmat)
###   ("_cargs" ("\<^const>Product_Type.Unity")
###     ("_cargs" ("_position" pes)
###       ("_applC" ("_position" Conv)
###         ("_cargs"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_String" ("_position" ''Bind''))
###               ("_tuple_arg"
###                 ("_applC" ("_position" TypeExn)
###                   ("_applC" ("_position" Short)
###                     ("_String" ("_position" ''Bind'')))))))
###           ("\<^const>List.list.Nil"))))))
### ("_position" c2)))))))
###                           ("_case2"
###                             ("_case1"
###                               ("_applC" ("_position" Let)
###                                 ("_cargs" ("_position" n)
###                                   ("_cargs" ("_position" e1)
###                                     ("_position" e2))))
###                               ("_applC" ("_position" push)
###                                 ("_cargs" ("_position" env)
###                                   ("_cargs" ("_position" s)
###                                     ("_cargs" ("_position" e1)
### ("_cargs"
###   ("_applC" ("_position" Clet)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("\<^const>Product_Type.Unity") ("_position" e2))))
###   ("_position" c2)))))))
###                             ("_case2"
###                               ("_case1"
###                                 ("_applC" ("_position" Letrec)
###                                   ("_cargs" ("_position" funs)
###                                     ("_position" e)))
###                                 ("\<^const>HOL.If"
###                                   ("\<^const>HOL.Not"
###                                     ("_applC" ("_position" allDistinct)
### ("_applC" ("_position" List.map)
###   ("_cargs"
###     ("_lambda" ("_position" x)
###       ("_case_syntax" ("_position" x)
###         ("_case1"
###           ("_tuple" ("_position" x)
###             ("_tuple_args" ("_position" y) ("_tuple_arg" ("_position" z))))
###           ("_position" x))))
###     ("_position" funs)))))
###                                   ("_applC" ("_position" Eabort)
###                                     ("_position" Rtype_error))
###                                   ("_applC" ("_position" Estep)
###                                     ("_tuple"
### ("_datatype_record_update" ("_position" env)
###   ("_datatype_field_update" ("_constify" v)
###     ("_applC" ("_position" build_rec_env)
###       ("_cargs" ("_position" funs)
###         ("_cargs" ("_position" env)
###           ("_applC" ("_position" v) ("_position" env)))))))
### ("_tuple_args" ("_position" s)
###   ("_tuple_args" ("_applC" ("_position" Exp) ("_position" e))
###     ("_tuple_arg" ("_position" c2))))))))
###                               ("_case2"
###                                 ("_case1"
###                                   ("_applC" ("_position" Tannot)
###                                     ("_cargs" ("_position" e)
### ("_position" t1)))
###                                   ("_applC" ("_position" push)
###                                     ("_cargs" ("_position" env)
### ("_cargs" ("_position" s)
###   ("_cargs" ("_position" e)
###     ("_cargs"
###       ("_applC" ("_position" Ctannot)
###         ("_cargs" ("\<^const>Product_Type.Unity") ("_position" t1)))
###       ("_position" c2)))))))
###                                 ("_case1"
###                                   ("_applC" ("_position" Lannot)
###                                     ("_cargs" ("_position" e)
### ("_position" l)))
###                                   ("_applC" ("_position" push)
###                                     ("_cargs" ("_position" env)
### ("_cargs" ("_position" s)
###   ("_cargs" ("_position" e)
###     ("_cargs"
###       ("_applC" ("_position" Clannot)
###         ("_cargs" ("\<^const>Product_Type.Unity") ("_position" l)))
###       ("_position" c2)))))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env) ("\<^const>List.list.Nil")))))
###     ("_tuple" ("_position" st)
###       ("_tuple_arg"
###         ("_applC" ("_position" Rval)
###           ("_datatype_record"
###             ("_datatype_fields"
###               ("_datatype_field" ("_constify" v) ("_position" nsEmpty))
###               ("_datatype_field" ("_constify" c)
###                 ("_position" nsEmpty)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env) ("\<^const>List.list.Nil")))))
###     ("_tuple" ("_position" st)
###       ("_tuple_arg"
###         ("_applC" ("_position" Rval)
###           ("_record"
###             ("_fields" ("_field" ("_constify" v) ("_position" nsEmpty))
###               ("_field" ("_constify" c) ("_position" nsEmpty)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dlet)
###                 ("_cargs" ("_position" locs)
###                   ("_cargs" ("_position" p) ("_position" e)))))))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" pat_bindings)
###           ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###       ("_case_syntax"
###         ("_applC" ("_position" fun_evaluate)
###           ("_cargs" ("_position" st)
###             ("_cargs" ("_position" env) ("_list" ("_position" e)))))
###         ("_case2"
###           ("_case1"
###             ("_tuple" ("_position" st')
###               ("_tuple_arg" ("_applC" ("_position" Rval) ("_position" v2))))
###             ("_tuple" ("_position" st')
###               ("_tuple_arg"
###                 ("_case_syntax"
###                   ("_applC" ("_position" pmatch)
###                     ("_cargs" ("_applC" ("_position" c) ("_position" env))
###                       ("_cargs"
###                         ("_applC" ("_position" refs) ("_position" st'))
###                         ("_cargs" ("_position" p)
###                           ("_cargs"
###                             ("_applC" ("_position" List.hd)
###                               ("_position" v2))
###                             ("\<^const>List.list.Nil"))))))
###                   ("_case2"
###                     ("_case1"
###                       ("_applC" ("_position" Match) ("_position" new_vals))
###                       ("_applC" ("_position" Rval)
###                         ("_datatype_record"
###                           ("_datatype_fields"
###                             ("_datatype_field" ("_constify" v)
###                               ("_applC" ("_position" alist_to_ns)
###                                 ("_position" new_vals)))
###                             ("_datatype_field" ("_constify" c)
###                               ("_position" nsEmpty))))))
###                     ("_case2"
###                       ("_case1" ("_position" No_match)
###                         ("_applC" ("_position" Rerr)
###                           ("_applC" ("_position" Rraise)
###                             ("_position" Bindv))))
###                       ("_case1" ("_position" Match_type_error)
###                         ("_applC" ("_position" Rerr)
###                           ("_applC" ("_position" Rabort)
###                             ("_position" Rtype_error))))))))))
###           ("_case1"
###             ("_tuple" ("_position" st')
###               ("_tuple_arg"
###                 ("_applC" ("_position" Rerr) ("_position" err))))
###             ("_tuple" ("_position" st')
###               ("_tuple_arg"
###                 ("_applC" ("_position" Rerr) ("_position" err)))))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dlet)
###                 ("_cargs" ("_position" locs)
###                   ("_cargs" ("_position" p) ("_position" e)))))))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" pat_bindings)
###           ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###       ("_case_syntax"
###         ("_applC" ("_position" fun_evaluate)
###           ("_cargs" ("_position" st)
###             ("_cargs" ("_position" env) ("_list" ("_position" e)))))
###         ("_case2"
###           ("_case1"
###             ("_tuple" ("_position" st')
###               ("_tuple_arg" ("_applC" ("_position" Rval) ("_position" v2))))
###             ("_tuple" ("_position" st')
###               ("_tuple_arg"
###                 ("_case_syntax"
###                   ("_applC" ("_position" pmatch)
###                     ("_cargs" ("_applC" ("_position" c) ("_position" env))
###                       ("_cargs"
###                         ("_applC" ("_position" refs) ("_position" st'))
###                         ("_cargs" ("_position" p)
###                           ("_cargs"
###                             ("_applC" ("_position" List.hd)
###                               ("_position" v2))
###                             ("\<^const>List.list.Nil"))))))
###                   ("_case2"
###                     ("_case1"
###                       ("_applC" ("_position" Match) ("_position" new_vals))
###                       ("_applC" ("_position" Rval)
###                         ("_record"
###                           ("_fields"
###                             ("_field" ("_constify" v)
###                               ("_applC" ("_position" alist_to_ns)
###                                 ("_position" new_vals)))
###                             ("_field" ("_constify" c)
###                               ("_position" nsEmpty))))))
###                     ("_case2"
###                       ("_case1" ("_position" No_match)
###                         ("_applC" ("_position" Rerr)
###                           ("_applC" ("_position" Rraise)
###                             ("_position" Bindv))))
###                       ("_case1" ("_position" Match_type_error)
###                         ("_applC" ("_position" Rerr)
###                           ("_applC" ("_position" Rabort)
###                             ("_position" Rtype_error))))))))))
###           ("_case1"
###             ("_tuple" ("_position" st')
###               ("_tuple_arg"
###                 ("_applC" ("_position" Rerr) ("_position" err))))
###             ("_tuple" ("_position" st')
###               ("_tuple_arg"
###                 ("_applC" ("_position" Rerr) ("_position" err)))))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 211 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dletrec)
###                 ("_cargs" ("_position" locs) ("_position" funs))))))))
###     ("_tuple" ("_position" st)
###       ("_tuple_arg"
###         ("\<^const>HOL.If"
###           ("_applC" ("_position" allDistinct)
###             ("_applC" ("_position" List.map)
###               ("_cargs"
###                 ("_lambda" ("_position" x)
###                   ("_case_syntax" ("_position" x)
###                     ("_case1"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args" ("_position" y)
###                           ("_tuple_arg" ("_position" z))))
###                       ("_position" x))))
###                 ("_position" funs))))
###           ("_applC" ("_position" Rval)
###             ("_record"
###               ("_fields"
###                 ("_field" ("_constify" v)
###                   ("_applC" ("_position" build_rec_env)
###                     ("_cargs" ("_position" funs)
###                       ("_cargs" ("_position" env) ("_position" nsEmpty)))))
###                 ("_field" ("_constify" c) ("_position" nsEmpty)))))
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dletrec)
###                 ("_cargs" ("_position" locs) ("_position" funs))))))))
###     ("_tuple" ("_position" st)
###       ("_tuple_arg"
###         ("\<^const>HOL.If"
###           ("_applC" ("_position" allDistinct)
###             ("_applC" ("_position" List.map)
###               ("_cargs"
###                 ("_lambda" ("_position" x)
###                   ("_case_syntax" ("_position" x)
###                     ("_case1"
###                       ("_tuple" ("_position" x)
###                         ("_tuple_args" ("_position" y)
###                           ("_tuple_arg" ("_position" z))))
###                       ("_position" x))))
###                 ("_position" funs))))
###           ("_applC" ("_position" Rval)
###             ("_datatype_record"
###               ("_datatype_fields"
###                 ("_datatype_field" ("_constify" v)
###                   ("_applC" ("_position" build_rec_env)
###                     ("_cargs" ("_position" funs)
###                       ("_cargs" ("_position" env) ("_position" nsEmpty)))))
###                 ("_datatype_field" ("_constify" c) ("_position" nsEmpty)))))
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dtype)
###                 ("_cargs" ("_position" locs) ("_position" tds))))))))
###     ("_Let"
###       ("_bind" ("_position" new_tdecs)
###         ("_applC" ("_position" type_defs_to_new_tdecs)
###           ("_cargs" ("_position" mn) ("_position" tds))))
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_dup_ctors) ("_position" tds))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" st))))
###             ("_applC" ("_position" allDistinct)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_position" tn))))
###                   ("_position" tds))))))
###         ("_tuple"
###           ("_record_update" ("_position" st)
###             ("_field_update" ("_constify" defined_types)
###               ("\<^const>Set.union" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" st)))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Rval)
###               ("_record"
###                 ("_fields" ("_field" ("_constify" v) ("_position" nsEmpty))
###                   ("_field" ("_constify" c)
###                     ("_applC" ("_position" build_tdefs)
###                       ("_cargs" ("_position" mn) ("_position" tds)))))))))
###         ("_tuple" ("_position" st)
###           ("_tuple_arg"
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtype_error)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dtype)
###                 ("_cargs" ("_position" locs) ("_position" tds))))))))
###     ("_Let"
###       ("_bind" ("_position" new_tdecs)
###         ("_applC" ("_position" type_defs_to_new_tdecs)
###           ("_cargs" ("_position" mn) ("_position" tds))))
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_dup_ctors) ("_position" tds))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" st))))
###             ("_applC" ("_position" allDistinct)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_position" tn))))
###                   ("_position" tds))))))
###         ("_tuple"
###           ("_datatype_record_update" ("_position" st)
###             ("_datatype_field_update" ("_constify" defined_types)
###               ("\<^const>Set.union" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" st)))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Rval)
###               ("_record"
###                 ("_fields" ("_field" ("_constify" v) ("_position" nsEmpty))
###                   ("_field" ("_constify" c)
###                     ("_applC" ("_position" build_tdefs)
###                       ("_cargs" ("_position" mn) ("_position" tds)))))))))
###         ("_tuple" ("_position" st)
###           ("_tuple_arg"
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtype_error)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dtype)
###                 ("_cargs" ("_position" locs) ("_position" tds))))))))
###     ("_Let"
###       ("_bind" ("_position" new_tdecs)
###         ("_applC" ("_position" type_defs_to_new_tdecs)
###           ("_cargs" ("_position" mn) ("_position" tds))))
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_dup_ctors) ("_position" tds))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" st))))
###             ("_applC" ("_position" allDistinct)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_position" tn))))
###                   ("_position" tds))))))
###         ("_tuple"
###           ("_record_update" ("_position" st)
###             ("_field_update" ("_constify" defined_types)
###               ("\<^const>Set.union" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" st)))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Rval)
###               ("_datatype_record"
###                 ("_datatype_fields"
###                   ("_datatype_field" ("_constify" v) ("_position" nsEmpty))
###                   ("_datatype_field" ("_constify" c)
###                     ("_applC" ("_position" build_tdefs)
###                       ("_cargs" ("_position" mn) ("_position" tds)))))))))
###         ("_tuple" ("_position" st)
###           ("_tuple_arg"
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtype_error)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dtype)
###                 ("_cargs" ("_position" locs) ("_position" tds))))))))
###     ("_Let"
###       ("_bind" ("_position" new_tdecs)
###         ("_applC" ("_position" type_defs_to_new_tdecs)
###           ("_cargs" ("_position" mn) ("_position" tds))))
###       ("\<^const>HOL.If"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_dup_ctors) ("_position" tds))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" st))))
###             ("_applC" ("_position" allDistinct)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_position" tn))))
###                   ("_position" tds))))))
###         ("_tuple"
###           ("_datatype_record_update" ("_position" st)
###             ("_datatype_field_update" ("_constify" defined_types)
###               ("\<^const>Set.union" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" st)))))
###           ("_tuple_arg"
###             ("_applC" ("_position" Rval)
###               ("_datatype_record"
###                 ("_datatype_fields"
###                   ("_datatype_field" ("_constify" v) ("_position" nsEmpty))
###                   ("_datatype_field" ("_constify" c)
###                     ("_applC" ("_position" build_tdefs)
###                       ("_cargs" ("_position" mn) ("_position" tds)))))))))
###         ("_tuple" ("_position" st)
###           ("_tuple_arg"
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtype_error)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dtabbrev)
###                 ("_cargs" ("_position" locs)
###                   ("_cargs" ("_position" tvs)
###                     ("_cargs" ("_position" tn) ("_position" t1))))))))))
###     ("_tuple" ("_position" st)
###       ("_tuple_arg"
###         ("_applC" ("_position" Rval)
###           ("_datatype_record"
###             ("_datatype_fields"
###               ("_datatype_field" ("_constify" v) ("_position" nsEmpty))
###               ("_datatype_field" ("_constify" c)
###                 ("_position" nsEmpty)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dtabbrev)
###                 ("_cargs" ("_position" locs)
###                   ("_cargs" ("_position" tvs)
###                     ("_cargs" ("_position" tn) ("_position" t1))))))))))
###     ("_tuple" ("_position" st)
###       ("_tuple_arg"
###         ("_applC" ("_position" Rval)
###           ("_record"
###             ("_fields" ("_field" ("_constify" v) ("_position" nsEmpty))
###               ("_field" ("_constify" c) ("_position" nsEmpty)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dexn)
###                 ("_cargs" ("_position" locs)
###                   ("_cargs" ("_position" cn) ("_position" ts)))))))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" TypeExn)
###           ("_applC" ("_position" mk_id)
###             ("_cargs" ("_position" mn) ("_position" cn))))
###         ("_applC" ("_position" defined_types) ("_position" st)))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error)))))
###       ("_tuple"
###         ("_datatype_record_update" ("_position" st)
###           ("_datatype_field_update" ("_constify" defined_types)
###             ("\<^const>Set.union"
###               ("_Finset"
###                 ("_applC" ("_position" TypeExn)
###                   ("_applC" ("_position" mk_id)
###                     ("_cargs" ("_position" mn) ("_position" cn)))))
###               ("_applC" ("_position" defined_types) ("_position" st)))))
###         ("_tuple_arg"
###           ("_applC" ("_position" Rval)
###             ("_datatype_record"
###               ("_datatype_fields"
###                 ("_datatype_field" ("_constify" v) ("_position" nsEmpty))
###                 ("_datatype_field" ("_constify" c)
###                   ("_applC" ("_position" nsSing)
###                     ("_cargs" ("_position" cn)
###                       ("_tuple"
###                         ("_applC" ("_position" List.length)
###                           ("_position" ts))
###                         ("_tuple_arg"
###                           ("_applC" ("_position" TypeExn)
###                             ("_applC" ("_position" mk_id)
###                               ("_cargs" ("_position" mn)
###                                 ("_position" cn)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dexn)
###                 ("_cargs" ("_position" locs)
###                   ("_cargs" ("_position" cn) ("_position" ts)))))))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" TypeExn)
###           ("_applC" ("_position" mk_id)
###             ("_cargs" ("_position" mn) ("_position" cn))))
###         ("_applC" ("_position" defined_types) ("_position" st)))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error)))))
###       ("_tuple"
###         ("_record_update" ("_position" st)
###           ("_field_update" ("_constify" defined_types)
###             ("\<^const>Set.union"
###               ("_Finset"
###                 ("_applC" ("_position" TypeExn)
###                   ("_applC" ("_position" mk_id)
###                     ("_cargs" ("_position" mn) ("_position" cn)))))
###               ("_applC" ("_position" defined_types) ("_position" st)))))
###         ("_tuple_arg"
###           ("_applC" ("_position" Rval)
###             ("_datatype_record"
###               ("_datatype_fields"
###                 ("_datatype_field" ("_constify" v) ("_position" nsEmpty))
###                 ("_datatype_field" ("_constify" c)
###                   ("_applC" ("_position" nsSing)
###                     ("_cargs" ("_position" cn)
###                       ("_tuple"
###                         ("_applC" ("_position" List.length)
###                           ("_position" ts))
###                         ("_tuple_arg"
###                           ("_applC" ("_position" TypeExn)
###                             ("_applC" ("_position" mk_id)
###                               ("_cargs" ("_position" mn)
###                                 ("_position" cn)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dexn)
###                 ("_cargs" ("_position" locs)
###                   ("_cargs" ("_position" cn) ("_position" ts)))))))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" TypeExn)
###           ("_applC" ("_position" mk_id)
###             ("_cargs" ("_position" mn) ("_position" cn))))
###         ("_applC" ("_position" defined_types) ("_position" st)))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error)))))
###       ("_tuple"
###         ("_datatype_record_update" ("_position" st)
###           ("_datatype_field_update" ("_constify" defined_types)
###             ("\<^const>Set.union"
###               ("_Finset"
###                 ("_applC" ("_position" TypeExn)
###                   ("_applC" ("_position" mk_id)
###                     ("_cargs" ("_position" mn) ("_position" cn)))))
###               ("_applC" ("_position" defined_types) ("_position" st)))))
###         ("_tuple_arg"
###           ("_applC" ("_position" Rval)
###             ("_record"
###               ("_fields" ("_field" ("_constify" v) ("_position" nsEmpty))
###                 ("_field" ("_constify" c)
###                   ("_applC" ("_position" nsSing)
###                     ("_cargs" ("_position" cn)
###                       ("_tuple"
###                         ("_applC" ("_position" List.length)
###                           ("_position" ts))
###                         ("_tuple_arg"
###                           ("_applC" ("_position" TypeExn)
###                             ("_applC" ("_position" mk_id)
###                               ("_cargs" ("_position" mn)
###                                 ("_position" cn)))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fun_evaluate_decs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" st)
###           ("_cargs" ("_position" env)
###             ("_list"
###               ("_applC" ("_position" Dexn)
###                 ("_cargs" ("_position" locs)
###                   ("_cargs" ("_position" cn) ("_position" ts)))))))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" TypeExn)
###           ("_applC" ("_position" mk_id)
###             ("_cargs" ("_position" mn) ("_position" cn))))
###         ("_applC" ("_position" defined_types) ("_position" st)))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error)))))
###       ("_tuple"
###         ("_record_update" ("_position" st)
###           ("_field_update" ("_constify" defined_types)
###             ("\<^const>Set.union"
###               ("_Finset"
###                 ("_applC" ("_position" TypeExn)
###                   ("_applC" ("_position" mk_id)
###                     ("_cargs" ("_position" mn) ("_position" cn)))))
###               ("_applC" ("_position" defined_types) ("_position" st)))))
###         ("_tuple_arg"
###           ("_applC" ("_position" Rval)
###             ("_record"
###               ("_fields" ("_field" ("_constify" v) ("_position" nsEmpty))
###                 ("_field" ("_constify" c)
###                   ("_applC" ("_position" nsSing)
###                     ("_cargs" ("_position" cn)
###                       ("_tuple"
###                         ("_applC" ("_position" List.length)
###                           ("_position" ts))
###                         ("_tuple_arg"
###                           ("_applC" ("_position" TypeExn)
###                             ("_applC" ("_position" mk_id)
###                               ("_cargs" ("_position" mn)
###                                 ("_position" cn)))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 244 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" envLift)
###       ("_cargs" ("_position" mn) ("_position" env)))
###     ("_record"
###       ("_fields"
###         ("_field" ("_constify" v)
###           ("_applC" ("_position" nsLift)
###             ("_cargs" ("_position" mn)
###               ("_applC" ("_position" v) ("_position" env)))))
###         ("_field" ("_constify" c)
###           ("_applC" ("_position" nsLift)
###             ("_cargs" ("_position" mn)
###               ("_applC" ("_position" c) ("_position" env)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" envLift)
###       ("_cargs" ("_position" mn) ("_position" env)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" v)
###           ("_applC" ("_position" nsLift)
###             ("_cargs" ("_position" mn)
###               ("_applC" ("_position" v) ("_position" env)))))
###         ("_datatype_field" ("_constify" c)
###           ("_applC" ("_position" nsLift)
###             ("_cargs" ("_position" mn)
###               ("_applC" ("_position" c) ("_position" env)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 252 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_tops)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env) ("\<^const>List.list.Nil"))))
###     ("_tuple" ("_position" st)
###       ("_tuple_arg"
###         ("_applC" ("_position" Rval)
###           ("_datatype_record"
###             ("_datatype_fields"
###               ("_datatype_field" ("_constify" v) ("_position" nsEmpty))
###               ("_datatype_field" ("_constify" c)
###                 ("_position" nsEmpty)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_tops)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env) ("\<^const>List.list.Nil"))))
###     ("_tuple" ("_position" st)
###       ("_tuple_arg"
###         ("_applC" ("_position" Rval)
###           ("_record"
###             ("_fields" ("_field" ("_constify" v) ("_position" nsEmpty))
###               ("_field" ("_constify" c) ("_position" nsEmpty)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 265 of "$AFP/CakeML/generated/CakeML/Evaluate.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_tops)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" Tmod)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" specs) ("_position" ds))))))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" st))))
###         ("_applC" ("_position" no_dup_types) ("_position" ds)))
###       ("_case_syntax"
###         ("_applC" ("_position" fun_evaluate_decs)
###           ("_cargs" ("_list" ("_position" mn))
###             ("_cargs" ("_position" st)
###               ("_cargs" ("_position" env) ("_position" ds)))))
###         ("_case1"
###           ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r)))
###           ("_tuple"
###             ("_record_update" ("_position" st')
###               ("_field_update" ("_constify" defined_mods)
###                 ("\<^const>Set.union" ("_Finset" ("_list" ("_position" mn)))
###                   ("_applC" ("_position" defined_mods) ("_position" st')))))
###             ("_tuple_arg"
###               ("_case_syntax" ("_position" r)
###                 ("_case2"
###                   ("_case1" ("_applC" ("_position" Rval) ("_position" env'))
###                     ("_applC" ("_position" Rval)
###                       ("_datatype_record"
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" v)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env')))))
###                           ("_datatype_field" ("_constify" c)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" c)
###                                   ("_position" env')))))))))
###                   ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###                     ("_applC" ("_position" Rerr) ("_position" err)))))))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_tops)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" Tmod)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" specs) ("_position" ds))))))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" st))))
###         ("_applC" ("_position" no_dup_types) ("_position" ds)))
###       ("_case_syntax"
###         ("_applC" ("_position" fun_evaluate_decs)
###           ("_cargs" ("_list" ("_position" mn))
###             ("_cargs" ("_position" st)
###               ("_cargs" ("_position" env) ("_position" ds)))))
###         ("_case1"
###           ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r)))
###           ("_tuple"
###             ("_datatype_record_update" ("_position" st')
###               ("_datatype_field_update" ("_constify" defined_mods)
###                 ("\<^const>Set.union" ("_Finset" ("_list" ("_position" mn)))
###                   ("_applC" ("_position" defined_mods) ("_position" st')))))
###             ("_tuple_arg"
###               ("_case_syntax" ("_position" r)
###                 ("_case2"
###                   ("_case1" ("_applC" ("_position" Rval) ("_position" env'))
###                     ("_applC" ("_position" Rval)
###                       ("_datatype_record"
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" v)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env')))))
###                           ("_datatype_field" ("_constify" c)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" c)
###                                   ("_position" env')))))))))
###                   ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###                     ("_applC" ("_position" Rerr) ("_position" err)))))))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_tops)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" Tmod)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" specs) ("_position" ds))))))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" st))))
###         ("_applC" ("_position" no_dup_types) ("_position" ds)))
###       ("_case_syntax"
###         ("_applC" ("_position" fun_evaluate_decs)
###           ("_cargs" ("_list" ("_position" mn))
###             ("_cargs" ("_position" st)
###               ("_cargs" ("_position" env) ("_position" ds)))))
###         ("_case1"
###           ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r)))
###           ("_tuple"
###             ("_record_update" ("_position" st')
###               ("_field_update" ("_constify" defined_mods)
###                 ("\<^const>Set.union" ("_Finset" ("_list" ("_position" mn)))
###                   ("_applC" ("_position" defined_mods) ("_position" st')))))
###             ("_tuple_arg"
###               ("_case_syntax" ("_position" r)
###                 ("_case2"
###                   ("_case1" ("_applC" ("_position" Rval) ("_position" env'))
###                     ("_applC" ("_position" Rval)
###                       ("_record"
###                         ("_fields"
###                           ("_field" ("_constify" v)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env')))))
###                           ("_field" ("_constify" c)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" c)
###                                   ("_position" env')))))))))
###                   ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###                     ("_applC" ("_position" Rerr) ("_position" err)))))))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_tops)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" env)
###           ("_list"
###             ("_applC" ("_position" Tmod)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" specs) ("_position" ds))))))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" st))))
###         ("_applC" ("_position" no_dup_types) ("_position" ds)))
###       ("_case_syntax"
###         ("_applC" ("_position" fun_evaluate_decs)
###           ("_cargs" ("_list" ("_position" mn))
###             ("_cargs" ("_position" st)
###               ("_cargs" ("_position" env) ("_position" ds)))))
###         ("_case1"
###           ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r)))
###           ("_tuple"
###             ("_datatype_record_update" ("_position" st')
###               ("_datatype_field_update" ("_constify" defined_mods)
###                 ("\<^const>Set.union" ("_Finset" ("_list" ("_position" mn)))
###                   ("_applC" ("_position" defined_mods) ("_position" st')))))
###             ("_tuple_arg"
###               ("_case_syntax" ("_position" r)
###                 ("_case2"
###                   ("_case1" ("_applC" ("_position" Rval) ("_position" env'))
###                     ("_applC" ("_position" Rval)
###                       ("_record"
###                         ("_fields"
###                           ("_field" ("_constify" v)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env')))))
###                           ("_field" ("_constify" c)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" c)
###                                   ("_position" env')))))))))
###                   ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###                     ("_applC" ("_position" Rerr) ("_position" err)))))))))
###       ("_tuple" ("_position" st)
###         ("_tuple_arg"
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtype_error))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SmallStep"
### 2.812s elapsed time, 6.759s cpu time, 0.569s GC time
Loading theory "Draft.BigStep" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked" via "Draft.Semantic_Extras")
### Ambiguous input (line 128 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" es)
###         ("_idts" ("_position" vs)
###           ("_idts" ("_position" env')
###             ("_idts" ("_position" e)
###               ("_idts" ("_position" bv)
###                 ("_idts" ("_position" s1) ("_position" s2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs" ("_applC" ("_position" List.rev) ("_position" es))
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval) ("_position" vs)))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" do_opapp)
###               ("_applC" ("_position" List.rev) ("_position" vs)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" env') ("_tuple_arg" ("_position" e)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies" ("_position" ck)
###               ("\<^const>HOL.Not"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" clock) ("_position" s2))
###                   ("_constrain" ("\<^const>Groups.zero_class.zero")
###                     ("_type_name" nat)))))
###             ("_applC" ("_position" evaluate)
###               ("_cargs" ("_position" ck)
###                 ("_cargs" ("_position" env')
###                   ("_cargs"
###                     ("\<^const>HOL.If" ("_position" ck)
###                       ("_datatype_record_update" ("_position" s2)
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_applC" ("_position" clock) ("_position" s2))
###                             ("_constrain" ("\<^const>Groups.one_class.one")
###                               ("_type_name" nat)))))
###                       ("_position" s2))
###                     ("_cargs" ("_position" e) ("_position" bv))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" Opapp) ("_position" es)))
###                 ("_position" bv)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" es)
###         ("_idts" ("_position" vs)
###           ("_idts" ("_position" env')
###             ("_idts" ("_position" e)
###               ("_idts" ("_position" bv)
###                 ("_idts" ("_position" s1) ("_position" s2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs" ("_applC" ("_position" List.rev) ("_position" es))
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval) ("_position" vs)))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" do_opapp)
###               ("_applC" ("_position" List.rev) ("_position" vs)))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" env') ("_tuple_arg" ("_position" e)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.implies" ("_position" ck)
###               ("\<^const>HOL.Not"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" clock) ("_position" s2))
###                   ("_constrain" ("\<^const>Groups.zero_class.zero")
###                     ("_type_name" nat)))))
###             ("_applC" ("_position" evaluate)
###               ("_cargs" ("_position" ck)
###                 ("_cargs" ("_position" env')
###                   ("_cargs"
###                     ("\<^const>HOL.If" ("_position" ck)
###                       ("_record_update" ("_position" s2)
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_applC" ("_position" clock) ("_position" s2))
###                             ("_constrain" ("\<^const>Groups.one_class.one")
###                               ("_type_name" nat)))))
###                       ("_position" s2))
###                     ("_cargs" ("_position" e) ("_position" bv))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" Opapp) ("_position" es)))
###                 ("_position" bv)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" op0)
###         ("_idts" ("_position" es)
###           ("_idts" ("_position" vs)
###             ("_idts" ("_position" res)
###               ("_idts" ("_position" s1)
###                 ("_idts" ("_position" s2)
###                   ("_idts" ("_position" refs') ("_position" ffi'))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs" ("_applC" ("_position" List.rev) ("_position" es))
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval) ("_position" vs)))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" do_app)
###               ("_cargs"
###                 ("_tuple" ("_applC" ("_position" refs) ("_position" s2))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" ffi) ("_position" s2))))
###                 ("_cargs" ("_position" op0)
###                   ("_applC" ("_position" List.rev) ("_position" vs)))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_tuple" ("_position" refs')
###                   ("_tuple_arg" ("_position" ffi')))
###                 ("_tuple_arg" ("_position" res)))))
###           ("\<^const>HOL.not_equal" ("_position" op0)
###             ("_position" Opapp)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" op0) ("_position" es)))
###                 ("_tuple"
###                   ("_record_update" ("_position" s2)
###                     ("_field_updates"
###                       ("_field_update" ("_constify" refs)
###                         ("_position" refs'))
###                       ("_field_update" ("_constify" ffi)
###                         ("_position" ffi'))))
###                   ("_tuple_arg" ("_position" res)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" op0)
###         ("_idts" ("_position" es)
###           ("_idts" ("_position" vs)
###             ("_idts" ("_position" res)
###               ("_idts" ("_position" s1)
###                 ("_idts" ("_position" s2)
###                   ("_idts" ("_position" refs') ("_position" ffi'))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs" ("_applC" ("_position" List.rev) ("_position" es))
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval) ("_position" vs)))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" do_app)
###               ("_cargs"
###                 ("_tuple" ("_applC" ("_position" refs) ("_position" s2))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" ffi) ("_position" s2))))
###                 ("_cargs" ("_position" op0)
###                   ("_applC" ("_position" List.rev) ("_position" vs)))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_tuple" ("_position" refs')
###                   ("_tuple_arg" ("_position" ffi')))
###                 ("_tuple_arg" ("_position" res)))))
###           ("\<^const>HOL.not_equal" ("_position" op0)
###             ("_position" Opapp)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" App)
###                   ("_cargs" ("_position" op0) ("_position" es)))
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s2)
###                     ("_datatype_field_updates"
###                       ("_datatype_field_update" ("_constify" refs)
###                         ("_position" refs'))
###                       ("_datatype_field_update" ("_constify" ffi)
###                         ("_position" ffi'))))
###                   ("_tuple_arg" ("_position" res)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 252 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" n)
###         ("_idts" ("_position" e1)
###           ("_idts" ("_position" e2)
###             ("_idts" ("_position" v1)
###               ("_idts" ("_position" bv)
###                 ("_idts" ("_position" s1) ("_position" s2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs" ("_position" e1)
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval) ("_position" v1)))))))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" ck)
###             ("_cargs"
###               ("_record_update" ("_position" env)
###                 ("_field_update" ("_constify" v)
###                   ("_applC" ("_position" nsOptBind)
###                     ("_cargs" ("_position" n)
###                       ("_cargs" ("_position" v1)
###                         ("_applC" ("_position" v) ("_position" env)))))))
###               ("_cargs" ("_position" s2)
###                 ("_cargs" ("_position" e2) ("_position" bv))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" Let)
###                   ("_cargs" ("_position" n)
###                     ("_cargs" ("_position" e1) ("_position" e2))))
###                 ("_position" bv)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" n)
###         ("_idts" ("_position" e1)
###           ("_idts" ("_position" e2)
###             ("_idts" ("_position" v1)
###               ("_idts" ("_position" bv)
###                 ("_idts" ("_position" s1) ("_position" s2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs" ("_position" e1)
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval) ("_position" v1)))))))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" ck)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" env)
###                 ("_datatype_field_update" ("_constify" v)
###                   ("_applC" ("_position" nsOptBind)
###                     ("_cargs" ("_position" n)
###                       ("_cargs" ("_position" v1)
###                         ("_applC" ("_position" v) ("_position" env)))))))
###               ("_cargs" ("_position" s2)
###                 ("_cargs" ("_position" e2) ("_position" bv))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" Let)
###                   ("_cargs" ("_position" n)
###                     ("_cargs" ("_position" e1) ("_position" e2))))
###                 ("_position" bv)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" funs)
###         ("_idts" ("_position" e)
###           ("_idts" ("_position" bv) ("_position" s))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct)
###           ("_applC" ("_position" List.map)
###             ("_cargs"
###               ("_lambda" ("_position" x)
###                 ("_case_syntax" ("_position" x)
###                   ("_case1"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_args" ("_position" y)
###                         ("_tuple_arg" ("_position" z))))
###                     ("_position" x))))
###               ("_position" funs))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" ck)
###             ("_cargs"
###               ("_record_update" ("_position" env)
###                 ("_field_update" ("_constify" v)
###                   ("_applC" ("_position" build_rec_env)
###                     ("_cargs" ("_position" funs)
###                       ("_cargs" ("_position" env)
###                         ("_applC" ("_position" v) ("_position" env)))))))
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" e) ("_position" bv))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs"
###                 ("_applC" ("_position" Letrec)
###                   ("_cargs" ("_position" funs) ("_position" e)))
###                 ("_position" bv)))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" funs)
###         ("_idts" ("_position" e)
###           ("_idts" ("_position" bv) ("_position" s))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct)
###           ("_applC" ("_position" List.map)
###             ("_cargs"
###               ("_lambda" ("_position" x)
###                 ("_case_syntax" ("_position" x)
###                   ("_case1"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_args" ("_position" y)
###                         ("_tuple_arg" ("_position" z))))
###                     ("_position" x))))
###               ("_position" funs))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" ck)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" env)
###                 ("_datatype_field_update" ("_constify" v)
###                   ("_applC" ("_position" build_rec_env)
###                     ("_cargs" ("_position" funs)
###                       ("_cargs" ("_position" env)
###                         ("_applC" ("_position" v) ("_position" env)))))))
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" e) ("_position" bv))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs"
###                 ("_applC" ("_position" Letrec)
###                   ("_cargs" ("_position" funs) ("_position" e)))
###                 ("_position" bv)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 333 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" env')
###         ("_idts" ("_position" v1)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" pes)
###               ("_idts" ("_position" e)
###                 ("_idts" ("_position" bv)
###                   ("_idts" ("_position" err_v) ("_position" s))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct)
###           ("_applC" ("_position" pat_bindings)
###             ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" pmatch)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env))
###                 ("_cargs" ("_applC" ("_position" refs) ("_position" s))
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" v1)
###                       ("\<^const>List.list.Nil"))))))
###             ("_applC" ("_position" Match) ("_position" env')))
###           ("_applC" ("_position" evaluate)
###             ("_cargs" ("_position" ck)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" env)
###                   ("_datatype_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsAppend)
###                       ("_cargs"
###                         ("_applC" ("_position" alist_to_ns)
###                           ("_position" env'))
###                         ("_applC" ("_position" v) ("_position" env))))))
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" e) ("_position" bv)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" v1)
###                 ("_cargs"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" p)
###                       ("_tuple_arg" ("_position" e)))
###                     ("_position" pes))
###                   ("_cargs" ("_position" err_v) ("_position" bv)))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" env)
###       ("_idts" ("_position" env')
###         ("_idts" ("_position" v1)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" pes)
###               ("_idts" ("_position" e)
###                 ("_idts" ("_position" bv)
###                   ("_idts" ("_position" err_v) ("_position" s))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct)
###           ("_applC" ("_position" pat_bindings)
###             ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" pmatch)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env))
###                 ("_cargs" ("_applC" ("_position" refs) ("_position" s))
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" v1)
###                       ("\<^const>List.list.Nil"))))))
###             ("_applC" ("_position" Match) ("_position" env')))
###           ("_applC" ("_position" evaluate)
###             ("_cargs" ("_position" ck)
###               ("_cargs"
###                 ("_record_update" ("_position" env)
###                   ("_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsAppend)
###                       ("_cargs"
###                         ("_applC" ("_position" alist_to_ns)
###                           ("_position" env'))
###                         ("_applC" ("_position" v) ("_position" env))))))
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" e) ("_position" bv)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" v1)
###                 ("_cargs"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" p)
###                       ("_tuple_arg" ("_position" e)))
###                     ("_position" pes))
###                   ("_cargs" ("_position" err_v) ("_position" bv)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "evaluate_match", "evaluate_list", "evaluate"
### theory "Draft.Evaluate"
### 3.050s elapsed time, 7.304s cpu time, 0.602s GC time
  Proving monotonicity ...
### Ambiguous input (line 368 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" p)
###           ("_idts" ("_position" e)
###             ("_idts" ("_position" v1)
###               ("_idts" ("_position" env')
###                 ("_idts" ("_position" s1)
###                   ("_idts" ("_position" s2) ("_position" locs))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs" ("_position" e)
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval) ("_position" v1)))))))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Lem_list.allDistinct)
###             ("_applC" ("_position" pat_bindings)
###               ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" pmatch)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env))
###                 ("_cargs" ("_applC" ("_position" refs) ("_position" s2))
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" v1)
###                       ("\<^const>List.list.Nil"))))))
###             ("_applC" ("_position" Match) ("_position" env'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs"
###                   ("_applC" ("_position" Dlet)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" p) ("_position" e))))
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_record"
###                           ("_fields"
###                             ("_field" ("_constify" v)
###                               ("_applC" ("_position" alist_to_ns)
###                                 ("_position" env')))
###                             ("_field" ("_constify" c)
###                               ("_position" nsEmpty))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" p)
###           ("_idts" ("_position" e)
###             ("_idts" ("_position" v1)
###               ("_idts" ("_position" env')
###                 ("_idts" ("_position" s1)
###                   ("_idts" ("_position" s2) ("_position" locs))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs" ("_position" e)
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval) ("_position" v1)))))))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Lem_list.allDistinct)
###             ("_applC" ("_position" pat_bindings)
###               ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" pmatch)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env))
###                 ("_cargs" ("_applC" ("_position" refs) ("_position" s2))
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" v1)
###                       ("\<^const>List.list.Nil"))))))
###             ("_applC" ("_position" Match) ("_position" env'))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s1)
###                 ("_cargs"
###                   ("_applC" ("_position" Dlet)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" p) ("_position" e))))
###                   ("_tuple" ("_position" s2)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_datatype_record"
###                           ("_datatype_fields"
###                             ("_datatype_field" ("_constify" v)
###                               ("_applC" ("_position" alist_to_ns)
###                                 ("_position" env')))
###                             ("_datatype_field" ("_constify" c)
###                               ("_position" nsEmpty))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 453 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" s) ("_position" locs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" TypeExn)
###             ("_applC" ("_position" mk_id)
###               ("_cargs" ("_position" mn) ("_position" cn))))
###           ("_applC" ("_position" defined_types) ("_position" s)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dexn)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" cn) ("_position" ts))))
###                   ("_tuple"
###                     ("_record_update" ("_position" s)
###                       ("_field_update" ("_constify" defined_types)
###                         ("\<^const>Set.union"
###                           ("_Finset"
###                             ("_applC" ("_position" TypeExn)
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" cn)))))
###                           ("_applC" ("_position" defined_types)
###                             ("_position" s)))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_record"
###                           ("_fields"
###                             ("_field" ("_constify" v) ("_position" nsEmpty))
###                             ("_field" ("_constify" c)
###                               ("_applC" ("_position" nsSing)
###                                 ("_cargs" ("_position" cn)
###                                   ("_tuple"
###                                     ("_applC" ("_position" List.length)
### ("_position" ts))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn)))))))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" s) ("_position" locs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" TypeExn)
###             ("_applC" ("_position" mk_id)
###               ("_cargs" ("_position" mn) ("_position" cn))))
###           ("_applC" ("_position" defined_types) ("_position" s)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dexn)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" cn) ("_position" ts))))
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s)
###                       ("_datatype_field_update" ("_constify" defined_types)
###                         ("\<^const>Set.union"
###                           ("_Finset"
###                             ("_applC" ("_position" TypeExn)
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" cn)))))
###                           ("_applC" ("_position" defined_types)
###                             ("_position" s)))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_record"
###                           ("_fields"
###                             ("_field" ("_constify" v) ("_position" nsEmpty))
###                             ("_field" ("_constify" c)
###                               ("_applC" ("_position" nsSing)
###                                 ("_cargs" ("_position" cn)
###                                   ("_tuple"
###                                     ("_applC" ("_position" List.length)
### ("_position" ts))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn)))))))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" s) ("_position" locs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" TypeExn)
###             ("_applC" ("_position" mk_id)
###               ("_cargs" ("_position" mn) ("_position" cn))))
###           ("_applC" ("_position" defined_types) ("_position" s)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dexn)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" cn) ("_position" ts))))
###                   ("_tuple"
###                     ("_record_update" ("_position" s)
###                       ("_field_update" ("_constify" defined_types)
###                         ("\<^const>Set.union"
###                           ("_Finset"
###                             ("_applC" ("_position" TypeExn)
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" cn)))))
###                           ("_applC" ("_position" defined_types)
###                             ("_position" s)))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_datatype_record"
###                           ("_datatype_fields"
###                             ("_datatype_field" ("_constify" v)
###                               ("_position" nsEmpty))
###                             ("_datatype_field" ("_constify" c)
###                               ("_applC" ("_position" nsSing)
###                                 ("_cargs" ("_position" cn)
###                                   ("_tuple"
###                                     ("_applC" ("_position" List.length)
### ("_position" ts))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn)))))))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" s) ("_position" locs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>Set.member"
###           ("_applC" ("_position" TypeExn)
###             ("_applC" ("_position" mk_id)
###               ("_cargs" ("_position" mn) ("_position" cn))))
###           ("_applC" ("_position" defined_types) ("_position" s)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dexn)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" cn) ("_position" ts))))
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s)
###                       ("_datatype_field_update" ("_constify" defined_types)
###                         ("\<^const>Set.union"
###                           ("_Finset"
###                             ("_applC" ("_position" TypeExn)
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" cn)))))
###                           ("_applC" ("_position" defined_types)
###                             ("_position" s)))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_datatype_record"
###                           ("_datatype_fields"
###                             ("_datatype_field" ("_constify" v)
###                               ("_position" nsEmpty))
###                             ("_datatype_field" ("_constify" c)
###                               ("_applC" ("_position" nsSing)
###                                 ("_cargs" ("_position" cn)
###                                   ("_tuple"
###                                     ("_applC" ("_position" List.length)
### ("_position" ts))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn)))))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 410 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" funs)
###           ("_idts" ("_position" s) ("_position" locs))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Lem_list.allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" y)
###                       ("_tuple_arg" ("_position" z))))
###                   ("_position" x))))
###             ("_position" funs)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dletrec)
###                     ("_cargs" ("_position" locs) ("_position" funs)))
###                   ("_tuple" ("_position" s)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_record"
###                           ("_fields"
###                             ("_field" ("_constify" v)
###                               ("_applC" ("_position" build_rec_env)
###                                 ("_cargs" ("_position" funs)
###                                   ("_cargs" ("_position" env)
###                                     ("_position" nsEmpty)))))
###                             ("_field" ("_constify" c)
###                               ("_position" nsEmpty))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" funs)
###           ("_idts" ("_position" s) ("_position" locs))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Lem_list.allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" x)
###                     ("_tuple_args" ("_position" y)
###                       ("_tuple_arg" ("_position" z))))
###                   ("_position" x))))
###             ("_position" funs)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dletrec)
###                     ("_cargs" ("_position" locs) ("_position" funs)))
###                   ("_tuple" ("_position" s)
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_datatype_record"
###                           ("_datatype_fields"
###                             ("_datatype_field" ("_constify" v)
###                               ("_applC" ("_position" build_rec_env)
###                                 ("_cargs" ("_position" funs)
###                                   ("_cargs" ("_position" env)
###                                     ("_position" nsEmpty)))))
###                             ("_datatype_field" ("_constify" c)
###                               ("_position" nsEmpty))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 426 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" tds)
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" new_tdecs) ("_position" locs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_dup_ctors) ("_position" tds))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" new_tdecs)
###             ("_applC" ("_position" type_defs_to_new_tdecs)
###               ("_cargs" ("_position" mn) ("_position" tds))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" s))))
###             ("_applC" ("_position" Lem_list.allDistinct)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_position" tn))))
###                   ("_position" tds))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtype)
###                     ("_cargs" ("_position" locs) ("_position" tds)))
###                   ("_tuple"
###                     ("_record_update" ("_position" s)
###                       ("_field_update" ("_constify" defined_types)
###                         ("\<^const>Set.union" ("_position" new_tdecs)
###                           ("_applC" ("_position" defined_types)
###                             ("_position" s)))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_record"
###                           ("_fields"
###                             ("_field" ("_constify" v) ("_position" nsEmpty))
###                             ("_field" ("_constify" c)
###                               ("_applC" ("_position" build_tdefs)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" tds))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" tds)
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" new_tdecs) ("_position" locs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_dup_ctors) ("_position" tds))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" new_tdecs)
###             ("_applC" ("_position" type_defs_to_new_tdecs)
###               ("_cargs" ("_position" mn) ("_position" tds))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" s))))
###             ("_applC" ("_position" Lem_list.allDistinct)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_position" tn))))
###                   ("_position" tds))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtype)
###                     ("_cargs" ("_position" locs) ("_position" tds)))
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s)
###                       ("_datatype_field_update" ("_constify" defined_types)
###                         ("\<^const>Set.union" ("_position" new_tdecs)
###                           ("_applC" ("_position" defined_types)
###                             ("_position" s)))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_record"
###                           ("_fields"
###                             ("_field" ("_constify" v) ("_position" nsEmpty))
###                             ("_field" ("_constify" c)
###                               ("_applC" ("_position" build_tdefs)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" tds))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" tds)
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" new_tdecs) ("_position" locs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_dup_ctors) ("_position" tds))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" new_tdecs)
###             ("_applC" ("_position" type_defs_to_new_tdecs)
###               ("_cargs" ("_position" mn) ("_position" tds))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" s))))
###             ("_applC" ("_position" Lem_list.allDistinct)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_position" tn))))
###                   ("_position" tds))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtype)
###                     ("_cargs" ("_position" locs) ("_position" tds)))
###                   ("_tuple"
###                     ("_record_update" ("_position" s)
###                       ("_field_update" ("_constify" defined_types)
###                         ("\<^const>Set.union" ("_position" new_tdecs)
###                           ("_applC" ("_position" defined_types)
###                             ("_position" s)))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_datatype_record"
###                           ("_datatype_fields"
###                             ("_datatype_field" ("_constify" v)
###                               ("_position" nsEmpty))
###                             ("_datatype_field" ("_constify" c)
###                               ("_applC" ("_position" build_tdefs)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" tds))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" tds)
###           ("_idts" ("_position" s)
###             ("_idts" ("_position" new_tdecs) ("_position" locs)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_dup_ctors) ("_position" tds))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" new_tdecs)
###             ("_applC" ("_position" type_defs_to_new_tdecs)
###               ("_cargs" ("_position" mn) ("_position" tds))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" new_tdecs)
###                 ("_applC" ("_position" defined_types) ("_position" s))))
###             ("_applC" ("_position" Lem_list.allDistinct)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_position" tn))))
###                   ("_position" tds))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtype)
###                     ("_cargs" ("_position" locs) ("_position" tds)))
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s)
###                       ("_datatype_field_update" ("_constify" defined_types)
###                         ("\<^const>Set.union" ("_position" new_tdecs)
###                           ("_applC" ("_position" defined_types)
###                             ("_position" s)))))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" Rval)
###                         ("_datatype_record"
###                           ("_datatype_fields"
###                             ("_datatype_field" ("_constify" v)
###                               ("_position" nsEmpty))
###                             ("_datatype_field" ("_constify" c)
###                               ("_applC" ("_position" build_tdefs)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" tds))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 447 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" tvs)
###           ("_idts" ("_position" tn)
###             ("_idts" ("_position" t0)
###               ("_idts" ("_position" s) ("_position" locs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs"
###                 ("_applC" ("_position" Dtabbrev)
###                   ("_cargs" ("_position" locs)
###                     ("_cargs" ("_position" tvs)
###                       ("_cargs" ("_position" tn) ("_position" t0)))))
###                 ("_tuple" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rval)
###                       ("_record"
###                         ("_fields"
###                           ("_field" ("_constify" v) ("_position" nsEmpty))
###                           ("_field" ("_constify" c)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" env)
###         ("_idts" ("_position" tvs)
###           ("_idts" ("_position" tn)
###             ("_idts" ("_position" t0)
###               ("_idts" ("_position" s) ("_position" locs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs"
###                 ("_applC" ("_position" Dtabbrev)
###                   ("_cargs" ("_position" locs)
###                     ("_cargs" ("_position" tvs)
###                       ("_cargs" ("_position" tn) ("_position" t0)))))
###                 ("_tuple" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rval)
###                       ("_datatype_record"
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" v)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" c)
###                             ("_position" nsEmpty)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "evaluate_dec"
  Proving monotonicity ...
### Ambiguous input (line 468 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn) ("_idts" ("_position" env) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("\<^const>List.list.Nil")
###                 ("_tuple" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rval)
###                       ("_record"
###                         ("_fields"
###                           ("_field" ("_constify" v) ("_position" nsEmpty))
###                           ("_field" ("_constify" c)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" mn) ("_idts" ("_position" env) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("\<^const>List.list.Nil")
###                 ("_tuple" ("_position" s)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rval)
###                       ("_datatype_record"
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" v)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" c)
###                             ("_position" nsEmpty)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "evaluate_decs"
  Proving monotonicity ...
### Ambiguous input (line 503 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" env)
###           ("_idts" ("_position" ds)
###             ("_idts" ("_position" mn)
###               ("_idts" ("_position" specs) ("_position" new_env))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" s1))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_dup_types) ("_position" ds))
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" ck)
###               ("_cargs" ("_list" ("_position" mn))
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s1)
###                     ("_cargs" ("_position" ds)
###                       ("_tuple" ("_position" s2)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rval)
###                             ("_position" new_env)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" Tmod)
###                   ("_cargs" ("_position" mn)
###                     ("_cargs" ("_position" specs) ("_position" ds))))
###                 ("_tuple"
###                   ("_record_update" ("_position" s2)
###                     ("_field_update" ("_constify" defined_mods)
###                       ("\<^const>Set.union"
###                         ("_Finset" ("_list" ("_position" mn)))
###                         ("_applC" ("_position" defined_mods)
###                           ("_position" s2)))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rval)
###                       ("_record"
###                         ("_fields"
###                           ("_field" ("_constify" v)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" v)
###                                   ("_position" new_env)))))
###                           ("_field" ("_constify" c)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" c)
###                                   ("_position" new_env))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" env)
###           ("_idts" ("_position" ds)
###             ("_idts" ("_position" mn)
###               ("_idts" ("_position" specs) ("_position" new_env))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" s1))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_dup_types) ("_position" ds))
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" ck)
###               ("_cargs" ("_list" ("_position" mn))
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s1)
###                     ("_cargs" ("_position" ds)
###                       ("_tuple" ("_position" s2)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rval)
###                             ("_position" new_env)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" Tmod)
###                   ("_cargs" ("_position" mn)
###                     ("_cargs" ("_position" specs) ("_position" ds))))
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s2)
###                     ("_datatype_field_update" ("_constify" defined_mods)
###                       ("\<^const>Set.union"
###                         ("_Finset" ("_list" ("_position" mn)))
###                         ("_applC" ("_position" defined_mods)
###                           ("_position" s2)))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rval)
###                       ("_record"
###                         ("_fields"
###                           ("_field" ("_constify" v)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" v)
###                                   ("_position" new_env)))))
###                           ("_field" ("_constify" c)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" c)
###                                   ("_position" new_env))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" env)
###           ("_idts" ("_position" ds)
###             ("_idts" ("_position" mn)
###               ("_idts" ("_position" specs) ("_position" new_env))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" s1))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_dup_types) ("_position" ds))
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" ck)
###               ("_cargs" ("_list" ("_position" mn))
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s1)
###                     ("_cargs" ("_position" ds)
###                       ("_tuple" ("_position" s2)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rval)
###                             ("_position" new_env)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" Tmod)
###                   ("_cargs" ("_position" mn)
###                     ("_cargs" ("_position" specs) ("_position" ds))))
###                 ("_tuple"
###                   ("_record_update" ("_position" s2)
###                     ("_field_update" ("_constify" defined_mods)
###                       ("\<^const>Set.union"
###                         ("_Finset" ("_list" ("_position" mn)))
###                         ("_applC" ("_position" defined_mods)
###                           ("_position" s2)))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rval)
###                       ("_datatype_record"
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" v)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" v)
###                                   ("_position" new_env)))))
###                           ("_datatype_field" ("_constify" c)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" c)
###                                   ("_position" new_env))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" env)
###           ("_idts" ("_position" ds)
###             ("_idts" ("_position" mn)
###               ("_idts" ("_position" specs) ("_position" new_env))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" s1))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_dup_types) ("_position" ds))
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" ck)
###               ("_cargs" ("_list" ("_position" mn))
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s1)
###                     ("_cargs" ("_position" ds)
###                       ("_tuple" ("_position" s2)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rval)
###                             ("_position" new_env)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" Tmod)
###                   ("_cargs" ("_position" mn)
###                     ("_cargs" ("_position" specs) ("_position" ds))))
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s2)
###                     ("_datatype_field_update" ("_constify" defined_mods)
###                       ("\<^const>Set.union"
###                         ("_Finset" ("_list" ("_position" mn)))
###                         ("_applC" ("_position" defined_mods)
###                           ("_position" s2)))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rval)
###                       ("_datatype_record"
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" v)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" v)
###                                   ("_position" new_env)))))
###                           ("_datatype_field" ("_constify" c)
###                             ("_applC" ("_position" nsLift)
###                               ("_cargs" ("_position" mn)
###                                 ("_applC" ("_position" c)
###                                   ("_position" new_env))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 512 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" env)
###           ("_idts" ("_position" ds)
###             ("_idts" ("_position" mn)
###               ("_idts" ("_position" specs) ("_position" err))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" s1))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_dup_types) ("_position" ds))
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" ck)
###               ("_cargs" ("_list" ("_position" mn))
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s1)
###                     ("_cargs" ("_position" ds)
###                       ("_tuple" ("_position" s2)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rerr)
###                             ("_position" err)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" Tmod)
###                   ("_cargs" ("_position" mn)
###                     ("_cargs" ("_position" specs) ("_position" ds))))
###                 ("_tuple"
###                   ("_record_update" ("_position" s2)
###                     ("_field_update" ("_constify" defined_mods)
###                       ("\<^const>Set.union"
###                         ("_Finset" ("_list" ("_position" mn)))
###                         ("_applC" ("_position" defined_mods)
###                           ("_position" s2)))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rerr)
###                       ("_position" err))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck)
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" env)
###           ("_idts" ("_position" ds)
###             ("_idts" ("_position" mn)
###               ("_idts" ("_position" specs) ("_position" err))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods) ("_position" s1))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_dup_types) ("_position" ds))
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" ck)
###               ("_cargs" ("_list" ("_position" mn))
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s1)
###                     ("_cargs" ("_position" ds)
###                       ("_tuple" ("_position" s2)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rerr)
###                             ("_position" err)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs"
###                 ("_applC" ("_position" Tmod)
###                   ("_cargs" ("_position" mn)
###                     ("_cargs" ("_position" specs) ("_position" ds))))
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s2)
###                     ("_datatype_field_update" ("_constify" defined_mods)
###                       ("\<^const>Set.union"
###                         ("_Finset" ("_list" ("_position" mn)))
###                         ("_applC" ("_position" defined_mods)
###                           ("_position" s2)))))
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Rerr)
###                       ("_position" err))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "evaluate_top"
  Proving monotonicity ...
### Ambiguous input (line 536 of "$AFP/CakeML/generated/CakeML/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck) ("_idts" ("_position" env) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("\<^const>List.list.Nil")
###               ("_tuple" ("_position" s)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" Rval)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v) ("_position" nsEmpty))
###                         ("_field" ("_constify" c)
###                           ("_position" nsEmpty))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" ck) ("_idts" ("_position" env) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("\<^const>List.list.Nil")
###               ("_tuple" ("_position" s)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" Rval)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v)
###                           ("_position" nsEmpty))
###                         ("_datatype_field" ("_constify" c)
###                           ("_position" nsEmpty))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "evaluate_prog"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "decs_diverges"
  Proving monotonicity ...
Proofs for inductive predicate(s) "top_diverges"
  Proving monotonicity ...
Proofs for inductive predicate(s) "prog_diverges"
  Proving monotonicity ...
### theory "Draft.BigStep"
### 1.374s elapsed time, 1.811s cpu time, 0.166s GC time
Loading theory "Draft.Semantic_Extras" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked")
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?s1 Pany ?v'1 ?env1 == Match ?env1
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?s1 (Pvar ?x1) ?v'1 ?env1 == Match ((?x1, ?v'1) # ?env1)
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?s1 (Plit ?l1) (Litv ?l'1) ?env1 ==
### if ?l1 = ?l'1 then Match ?env1
### else if lit_same_type ?l1 ?l'1 then No_match else Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?s1 (Pcon (Some ?n1) ?ps1) (Conv (Some (?n'1, ?t'1)) ?vs1)
###  ?env1 ==
### case nsLookup ?envC1 ?n1 of None => Match_type_error
### | Some (l, t1) =>
###     if same_tid t1 ?t'1 & length ?ps1 = l
###     then if same_ctor (id_to_n ?n1, t1) (?n'1, ?t'1)
###          then if length ?vs1 = l then pmatch_list ?envC1 ?s1 ?ps1 ?vs1 ?env1
###               else Match_type_error
###          else No_match
###     else Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?s1 (Pcon None ?ps1) (Conv None ?vs1) ?env1 ==
### if length ?ps1 = length ?vs1 then pmatch_list ?envC1 ?s1 ?ps1 ?vs1 ?env1
### else Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?s1 (Pref ?p1) (Loc ?lnum1) ?env1 ==
### case store_lookup ?lnum1 ?s1 of None => Match_type_error
### | Some (Refv v2) => pmatch ?envC1 ?s1 ?p1 v2 ?env1
### | Some _ => Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?s1 (Ptannot ?p1 ?t1.1) ?v2.1 ?env1 ==
### pmatch ?envC1 ?s1 ?p1 ?v2.1 ?env1
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Plit ?v1) (Conv ?va1 ?vb1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Plit ?v1) (Closure ?va1 ?vb1 ?vc1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Plit ?v1) (Recclosure ?va1 ?vb1 ?vc1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Plit ?v1) (Loc ?va1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Plit ?v1) (Vectorv ?va1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon None ?va1) (Litv ?v1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon None ?va1) (Conv (Some ?vc1) ?vb1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon None ?va1) (Closure ?v1 ?vb1 ?vc1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon None ?va1) (Recclosure ?v1 ?vb1 ?vc1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon None ?va1) (Loc ?v1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon None ?va1) (Vectorv ?v1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon ?v1 ?va1) (Litv ?vb1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon (Some ?vb1) ?va1) (Conv None ?vc1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon ?v1 ?va1) (Closure ?vb1 ?vc1 ?vd1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon ?v1 ?va1) (Recclosure ?vb1 ?vc1 ?vd1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon ?v1 ?va1) (Loc ?vb1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pcon ?v1 ?va1) (Vectorv ?vb1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pref ?v1) (Litv ?va1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pref ?v1) (Conv ?va1 ?vb1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pref ?v1) (Closure ?va1 ?vb1 ?vc1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pref ?v1) (Recclosure ?va1 ?vb1 ?vc1) ?env1 ==
### Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch ?envC1 ?uu1 (Pref ?v1) (Vectorv ?va1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch_list ?envC1 ?s1 [] [] ?env1 == Match ?env1
### Ignoring duplicate rewrite rule:
### pmatch_list ?envC1 ?s1 (?p1 # ?ps1) (?v2.1 # ?vs1) ?env1 ==
### case pmatch ?envC1 ?s1 ?p1 ?v2.1 ?env1 of No_match => No_match
### | Match_type_error => Match_type_error
### | Match x => pmatch_list ?envC1 ?s1 ?ps1 ?vs1 x
### Ignoring duplicate rewrite rule:
### pmatch_list ?envC1 ?s1 (?v1 # ?va1) [] ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### pmatch_list ?envC1 ?s1 [] (?v1 # ?va1) ?env1 == Match_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Litv ?l1.1) (Litv ?l2.1) ==
### if lit_same_type ?l1.1 ?l2.1 then Eq_val (?l1.1 = ?l2.1) else Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?l1.1) (Loc ?l2.1) == Eq_val (?l1.1 = ?l2.1)
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?cn1.1 ?vs1.1) (Conv ?cn2.1 ?vs2.1) ==
### if ?cn1.1 = ?cn2.1 & length ?vs1.1 = length ?vs2.1
### then do_eq_list ?vs1.1 ?vs2.1
### else if ctor_same_type ?cn1.1 ?cn2.1 then Eq_val False else Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?vs1.1) (Vectorv ?vs2.1) ==
### if length ?vs1.1 = length ?vs2.1 then do_eq_list ?vs1.1 ?vs2.1
### else Eq_val False
### Ignoring duplicate rewrite rule:
### do_eq (Closure ?uu1 ?uv1 ?uw1) (Closure ?ux1 ?uy1 ?uz1) == Eq_val True
### Ignoring duplicate rewrite rule:
### do_eq (Closure ?va1 ?vb1 ?vc1) (Recclosure ?vd1 ?ve1 ?vf1) == Eq_val True
### Ignoring duplicate rewrite rule:
### do_eq (Recclosure ?vg1 ?vh1 ?vi1) (Closure ?vj1 ?vk1 ?vl1) == Eq_val True
### Ignoring duplicate rewrite rule:
### do_eq (Recclosure ?vm1 ?vn1 ?vo1) (Recclosure ?vp1 ?vq1 ?vr1) == Eq_val True
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?v1 ?va1) (Litv ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?v1 ?va1) (Closure ?vb1 ?vc1 ?vd1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?v1 ?va1) (Recclosure ?vb1 ?vc1 ?vd1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?v1 ?va1) (Loc ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?v1 ?va1) (Vectorv ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Closure ?v1 ?va1 ?vb1) (Litv ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Closure ?v1 ?va1 ?vb1) (Conv ?vc1 ?vd1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Closure ?v1 ?va1 ?vb1) (Loc ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Closure ?v1 ?va1 ?vb1) (Vectorv ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Recclosure ?v1 ?va1 ?vb1) (Litv ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Recclosure ?v1 ?va1 ?vb1) (Conv ?vc1 ?vd1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Recclosure ?v1 ?va1 ?vb1) (Loc ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Recclosure ?v1 ?va1 ?vb1) (Vectorv ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?v1) (Litv ?va1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?v1) (Conv ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?v1) (Closure ?va1 ?vb1 ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?v1) (Recclosure ?va1 ?vb1 ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?v1) (Vectorv ?va1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?v1) (Litv ?va1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?v1) (Conv ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?v1) (Closure ?va1 ?vb1 ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?v1) (Recclosure ?va1 ?vb1 ?vc1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?v1) (Loc ?va1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Litv ?vb1) (Conv ?v1 ?va1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Closure ?vb1 ?vc1 ?vd1) (Conv ?v1 ?va1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Recclosure ?vb1 ?vc1 ?vd1) (Conv ?v1 ?va1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?vb1) (Conv ?v1 ?va1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?vb1) (Conv ?v1 ?va1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Litv ?vc1) (Closure ?v1 ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?vc1 ?vd1) (Closure ?v1 ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?vc1) (Closure ?v1 ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?vc1) (Closure ?v1 ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Litv ?vc1) (Recclosure ?v1 ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?vc1 ?vd1) (Recclosure ?v1 ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?vc1) (Recclosure ?v1 ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?vc1) (Recclosure ?v1 ?va1 ?vb1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Litv ?va1) (Loc ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?va1 ?vb1) (Loc ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Closure ?va1 ?vb1 ?vc1) (Loc ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Recclosure ?va1 ?vb1 ?vc1) (Loc ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Vectorv ?va1) (Loc ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Litv ?va1) (Vectorv ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Conv ?va1 ?vb1) (Vectorv ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Closure ?va1 ?vb1 ?vc1) (Vectorv ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Recclosure ?va1 ?vb1 ?vc1) (Vectorv ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq (Loc ?va1) (Vectorv ?v1) == Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq_list [] [] == Eq_val True
### Ignoring duplicate rewrite rule:
### do_eq_list (?v1.1 # ?vs1.1) (?v2.1 # ?vs2.1) ==
### case do_eq ?v1.1 ?v2.1 of
### Eq_val r => if ~ r then Eq_val False else do_eq_list ?vs1.1 ?vs2.1
### | Eq_type_error => Eq_type_error
### Ignoring duplicate rewrite rule:
### do_eq_list (?v1 # ?va1) [] == Eq_val False
### Ignoring duplicate rewrite rule:
### do_eq_list [] (?v1 # ?va1) == Eq_val False
### Ambiguous input (line 101 of "$AFP/CakeML/Semantic_Extras.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" env')
###     ("_datatype_record_update" ("_position" env)
###       ("_datatype_field_update" ("_constify" sem_env.v)
###         ("_applC" ("_position" nsBind)
###           ("_cargs" ("_position" n)
###             ("_cargs" ("_position" v0)
###               ("_applC" ("_position" sem_env.v) ("_position" env)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" env')
###     ("_record_update" ("_position" env)
###       ("_field_update" ("_constify" sem_env.v)
###         ("_applC" ("_position" nsBind)
###           ("_cargs" ("_position" n)
###             ("_cargs" ("_position" v0)
###               ("_applC" ("_position" sem_env.v) ("_position" env)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/CakeML/Semantic_Extras.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" env')
###     ("_datatype_record_update" ("_position" env)
###       ("_datatype_field_update" ("_constify" sem_env.v)
###         ("_applC" ("_position" nsBind)
###           ("_cargs" ("_position" n)
###             ("_cargs" ("_position" v0)
###               ("_applC" ("_position" build_rec_env)
###                 ("_cargs" ("_position" funs)
###                   ("_cargs" ("_position" env)
###                     ("_applC" ("_position" sem_env.v)
###                       ("_position" env))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" env')
###     ("_record_update" ("_position" env)
###       ("_field_update" ("_constify" sem_env.v)
###         ("_applC" ("_position" nsBind)
###           ("_cargs" ("_position" n)
###             ("_cargs" ("_position" v0)
###               ("_applC" ("_position" build_rec_env)
###                 ("_cargs" ("_position" funs)
###                   ("_cargs" ("_position" env)
###                     ("_applC" ("_position" sem_env.v)
###                       ("_position" env))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd (snd (snd p))))) <*mlex*> {}"
### Ambiguous input (line 187 of "$AFP/CakeML/Semantic_Extras.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_case_syntax"
###     ("_applC" ("_position" match_result)
###       ("_cargs" ("_position" env)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" v0)
###             ("_cargs" ("_position" pes) ("_position" err_v))))))
###     ("_case2"
###       ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" v0)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rerr)
###                             ("_position" err))))))))))))
###       ("_case1"
###         ("_applC" ("_position" Rval)
###           ("_tuple" ("_position" e) ("_tuple_arg" ("_position" env'))))
###         ("\<^const>HOL.All_binder" ("_position" bv)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evaluate)
###               ("_cargs" ("_position" ck)
###                 ("_cargs"
###                   ("_record_update" ("_position" env)
###                     ("_field_update" ("_constify" sem_env.v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env'))
###                           ("_applC" ("_position" sem_env.v)
###                             ("_position" env))))))
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" e) ("_position" bv))))))
###             ("_applC" ("_position" evaluate_match)
###               ("_cargs" ("_position" ck)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" v0)
###                       ("_cargs" ("_position" pes)
###                         ("_cargs" ("_position" err_v)
###                           ("_position" bv))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_case_syntax"
###     ("_applC" ("_position" match_result)
###       ("_cargs" ("_position" env)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" v0)
###             ("_cargs" ("_position" pes) ("_position" err_v))))))
###     ("_case2"
###       ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" v0)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple" ("_position" s)
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rerr)
###                             ("_position" err))))))))))))
###       ("_case1"
###         ("_applC" ("_position" Rval)
###           ("_tuple" ("_position" e) ("_tuple_arg" ("_position" env'))))
###         ("\<^const>HOL.All_binder" ("_position" bv)
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" evaluate)
###               ("_cargs" ("_position" ck)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" env)
###                     ("_datatype_field_update" ("_constify" sem_env.v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env'))
###                           ("_applC" ("_position" sem_env.v)
###                             ("_position" env))))))
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" e) ("_position" bv))))))
###             ("_applC" ("_position" evaluate_match)
###               ("_cargs" ("_position" ck)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" v0)
###                       ("_cargs" ("_position" pes)
###                         ("_cargs" ("_position" err_v)
###                           ("_position" bv))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/CakeML/Semantic_Extras.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" ck)
###       ("_cargs"
###         ("_record_update" ("_position" env)
###           ("_field_update" ("_constify" sem_env.v)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs"
###                 ("_applC" ("_position" alist_to_ns) ("_position" env'))
###                 ("_applC" ("_position" sem_env.v) ("_position" env))))))
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" e) ("_position" bv)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" ck)
###       ("_cargs"
###         ("_datatype_record_update" ("_position" env)
###           ("_datatype_field_update" ("_constify" sem_env.v)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs"
###                 ("_applC" ("_position" alist_to_ns) ("_position" env'))
###                 ("_applC" ("_position" sem_env.v) ("_position" env))))))
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" e) ("_position" bv)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/CakeML/Semantic_Extras.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_case_syntax" ("_position" bv)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" Rval) ("_position" v))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e) ("_position" env'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" match_result)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" v0)
###                       ("_cargs" ("_position" pes) ("_position" err_v))))))
###               ("_applC" ("_position" Rval)
###                 ("_tuple" ("_position" e)
###                   ("_tuple_arg" ("_position" env')))))
###             ("_applC" ("_position" evaluate)
###               ("_cargs" ("_position" ck)
###                 ("_cargs"
###                   ("_record_update" ("_position" env)
###                     ("_field_update" ("_constify" sem_env.v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env'))
###                           ("_applC" ("_position" sem_env.v)
###                             ("_position" env))))))
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" e)
###                       ("_tuple" ("_position" s')
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rval)
###                             ("_position" v))))))))))))
###       ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" match_result)
###               ("_cargs" ("_position" env)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" v0)
###                     ("_cargs" ("_position" pes) ("_position" err_v))))))
###             ("_applC" ("_position" Rerr) ("_position" err)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" e) ("_position" env'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" match_result)
###                   ("_cargs" ("_position" env)
###                     ("_cargs" ("_position" s)
###                       ("_cargs" ("_position" v0)
###                         ("_cargs" ("_position" pes) ("_position" err_v))))))
###                 ("_applC" ("_position" Rval)
###                   ("_tuple" ("_position" e)
###                     ("_tuple_arg" ("_position" env')))))
###               ("_applC" ("_position" evaluate)
###                 ("_cargs" ("_position" ck)
###                   ("_cargs"
###                     ("_datatype_record_update" ("_position" env)
###                       ("_datatype_field_update" ("_constify" sem_env.v)
###                         ("_applC" ("_position" nsAppend)
###                           ("_cargs"
###                             ("_applC" ("_position" alist_to_ns)
###                               ("_position" env'))
###                             ("_applC" ("_position" sem_env.v)
###                               ("_position" env))))))
###                     ("_cargs" ("_position" s)
###                       ("_cargs" ("_position" e)
###                         ("_tuple" ("_position" s')
###                           ("_tuple_arg"
###                             ("_applC" ("_position" Rerr)
###                               ("_position" err))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_case_syntax" ("_position" bv)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" Rval) ("_position" v))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e) ("_position" env'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" match_result)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" v0)
###                       ("_cargs" ("_position" pes) ("_position" err_v))))))
###               ("_applC" ("_position" Rval)
###                 ("_tuple" ("_position" e)
###                   ("_tuple_arg" ("_position" env')))))
###             ("_applC" ("_position" evaluate)
###               ("_cargs" ("_position" ck)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" env)
###                     ("_datatype_field_update" ("_constify" sem_env.v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env'))
###                           ("_applC" ("_position" sem_env.v)
###                             ("_position" env))))))
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" e)
###                       ("_tuple" ("_position" s')
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rval)
###                             ("_position" v))))))))))))
###       ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" match_result)
###               ("_cargs" ("_position" env)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" v0)
###                     ("_cargs" ("_position" pes) ("_position" err_v))))))
###             ("_applC" ("_position" Rerr) ("_position" err)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" e) ("_position" env'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" match_result)
###                   ("_cargs" ("_position" env)
###                     ("_cargs" ("_position" s)
###                       ("_cargs" ("_position" v0)
###                         ("_cargs" ("_position" pes) ("_position" err_v))))))
###                 ("_applC" ("_position" Rval)
###                   ("_tuple" ("_position" e)
###                     ("_tuple_arg" ("_position" env')))))
###               ("_applC" ("_position" evaluate)
###                 ("_cargs" ("_position" ck)
###                   ("_cargs"
###                     ("_datatype_record_update" ("_position" env)
###                       ("_datatype_field_update" ("_constify" sem_env.v)
###                         ("_applC" ("_position" nsAppend)
###                           ("_cargs"
###                             ("_applC" ("_position" alist_to_ns)
###                               ("_position" env'))
###                             ("_applC" ("_position" sem_env.v)
###                               ("_position" env))))))
###                     ("_cargs" ("_position" s)
###                       ("_cargs" ("_position" e)
###                         ("_tuple" ("_position" s')
###                           ("_tuple_arg"
###                             ("_applC" ("_position" Rerr)
###                               ("_position" err))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_case_syntax" ("_position" bv)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" Rval) ("_position" v))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e) ("_position" env'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" match_result)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" v0)
###                       ("_cargs" ("_position" pes) ("_position" err_v))))))
###               ("_applC" ("_position" Rval)
###                 ("_tuple" ("_position" e)
###                   ("_tuple_arg" ("_position" env')))))
###             ("_applC" ("_position" evaluate)
###               ("_cargs" ("_position" ck)
###                 ("_cargs"
###                   ("_record_update" ("_position" env)
###                     ("_field_update" ("_constify" sem_env.v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env'))
###                           ("_applC" ("_position" sem_env.v)
###                             ("_position" env))))))
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" e)
###                       ("_tuple" ("_position" s')
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rval)
###                             ("_position" v))))))))))))
###       ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" match_result)
###               ("_cargs" ("_position" env)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" v0)
###                     ("_cargs" ("_position" pes) ("_position" err_v))))))
###             ("_applC" ("_position" Rerr) ("_position" err)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" e) ("_position" env'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" match_result)
###                   ("_cargs" ("_position" env)
###                     ("_cargs" ("_position" s)
###                       ("_cargs" ("_position" v0)
###                         ("_cargs" ("_position" pes) ("_position" err_v))))))
###                 ("_applC" ("_position" Rval)
###                   ("_tuple" ("_position" e)
###                     ("_tuple_arg" ("_position" env')))))
###               ("_applC" ("_position" evaluate)
###                 ("_cargs" ("_position" ck)
###                   ("_cargs"
###                     ("_record_update" ("_position" env)
###                       ("_field_update" ("_constify" sem_env.v)
###                         ("_applC" ("_position" nsAppend)
###                           ("_cargs"
###                             ("_applC" ("_position" alist_to_ns)
###                               ("_position" env'))
###                             ("_applC" ("_position" sem_env.v)
###                               ("_position" env))))))
###                     ("_cargs" ("_position" s)
###                       ("_cargs" ("_position" e)
###                         ("_tuple" ("_position" s')
###                           ("_tuple_arg"
###                             ("_applC" ("_position" Rerr)
###                               ("_position" err))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_case_syntax" ("_position" bv)
###     ("_case2"
###       ("_case1" ("_applC" ("_position" Rval) ("_position" v))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e) ("_position" env'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" match_result)
###                 ("_cargs" ("_position" env)
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" v0)
###                       ("_cargs" ("_position" pes) ("_position" err_v))))))
###               ("_applC" ("_position" Rval)
###                 ("_tuple" ("_position" e)
###                   ("_tuple_arg" ("_position" env')))))
###             ("_applC" ("_position" evaluate)
###               ("_cargs" ("_position" ck)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" env)
###                     ("_datatype_field_update" ("_constify" sem_env.v)
###                       ("_applC" ("_position" nsAppend)
###                         ("_cargs"
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_position" env'))
###                           ("_applC" ("_position" sem_env.v)
###                             ("_position" env))))))
###                   ("_cargs" ("_position" s)
###                     ("_cargs" ("_position" e)
###                       ("_tuple" ("_position" s')
###                         ("_tuple_arg"
###                           ("_applC" ("_position" Rval)
###                             ("_position" v))))))))))))
###       ("_case1" ("_applC" ("_position" Rerr) ("_position" err))
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" match_result)
###               ("_cargs" ("_position" env)
###                 ("_cargs" ("_position" s)
###                   ("_cargs" ("_position" v0)
###                     ("_cargs" ("_position" pes) ("_position" err_v))))))
###             ("_applC" ("_position" Rerr) ("_position" err)))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" e) ("_position" env'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" match_result)
###                   ("_cargs" ("_position" env)
###                     ("_cargs" ("_position" s)
###                       ("_cargs" ("_position" v0)
###                         ("_cargs" ("_position" pes) ("_position" err_v))))))
###                 ("_applC" ("_position" Rval)
###                   ("_tuple" ("_position" e)
###                     ("_tuple_arg" ("_position" env')))))
###               ("_applC" ("_position" evaluate)
###                 ("_cargs" ("_position" ck)
###                   ("_cargs"
###                     ("_record_update" ("_position" env)
###                       ("_field_update" ("_constify" sem_env.v)
###                         ("_applC" ("_position" nsAppend)
###                           ("_cargs"
###                             ("_applC" ("_position" alist_to_ns)
###                               ("_position" env'))
###                             ("_applC" ("_position" sem_env.v)
###                               ("_position" env))))))
###                     ("_cargs" ("_position" s)
###                       ("_cargs" ("_position" e)
###                         ("_tuple" ("_position" s')
###                           ("_tuple_arg"
###                             ("_applC" ("_position" Rerr)
###                               ("_position" err))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Semantic_Extras"
### 5.110s elapsed time, 5.316s cpu time, 0.339s GC time
Loading theory "Draft.Big_Step_Determ" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked")
Loading theory "Draft.Big_Step_Total" (required by "Draft.Big_Step_ClockedTemplates" via "Draft.Big_Step_Clocked")
### theory "Draft.Big_Step_Determ"
### 0.044s elapsed time, 0.091s cpu time, 0.000s GC time
### theory "Draft.Big_Step_Total"
### 0.061s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.Big_Step_Clocked" (required by "Draft.Big_Step_ClockedTemplates")
### Ambiguous input (line 46 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_record_update" ("_position" st')
###                           ("_field_update" ("_constify" clock)
###                             ("_position" cnt)))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_record_update" ("_position" st')
###                           ("_field_update" ("_constify" clock)
###                             ("_position" cnt)))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" st')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("_position" cnt)))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" st')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("_position" cnt)))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_record_update" ("_position" st')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_record_update" ("_position" st')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" st')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" st')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_record_update" ("_position" st')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_record_update" ("_position" st')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" st')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" st') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" st') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" st')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v)
###                   ("_tuple" ("_position" st')
###                     ("_tuple_arg" ("_position" r1)))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r1)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt)))
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" pes)
###                   ("_cargs" ("_position" err_v)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" st')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" cnt)))
###                       ("_tuple_arg" ("_position" r1)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v)
###                   ("_tuple" ("_position" st')
###                     ("_tuple_arg" ("_position" r1)))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r1)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt)))
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" pes)
###                   ("_cargs" ("_position" err_v)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" st')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" cnt)))
###                       ("_tuple_arg" ("_position" r1)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v)
###                   ("_tuple" ("_position" st')
###                     ("_tuple_arg" ("_position" r1)))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r1)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt)))
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" pes)
###                   ("_cargs" ("_position" err_v)
###                     ("_tuple"
###                       ("_record_update" ("_position" st')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" cnt)))
###                       ("_tuple_arg" ("_position" r1)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v)
###                   ("_tuple" ("_position" st')
###                     ("_tuple_arg" ("_position" r1)))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r1)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt)))
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" pes)
###                   ("_cargs" ("_position" err_v)
###                     ("_tuple"
###                       ("_record_update" ("_position" st')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" cnt)))
###                       ("_tuple_arg" ("_position" r1)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es)
###               ("_tuple" ("_position" st')
###                 ("_tuple_arg" ("_position" r2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r2)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_list)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt)))
###               ("_cargs" ("_position" es)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" st')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt)))
###                   ("_tuple_arg" ("_position" r2)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es)
###               ("_tuple" ("_position" st')
###                 ("_tuple_arg" ("_position" r2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r2)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_list)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt)))
###               ("_cargs" ("_position" es)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" st')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt)))
###                   ("_tuple_arg" ("_position" r2)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es)
###               ("_tuple" ("_position" st')
###                 ("_tuple_arg" ("_position" r2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r2)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_list)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt)))
###               ("_cargs" ("_position" es)
###                 ("_tuple"
###                   ("_record_update" ("_position" st')
###                     ("_field_update" ("_constify" clock) ("_position" cnt)))
###                   ("_tuple_arg" ("_position" r2)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es)
###               ("_tuple" ("_position" st')
###                 ("_tuple_arg" ("_position" r2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r2)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_list)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt)))
###               ("_cargs" ("_position" es)
###                 ("_tuple"
###                   ("_record_update" ("_position" st')
###                     ("_field_update" ("_constify" clock) ("_position" cnt)))
###                   ("_tuple_arg" ("_position" r2)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" st')
###                 ("_tuple_arg" ("_position" r3)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r3)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt)))
###               ("_cargs" ("_position" e)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" st')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt)))
###                   ("_tuple_arg" ("_position" r3)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" st')
###                 ("_tuple_arg" ("_position" r3)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r3)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt)))
###               ("_cargs" ("_position" e)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" st')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt)))
###                   ("_tuple_arg" ("_position" r3)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" st')
###                 ("_tuple_arg" ("_position" r3)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r3)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt)))
###               ("_cargs" ("_position" e)
###                 ("_tuple"
###                   ("_record_update" ("_position" st')
###                     ("_field_update" ("_constify" clock) ("_position" cnt)))
###                   ("_tuple_arg" ("_position" r3)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" st')
###                 ("_tuple_arg" ("_position" r3)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r3)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt)))
###               ("_cargs" ("_position" e)
###                 ("_tuple"
###                   ("_record_update" ("_position" st')
###                     ("_field_update" ("_constify" clock) ("_position" cnt)))
###                   ("_tuple_arg" ("_position" r3)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" count1)))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" count1)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" count1)))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" count1)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" count1)))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count1)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" count1)))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count1)))
###               ("_tuple_arg" ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" count2)))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" count2)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" count2)))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" count2)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" count2)))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count2)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" count2)))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count2)))
###               ("_tuple_arg" ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 72 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_record_update" ("_position" s')
###                           ("_field_update" ("_constify" clock)
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_applC" ("_position" clock)
###                                 ("_position" s'))
###                               ("_position" extra))))
###                         ("_tuple_arg" ("_position" r'))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_record_update" ("_position" s')
###                           ("_field_update" ("_constify" clock)
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_applC" ("_position" clock)
###                                 ("_position" s'))
###                               ("_position" extra))))
###                         ("_tuple_arg" ("_position" r'))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" s')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_applC" ("_position" clock)
###                                 ("_position" s'))
###                               ("_position" extra))))
###                         ("_tuple_arg" ("_position" r'))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" s')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("\<^const>Groups.plus_class.plus"
###                               ("_applC" ("_position" clock)
###                                 ("_position" s'))
###                               ("_position" extra))))
###                         ("_tuple_arg" ("_position" r'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r') ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" r')
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r1)))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r1)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" pes)
###                   ("_cargs" ("_position" err_v)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r1)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r1)))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r1)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" pes)
###                   ("_cargs" ("_position" err_v)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r1)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r1)))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r1)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" pes)
###                   ("_cargs" ("_position" err_v)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r1)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r1)))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r1)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_match)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" pes)
###                   ("_cargs" ("_position" err_v)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r1)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 84 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r2)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_list)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" es)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s'))
###                         ("_position" extra))))
###                   ("_tuple_arg" ("_position" r2)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r2)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_list)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" es)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s'))
###                         ("_position" extra))))
###                   ("_tuple_arg" ("_position" r2)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r2)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_list)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" es)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s'))
###                         ("_position" extra))))
###                   ("_tuple_arg" ("_position" r2)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r2)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r2)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_list)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" es)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s'))
###                         ("_position" extra))))
###                   ("_tuple_arg" ("_position" r2)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r3)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r3)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" e)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s'))
###                         ("_position" extra))))
###                   ("_tuple_arg" ("_position" r3)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r3)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r3)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" e)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s'))
###                         ("_position" extra))))
###                   ("_tuple_arg" ("_position" r3)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r3)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r3)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" e)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s'))
###                         ("_position" extra))))
###                   ("_tuple_arg" ("_position" r3)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r3)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" r3)
###         ("_applC" ("_position" Rerr)
###           ("_applC" ("_position" Rabort) ("_position" Rtimeout_error)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s))
###                     ("_position" extra))))
###               ("_cargs" ("_position" e)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s'))
###                         ("_position" extra))))
###                   ("_tuple_arg" ("_position" r3)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_match)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock) ("_position" c)))
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" pes)
###                       ("_cargs" ("_position" err_v)
###                         ("_tuple"
###                           ("_record_update" ("_position" s')
###                             ("_field_update" ("_constify" clock)
###                               ("\<^const>Groups.zero_class.zero")))
###                           ("_tuple_arg" ("_position" r')))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_match)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" c)))
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" pes)
###                       ("_cargs" ("_position" err_v)
###                         ("_tuple"
###                           ("_record_update" ("_position" s')
###                             ("_field_update" ("_constify" clock)
###                               ("\<^const>Groups.zero_class.zero")))
###                           ("_tuple_arg" ("_position" r')))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_match)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock) ("_position" c)))
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" pes)
###                       ("_cargs" ("_position" err_v)
###                         ("_tuple"
###                           ("_datatype_record_update" ("_position" s')
###                             ("_datatype_field_update" ("_constify" clock)
###                               ("\<^const>Groups.zero_class.zero")))
###                           ("_tuple_arg" ("_position" r')))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r1)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_match)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" c)))
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" pes)
###                       ("_cargs" ("_position" err_v)
###                         ("_tuple"
###                           ("_datatype_record_update" ("_position" s')
###                             ("_datatype_field_update" ("_constify" clock)
###                               ("\<^const>Groups.zero_class.zero")))
###                           ("_tuple_arg" ("_position" r')))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_list)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock) ("_position" c)))
###                   ("_cargs" ("_position" es)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_list)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" c)))
###                   ("_cargs" ("_position" es)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_list)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock) ("_position" c)))
###                   ("_cargs" ("_position" es)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r2)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_list)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" c)))
###                   ("_cargs" ("_position" es)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock) ("_position" c)))
###                   ("_cargs" ("_position" e)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" c)))
###                   ("_cargs" ("_position" e)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock) ("_position" c)))
###                   ("_cargs" ("_position" e)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r'))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r3)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" c)))
###                   ("_cargs" ("_position" e)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r1))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" c)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r1))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r1)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r1))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" c)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r1))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r1)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r1))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" c)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r1))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r1)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r1))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" c)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r1))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r1)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 141 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.All_binder" ("_position" r)
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" e) ("_position" r))))))))
###     ("\<^const>HOL.All_binder" ("_position" c)
###       ("\<^const>HOL.Ex_binder" ("_position" s')
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" evaluate)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" c)))
###                   ("_cargs" ("_position" e)
###                     ("_tuple" ("_position" s')
###                       ("_tuple_arg"
###                         ("_applC" ("_position" Rerr)
###                           ("_applC" ("_position" Rabort)
###                             ("_position" Rtimeout_error))))))))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s'))
###             ("\<^const>Groups.zero_class.zero")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.All_binder" ("_position" r)
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" e) ("_position" r))))))))
###     ("\<^const>HOL.All_binder" ("_position" c)
###       ("\<^const>HOL.Ex_binder" ("_position" s')
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" evaluate)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock) ("_position" c)))
###                   ("_cargs" ("_position" e)
###                     ("_tuple" ("_position" s')
###                       ("_tuple_arg"
###                         ("_applC" ("_position" Rerr)
###                           ("_applC" ("_position" Rabort)
###                             ("_position" Rtimeout_error))))))))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s'))
###             ("\<^const>Groups.zero_class.zero")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 165 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra1)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r1)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra1)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" count)))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_record_update" ("_position" s')
###                           ("_field_update" ("_constify" clock)
###                             ("_position" count')))
###                         ("_tuple_arg" ("_position" r'))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra1)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r1)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra1)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count)))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_record_update" ("_position" s')
###                           ("_field_update" ("_constify" clock)
###                             ("_position" count')))
###                         ("_tuple_arg" ("_position" r'))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra1)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r1)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra1)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" count)))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" s')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("_position" count')))
###                         ("_tuple_arg" ("_position" r'))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_match)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" pes)
###                 ("_cargs" ("_position" err_v) ("_position" r1)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra1)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r1)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra1)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_match)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count)))
###                 ("_cargs" ("_position" v)
###                   ("_cargs" ("_position" pes)
###                     ("_cargs" ("_position" err_v)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" s')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("_position" count')))
###                         ("_tuple_arg" ("_position" r'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 172 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r2)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra2)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" count)))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count')))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r2)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra2)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count)))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count')))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r2)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra2)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" count)))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count')))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_list)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" es) ("_position" r2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r2)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra2)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_list)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count)))
###                 ("_cargs" ("_position" es)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count')))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra3)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r3)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra3)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" count)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count')))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra3)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r3)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra3)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count')))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra3)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r3)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra3)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" count)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count')))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" e) ("_position" r3)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra3)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" r3)
###               ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" clock) ("_position" s'))
###                 ("\<^const>Groups.plus_class.plus" ("_position" count')
###                   ("_position" extra3)))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count)))
###                 ("_cargs" ("_position" e)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count')))
###                     ("_tuple_arg" ("_position" r'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 286 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r')))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r')))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r')))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" e)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
[| evaluate ?ck ?env ?s ?e ?r3.0;
   clock ?s = ?count + ?extra3.0 &
   ?r3.0 = (?s', ?r') & clock ?s' = ?count' + ?extra3.0 & ?ck = True |]
==> evaluate True ?env (update_clock (%_. ?count) ?s) ?e
     (update_clock (%_. ?count') ?s', ?r')
### Ambiguous input (line 300 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" count)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" count)))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" count)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" count)))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" count)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" count)))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" count)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" count)))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 323 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_dec)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" count1)))
###             ("_cargs" ("_position" d)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_dec)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" count1)))
###             ("_cargs" ("_position" d)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_dec)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" count1)))
###             ("_cargs" ("_position" d)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_dec)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" count1)))
###             ("_cargs" ("_position" d)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_tuple_arg" ("_position" r))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_dec)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" count2)))
###             ("_cargs" ("_position" d)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_dec)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" count2)))
###             ("_cargs" ("_position" d)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_dec)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" count2)))
###             ("_cargs" ("_position" d)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_dec)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" count2)))
###             ("_cargs" ("_position" d)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_tuple_arg" ("_position" r))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 334 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" d)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 406 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.minus_class.minus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_applC" ("_position" clock)
###                         ("_applC" ("_position" fst) ("_position" res))))))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_record_update"
###                       ("_applC" ("_position" fst) ("_position" res))
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" snd)
###                         ("_position" res)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.minus_class.minus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_applC" ("_position" clock)
###                         ("_applC" ("_position" fst) ("_position" res))))))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_record_update"
###                       ("_applC" ("_position" fst) ("_position" res))
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" snd)
###                         ("_position" res)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.minus_class.minus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_applC" ("_position" clock)
###                         ("_applC" ("_position" fst) ("_position" res))))))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update"
###                       ("_applC" ("_position" fst) ("_position" res))
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" snd)
###                         ("_position" res)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" evaluate_dec)
###         ("_cargs" ("_position" ck)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.minus_class.minus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_applC" ("_position" clock)
###                         ("_applC" ("_position" fst) ("_position" res))))))
###                 ("_cargs" ("_position" d)
###                   ("_tuple"
###                     ("_datatype_record_update"
###                       ("_applC" ("_position" fst) ("_position" res))
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg"
###                       ("_applC" ("_position" snd)
###                         ("_position" res)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 424 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" count')
###                 ("_position" extra)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" count')))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" count')
###                 ("_position" extra)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" count')))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" count')
###                 ("_position" extra)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" count')))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" count)
###         ("_idts" ("_position" count')
###           ("_idts" ("_position" s') ("_position" r))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" count')
###                 ("_position" extra)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" count')))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 453 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_dec)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" env)
###                   ("_cargs"
###                     ("_datatype_record_update" ("_position" s)
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" c)))
###                     ("_cargs" ("_position" d)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" s')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_dec)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" env)
###                   ("_cargs"
###                     ("_record_update" ("_position" s)
###                       ("_field_update" ("_constify" clock) ("_position" c)))
###                     ("_cargs" ("_position" d)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" s')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_dec)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" env)
###                   ("_cargs"
###                     ("_datatype_record_update" ("_position" s)
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" c)))
###                     ("_cargs" ("_position" d)
###                       ("_tuple"
###                         ("_record_update" ("_position" s')
###                           ("_field_update" ("_constify" clock)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_dec)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" env)
###                   ("_cargs"
###                     ("_record_update" ("_position" s)
###                       ("_field_update" ("_constify" clock) ("_position" c)))
###                     ("_cargs" ("_position" d)
###                       ("_tuple"
###                         ("_record_update" ("_position" s')
###                           ("_field_update" ("_constify" clock)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 528 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s))
###                         ("_position" extra))))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s))
###                         ("_position" extra))))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s))
###                         ("_position" extra))))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s))
###                         ("_position" extra))))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 552 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs" ("_position" d)
###                 ("_tuple" ("_position" s2)
###                   ("_tuple_arg" ("_position" r)))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s1)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" c)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s2)
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r)))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s1))
###             ("_applC" ("_position" clock) ("_position" s2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs" ("_position" d)
###                 ("_tuple" ("_position" s2)
###                   ("_tuple_arg" ("_position" r)))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s1)
###                     ("_field_update" ("_constify" clock) ("_position" c)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s2)
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r)))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s1))
###             ("_applC" ("_position" clock) ("_position" s2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs" ("_position" d)
###                 ("_tuple" ("_position" s2)
###                   ("_tuple_arg" ("_position" r)))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s1)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" c)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s2)
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r)))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s1))
###             ("_applC" ("_position" clock) ("_position" s2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_dec)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s1)
###               ("_cargs" ("_position" d)
###                 ("_tuple" ("_position" s2)
###                   ("_tuple_arg" ("_position" r)))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_dec)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s1)
###                     ("_field_update" ("_constify" clock) ("_position" c)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s2)
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.zero_class.zero")))
###                       ("_tuple_arg" ("_position" r)))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s1))
###             ("_applC" ("_position" clock) ("_position" s2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 578 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" ds) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" env)
###                   ("_cargs"
###                     ("_datatype_record_update" ("_position" s)
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" c)))
###                     ("_cargs" ("_position" ds)
###                       ("_tuple"
###                         ("_record_update" ("_position" s')
###                           ("_field_update" ("_constify" clock)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" ds) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" env)
###                   ("_cargs"
###                     ("_record_update" ("_position" s)
###                       ("_field_update" ("_constify" clock) ("_position" c)))
###                     ("_cargs" ("_position" ds)
###                       ("_tuple"
###                         ("_record_update" ("_position" s')
###                           ("_field_update" ("_constify" clock)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" ds) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" env)
###                   ("_cargs"
###                     ("_datatype_record_update" ("_position" s)
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" c)))
###                     ("_cargs" ("_position" ds)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" s')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" ds) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" s') ("_position" r))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.eq" ("_position" ck) ("_position" False)))
###         ("\<^const>HOL.Ex_binder" ("_position" c)
###           ("_applC" ("_position" evaluate_decs)
###             ("_cargs" ("_position" True)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" env)
###                   ("_cargs"
###                     ("_record_update" ("_position" s)
###                       ("_field_update" ("_constify" clock) ("_position" c)))
###                     ("_cargs" ("_position" ds)
###                       ("_tuple"
###                         ("_datatype_record_update" ("_position" s')
###                           ("_datatype_field_update" ("_constify" clock)
###                             ("\<^const>Groups.zero_class.zero")))
###                         ("_tuple_arg" ("_position" r))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 606 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" count)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" count)))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" count)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" count)))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" count)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" count)))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" count)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" count)))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 612 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" count1)))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" count1)))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" count1)))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" count1)))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_tuple_arg" ("_position" r))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 613 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" count2)))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" count2)))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" count2)))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" count2)))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_tuple_arg" ("_position" r))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 617 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" s)
###                 ("_cargs" ("_position" ds)
###                   ("_tuple" ("_position" s')
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("_position" count1)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" count1)))
###                     ("_tuple_arg" ("_position" r)))))))))
###       ("_applC" ("_position" evaluate_decs)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" count2)))
###                 ("_cargs" ("_position" ds)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" count2)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 694 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" extra)
###         ("_idts" ("_position" count)
###           ("_idts" ("_position" count')
###             ("_idts" ("_position" s') ("_position" r')))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" count')
###                 ("_position" extra)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" count')))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" extra)
###         ("_idts" ("_position" count)
###           ("_idts" ("_position" count')
###             ("_idts" ("_position" s') ("_position" r')))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" count')
###                 ("_position" extra)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("_position" count')))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" extra)
###         ("_idts" ("_position" count)
###           ("_idts" ("_position" count')
###             ("_idts" ("_position" s') ("_position" r')))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" count')
###                 ("_position" extra)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" count')))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" extra)
###         ("_idts" ("_position" count)
###           ("_idts" ("_position" count')
###             ("_idts" ("_position" s') ("_position" r')))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" count)
###               ("_position" extra)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" count')
###                 ("_position" extra)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r'))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count)))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("_position" count')))
###                       ("_tuple_arg" ("_position" r')))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 711 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" clock) ("_position" s))
###                   ("_applC" ("_position" clock)
###                     ("_applC" ("_position" fst) ("_position" res))))))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_record_update"
###                   ("_applC" ("_position" fst) ("_position" res))
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_tuple_arg"
###                   ("_applC" ("_position" snd) ("_position" res)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" clock) ("_position" s))
###                   ("_applC" ("_position" clock)
###                     ("_applC" ("_position" fst) ("_position" res))))))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_record_update"
###                   ("_applC" ("_position" fst) ("_position" res))
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_tuple_arg"
###                   ("_applC" ("_position" snd) ("_position" res)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" clock) ("_position" s))
###                   ("_applC" ("_position" clock)
###                     ("_applC" ("_position" fst) ("_position" res))))))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_datatype_record_update"
###                   ("_applC" ("_position" fst) ("_position" res))
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_tuple_arg"
###                   ("_applC" ("_position" snd) ("_position" res)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_decs)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" clock) ("_position" s))
###                   ("_applC" ("_position" clock)
###                     ("_applC" ("_position" fst) ("_position" res))))))
###             ("_cargs" ("_position" ds)
###               ("_tuple"
###                 ("_datatype_record_update"
###                   ("_applC" ("_position" fst) ("_position" res))
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_tuple_arg"
###                   ("_applC" ("_position" snd) ("_position" res)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 720 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s))
###                         ("_position" extra))))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s))
###                         ("_position" extra))))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_record_update" ("_position" s')
###                         ("_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_record_update" ("_position" s)
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s))
###                         ("_position" extra))))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_decs)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" d) ("_position" res))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_decs)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" env)
###                 ("_cargs"
###                   ("_datatype_record_update" ("_position" s)
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" clock) ("_position" s))
###                         ("_position" extra))))
###                   ("_cargs" ("_position" d)
###                     ("_tuple"
###                       ("_datatype_record_update" ("_position" s')
###                         ("_datatype_field_update" ("_constify" clock)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("_applC" ("_position" clock) ("_position" s'))
###                             ("_position" extra))))
###                       ("_tuple_arg" ("_position" r)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 734 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" cnt)))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" cnt)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" cnt)))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" cnt)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" cnt)))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" cnt)))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt)))
###               ("_tuple_arg" ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 762 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" tp)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" count1)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" count1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_top)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" count2)))
###               ("_cargs" ("_position" tp)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" count2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 845 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 864 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c)
###     ("_applC" ("_position" evaluate_top)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" c)))
###             ("_cargs" ("_position" tp)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c)
###     ("_applC" ("_position" evaluate_top)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" c)))
###             ("_cargs" ("_position" tp)
###               ("_tuple"
###                 ("_record_update" ("_position" s')
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c)
###     ("_applC" ("_position" evaluate_top)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_record_update" ("_position" s)
###               ("_field_update" ("_constify" clock) ("_position" c)))
###             ("_cargs" ("_position" tp)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_tuple_arg" ("_position" r))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" c)
###     ("_applC" ("_position" evaluate_top)
###       ("_cargs" ("_position" True)
###         ("_cargs" ("_position" env)
###           ("_cargs"
###             ("_datatype_record_update" ("_position" s)
###               ("_datatype_field_update" ("_constify" clock)
###                 ("_position" c)))
###             ("_cargs" ("_position" tp)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" s')
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.zero_class.zero")))
###                 ("_tuple_arg" ("_position" r))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 915 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_top)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" tp)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_top)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" c)))
###                 ("_cargs" ("_position" tp)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_top)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" tp)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_top)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" c)))
###                 ("_cargs" ("_position" tp)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_top)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" tp)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_top)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" c)))
###                 ("_cargs" ("_position" tp)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_top)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" tp)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_top)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" c)))
###                 ("_cargs" ("_position" tp)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 946 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" cnt)))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" cnt')))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" cnt)))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" cnt')))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" cnt)))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt')))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" ck)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" cnt)))
###           ("_cargs" ("_position" tp)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt')))
###               ("_tuple_arg" ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 965 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_position" extra))))
###           ("_cargs" ("_position" d)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s'))
###                     ("_position" extra))))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_position" extra))))
###           ("_cargs" ("_position" d)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s'))
###                     ("_position" extra))))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_position" extra))))
###           ("_cargs" ("_position" d)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s'))
###                     ("_position" extra))))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_top)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("\<^const>Groups.plus_class.plus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_position" extra))))
###           ("_cargs" ("_position" d)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("_applC" ("_position" clock) ("_position" s'))
###                     ("_position" extra))))
###               ("_tuple_arg" ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 987 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" cnt) ("_idts" ("_position" s') ("_position" r)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" cnt) ("_idts" ("_position" s') ("_position" r)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" cnt) ("_idts" ("_position" s') ("_position" r)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" cnt) ("_idts" ("_position" s') ("_position" r)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort)
###                 ("_position" Rtimeout_error)))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" False)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" cnt)))
###                     ("_tuple_arg" ("_position" r))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1012 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" cnt1)))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt1)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" cnt1)))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt1)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" cnt1)))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" cnt1)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" cnt1)))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" cnt1)))
###               ("_tuple_arg" ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1013 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" cnt2)))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt2)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" cnt2)))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt2)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock) ("_position" cnt2)))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" cnt2)))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" False)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("_position" cnt2)))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock) ("_position" cnt2)))
###               ("_tuple_arg" ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1022 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs" ("_position" s)
###               ("_cargs" ("_position" prog)
###                 ("_tuple" ("_position" s')
###                   ("_tuple_arg" ("_position" r))))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" r)
###           ("_applC" ("_position" Rerr)
###             ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###           ("_applC" ("_position" clock) ("_position" s')))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" cnt1)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("_position" cnt1)))
###                   ("_tuple_arg" ("_position" r))))))))
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" False)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" cnt2)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("_position" cnt2)))
###                   ("_tuple_arg" ("_position" r)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1077 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s')
###         ("_idts" ("_position" r) ("_position" extra)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" res)
###             ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" ck) ("_position" True))
###             ("\<^const>HOL.not_equal" ("_position" r)
###               ("_applC" ("_position" Rerr)
###                 ("_applC" ("_position" Rabort)
###                   ("_position" Rtimeout_error))))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" clock) ("_position" s))
###                       ("_position" extra))))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("_applC" ("_position" clock) ("_position" s'))
###                           ("_position" extra))))
###                     ("_tuple_arg" ("_position" r))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1082 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" extra)
###         ("_idts" ("_position" cnt)
###           ("_idts" ("_position" cnt')
###             ("_idts" ("_position" s') ("_position" r)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" extra)
###               ("_position" cnt)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" extra)
###                 ("_position" cnt')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" cnt')))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" extra)
###         ("_idts" ("_position" cnt)
###           ("_idts" ("_position" cnt')
###             ("_idts" ("_position" s') ("_position" r)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" extra)
###               ("_position" cnt)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" extra)
###                 ("_position" cnt')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("_position" cnt')))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" extra)
###         ("_idts" ("_position" cnt)
###           ("_idts" ("_position" cnt')
###             ("_idts" ("_position" s') ("_position" r)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" extra)
###               ("_position" cnt)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" extra)
###                 ("_position" cnt')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" cnt)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" cnt')))
###                     ("_tuple_arg" ("_position" r))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" ck)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog) ("_position" res)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" extra)
###         ("_idts" ("_position" cnt)
###           ("_idts" ("_position" cnt')
###             ("_idts" ("_position" s') ("_position" r)))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("\<^const>Groups.plus_class.plus" ("_position" extra)
###               ("_position" cnt)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" clock) ("_position" s'))
###               ("\<^const>Groups.plus_class.plus" ("_position" extra)
###                 ("_position" cnt')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" res)
###                 ("_tuple" ("_position" s') ("_tuple_arg" ("_position" r))))
###               ("\<^const>HOL.eq" ("_position" ck) ("_position" True)))))
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" ck)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" cnt)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("_position" cnt')))
###                     ("_tuple_arg" ("_position" r))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1101 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_record_update" ("_position" s')
###                 ("_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_record_update" ("_position" s)
###             ("_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" evaluate_prog)
###     ("_cargs" ("_position" True)
###       ("_cargs" ("_position" env)
###         ("_cargs"
###           ("_datatype_record_update" ("_position" s)
###             ("_datatype_field_update" ("_constify" clock)
###               ("\<^const>Groups.minus_class.minus"
###                 ("_applC" ("_position" clock) ("_position" s))
###                 ("_applC" ("_position" clock) ("_position" s')))))
###           ("_cargs" ("_position" prog)
###             ("_tuple"
###               ("_datatype_record_update" ("_position" s')
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_arg" ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1108 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" res)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" c)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_tuple_arg" ("_position" res)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" res)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" c)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_record_update" ("_position" s')
###                     ("_field_update" ("_constify" clock)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_tuple_arg" ("_position" res)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" res)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_record_update" ("_position" s)
###                 ("_field_update" ("_constify" clock) ("_position" c)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_tuple_arg" ("_position" res)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" res)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("_applC" ("_position" evaluate_prog)
###         ("_cargs" ("_position" True)
###           ("_cargs" ("_position" env)
###             ("_cargs"
###               ("_datatype_record_update" ("_position" s)
###                 ("_datatype_field_update" ("_constify" clock)
###                   ("_position" c)))
###               ("_cargs" ("_position" prog)
###                 ("_tuple"
###                   ("_datatype_record_update" ("_position" s')
###                     ("_datatype_field_update" ("_constify" clock)
###                       ("\<^const>Groups.zero_class.zero")))
###                   ("_tuple_arg" ("_position" res)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1122 of "$AFP/CakeML/Big_Step_Clocked.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" c)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" c)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_datatype_record_update" ("_position" s')
###                       ("_datatype_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_datatype_record_update" ("_position" s)
###                   ("_datatype_field_update" ("_constify" clock)
###                     ("_position" c)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" evaluate_prog)
###       ("_cargs" ("_position" False)
###         ("_cargs" ("_position" env)
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_position" prog)
###               ("_tuple" ("_position" s')
###                 ("_tuple_arg" ("_position" r))))))))
###     ("\<^const>HOL.Ex_binder" ("_position" c)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" evaluate_prog)
###           ("_cargs" ("_position" True)
###             ("_cargs" ("_position" env)
###               ("_cargs"
###                 ("_record_update" ("_position" s)
###                   ("_field_update" ("_constify" clock) ("_position" c)))
###                 ("_cargs" ("_position" prog)
###                   ("_tuple"
###                     ("_record_update" ("_position" s')
###                       ("_field_update" ("_constify" clock)
###                         ("\<^const>Groups.zero_class.zero")))
###                     ("_tuple_arg" ("_position" r))))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" r)
###             ("_applC" ("_position" Rerr)
###               ("_applC" ("_position" Rabort) ("_position" Rtimeout_error))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" clock) ("_position" s))
###             ("_applC" ("_position" clock) ("_position" s'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Big_Step_Clocked"
### 0.677s elapsed time, 0.724s cpu time, 0.077s GC time
Loading theory "Draft.Big_Step_ClockedTemplates"
val templateLemmas =
   [("Big_Step_Clocked.top_clocked_total",
     "EX r. evaluate_top True ?env ?s ?tp r",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Big_Step_Clocked.dec_clocked_total",
     "EX res. evaluate_dec True ?mn ?env ?s ?d res",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Big_Step_Clocked.decs_clocked_total",
     "EX res. evaluate_decs True ?mn ?env ?s ?ds res",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Big_Step_Clocked.big_unclocked_unchanged",
     "evaluate False ?env ?s ?e (?s', ?r3.0) ==> clock ?s = clock ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 1)))),
    ("Big_Step_Clocked.big_unclocked_unchanged",
     "evaluate_list False ?env ?s ?es (?s', ?r2.0) ==>
      clock ?s = clock ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 1)))),
    ("Big_Step_Clocked.big_unclocked_notimeout",
     "evaluate False ?env ?s ?e (?s', ?r3.0) ==>
      ?r3.0 ~= Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_var 0,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Big_Step_Clocked.big_unclocked_notimeout",
     "evaluate_list False ?env ?s ?es (?s', ?r2.0) ==>
      ?r2.0 ~= Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_var 0,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Big_Step_Clocked.top_evaluate_not_timeout",
     "evaluate_top False ?env ?s ?tp (?s', ?r) ==>
      ?r ~= Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_var 0,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Big_Step_Clocked.dec_evaluate_not_timeout",
     "evaluate_dec False ?mn ?env ?s ?d (?s', ?r) ==>
      ?r ~= Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_var 0,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Big_Step_Clocked.big_unclocked_unchanged",
     "evaluate_match False ?env ?s ?v ?pes ?err_v (?s', ?r1.0) ==>
      clock ?s = clock ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 4, template_hole 3),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 5),
         template_app (template_hole 0, template_var 1)))),
    ("Big_Step_Clocked.prog_clock_monotone",
     "[| evaluate_prog ?ck ?env ?s ?prog ?res; ?ck |]
      ==> clock (fst ?res) <= clock ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_var 4)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 2)))),
    ("Big_Step_Clocked.big_unclocked_notimeout",
     "evaluate_match False ?env ?s ?v ?pes ?err_v (?s', ?r1.0) ==>
      ?r1.0 ~= Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 7, template_hole 6),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_var 0,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Big_Step_Clocked.dec_clock_monotone",
     "[| evaluate_dec ?ck ?mn ?env ?s ?d ?res; ?ck = True |]
      ==> clock (fst ?res) <= clock ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 5, template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 2)))),
    ("Big_Step_Clocked.decs_clock_monotone",
     "[| evaluate_decs ?ck ?mn ?env ?s ?d ?res; ?ck = True |]
      ==> clock (fst ?res) <= clock ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 5, template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 2)))),
    ("Big_Step_Clocked.top_clock_monotone",
     "[| evaluate_top ?ck ?env ?s ?tp (?s', ?r); ?ck = True |]
      ==> clock ?s' <= clock ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_equation (template_var 5, template_hole 2)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 3)))),
    ("Big_Step_Clocked.prog_unclocked_1",
     "evaluate_prog False ?env ?s ?prog (?s', ?r) ==>
      ?r ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Big_Step_Clocked.dec_unclocked_1",
     "evaluate_dec False ?mn ?env ?s ?d (?s', ?r) ==>
      ?r ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Big_Step_Clocked.do_app_no_runtime_error",
     "do_app (refs ?s, ffi ?s) ?op0.0 (rev ?vs) =
      Some ((?refs', ?ffi'), ?res) ==>
      ?res ~= Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 5)),
                  template_app (template_hole 8, template_var 5))),
              template_var 4),
            template_app (template_hole 7, template_var 3)),
          template_app
           (template_hole 6,
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_var 0)))],
       template_negation
        (
           template_equation
            (template_var 0,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Big_Step_Clocked.big_clocked_timeout_0",
     "evaluate ?ck ?env ?s ?e ?r3.0 ==>
      ALL s'.
         ?r3.0 = (s', Rerr (Rabort Rtimeout_error)) & ?ck = True -->
         clock s' = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.big_clocked_timeout_0",
     "evaluate_list ?ck ?env ?s ?es ?r2.0 ==>
      ALL s'.
         ?r2.0 = (s', Rerr (Rabort Rtimeout_error)) & ?ck = True -->
         clock s' = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.prog_add_clock",
     "evaluate_prog False ?env ?s ?prog (?s', ?res) ==>
      EX c. evaluate_prog True ?env (update_clock (%_. c) ?s) ?prog
             (update_clock (%_. 0) ?s', ?res)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Big_Step_Clocked.not_evaluate_prog_timeout",
     "ALL res. ~ evaluate_prog False ?env ?s ?prog res ==>
      EX r. evaluate_prog True ?env ?s ?prog r &
            snd r = Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Big_Step_Clocked.not_evaluate_top_timeout",
     "ALL r. ~ evaluate_top False ?env ?s ?tp r ==>
      EX r. evaluate_top True ?env ?s ?tp r &
            snd r = Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Big_Step_Clocked.not_evaluate_whole_prog_timeout",
     "ALL res. ~ evaluate_whole_prog False ?env ?s ?prog res ==>
      EX r. evaluate_whole_prog True ?env ?s ?prog r &
            snd r = Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Big_Step_Clocked.prog_unclocked_unchanged",
     "[| evaluate_prog ?ck ?env ?s ?prog ?res; ~ ?ck |]
      ==> snd ?res ~= Rerr (Rabort Rtimeout_error) &
          clock (fst ?res) = clock ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation (template_predicate (template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_app (template_hole 1, template_var 2)))
           ))),
    ("Big_Step_Clocked.clock_monotone",
     "evaluate ?ck ?env ?s ?e ?r3.0 ==>
      ALL s' r'. ?r3.0 = (s', r') & ?ck = True --> clock s' <= clock ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Big_Step_Clocked.clock_monotone",
     "evaluate_list ?ck ?env ?s ?es ?r2.0 ==>
      ALL s' r'. ?r2.0 = (s', r') & ?ck = True --> clock s' <= clock ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Big_Step_Clocked.big_unclocked0",
     "[| evaluate ?ck ?env ?s ?e ?r3.0; ?ck = False |]
      ==> snd ?r3.0 ~= Rerr (Rabort Rtimeout_error) &
          clock ?s = clock (fst ?r3.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 4, template_hole 10)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Big_Step_Clocked.big_unclocked0",
     "[| evaluate_list ?ck ?env ?s ?es ?r2.0; ?ck = False |]
      ==> snd ?r2.0 ~= Rerr (Rabort Rtimeout_error) &
          clock ?s = clock (fst ?r2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 4, template_hole 10)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Big_Step_Clocked.clocked_min_counter",
     "evaluate True ?env ?s ?e (?s', ?r') ==>
      evaluate True ?env (update_clock (%_. clock ?s - clock ?s') ?s) ?e
       (update_clock (%_. 0) ?s', ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 4),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 1)),
               template_var 0))
           ))),
    ("Big_Step_Clocked.big_clocked_timeout_0",
     "evaluate_match ?ck ?env ?s ?v ?pes ?err_v ?r1.0 ==>
      ALL s'.
         ?r1.0 = (s', Rerr (Rabort Rtimeout_error)) & ?ck = True -->
         clock s' = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.prog_clocked_min_counter",
     "evaluate_prog True ?env ?s ?prog (?s', ?r) ==>
      evaluate_prog True ?env (update_clock (%_. clock ?s - clock ?s') ?s)
       ?prog (update_clock (%_. 0) ?s', ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 4),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 1)),
               template_var 0))
           ))),
    ("Big_Step_Clocked.not_evaluate_dec_timeout",
     "ALL r. ~ evaluate_dec False ?mn ?env ?s ?d r ==>
      EX r. evaluate_dec True ?mn ?env ?s ?d r &
            snd r = Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Big_Step_Clocked.not_evaluate_decs_timeout",
     "ALL r. ~ evaluate_decs False ?mn ?env ?s ?ds r ==>
      EX r. evaluate_decs True ?mn ?env ?s ?ds r &
            snd r = Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Big_Step_Clocked.dec_unclocked_unchanged",
     "[| evaluate_dec ?ck ?mn ?env ?s ?d ?r; ?ck = False |]
      ==> snd ?r ~= Rerr (Rabort Rtimeout_error) &
          clock ?s = clock (fst ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 5, template_hole 10)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Big_Step_Clocked.decs_evaluate_not_timeout",
     "evaluate_decs ?ck ?mn ?env ?s ?ds ?r ==>
      ALL s' r'.
         ?ck = False & ?r = (s', r') -->
         r' ~= Rerr (Rabort Rtimeout_error)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.clock_monotone",
     "evaluate_match ?ck ?env ?s ?v ?pes ?err_v ?r1.0 ==>
      ALL s' r'. ?r1.0 = (s', r') & ?ck = True --> clock s' <= clock ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Big_Step_Clocked.big_unclocked0",
     "[| evaluate_match ?ck ?env ?s ?v ?pes ?err_v ?r1.0; ?ck = False |]
      ==> snd ?r1.0 ~= Rerr (Rabort Rtimeout_error) &
          clock ?s = clock (fst ?r1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 12, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 6, template_hole 10)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 4)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Big_Step_Clocked.prog_unclocked_2",
     "evaluate_prog False ?env (update_clock (%_. ?cnt1.0) ?s) ?prog
       (update_clock (%_. ?cnt1.0) ?s', ?r) ==>
      evaluate_prog False ?env (update_clock (%_. ?cnt2.0) ?s) ?prog
       (update_clock (%_. ?cnt2.0) ?s', ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 6),
                  template_app
                   (template_app (template_hole 1, t_empty),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 1, t_empty),
                    template_var 2)),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 6),
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.top_add_clock",
     "[| evaluate_top ?ck ?env ?s ?tp (?s', ?r); ~ ?ck |]
      ==> EX c. evaluate_top True ?env (update_clock (%_. c) ?s) ?tp
                 (update_clock (%_. 0) ?s', ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_negation (template_predicate (template_var 5))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Big_Step_Clocked.top_clocked_min_counter",
     "[| evaluate_top ?ck ?env ?s ?tp (?s', ?r); ?ck |]
      ==> evaluate_top ?ck ?env (update_clock (%_. clock ?s - clock ?s') ?s)
           ?tp (update_clock (%_. 0) ?s', ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_predicate (template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 5),
                   template_var 4),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 1)),
               template_var 0))
           ))),
    ("Big_Step_Clocked.big_clocked_unclocked_equiv_timeout",
     "(ALL r. ~ evaluate False ?env ?s ?e r) =
      (ALL c.
          EX s'.
             evaluate True ?env (update_clock (%_. c) ?s) ?e
              (s', Rerr (Rabort Rtimeout_error)) &
             clock s' = 0)",
     template_equation
      (template_app (template_hole 15, t_empty),
       template_app (template_hole 11, t_empty))),
    ("Big_Step_Clocked.dec_unclocked_2",
     "evaluate_dec False ?mn ?env (update_clock (%_. ?count1.0) ?s) ?d
       (update_clock (%_. ?count1.0) ?s', ?r) ==>
      evaluate_dec False ?mn ?env (update_clock (%_. ?count2.0) ?s) ?d
       (update_clock (%_. ?count2.0) ?s', ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_var 7),
                    template_var 6),
                  template_app
                   (template_app (template_hole 1, t_empty),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 1, t_empty),
                    template_var 2)),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 7),
                   template_var 6),
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.decs_unclocked_2",
     "evaluate_decs False ?mn ?env (update_clock (%_. ?count1.0) ?s) ?ds
       (update_clock (%_. ?count1.0) ?s', ?r) ==>
      evaluate_decs False ?mn ?env (update_clock (%_. ?count2.0) ?s) ?ds
       (update_clock (%_. ?count2.0) ?s', ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_var 7),
                    template_var 6),
                  template_app
                   (template_app (template_hole 1, t_empty),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 1, t_empty),
                    template_var 2)),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 7),
                   template_var 6),
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.big_unclocked_ignore",
     "[| evaluate ?ck ?env ?s ?e (?st', ?r3.0);
         ?r3.0 ~= Rerr (Rabort Rtimeout_error) |]
      ==> evaluate False ?env (update_clock (%_. ?cnt) ?s) ?e
           (update_clock (%_. ?cnt) ?st', ?r3.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_hole 1),
                   template_var 5),
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.big_unclocked_ignore",
     "[| evaluate_list ?ck ?env ?s ?es (?st', ?r2.0);
         ?r2.0 ~= Rerr (Rabort Rtimeout_error) |]
      ==> evaluate_list False ?env (update_clock (%_. ?cnt) ?s) ?es
           (update_clock (%_. ?cnt) ?st', ?r2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_hole 1),
                   template_var 5),
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.top_unclocked_ignore",
     "[| evaluate_top ?ck ?env ?s ?tp (?s', ?r);
         ?r ~= Rerr (Rabort Rtimeout_error) |]
      ==> evaluate_top False ?env (update_clock (%_. ?cnt) ?s) ?tp
           (update_clock (%_. ?cnt) ?s', ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_hole 1),
                   template_var 5),
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.big_clocked_unclocked_equiv_timeout_1",
     "ALL r. ~ evaluate False ?env ?s ?e r ==>
      ALL c.
         EX s'.
            evaluate True ?env (update_clock (%_. c) ?s) ?e
             (s', Rerr (Rabort Rtimeout_error)) &
            clock s' = 0",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Big_Step_Clocked.decs_unclocked_unchanged",
     "evaluate_decs ?ck ?mn ?env ?s ?ds ?r ==>
      ALL s' r'.
         ?ck = False & ?r = (s', r') -->
         r' ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 15, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("Big_Step_Clocked.dec_clocked_min_counter",
     "[| evaluate_dec ?ck ?mn ?env ?s ?d ?res; ?ck = True |]
      ==> evaluate_dec ?ck ?mn ?env
           (update_clock (%_. clock ?s - clock (fst ?res)) ?s) ?d
           (update_clock (%_. 0) (fst ?res), snd ?res)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 5, template_hole 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_var 2)),
               template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_app (template_hole 3, template_var 0))),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Big_Step_Clocked.decs_clocked_min_counter",
     "[| evaluate_decs ?ck ?mn ?env ?s ?ds ?res; ?ck = True |]
      ==> evaluate_decs ?ck ?mn ?env
           (update_clock (%_. clock ?s - clock (fst ?res)) ?s) ?ds
           (update_clock (%_. 0) (fst ?res), snd ?res)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 5, template_hole 7)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_var 2)),
               template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_app (template_hole 3, template_var 0))),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Big_Step_Clocked.big_unclocked_ignore",
     "[| evaluate_match ?ck ?env ?s ?v ?pes ?err_v (?st', ?r1.0);
         ?r1.0 ~= Rerr (Rabort Rtimeout_error) |]
      ==> evaluate_match False ?env (update_clock (%_. ?cnt) ?s) ?v ?pes
           ?err_v (update_clock (%_. ?cnt) ?st', ?r1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 8, template_hole 1),
                       template_var 7),
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 6)),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.big_clocked_unclocked_equiv",
     "evaluate False ?env ?s ?e (?s', ?r1.0) =
      (EX c. evaluate True ?env (update_clock (%_. c) ?s) ?e
              (update_clock (%_. 0) ?s', ?r1.0) &
             ?r1.0 ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock ?s')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 14, template_hole 13),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)),
       template_app (template_hole 11, t_empty))),
    ("Big_Step_Clocked.prog_clocked_unclocked_equiv",
     "evaluate_prog False ?env ?s ?prog (?s', ?r) =
      (EX c. evaluate_prog True ?env (update_clock (%_. c) ?s) ?prog
              (update_clock (%_. 0) ?s', ?r) &
             ?r ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock ?s')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 14, template_hole 13),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)),
       template_app (template_hole 11, t_empty))),
    ("Big_Step_Clocked.top_clocked_unclocked_equiv",
     "evaluate_top False ?env ?s ?tp (?s', ?r) =
      (EX c. evaluate_top True ?env (update_clock (%_. c) ?s) ?tp
              (update_clock (%_. 0) ?s', ?r) &
             ?r ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock ?s')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 14, template_hole 13),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)),
       template_app (template_hole 11, t_empty))),
    ("Big_Step_Clocked.add_clock",
     "evaluate ?ck ?env ?s ?e ?r3.0 ==>
      ALL s' r'.
         ?r3.0 = (s', r') & ?ck = False -->
         (EX c. evaluate True ?env (update_clock (%_. c) ?s) ?e
                 (update_clock (%_. 0) s', r'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Big_Step_Clocked.add_clock",
     "evaluate_list ?ck ?env ?s ?es ?r2.0 ==>
      ALL s' r'.
         ?r2.0 = (s', r') & ?ck = False -->
         (EX c. evaluate_list True ?env (update_clock (%_. c) ?s) ?es
                 (update_clock (%_. 0) s', r'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Big_Step_Clocked.add_to_counter",
     "[| evaluate True ?env ?s ?e (?s', ?r3.0);
         ?r3.0 ~= Rerr (Rabort Rtimeout_error) |]
      ==> evaluate True ?env (update_clock (%_. clock ?s + ?extra) ?s) ?e
           (update_clock (%_. clock ?s' + ?extra) ?s', ?r3.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_var 5),
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.add_to_counter",
     "[| evaluate_list True ?env ?s ?es (?s', ?r2.0);
         ?r2.0 ~= Rerr (Rabort Rtimeout_error) |]
      ==> evaluate_list True ?env (update_clock (%_. clock ?s + ?extra) ?s)
           ?es (update_clock (%_. clock ?s' + ?extra) ?s', ?r2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_var 5),
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.top_add_to_counter",
     "[| evaluate_top True ?env ?s ?d (?s', ?r);
         ?r ~= Rerr (Rabort Rtimeout_error) |]
      ==> evaluate_top True ?env (update_clock (%_. clock ?s + ?extra) ?s)
           ?d (update_clock (%_. clock ?s' + ?extra) ?s', ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_var 5),
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.big_unclocked1",
     "evaluate ?ck ?env ?s ?e ?r3.0 ==>
      ALL st' r.
         ?r3.0 = (st', r) & r ~= Rerr (Rabort Rtimeout_error) -->
         evaluate False ?env (update_clock (%_. ?cnt) ?s) ?e
          (update_clock (%_. ?cnt) st', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.big_unclocked1",
     "evaluate_list ?ck ?env ?s ?es ?r2.0 ==>
      ALL st' r.
         ?r2.0 = (st', r) & r ~= Rerr (Rabort Rtimeout_error) -->
         evaluate_list False ?env (update_clock (%_. ?cnt) ?s) ?es
          (update_clock (%_. ?cnt) st', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.dec_clocked_unclocked_equiv",
     "evaluate_dec False ?mn ?env ?s1.0 ?d (?s2.0, ?r) =
      (EX c. evaluate_dec True ?mn ?env (update_clock (%_. c) ?s1.0) ?d
              (update_clock (%_. 0) ?s2.0, ?r) &
             ?r ~= Rerr (Rabort Rtimeout_error) &
             clock ?s1.0 = clock ?s2.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 14, template_hole 13),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)),
       template_app (template_hole 11, t_empty))),
    ("Big_Step_Clocked.dec_add_clock",
     "evaluate_dec ?ck ?mn ?env ?s ?d ?res ==>
      ALL s' r.
         ?res = (s', r) & ?ck = False -->
         (EX c. evaluate_dec True ?mn ?env (update_clock (%_. c) ?s) ?d
                 (update_clock (%_. 0) s', r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Big_Step_Clocked.decs_add_clock",
     "evaluate_decs ?ck ?mn ?env ?s ?ds ?res ==>
      ALL s' r.
         ?res = (s', r) & ?ck = False -->
         (EX c. evaluate_decs True ?mn ?env (update_clock (%_. c) ?s) ?ds
                 (update_clock (%_. 0) s', r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Big_Step_Clocked.prog_unclocked_ignore",
     "evaluate_prog ?ck ?env ?s ?prog ?res ==>
      ALL cnt s' r.
         ?res = (s', r) & r ~= Rerr (Rabort Rtimeout_error) -->
         evaluate_prog False ?env (update_clock (%_. cnt) ?s) ?prog
          (update_clock (%_. cnt) s', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 14, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("Big_Step_Clocked.add_clock",
     "evaluate_match ?ck ?env ?s ?v ?pes ?err_v ?r1.0 ==>
      ALL s' r'.
         ?r1.0 = (s', r') & ?ck = False -->
         (EX c. evaluate_match True ?env (update_clock (%_. c) ?s) ?v ?pes
                 ?err_v (update_clock (%_. 0) s', r'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 12, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Big_Step_Clocked.add_to_counter",
     "[| evaluate_match True ?env ?s ?v ?pes ?err_v (?s', ?r1.0);
         ?r1.0 ~= Rerr (Rabort Rtimeout_error) |]
      ==> evaluate_match True ?env (update_clock (%_. clock ?s + ?extra) ?s)
           ?v ?pes ?err_v
           (update_clock (%_. clock ?s' + ?extra) ?s', ?r1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 10, template_hole 9),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_var 7),
                     template_app
                      (template_app (template_hole 2, t_empty),
                       template_var 6)),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("Big_Step_Clocked.dec_unclocked_ignore",
     "evaluate_dec ?ck ?mn ?env ?s ?d ?res ==>
      ALL s' r count.
         ?res = (s', r) & r ~= Rerr (Rabort Rtimeout_error) -->
         evaluate_dec False ?mn ?env (update_clock (%_. count) ?s) ?d
          (update_clock (%_. count) s', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("Big_Step_Clocked.decs_unclocked_ignore",
     "evaluate_decs ?ck ?mn ?env ?s ?d ?res ==>
      ALL s' r count.
         ?res = (s', r) & r ~= Rerr (Rabort Rtimeout_error) -->
         evaluate_decs False ?mn ?env (update_clock (%_. count) ?s) ?d
          (update_clock (%_. count) s', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("Big_Step_Clocked.big_unclocked1",
     "evaluate_match ?ck ?env ?s ?v ?pes ?err_v ?r1.0 ==>
      ALL st' r.
         ?r1.0 = (st', r) & r ~= Rerr (Rabort Rtimeout_error) -->
         evaluate_match False ?env (update_clock (%_. ?cnt) ?s) ?v ?pes
          ?err_v (update_clock (%_. ?cnt) st', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.clocked_evaluate",
     "(EX k. evaluate True ?env (update_clock (%_. k) ?s) ?e (?s', ?r) &
             ?r ~= Rerr (Rabort Rtimeout_error)) =
      (EX k. evaluate True ?env (update_clock (%_. k) ?s) ?e
              (update_clock (%_. 0) ?s', ?r) &
             ?r ~= Rerr (Rabort Rtimeout_error))",
     template_equation
      (template_app (template_hole 11, t_empty),
       template_app (template_hole 11, t_empty))),
    ("Big_Step_Clocked.top_sub_from_counter",
     "[| evaluate_top ?ck ?env ?s ?tp (?s', ?r); ?ck = True;
         clock ?s = ?cnt + ?extra; clock ?s' = ?cnt' + ?extra |]
      ==> evaluate_top ?ck ?env (update_clock (%_. ?cnt) ?s) ?tp
           (update_clock (%_. ?cnt') ?s', ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3))
            ),
        template_equation (template_var 8, template_hole 4),
        template_equation
         (template_app (template_hole 2, template_var 6),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 1)),
        template_equation
         (template_app (template_hole 2, template_var 4),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 8),
                   template_var 7),
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 6)),
               template_var 5),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 4)),
               template_var 3))
           ))),
    ("Big_Step_Clocked.prog_unclocked",
     "(evaluate_prog False ?env ?s ?prog (?s', ?r) -->
       ?r ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock ?s') &
      evaluate_prog False ?env (update_clock (%_. ?cnt1.0) ?s) ?prog
       (update_clock (%_. ?cnt1.0) ?s', ?r) =
      evaluate_prog False ?env (update_clock (%_. ?cnt2.0) ?s) ?prog
       (update_clock (%_. ?cnt2.0) ?s', ?r)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 11, template_hole 10),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5, template_hole 4))))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 5)),
                   template_app (template_hole 2, template_var 3))))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_var 6),
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 5)),
                   template_var 4),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 3)),
                   template_var 2))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_var 6),
                   template_app
                    (template_app (template_hole 0, t_empty),
                     template_var 5)),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 0, t_empty),
                     template_var 3)),
                 template_var 2))))
         )),
    ("Big_Step_Clocked.top_unclocked",
     "(evaluate_top False ?env ?s ?tp (?s', ?r) -->
       ?r ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock ?s') &
      evaluate_top False ?env (update_clock (%_. ?count1.0) ?s) ?tp
       (update_clock (%_. ?count1.0) ?s', ?r) =
      evaluate_top False ?env (update_clock (%_. ?count2.0) ?s) ?tp
       (update_clock (%_. ?count2.0) ?s', ?r)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 11, template_hole 10),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5, template_hole 4))))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 5)),
                   template_app (template_hole 2, template_var 3))))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_var 6),
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 5)),
                   template_var 4),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 3)),
                   template_var 2))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_var 6),
                   template_app
                    (template_app (template_hole 0, t_empty),
                     template_var 5)),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 0, t_empty),
                     template_var 3)),
                 template_var 2))))
         )),
    ("Big_Step_Clocked.add_to_counter0",
     "evaluate ?ck ?env ?s ?e ?r3.0 ==>
      ALL s' r' extra.
         ?r3.0 = (s', r') &
         r' ~= Rerr (Rabort Rtimeout_error) & ?ck = True -->
         evaluate True ?env (update_clock (%_. clock ?s + extra) ?s) ?e
          (update_clock (%_. clock s' + extra) s', r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 17, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 16, t_empty)))),
    ("Big_Step_Clocked.add_to_counter0",
     "evaluate_list ?ck ?env ?s ?es ?r2.0 ==>
      ALL s' r' extra.
         ?r2.0 = (s', r') &
         r' ~= Rerr (Rabort Rtimeout_error) & ?ck = True -->
         evaluate_list True ?env (update_clock (%_. clock ?s + extra) ?s)
          ?es (update_clock (%_. clock s' + extra) s', r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 17, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 16, t_empty)))),
    ("Big_Step_Clocked.prog_add_to_counter",
     "evaluate_prog ?ck ?env ?s ?prog ?res ==>
      ALL s' r extra.
         ?res = (s', r) & ?ck = True & r ~= Rerr (Rabort Rtimeout_error) -->
         evaluate_prog True ?env (update_clock (%_. clock ?s + extra) ?s)
          ?prog (update_clock (%_. clock s' + extra) s', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 17, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 16, t_empty)))),
    ("Big_Step_Clocked.dec_add_to_counter",
     "evaluate_dec ?ck ?mn ?env ?s ?d ?res ==>
      ALL s' r extra.
         ?res = (s', r) & ?ck = True & r ~= Rerr (Rabort Rtimeout_error) -->
         evaluate_dec True ?mn ?env (update_clock (%_. clock ?s + extra) ?s)
          ?d (update_clock (%_. clock s' + extra) s', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 16, t_empty)))),
    ("Big_Step_Clocked.decs_add_to_counter",
     "evaluate_decs ?ck ?mn ?env ?s ?d ?res ==>
      ALL s' r extra.
         ?res = (s', r) & ?ck = True & r ~= Rerr (Rabort Rtimeout_error) -->
         evaluate_decs True ?mn ?env
          (update_clock (%_. clock ?s + extra) ?s) ?d
          (update_clock (%_. clock s' + extra) s', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 16, t_empty)))),
    ("Big_Step_Clocked.dec_unclocked",
     "(evaluate_dec False ?mn ?env ?s ?d (?s', ?r) -->
       ?r ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock ?s') &
      (evaluate_dec False ?mn ?env (update_clock (%_. ?count1.0) ?s) ?d
        (update_clock (%_. ?count1.0) ?s', ?r) -->
       evaluate_dec False ?mn ?env (update_clock (%_. ?count2.0) ?s) ?d
        (update_clock (%_. ?count2.0) ?s', ?r))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 10, template_hole 9),
                           template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_app
                    (template_app (template_hole 8, template_var 3),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4, template_hole 3))))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 5)),
                   template_app (template_hole 1, template_var 3))))),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, template_hole 9),
                         template_var 7),
                       template_var 6),
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 5)),
                   template_var 4),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 3)),
                   template_var 2))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_var 7),
                     template_var 6),
                   template_app
                    (template_app (template_hole 0, t_empty),
                     template_var 5)),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 0, t_empty),
                     template_var 3)),
                 template_var 2))))
         )),
    ("Big_Step_Clocked.decs_unclocked",
     "(evaluate_decs False ?mn ?env ?s ?ds (?s', ?r) -->
       ?r ~= Rerr (Rabort Rtimeout_error) & clock ?s = clock ?s') &
      evaluate_decs False ?mn ?env (update_clock (%_. ?count1.0) ?s) ?ds
       (update_clock (%_. ?count1.0) ?s', ?r) =
      evaluate_decs False ?mn ?env (update_clock (%_. ?count2.0) ?s) ?ds
       (update_clock (%_. ?count2.0) ?s', ?r)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 11, template_hole 10),
                           template_var 7),
                         template_var 6),
                       template_var 5),
                     template_var 4),
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5, template_hole 4))))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 5)),
                   template_app (template_hole 2, template_var 3))))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 11, template_hole 10),
                         template_var 7),
                       template_var 6),
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 5)),
                   template_var 4),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 0, t_empty),
                       template_var 3)),
                   template_var 2))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_var 7),
                     template_var 6),
                   template_app
                    (template_app (template_hole 0, t_empty),
                     template_var 5)),
                 template_var 4),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 0, t_empty),
                     template_var 3)),
                 template_var 2))))
         )),
    ("Big_Step_Clocked.sub_from_counter",
     "evaluate ?ck ?env ?s ?e ?r3.0 ==>
      ALL count count' s' r'.
         clock ?s = count + ?extra3.0 &
         ?r3.0 = (s', r') & clock s' = count' + ?extra3.0 & ?ck = True -->
         evaluate True ?env (update_clock (%_. count) ?s) ?e
          (update_clock (%_. count') s', r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.sub_from_counter",
     "evaluate_list ?ck ?env ?s ?es ?r2.0 ==>
      ALL count count' s' r'.
         clock ?s = count + ?extra2.0 &
         ?r2.0 = (s', r') & clock s' = count' + ?extra2.0 & ?ck = True -->
         evaluate_list True ?env (update_clock (%_. count) ?s) ?es
          (update_clock (%_. count') s', r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.add_to_counter0",
     "evaluate_match ?ck ?env ?s ?v ?pes ?err_v ?r1.0 ==>
      ALL s' r' extra.
         ?r1.0 = (s', r') &
         r' ~= Rerr (Rabort Rtimeout_error) & ?ck = True -->
         evaluate_match True ?env (update_clock (%_. clock ?s + extra) ?s)
          ?v ?pes ?err_v (update_clock (%_. clock s' + extra) s', r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 17, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 16, t_empty)))),
    ("Big_Step_Clocked.prog_sub_from_counter",
     "evaluate_prog ?ck ?env ?s ?prog ?res ==>
      ALL extra cnt cnt' s' r.
         clock ?s = extra + cnt &
         clock s' = extra + cnt' & ?res = (s', r) & ?ck = True -->
         evaluate_prog ?ck ?env (update_clock (%_. cnt) ?s) ?prog
          (update_clock (%_. cnt') s', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.dec_sub_from_counter",
     "evaluate_dec ?ck ?mn ?env ?s ?d ?res ==>
      ALL count count' s' r.
         clock ?s = count + ?extra &
         clock s' = count' + ?extra & ?res = (s', r) & ?ck = True -->
         evaluate_dec ?ck ?mn ?env (update_clock (%_. count) ?s) ?d
          (update_clock (%_. count') s', r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.decs_sub_from_counter",
     "evaluate_decs ?ck ?mn ?env ?s ?d ?res ==>
      ALL extra count count' s' r'.
         clock ?s = count + extra &
         clock s' = count' + extra & ?res = (s', r') & ?ck = True -->
         evaluate_decs ?ck ?mn ?env (update_clock (%_. count) ?s) ?d
          (update_clock (%_. count') s', r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.sub_from_counter",
     "evaluate_match ?ck ?env ?s ?v ?pes ?err_v ?r1.0 ==>
      ALL count count' s' r'.
         clock ?s = count + ?extra1.0 &
         ?r1.0 = (s', r') & clock s' = count' + ?extra1.0 & ?ck = True -->
         evaluate_match True ?env (update_clock (%_. count) ?s) ?v ?pes
          ?err_v (update_clock (%_. count') s', r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Big_Step_Clocked.big_unclocked",
     "[| evaluate False ?env ?s ?e (?s', ?r) ==>
         ?r ~= Rerr (Rabort Rtimeout_error);
         evaluate False ?env ?s ?e (?s', ?r) ==> clock ?s = clock ?s';
         evaluate False ?env (update_clock (%_. ?count1.0) ?s) ?e
          (update_clock (%_. ?count1.0) ?s', ?r) |]
      ==> evaluate False ?env (update_clock (%_. ?count2.0) ?s) ?e
           (update_clock (%_. ?count2.0) ?s', ?r)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_var 2))
               )],
          template_negation
           (
              template_equation
               (template_var 2,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3)))
              )),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_var 2))
               )],
          template_equation
           (template_app (template_hole 1, template_var 5),
            template_app (template_hole 1, template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_var 6),
                  template_app
                   (template_app (template_hole 0, t_empty),
                    template_var 5)),
                template_var 4),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 0, t_empty),
                    template_var 3)),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_var 6),
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 5)),
               template_var 4),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3)),
               template_var 2))
           )))]:
   (string * thm * template) list
### theory "Draft.Big_Step_ClockedTemplates"
### 1.948s elapsed time, 2.251s cpu time, 0.231s GC time
val it = (): unit
