   [("Evaluate_Single.evaluate_list_eq",
     "Evaluate_Single.evaluate_list (Evaluate_Single.evaluate ?env) =
      evaluate_list' ?env",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Evaluate_Single.Nil",
     "Evaluate_Single.evaluate_list ?eval ?s [] = (?s, Rval [])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Evaluate_Single.fun_evaluate_equiv",
     "fun_evaluate ?s ?env ?es =
      Evaluate_Single.evaluate_list (Evaluate_Single.evaluate ?env) ?s ?es",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 2),
         template_var 0))),
    ("Evaluate_Single.Lit",
     "Evaluate_Single.evaluate ?env ?s (Lit ?l) = (?s, Rval (Litv ?l))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Evaluate_Single.fix_clock_evaluate",
     "fix_clock ?s (Evaluate_Single.evaluate ?eval ?s ?e) =
      Evaluate_Single.evaluate ?eval ?s ?e",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Evaluate_Single.Lannot",
     "Evaluate_Single.evaluate ?env ?s (Lannot ?e ?l) =
      Evaluate_Single.evaluate ?env ?s ?e",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_var 1))),
    ("Evaluate_Single.Tannot",
     "Evaluate_Single.evaluate ?env ?s (Tannot ?e ?t0.0) =
      Evaluate_Single.evaluate ?env ?s ?e",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_var 1))),
    ("Evaluate_Single.Fun",
     "Evaluate_Single.evaluate ?env ?s (Fun ?n ?e) =
      (?s, Rval (Closure ?env ?n ?e))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0))))),
    ("Evaluate_Single.fun_evaluate_equiv'",
     "Evaluate_Single.evaluate ?env ?s ?e =
      map_prod id (map_result hd id) (fun_evaluate ?s ?env [?e])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Evaluate_Single.Var",
     "Evaluate_Single.evaluate ?env ?s (Var ?n) =
      (case nsLookup (sem_env.v ?env) ?n of
       None => (?s, Rerr (Rabort Rtype_error)) | Some v => (?s, Rval v))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))),
           t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Evaluate_Single.Raise",
     "Evaluate_Single.evaluate ?env ?s (Raise ?e) =
      (case Evaluate_Single.evaluate ?env ?s ?e of
       (s', Rval v) => (s', Rerr (Rraise v))
       | (s', Rerr error_result) => (s', Rerr error_result))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Evaluate_Single.Let",
     "Evaluate_Single.evaluate ?env ?s (exp0.Let ?n ?e1.0 ?e2.0) =
      (case Evaluate_Single.evaluate ?env ?s ?e1.0 of
       (s', Rval va) =>
         Evaluate_Single.evaluate
          (update_v (%_. nsOptBind ?n va (sem_env.v ?env)) ?env) s' ?e2.0
       | (s', Rerr error_result) => (s', Rerr error_result))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app
            (template_app (template_hole 8, template_var 4),
             template_var 3),
           template_var 1)))),
    ("Evaluate_Single.Letrec",
     "Evaluate_Single.evaluate ?env ?s (Letrec ?funs ?e) =
      (if distinct (map (%(x, y, z). x) ?funs)
       then Evaluate_Single.evaluate
             (update_v (%_. build_rec_env ?funs ?env (sem_env.v ?env)) ?env)
             ?s ?e
       else (?s, Rerr (Rabort Rtype_error)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, t_empty)),
                 template_var 1))),
           template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_var 3)),
               template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Evaluate_Single.If",
     "Evaluate_Single.evaluate ?env ?s (exp0.If ?e1.0 ?e2.0 ?e3.0) =
      (case Evaluate_Single.evaluate ?env ?s ?e1.0 of
       (s', Rval v) =>
         case do_if v ?e2.0 ?e3.0 of None => (s', Rerr (Rabort Rtype_error))
         | Some x => Evaluate_Single.evaluate ?env s' x
       | (s', Rerr error_result) => (s', Rerr error_result))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app
            (template_app (template_hole 9, template_var 4),
             template_var 3),
           template_var 2)))),
    ("Evaluate_Single.fun_evaluate_equiv",
     "fun_evaluate_match ?s ?env ?v ?pes ?err_v =
      (case match_result ?env ?s ?v ?pes ?err_v of
       Rval (e, env') =>
         Evaluate_Single.evaluate_list
          (Evaluate_Single.evaluate
            (update_v (%_. nsAppend (alist_to_ns env') (sem_env.v ?env))
              ?env))
          ?s [e]
       | Rerr err => (?s, Rerr err))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 13, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_app (template_hole 12, t_empty), t_empty),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Evaluate_Single.Log",
     "Evaluate_Single.evaluate ?env ?s (Log ?op0.0 ?e1.0 ?e2.0) =
      (case Evaluate_Single.evaluate ?env ?s ?e1.0 of
       (s', Rval v) =>
         case do_log ?op0.0 v ?e2.0 of
         None => (s', Rerr (Rabort Rtype_error))
         | Some (Exp xa) => Evaluate_Single.evaluate ?env s' xa
         | Some (Val bv) => (s', Rval bv)
       | (s', Rerr error_result) => (s', Rerr error_result))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app
          (template_app
            (template_app (template_hole 11, template_var 4),
             template_var 3),
           template_var 1)))),
    ("Evaluate_Single.Cons",
     "Evaluate_Single.evaluate_list ?eval ?s (?e # ?es) =
      (case fix_clock ?s (?eval ?s ?e) of
       (s', Rval v) =>
         case Evaluate_Single.evaluate_list ?eval s' ?es of
         (s'', Rval vs) => (s'', Rval (v # vs))
         | (s'', Rerr error_result) => (s'', Rerr error_result)
       | (s', Rerr err) => (s', Rerr err))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 1))))),
    ("Evaluate_Single.Mat",
     "Evaluate_Single.evaluate ?env ?s (Mat ?e ?pes) =
      (case Evaluate_Single.evaluate ?env ?s ?e of
       (s', Rval va) =>
         case match_result ?env s' va ?pes Bindv of
         Rval (e', env') =>
           Evaluate_Single.evaluate
            (update_v (%_. nsAppend (alist_to_ns env') (sem_env.v ?env))
              ?env)
            s' e'
         | Rerr err => (s', Rerr err)
       | (s', Rerr error_result) => (s', Rerr error_result))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 12, template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 11, t_empty),
         template_app
          (template_app
            (template_app (template_hole 13, template_var 3),
             template_var 2),
           template_var 1)))),
    ("Evaluate_Single.Con",
     "Evaluate_Single.evaluate ?env ?s (Con ?cn ?es) =
      (if do_con_check (c ?env) ?cn (length ?es)
       then case Evaluate_Single.evaluate_list
                  (Evaluate_Single.evaluate ?env) ?s (rev ?es) of
            (s', Rval vs) =>
              case build_conv (c ?env) ?cn (rev vs) of
              None => (s', Rerr (Rabort Rtype_error))
              | Some v => (s', Rval v)
            | (s', Rerr err) => (s', Rerr err)
       else (?s, Rerr (Rabort Rtype_error)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 17, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 16, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_var 3)),
                 template_var 1),
               template_app (template_hole 12, template_var 0))),
           template_app
            (template_app (template_hole 11, t_empty),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 17, template_var 3)),
                 template_var 2),
               template_app (template_hole 0, template_var 0)))),
         template_app
          (template_app (template_hole 8, template_var 2),
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 5)))))),
    ("Evaluate_Single.Handle",
     "Evaluate_Single.evaluate ?env ?s (Handle ?e ?pes) =
      (case Evaluate_Single.evaluate ?env ?s ?e of
       (s', Rval ab) => (s', Rval ab)
       | (s', Rerr (Rraise va)) =>
           case match_result ?env s' va ?pes va of
           Rval (e', env') =>
             Evaluate_Single.evaluate
              (update_v (%_. nsAppend (alist_to_ns env') (sem_env.v ?env))
                ?env)
              s' e'
           | Rerr err => (s', Rerr err)
       | (s', Rerr (Rabort abort)) => (s', Rerr (Rabort abort)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 15, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 14, template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 13, t_empty),
         template_app
          (template_app
            (template_app (template_hole 15, template_var 3),
             template_var 2),
           template_var 1)))),
    ("Evaluate_Single.App",
     "Evaluate_Single.evaluate ?env ?s (App ?op0.0 ?es) =
      (case Evaluate_Single.evaluate_list (Evaluate_Single.evaluate ?env) ?s
             (rev ?es) of
       (s', Rval vs) =>
         if ?op0.0 = Opapp
         then case do_opapp (rev vs) of
              None => (s', Rerr (Rabort Rtype_error))
              | Some (env', e) =>
                  if clock s' = 0 then (s', Rerr (Rabort Rtimeout_error))
                  else Evaluate_Single.evaluate env' (dec_clock s') e
         else case do_app (refs s', ffi s') ?op0.0 (rev vs) of
              None => (s', Rerr (Rabort Rtype_error))
              | Some ((refs', ffi'), res) =>
                  (update_ffi (%_. ffi') (update_refs (%_. refs') s'), res)
       | (s', Rerr err) => (s', Rerr err))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 30, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 29, template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 28, t_empty),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 30, template_var 3)),
             template_var 2),
           template_app (template_hole 0, template_var 0)))))]
