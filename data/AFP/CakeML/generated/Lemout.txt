Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LemTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.LemTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LemTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.LemTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.119s elapsed time, 0.505s cpu time, 0.000s GC time
Loading theory "Draft.LemExtraDefs" (required by "Draft.LemTemplates" via "Draft.Lem")
### theory "HOL-Library.Set_Algebras"
### 0.298s elapsed time, 1.199s cpu time, 0.106s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LemTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Type
### ?'a::type multiset => ?'a::type multiset => bool
### of constant "HOL.eq"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool, in theorem:
### mset [] = mset ?l == ?l = []
### Type
### ?'a::type multiset => ?'a::type multiset => bool
### of constant "HOL.eq"
### is too specific compared to declared type
### ?'a::{} => ?'a::{} => bool, in theorem:
### mset (?x # ?xs) = mset ?l ==
### case delete_first (%e. e = ?x) ?l of None => False
### | Some l' => mset ?xs = mset l'
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.830s elapsed time, 3.255s cpu time, 0.330s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.922s elapsed time, 3.271s cpu time, 0.743s GC time
Found termination order: "size <*mlex*> {}"
find_consts
  "'a list => ('a list * _)"
found 3 constant(s):
Multiset.linorder.part ::
  "('a => 'a => bool)
   => ('b => 'a) => 'a => 'b list => 'b list * 'b list * 'b list"
List.partition :: "('a => bool) => 'a list => 'a list * 'a list"
LemExtraDefs.split_at :: "nat => 'a list => 'a list * 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.LemExtraDefs"
### 1.451s elapsed time, 4.708s cpu time, 0.957s GC time
Loading theory "Draft.Lem" (required by "Draft.LemTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lem"
### 0.374s elapsed time, 0.826s cpu time, 0.183s GC time
### theory "HOL-Library.Tree"
### 2.008s elapsed time, 6.145s cpu time, 1.141s GC time
Loading theory "Draft.Templates" (required by "Draft.LemTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LemTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.470s elapsed time, 0.535s cpu time, 0.078s GC time
Loading theory "Draft.LemTemplates"
val templateLemmas =
   [("LemExtraDefs.nat_to_string___is_nat_string",
     "is_nat_string (nat_to_string ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LemExtraDefs.nat_to_string___is_strong_nat_string",
     "is_strong_nat_string (nat_to_string ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LemExtraDefs.nat_to_string_neq_nil2", "[] ~= nat_to_string ?n",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("LemExtraDefs.nat_to_string_neq_nil", "nat_to_string ?n ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("LemExtraDefs.genlist_simps", "genlist ?f 0 = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("LemExtraDefs.delete_first_simps", "delete_first ?P [] = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("LemExtraDefs.sorted_find_indices", "sorted (find_indices ?P ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("LemExtraDefs.set_choose_sing", "set_choose {?x} = ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("LemExtraDefs.genlist_length", "length (genlist ?f ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("LemExtraDefs.is_digit_char_intro",
     "is_digit (char_to_digit ?c) = is_digit_char ?c",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("LemExtraDefs.is_digit_intro",
     "is_digit_char (digit_to_char ?n) = is_digit ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("LemExtraDefs.nat_to_string_inv",
     "string_to_nat (nat_to_string ?n) = Some ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("LemExtraDefs.set_case_simps",
     "set_case {} ?c_empty ?c_sing ?c_else = ?c_empty",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2),
           template_var 1),
         template_var 0),
       template_var 2)),
    ("LemExtraDefs.set_choose_code", "set_choose (set [?x]) = ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_var 0)),
    ("LemExtraDefs.map_image_simps", "map_image ?f Map.empty = Map.empty",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), t_empty),
       t_empty)),
    ("LemExtraDefs.insert_sort_by_length",
     "length (insert_sort_by ?cmp ?l) = length ?l",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LemExtraDefs.sort_by_simps", "length (sort_by ?cmp ?l) = length ?l",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LemExtraDefs.insert_sort_by_set",
     "set (insert_sort_by ?cmp ?l) = set ?l",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LemExtraDefs.sort_by_simps", "set (sort_by ?cmp ?l) = set ?l",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LemExtraDefs.map_image_dom_ran", "dom (map_image ?f ?m) = dom ?m",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("LemExtraDefs.insert_sort_by_perm",
     "mset (insert_sort_by ?cmp ?l) = mset ?l",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LemExtraDefs.sort_by_perm", "mset (sort_by ?cmp ?l) = mset ?l",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("LemExtraDefs.length_find_indices",
     "length (find_indices ?P ?l) <= length ?l",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("LemExtraDefs.list_of_set", "finite ?s ==> distinct (list_of_set ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("LemExtraDefs.set_case_code",
     "set_case (set []) ?c_empty ?c_sing ?c_else = ?c_empty",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_var 2)),
    ("LemExtraDefs.list_of_set_set_is_empty",
     "(list_of_set_set ?s = {}) = infinite ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("LemExtraDefs.insert_sort_insert_by_length",
     "length (insert_sort_insert_by ?cmp ?e ?l) = Suc (length ?l)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("LemExtraDefs.map_image_dom_ran",
     "ran (map_image ?f ?m) = ?f ` ran ?m",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("LemExtraDefs.nat_to_string_11",
     "(nat_to_string ?n1.0 = nat_to_string ?n2.0) = (?n1.0 = ?n2.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("LemExtraDefs.perm_eval", "(mset [] = mset ?l) = (?l = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 1))),
    ("LemExtraDefs.list_of_set", "finite ?s ==> set (list_of_set ?s) = ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("LemExtraDefs.list_of_set_in",
     "finite ?s ==> list_of_set ?s : list_of_set_set ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("LemExtraDefs.diget_to_char_inv",
     "is_digit ?n ==> char_to_digit (digit_to_char ?n) = ?n",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("LemExtraDefs.char_to_diget_inv",
     "is_digit_char ?c ==> digit_to_char (char_to_digit ?c) = ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("LemExtraDefs.set_case_simps",
     "set_case {?x} ?c_empty ?c_sing ?c_else = ?c_sing ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_hole 0)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_var 1, template_var 3))),
    ("LemExtraDefs.insert_sort_insert_by_set",
     "set (insert_sort_insert_by ?cmp ?e ?l) = insert ?e (set ?l)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("LemExtraDefs.The_opt_eq_none",
     "(The_opt ?p = None) = (\<nexists>!x. ?p x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, t_empty)))),
    ("LemExtraDefs.is_nat_string_simps",
     "is_nat_string (?c # ?s) = (is_digit_char ?c & is_nat_string ?s)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("LemExtraDefs.index_eq_none",
     "(index ?l ?n = None) = (length ?l <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("LemExtraDefs.insert_sort_insert_by_perm",
     "mset (insert_sort_insert_by ?cmp ?e ?l) = mset (?e # ?l)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("LemExtraDefs.sorted_map_suc", "sorted ?l ==> sorted (map Suc ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("LemExtraDefs.set_choose_in", "?s ~= {} ==> set_choose ?s : ?s",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("LemExtraDefs.sorted_by_cons_imp",
     "sorted_by ?cmp (?x # ?xs) ==> sorted_by ?cmp ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("LemExtraDefs.set_case_code",
     "set_case (set [?x]) ?c_empty ?c_sing ?c_else = ?c_sing ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0))),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_var 1, template_var 3))),
    ("LemExtraDefs.map_image_simps",
     "(map_image ?f ?m ?k = None) = (?m ?k = None)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 2),
       template_equation
        (template_app (template_var 1, template_var 0), template_hole 0))),
    ("LemExtraDefs.nat_to_string_simps",
     "is_digit ?n ==> nat_to_string ?n = [digit_to_char ?n]",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("LemExtraDefs.nat_to_string_char_to_digit",
     "is_digit_char ?c ==> nat_to_string (char_to_digit ?c) = [?c]",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("LemExtraDefs.index_simps", "length ?l <= ?n ==> index ?l ?n = None",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("LemExtraDefs.is_digit_simps", "?n < 10 ==> is_digit ?n",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 4,
            template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app (template_hole 3, template_hole 1)))))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("LemExtraDefs.sum_partition_length",
     "length ?lrs =
      length (fst (sum_partition ?lrs)) +
      length (snd (sum_partition ?lrs))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)))))),
    ("LemExtraDefs.char_to_digit_div_mod",
     "is_digit_char ?c ==> char_to_digit ?c < 10",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_inequation
        (less_than, template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 2, template_hole 0))))))),
    ("LemExtraDefs.delete_first_simps",
     "?P ?x ==> delete_first ?P (?x # ?xs) = Some ?xs",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("LemExtraDefs.set_case_simps",
     "infinite ?s ==> set_case ?s ?c_empty ?c_sing ?c_else = ?c_else",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("LemExtraDefs.find_index_eq_none",
     "(find_index ?P ?xs = None) = (ALL x:set ?xs. ~ ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("LemExtraDefs.delete_first_eq_none",
     "(delete_first ?P ?l = None) = (ALL x:set ?l. ~ ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("LemExtraDefs.genlist_simps",
     "genlist ?f (Suc ?n) = genlist ?f ?n @ [?f ?n]",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 1, template_var 0)),
           template_hole 0)))),
    ("LemExtraDefs.set_case_simps",
     "1 < card ?s ==> set_case ?s ?c_empty ?c_sing ?c_else = ?c_else",
     template_implication
      ([template_inequation
         (less_than, template_hole 3,
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("LemExtraDefs.is_digit_simps", "~ ?n < 10 ==> ~ is_digit ?n",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_than, template_var 0,
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 3, template_hole 1)))))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("LemExtraDefs.index_simps",
     "?n < length ?l ==> index ?l ?n = Some (?l ! ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("LemExtraDefs.list_of_set_set_insert",
     "list_of_set_set (insert ?x ?s) =
      \<Union>
       (insert_in_list_at_arbitrary_pos ?x ` list_of_set_set (?s - {?x}))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 0))))))),
    ("LemExtraDefs.string_to_nat_inv",
     "[| is_strong_nat_string ?s; string_to_nat ?s = Some ?n |]
      ==> nat_to_string ?n = ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("LemExtraDefs.set_lfp_simps",
     "[| mono ?f; ?f ?s <= ?s |] ==> set_lfp ?s ?f = ?s",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_app (template_var 1, template_var 0),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 0))),
    ("LemExtraDefs.map_image_simps",
     "map_image ?f (?m(?k |-> ?v)) = map_image ?f ?m(?k |-> ?f ?v)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_hole 0,
           template_app (template_var 3, template_var 0))))),
    ("LemExtraDefs.find_indices_set",
     "set (find_indices ?P ?l) = {i. i < length ?l & ?P (?l ! i)}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("LemExtraDefs.list_of_set_set_code",
     "list_of_set_set (set (?x # ?xs)) =
      \<Union>
       (insert_in_list_at_arbitrary_pos ?x `
        list_of_set_set (set ?xs - {?x}))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 7, template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))))))),
    ("LemExtraDefs.The_opt_eq_some",
     "(The_opt ?p = Some ?x) = (?p ?x & (ALL y. ?p y --> ?x = y))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 1, template_var 0)),
         template_app (template_hole 2, t_empty)))),
    ("LemExtraDefs.index_eq_some",
     "(index ?l ?n = Some ?x) = (?n < length ?l & ?x = ?l ! ?n)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_var 2))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("LemExtraDefs.delete_first_unroll",
     "delete_first ?P (?x # ?xs) =
      (if ?P ?x then Some ?xs
       else map_option ((#) ?x) (delete_first ?P ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0))))),
    ("LemExtraDefs.set_case_simp_insert2",
     "?x1.0 ~= ?x2.0 ==>
      set_case (insert ?x1.0 (insert ?x2.0 ?xs)) ?c_empty ?c_sing ?c_else =
      ?c_else",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3))),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("LemExtraDefs.map_to_set_simps",
     "map_to_set (?m(?k |-> ?v)) =
      insert (?k, ?v) (map_to_set (?m |` (- {?k})))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))))))),
    ("LemExtraDefs.delete_first_simps",
     "~ ?P ?x ==>
      delete_first ?P (?x # ?xs) =
      map_option ((#) ?x) (delete_first ?P ?xs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, t_empty),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("LemExtraDefs.char_to_digit_11",
     "char_to_digit ?c1.0 = char_to_digit ?c2.0 ==>
      is_digit_char ?c1.0 = is_digit_char ?c2.0 &
      (is_digit_char ?c1.0 --> ?c1.0 = ?c2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("LemExtraDefs.digit_to_char_11",
     "digit_to_char ?n1.0 = digit_to_char ?n2.0 ==>
      is_digit ?n1.0 = is_digit ?n2.0 & (is_digit ?n1.0 --> ?n1.0 = ?n2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("LemExtraDefs.map_image_simps",
     "(map_image ?f ?m ?k = Some ?x) =
      (EX x'. ?m ?k = Some x' & ?x = ?f x')",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("LemExtraDefs.sorted_by_cons_trans",
     "transp ?cmp ==>
      sorted_by ?cmp (?x # ?xs) =
      ((ALL x':set ?xs. ?cmp ?x x') & sorted_by ?cmp ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               t_empty)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0))))),
    ("LemExtraDefs.digit_to_char_simps",
     "9 < ?n ==> digit_to_char ?n = CHR ''X''",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 8,
            template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 6, template_hole 5)))),
          template_var 0)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_hole 1),
                     template_hole 1),
                   template_hole 0),
                 template_hole 0),
               template_hole 1),
             template_hole 0),
           template_hole 1)))),
    ("LemExtraDefs.set_lfp_simps",
     "[| mono ?f; ~ ?f ?s <= ?s |]
      ==> set_lfp ?s ?f = set_lfp (?s Un ?f ?s) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_inequation
             (less_equals, template_app (template_var 1, template_var 0),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_var 1, template_var 0))),
           template_var 1)))),
    ("LemExtraDefs.perm_eval",
     "(mset (?x # ?xs) = mset ?l) =
      (case delete_first (%e. e = ?x) ?l of None => False
       | Some l' => mset ?xs = mset l')",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("LemExtraDefs.nat_to_string___eq_0",
     "(nat_to_string ?n = CHR ''0'' # ?s) = (?n = 0 & ?s = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 6, template_hole 5),
                           template_hole 5),
                         template_hole 5),
                       template_hole 5),
                     template_hole 4),
                   template_hole 4),
                 template_hole 5),
               template_hole 5)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 9, template_var 0),
               template_hole 0))
           ))),
    ("Zorn.Zorn_Lemma",
     "ALL C:chains ?A. \<Union> C : ?A ==>
      EX M:?A. ALL X:?A. M <= X --> X = M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), t_empty)
           ))),
    ("LemExtraDefs.set_case_code",
     "set_case (set (?x1.0 # ?x2.0 # ?xs)) ?c_empty ?c_sing ?c_else =
      (if ?x1.0 = ?x2.0
       then set_case (set (?x2.0 # ?xs)) ?c_empty ?c_sing ?c_else
       else ?c_else)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 5),
                        template_app
                         (template_app (template_hole 2, template_var 4),
                          template_var 3)))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4)),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_var 4),
                           template_var 3))),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("LemExtraDefs.insert_in_list_at_arbitrary_pos_thm",
     "(?xl : insert_in_list_at_arbitrary_pos ?x ?l) =
      (EX l1 l2. ?l = l1 @ l2 & ?xl = l1 @ [?x] @ l2)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("LemExtraDefs.is_strong_nat_string_simps",
     "is_strong_nat_string (?c # ?s) =
      (is_digit_char ?c & is_nat_string ?s & (?c = CHR ''0'' --> ?s = []))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 1)),
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 7, template_var 0)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 4, template_hole 3),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 3),
                             template_hole 2),
                           template_hole 2),
                         template_hole 3),
                       template_hole 3))),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))))
           ))),
    ("LemExtraDefs.string_to_nat_aux_inv",
     "[| is_nat_string ?s; 0 < ?n | is_strong_nat_string ?s |]
      ==> nat_to_string (string_to_nat_aux ?n ?s) =
          (if ?n = 0 then [] else nat_to_string ?n) @ ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 0)),
              template_app (template_hole 7, template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_hole 8)),
                     template_hole 0),
                   template_app (template_hole 5, template_var 0))),
               template_var 1)
             )))),
    ("LemExtraDefs.nat_to_string_simps",
     "~ is_digit ?n ==>
      nat_to_string ?n =
      nat_to_string (?n div 10) @ [digit_to_char (?n mod 10)]",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_var 0))
            )],
       template_equation
        (template_app (template_hole 10, template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 6, template_hole 4))))))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 6, template_hole 4))))))),
             template_hole 0))))),
    ("LemExtraDefs.find_index_eq_some",
     "(find_index ?P ?xs = Some ?ii) =
      (?ii < length ?xs & ?P (?xs ! ?ii) & (ALL i'<?ii. ~ ?P (?xs ! i')))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_var 2,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app (template_hole 2, t_empty))))),
    ("Zorn.Zorn_Lemma2",
     "ALL C:chains ?A. EX U:?A. ALL X:C. X <= U ==>
      EX M:?A. ALL X:?A. M <= X --> X = M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), t_empty)
           ))),
    ("LemExtraDefs.insert_sort_insert_by_sorted_by",
     "[| !!y. [| y : set ?l; ~ ?cmp ?e y |] ==> ?cmp y ?e; transp ?cmp;
         sorted_by ?cmp ?l |]
      ==> sorted_by ?cmp (insert_sort_insert_by ?cmp ?e ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("LemExtraDefs.delete_first_eq_some",
     "(delete_first ?P ?l = Some ?l') =
      (EX l1 x l2.
          ?P x &
          (ALL x:set l1. ~ ?P x) & ?l = l1 @ x # l2 & ?l' = l1 @ l2)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1)),
         template_app (template_hole 9, template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("LemExtraDefs.nat_to_string_induct",
     "[| !!d. is_digit d ==> ?P d;
         !!n. [| ~ is_digit n; ?P (n div 10); ?P (n mod 10) |] ==> ?P n |]
      ==> ?P ?n",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("LemExtraDefs.is_digit_expand",
     "is_digit ?n =
      (?n = 0 |
       ?n = 1 |
       ?n = 2 |
       ?n = 3 | ?n = 4 | ?n = 5 | ?n = 6 | ?n = 7 | ?n = 8 | ?n = 9)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_hole 3,
                         template_app (template_hole 0, template_hole 1)))),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2, template_hole 1))))),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 0,
                               template_app
                                (template_hole 2, template_hole 1))))),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 0),
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 0, template_hole 1))))),
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 0,
                                   template_app
                                    (template_hole 0, template_hole 1))))),
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2, template_app (template_hole 2, template_hole 1)))))),
                             template_app
                              (template_app
                                (template_hole 6, template_var 0),
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 0,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 2, template_hole 1))))))))))))))
           ))),
    ("LemExtraDefs.is_digitI",
     "?n = 0 |
      ?n = 1 |
      ?n = 2 |
      ?n = 3 | ?n = 4 | ?n = 5 | ?n = 6 | ?n = 7 | ?n = 8 | ?n = 9 ==>
      is_digit ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_hole 6)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_hole 5)),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_hole 2)))),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 0),
                        template_app
                         (template_hole 4,
                          template_app
                           (template_hole 1, template_hole 2)))),
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 0),
                          template_app
                           (template_hole 4,
                            template_app
                             (template_hole 3,
                              template_app
                               (template_hole 3, template_hole 2))))),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app
                           (template_app (template_hole 7, template_var 0),
                            template_app
                             (template_hole 4,
                              template_app
                               (template_hole 1,
                                template_app
                                 (template_hole 3, template_hole 2))))),
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app
                             (template_app
                               (template_hole 7, template_var 0),
                              template_app
                               (template_hole 4,
                                template_app
                                 (template_hole 3,
                                  template_app
                                   (template_hole 1, template_hole 2))))),
                          template_app
                           (template_app
                             (template_hole 8,
                              template_app
                               (template_app
                                 (template_hole 7, template_var 0),
                                template_app
                                 (template_hole 4,
                                  template_app
                                   (template_hole 1,
                                    template_app
                                     (template_hole 1, template_hole 2))))),
                            template_app
                             (template_app
                               (template_hole 8,
                                template_app
                                 (template_app
                                   (template_hole 7, template_var 0),
                                  template_app
                                   (template_hole 4,
                                    template_app
                                     (template_hole 3,
template_app
 (template_hole 3, template_app (template_hole 3, template_hole 2)))))),
                              template_app
                               (template_app
                                 (template_hole 7, template_var 0),
                                template_app
                                 (template_hole 4,
                                  template_app
                                   (template_hole 1,
                                    template_app
                                     (template_hole 3,
template_app (template_hole 3, template_hole 2))))))))))))))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("LemExtraDefs.is_digitE",
     "[| is_digit ?n;
         ?n = 0 |
         ?n = 1 |
         ?n = 2 |
         ?n = 3 | ?n = 4 | ?n = 5 | ?n = 6 | ?n = 7 | ?n = 8 | ?n = 9 ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_hole 4)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1)))),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 1),
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 0, template_hole 1)))),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app (template_hole 6, template_var 1),
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 2, template_hole 1))))),
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_var 1),
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 0,
                                   template_app
                                    (template_hole 2, template_hole 1))))),
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 6, template_var 1),
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2,
                                     template_app
(template_hole 0, template_hole 1))))),
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 6, template_var 1),
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 0, template_app (template_hole 0, template_hole 1))))),
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app
                                    (template_app
(template_hole 6, template_var 1),
                                     template_app
(template_hole 3,
 template_app
  (template_hole 2,
   template_app
    (template_hole 2, template_app (template_hole 2, template_hole 1)))))),
                                 template_app
                                  (template_app
                                    (template_hole 6, template_var 1),
                                   template_app
                                    (template_hole 3,
                                     template_app
(template_hole 0,
 template_app
  (template_hole 2,
   template_app (template_hole 2, template_hole 1))))))))))))))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("LemExtraDefs.is_digit_charI",
     "?c = CHR ''0'' |
      ?c = CHR ''5'' |
      ?c = CHR ''1'' |
      ?c = CHR ''6'' |
      ?c = CHR ''2'' |
      ?c = CHR ''7'' |
      ?c = CHR ''3'' | ?c = CHR ''8'' | ?c = CHR ''4'' | ?c = CHR ''9'' ==>
      is_digit_char ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 3, template_hole 2),
                                template_hole 2),
                              template_hole 2),
                            template_hole 2),
                          template_hole 1),
                        template_hole 1),
                      template_hole 2),
                    template_hole 2))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_hole 3, template_hole 1),
                                  template_hole 2),
                                template_hole 1),
                              template_hole 2),
                            template_hole 1),
                          template_hole 1),
                        template_hole 2),
                      template_hole 2))),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_hole 3, template_hole 1),
                                    template_hole 2),
                                  template_hole 2),
                                template_hole 2),
                              template_hole 1),
                            template_hole 1),
                          template_hole 2),
                        template_hole 2))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 0),
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_hole 3, template_hole 2),
template_hole 1),
                                    template_hole 1),
                                  template_hole 2),
                                template_hole 1),
                              template_hole 1),
                            template_hole 2),
                          template_hole 2))),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 0),
                          template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app (template_hole 3, template_hole 2), template_hole 1),
template_hole 2),
                                    template_hole 2),
                                  template_hole 1),
                                template_hole 1),
                              template_hole 2),
                            template_hole 2))),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 0),
                            template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app (template_hole 3, template_hole 1), template_hole 1),
  template_hole 1),
template_hole 2),
                                    template_hole 1),
                                  template_hole 1),
                                template_hole 2),
                              template_hole 2))),
                        template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 4, template_var 0),
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 3, template_hole 1), template_hole 1),
    template_hole 2),
  template_hole 2),
template_hole 1),
                                    template_hole 1),
                                  template_hole 2),
                                template_hole 2))),
                          template_app
                           (template_app
                             (template_hole 5,
                              template_app
                               (template_app
                                 (template_hole 4, template_var 0),
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 3, template_hole 2), template_hole 2),
      template_hole 2),
    template_hole 1),
  template_hole 1),
template_hole 1),
                                    template_hole 2),
                                  template_hole 2))),
                            template_app
                             (template_app
                               (template_hole 5,
                                template_app
                                 (template_app
                                   (template_hole 4, template_var 0),
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 3, template_hole 2), template_hole 2),
        template_hole 1),
      template_hole 2),
    template_hole 1),
  template_hole 1),
template_hole 2),
                                    template_hole 2))),
                              template_app
                               (template_app
                                 (template_hole 4, template_var 0),
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 3, template_hole 1), template_hole 2),
      template_hole 2),
    template_hole 1),
  template_hole 1),
template_hole 1),
                                    template_hole 2),
                                  template_hole 2)))))))))))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("LemExtraDefs.is_digit_charE",
     "[| is_digit_char ?c;
         ?c = CHR ''0'' |
         ?c = CHR ''5'' |
         ?c = CHR ''1'' |
         ?c = CHR ''6'' |
         ?c = CHR ''2'' |
         ?c = CHR ''7'' |
         ?c = CHR ''3'' |
         ?c = CHR ''8'' | ?c = CHR ''4'' | ?c = CHR ''9'' ==>
         PROP ?W |]
      ==> PROP ?W",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 2, template_hole 1),
                                   template_hole 1),
                                 template_hole 1),
                               template_hole 1),
                             template_hole 0),
                           template_hole 0),
                         template_hole 1),
                       template_hole 1))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 2, template_hole 0),
                                     template_hole 1),
                                   template_hole 0),
                                 template_hole 1),
                               template_hole 0),
                             template_hole 0),
                           template_hole 1),
                         template_hole 1))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 2, template_hole 0), template_hole 1),
                                     template_hole 1),
                                   template_hole 1),
                                 template_hole 0),
                               template_hole 0),
                             template_hole 1),
                           template_hole 1))),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 1),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 2, template_hole 1), template_hole 0),
 template_hole 0),
                                     template_hole 1),
                                   template_hole 0),
                                 template_hole 0),
                               template_hole 1),
                             template_hole 1))),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app (template_hole 3, template_var 1),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 2, template_hole 1), template_hole 0),
   template_hole 1),
 template_hole 1),
                                     template_hole 0),
                                   template_hole 0),
                                 template_hole 1),
                               template_hole 1))),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3, template_var 1),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 2, template_hole 0), template_hole 0),
     template_hole 0),
   template_hole 1),
 template_hole 0),
                                     template_hole 0),
                                   template_hole 1),
                                 template_hole 1))),
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_app
                                  (template_hole 3, template_var 1),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 2, template_hole 0), template_hole 0),
       template_hole 1),
     template_hole 1),
   template_hole 0),
 template_hole 0),
                                     template_hole 1),
                                   template_hole 1))),
                             template_app
                              (template_app
                                (template_hole 4,
                                 template_app
                                  (template_app
                                    (template_hole 3, template_var 1),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 1),
         template_hole 1),
       template_hole 0),
     template_hole 0),
   template_hole 0),
 template_hole 1),
                                     template_hole 1))),
                               template_app
                                (template_app
                                  (template_hole 4,
                                   template_app
                                    (template_app
(template_hole 3, template_var 1),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 1),
           template_hole 0),
         template_hole 1),
       template_hole 0),
     template_hole 0),
   template_hole 1),
 template_hole 1))),
                                 template_app
                                  (template_app
                                    (template_hole 3, template_var 1),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 0),
           template_hole 1),
         template_hole 1),
       template_hole 0),
     template_hole 0),
   template_hole 0),
 template_hole 1),
                                     template_hole 1)))))))))))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.LemTemplates"
### 0.761s elapsed time, 1.459s cpu time, 0.821s GC time
val it = (): unit
