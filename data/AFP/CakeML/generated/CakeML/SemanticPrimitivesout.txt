Loading theory "HOL-Library.Stream" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.596s cpu time, 0.063s GC time
Loading theory "Draft.Lib" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.SemanticPrimitives")
### theory "HOL-Library.Set_Algebras"
### 0.228s elapsed time, 0.920s cpu time, 0.063s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.871s elapsed time, 3.397s cpu time, 0.346s GC time
Loading theory "Draft.Namespace" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.SemanticPrimitives")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.937s elapsed time, 3.552s cpu time, 0.904s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.150s elapsed time, 7.470s cpu time, 1.299s GC time
Loading theory "Draft.Templates" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.205s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SemanticPrimitivesTemplates")
Found termination order: "{}"
### theory "Draft.Lib"
### 2.763s elapsed time, 9.272s cpu time, 2.147s GC time
Loading theory "Draft.Ffi" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.SemanticPrimitives")
Loading theory "Draft.FpSem" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.SemanticPrimitives" via "Draft.Ast")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.907s elapsed time, 3.003s cpu time, 0.958s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Namespace"
### 4.474s elapsed time, 14.101s cpu time, 3.405s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.FpSem"
### 2.849s elapsed time, 8.511s cpu time, 1.598s GC time
Loading theory "Draft.Ast" (required by "Draft.SemanticPrimitivesTemplates" via "Draft.SemanticPrimitives")
### Ambiguous input (line 48 of "$AFP/CakeML/generated/CakeML/Ffi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" initial_ffi_state)
###       ("_cargs" ("_position" oc) ("_position" ffi1)))
###     ("_record"
###       ("_fields" ("_field" ("_constify" oracle0) ("_position" oc))
###         ("_fields" ("_field" ("_constify" ffi_state) ("_position" ffi1))
###           ("_fields" ("_field" ("_constify" final_event) ("_position" None))
###             ("_field" ("_constify" io_events)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" initial_ffi_state)
###       ("_cargs" ("_position" oc) ("_position" ffi1)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" oracle0) ("_position" oc))
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" ffi_state) ("_position" ffi1))
###           ("_datatype_fields"
###             ("_datatype_field" ("_constify" final_event) ("_position" None))
###             ("_datatype_field" ("_constify" io_events)
###               ("\<^const>List.list.Nil"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/CakeML/generated/CakeML/Ffi.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Ffi"
### 5.444s elapsed time, 13.865s cpu time, 2.036s GC time
Found termination order: "{}"
### theory "Draft.Ast"
### 12.134s elapsed time, 16.562s cpu time, 2.728s GC time
Loading theory "Draft.SemanticPrimitives" (required by "Draft.SemanticPrimitivesTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
### Ambiguous input (line 377 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Closure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" n) ("_position" e))))
###           ("_position" v2))))
###     ("_applC" ("_position" Some)
###       ("_tuple"
###         ("_datatype_record_update" ("_position" env)
###           ("_datatype_field_update" ("_constify" v)
###             ("_applC" ("_position" nsBind)
###               ("_cargs" ("_position" n)
###                 ("_cargs" ("_position" v2)
###                   ("_applC" ("_position" v) ("_position" env)))))))
###         ("_tuple_arg" ("_position" e))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Closure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" n) ("_position" e))))
###           ("_position" v2))))
###     ("_applC" ("_position" Some)
###       ("_tuple"
###         ("_record_update" ("_position" env)
###           ("_field_update" ("_constify" v)
###             ("_applC" ("_position" nsBind)
###               ("_cargs" ("_position" n)
###                 ("_cargs" ("_position" v2)
###                   ("_applC" ("_position" v) ("_position" env)))))))
###         ("_tuple_arg" ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 379 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Recclosure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" funs) ("_position" n))))
###           ("_position" v2))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" f)
###                     ("_tuple_args" ("_position" x)
###                       ("_tuple_arg" ("_position" e))))
###                   ("_position" f))))
###             ("_position" funs))))
###       ("_case_syntax"
###         ("_applC" ("_position" find_recfun)
###           ("_cargs" ("_position" n) ("_position" funs)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" n) ("_tuple_arg" ("_position" e))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_record_update" ("_position" env)
###                   ("_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsBind)
###                       ("_cargs" ("_position" n)
###                         ("_cargs" ("_position" v2)
###                           ("_applC" ("_position" build_rec_env)
###                             ("_cargs" ("_position" funs)
###                               ("_cargs" ("_position" env)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env))))))))))
###                 ("_tuple_arg" ("_position" e)))))
###           ("_case1" ("_position" None) ("_position" None))))
###       ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Recclosure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" funs) ("_position" n))))
###           ("_position" v2))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" f)
###                     ("_tuple_args" ("_position" x)
###                       ("_tuple_arg" ("_position" e))))
###                   ("_position" f))))
###             ("_position" funs))))
###       ("_case_syntax"
###         ("_applC" ("_position" find_recfun)
###           ("_cargs" ("_position" n) ("_position" funs)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" n) ("_tuple_arg" ("_position" e))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" env)
###                   ("_datatype_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsBind)
###                       ("_cargs" ("_position" n)
###                         ("_cargs" ("_position" v2)
###                           ("_applC" ("_position" build_rec_env)
###                             ("_cargs" ("_position" funs)
###                               ("_cargs" ("_position" env)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env))))))))))
###                 ("_tuple_arg" ("_position" e)))))
###           ("_case1" ("_position" None) ("_position" None))))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 939 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" combine_dec_result)
###       ("_cargs" ("_position" env)
###         ("_applC" ("_position" Rval) ("_position" env'))))
###     ("_applC" ("_position" Rval)
###       ("_record"
###         ("_fields"
###           ("_field" ("_constify" v)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" v) ("_position" env'))
###                 ("_applC" ("_position" v) ("_position" env)))))
###           ("_field" ("_constify" c)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env'))
###                 ("_applC" ("_position" c) ("_position" env))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" combine_dec_result)
###       ("_cargs" ("_position" env)
###         ("_applC" ("_position" Rval) ("_position" env'))))
###     ("_applC" ("_position" Rval)
###       ("_datatype_record"
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" v)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" v) ("_position" env'))
###                 ("_applC" ("_position" v) ("_position" env)))))
###           ("_datatype_field" ("_constify" c)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env'))
###                 ("_applC" ("_position" c) ("_position" env))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 944 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extend_dec_env)
###       ("_cargs" ("_position" new_env) ("_position" env)))
###     ("_record"
###       ("_fields"
###         ("_field" ("_constify" v)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" v) ("_position" new_env))
###               ("_applC" ("_position" v) ("_position" env)))))
###         ("_field" ("_constify" c)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" c) ("_position" new_env))
###               ("_applC" ("_position" c) ("_position" env)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extend_dec_env)
###       ("_cargs" ("_position" new_env) ("_position" env)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" v)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" v) ("_position" new_env))
###               ("_applC" ("_position" v) ("_position" env)))))
###         ("_datatype_field" ("_constify" c)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" c) ("_position" new_env))
###               ("_applC" ("_position" c) ("_position" env)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SemanticPrimitives"
### 17.356s elapsed time, 20.611s cpu time, 3.775s GC time
Loading theory "Draft.SemanticPrimitivesTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.SemanticPrimitivesTemplates"
### 1.836s elapsed time, 2.179s cpu time, 0.197s GC time
val it = (): unit
