Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TypeSystemTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.TypeSystemTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TypeSystemTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.TypeSystemTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.531s cpu time, 0.065s GC time
Loading theory "Draft.Lib" (required by "Draft.TypeSystemTemplates" via "Draft.TypeSystem")
### theory "HOL-Library.Set_Algebras"
### 0.253s elapsed time, 1.018s cpu time, 0.065s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TypeSystemTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.865s elapsed time, 3.380s cpu time, 0.388s GC time
Loading theory "Draft.Namespace" (required by "Draft.TypeSystemTemplates" via "Draft.TypeSystem")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.877s elapsed time, 3.359s cpu time, 0.741s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 1.883s elapsed time, 6.678s cpu time, 1.188s GC time
Loading theory "Draft.Templates" (required by "Draft.TypeSystemTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.184s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TypeSystemTemplates")
Found termination order: "{}"
### theory "Draft.Lib"
### 2.265s elapsed time, 7.716s cpu time, 1.270s GC time
Loading theory "Draft.Ffi" (required by "Draft.TypeSystemTemplates" via "Draft.TypeSystem" via "Draft.SemanticPrimitives")
Loading theory "Draft.FpSem" (required by "Draft.TypeSystemTemplates" via "Draft.TypeSystem" via "Draft.Ast")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.615s elapsed time, 1.998s cpu time, 0.225s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Namespace"
### 3.883s elapsed time, 12.233s cpu time, 2.656s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.FpSem"
### 2.759s elapsed time, 8.222s cpu time, 1.756s GC time
Loading theory "Draft.Ast" (required by "Draft.TypeSystemTemplates" via "Draft.TypeSystem")
### Ambiguous input (line 48 of "$AFP/CakeML/generated/CakeML/Ffi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" initial_ffi_state)
###       ("_cargs" ("_position" oc) ("_position" ffi1)))
###     ("_record"
###       ("_fields" ("_field" ("_constify" oracle0) ("_position" oc))
###         ("_fields" ("_field" ("_constify" ffi_state) ("_position" ffi1))
###           ("_fields" ("_field" ("_constify" final_event) ("_position" None))
###             ("_field" ("_constify" io_events)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" initial_ffi_state)
###       ("_cargs" ("_position" oc) ("_position" ffi1)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" oracle0) ("_position" oc))
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" ffi_state) ("_position" ffi1))
###           ("_datatype_fields"
###             ("_datatype_field" ("_constify" final_event) ("_position" None))
###             ("_datatype_field" ("_constify" io_events)
###               ("\<^const>List.list.Nil"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/CakeML/generated/CakeML/Ffi.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_updates"
###                     ("_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" call_FFI)
###       ("_cargs" ("_position" st)
###         ("_cargs" ("_position" s)
###           ("_cargs" ("_position" conf) ("_position" bytes)))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" final_event) ("_position" st))
###           ("_position" None))
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_String" ("_position" '''')))))
###       ("_case_syntax"
###         ("_applC" ("_applC" ("_position" oracle0) ("_position" st))
###           ("_cargs" ("_position" s)
###             ("_cargs" ("_applC" ("_position" ffi_state) ("_position" st))
###               ("_cargs" ("_position" conf) ("_position" bytes)))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Oracle_return)
###               ("_cargs" ("_position" ffi') ("_position" bytes')))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" List.length) ("_position" bytes'))
###                 ("_applC" ("_position" List.length) ("_position" bytes)))
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_updates"
###                     ("_datatype_field_update" ("_constify" ffi_state)
###                       ("_position" ffi'))
###                     ("_datatype_field_update" ("_constify" io_events)
###                       ("\<^const>List.append"
###                         ("_applC" ("_position" io_events) ("_position" st))
###                         ("_list"
###                           ("_applC" ("_position" IO_event)
###                             ("_cargs" ("_position" s)
###                               ("_cargs" ("_position" conf)
###                                 ("_applC" ("_position" zipSameLength)
###                                   ("_cargs" ("_position" bytes)
###                                     ("_position" bytes')))))))))))
###                 ("_tuple_arg" ("_position" bytes')))
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))
###           ("_case2"
###             ("_case1" ("_position" Oracle_diverge)
###               ("_tuple"
###                 ("_record_update" ("_position" st)
###                   ("_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_diverged))))))))
###                 ("_tuple_arg" ("_position" bytes))))
###             ("_case1" ("_position" Oracle_fail)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" st)
###                   ("_datatype_field_update" ("_constify" final_event)
###                     ("_applC" ("_position" Some)
###                       ("_applC" ("_position" Final_event)
###                         ("_cargs" ("_position" s)
###                           ("_cargs" ("_position" conf)
###                             ("_cargs" ("_position" bytes)
###                               ("_position" FFI_failed))))))))
###                 ("_tuple_arg" ("_position" bytes)))))))
###       ("_tuple" ("_position" st) ("_tuple_arg" ("_position" bytes))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Ffi"
### 5.646s elapsed time, 14.633s cpu time, 3.341s GC time
Found termination order: "{}"
### theory "Draft.Ast"
### 11.400s elapsed time, 15.658s cpu time, 2.643s GC time
Loading theory "Draft.SemanticPrimitives" (required by "Draft.TypeSystemTemplates" via "Draft.TypeSystem")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
### Ambiguous input (line 377 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Closure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" n) ("_position" e))))
###           ("_position" v2))))
###     ("_applC" ("_position" Some)
###       ("_tuple"
###         ("_datatype_record_update" ("_position" env)
###           ("_datatype_field_update" ("_constify" v)
###             ("_applC" ("_position" nsBind)
###               ("_cargs" ("_position" n)
###                 ("_cargs" ("_position" v2)
###                   ("_applC" ("_position" v) ("_position" env)))))))
###         ("_tuple_arg" ("_position" e))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Closure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" n) ("_position" e))))
###           ("_position" v2))))
###     ("_applC" ("_position" Some)
###       ("_tuple"
###         ("_record_update" ("_position" env)
###           ("_field_update" ("_constify" v)
###             ("_applC" ("_position" nsBind)
###               ("_cargs" ("_position" n)
###                 ("_cargs" ("_position" v2)
###                   ("_applC" ("_position" v) ("_position" env)))))))
###         ("_tuple_arg" ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 379 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Recclosure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" funs) ("_position" n))))
###           ("_position" v2))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" f)
###                     ("_tuple_args" ("_position" x)
###                       ("_tuple_arg" ("_position" e))))
###                   ("_position" f))))
###             ("_position" funs))))
###       ("_case_syntax"
###         ("_applC" ("_position" find_recfun)
###           ("_cargs" ("_position" n) ("_position" funs)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" n) ("_tuple_arg" ("_position" e))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_record_update" ("_position" env)
###                   ("_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsBind)
###                       ("_cargs" ("_position" n)
###                         ("_cargs" ("_position" v2)
###                           ("_applC" ("_position" build_rec_env)
###                             ("_cargs" ("_position" funs)
###                               ("_cargs" ("_position" env)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env))))))))))
###                 ("_tuple_arg" ("_position" e)))))
###           ("_case1" ("_position" None) ("_position" None))))
###       ("_position" None))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" do_opapp)
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Recclosure)
###             ("_cargs" ("_position" env)
###               ("_cargs" ("_position" funs) ("_position" n))))
###           ("_position" v2))))
###     ("\<^const>HOL.If"
###       ("_applC" ("_position" allDistinct)
###         ("_applC" ("_position" List.map)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("_case_syntax" ("_position" x)
###                 ("_case1"
###                   ("_tuple" ("_position" f)
###                     ("_tuple_args" ("_position" x)
###                       ("_tuple_arg" ("_position" e))))
###                   ("_position" f))))
###             ("_position" funs))))
###       ("_case_syntax"
###         ("_applC" ("_position" find_recfun)
###           ("_cargs" ("_position" n) ("_position" funs)))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" n) ("_tuple_arg" ("_position" e))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_datatype_record_update" ("_position" env)
###                   ("_datatype_field_update" ("_constify" v)
###                     ("_applC" ("_position" nsBind)
###                       ("_cargs" ("_position" n)
###                         ("_cargs" ("_position" v2)
###                           ("_applC" ("_position" build_rec_env)
###                             ("_cargs" ("_position" funs)
###                               ("_cargs" ("_position" env)
###                                 ("_applC" ("_position" v)
###                                   ("_position" env))))))))))
###                 ("_tuple_arg" ("_position" e)))))
###           ("_case1" ("_position" None) ("_position" None))))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 939 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" combine_dec_result)
###       ("_cargs" ("_position" env)
###         ("_applC" ("_position" Rval) ("_position" env'))))
###     ("_applC" ("_position" Rval)
###       ("_record"
###         ("_fields"
###           ("_field" ("_constify" v)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" v) ("_position" env'))
###                 ("_applC" ("_position" v) ("_position" env)))))
###           ("_field" ("_constify" c)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env'))
###                 ("_applC" ("_position" c) ("_position" env))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" combine_dec_result)
###       ("_cargs" ("_position" env)
###         ("_applC" ("_position" Rval) ("_position" env'))))
###     ("_applC" ("_position" Rval)
###       ("_datatype_record"
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" v)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" v) ("_position" env'))
###                 ("_applC" ("_position" v) ("_position" env)))))
###           ("_datatype_field" ("_constify" c)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" c) ("_position" env'))
###                 ("_applC" ("_position" c) ("_position" env))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 944 of "$AFP/CakeML/generated/CakeML/SemanticPrimitives.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extend_dec_env)
###       ("_cargs" ("_position" new_env) ("_position" env)))
###     ("_record"
###       ("_fields"
###         ("_field" ("_constify" v)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" v) ("_position" new_env))
###               ("_applC" ("_position" v) ("_position" env)))))
###         ("_field" ("_constify" c)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" c) ("_position" new_env))
###               ("_applC" ("_position" c) ("_position" env)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extend_dec_env)
###       ("_cargs" ("_position" new_env) ("_position" env)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" v)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" v) ("_position" new_env))
###               ("_applC" ("_position" v) ("_position" env)))))
###         ("_datatype_field" ("_constify" c)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" c) ("_position" new_env))
###               ("_applC" ("_position" c) ("_position" env)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SemanticPrimitives"
### 17.892s elapsed time, 23.014s cpu time, 6.551s GC time
Loading theory "Draft.TypeSystem" (required by "Draft.TypeSystemTemplates")
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 145 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extend_dec_tenv)
###       ("_cargs" ("_position" tenv') ("_position" tenv)))
###     ("_record"
###       ("_fields"
###         ("_field" ("_constify" v0)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" v0) ("_position" tenv'))
###               ("_applC" ("_position" v0) ("_position" tenv)))))
###         ("_fields"
###           ("_field" ("_constify" c0)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" c0) ("_position" tenv'))
###                 ("_applC" ("_position" c0) ("_position" tenv)))))
###           ("_field" ("_constify" t)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" t) ("_position" tenv'))
###                 ("_applC" ("_position" t) ("_position" tenv))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" extend_dec_tenv)
###       ("_cargs" ("_position" tenv') ("_position" tenv)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" v0)
###           ("_applC" ("_position" nsAppend)
###             ("_cargs" ("_applC" ("_position" v0) ("_position" tenv'))
###               ("_applC" ("_position" v0) ("_position" tenv)))))
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" c0)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" c0) ("_position" tenv'))
###                 ("_applC" ("_position" c0) ("_position" tenv)))))
###           ("_datatype_field" ("_constify" t)
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_applC" ("_position" t) ("_position" tenv'))
###                 ("_applC" ("_position" t) ("_position" tenv))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
### Ambiguous input (line 214 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" empty_decls)
###     ("_record"
###       ("_fields"
###         ("_field" ("_constify" defined_mods0) ("\<^const>Set.empty"))
###         ("_fields"
###           ("_field" ("_constify" defined_types0) ("\<^const>Set.empty"))
###           ("_field" ("_constify" defined_exns) ("\<^const>Set.empty")))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" empty_decls)
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" defined_mods0)
###           ("\<^const>Set.empty"))
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" defined_types0)
###             ("\<^const>Set.empty"))
###           ("_datatype_field" ("_constify" defined_exns)
###             ("\<^const>Set.empty")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" union_decls)
###       ("_cargs" ("_position" d1) ("_position" d2)))
###     ("_record"
###       ("_fields"
###         ("_field" ("_constify" defined_mods0)
###           ("\<^const>Set.union"
###             ("_applC" ("_position" defined_mods0) ("_position" d1))
###             ("_applC" ("_position" defined_mods0) ("_position" d2))))
###         ("_fields"
###           ("_field" ("_constify" defined_types0)
###             ("\<^const>Set.union"
###               ("_applC" ("_position" defined_types0) ("_position" d1))
###               ("_applC" ("_position" defined_types0) ("_position" d2))))
###           ("_field" ("_constify" defined_exns)
###             ("\<^const>Set.union"
###               ("_applC" ("_position" defined_exns) ("_position" d1))
###               ("_applC" ("_position" defined_exns) ("_position" d2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" union_decls)
###       ("_cargs" ("_position" d1) ("_position" d2)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" defined_mods0)
###           ("\<^const>Set.union"
###             ("_applC" ("_position" defined_mods0) ("_position" d1))
###             ("_applC" ("_position" defined_mods0) ("_position" d2))))
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" defined_types0)
###             ("\<^const>Set.union"
###               ("_applC" ("_position" defined_types0) ("_position" d1))
###               ("_applC" ("_position" defined_types0) ("_position" d2))))
###           ("_datatype_field" ("_constify" defined_exns)
###             ("\<^const>Set.union"
###               ("_applC" ("_position" defined_exns) ("_position" d1))
###               ("_applC" ("_position" defined_exns) ("_position" d2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "type_ps", "type_p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "type_funs", "type_es", "type_e"
  Proving monotonicity ...
Found termination order: "{}"
### Ambiguous input (line 1150 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" tvs)
###       ("_idts" ("_position" mn)
###         ("_idts" ("_position" tenv)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" e)
###               ("_idts" ("_position" t0)
###                 ("_idts" ("_position" bindings)
###                   ("_idts" ("_position" decls) ("_position" locs))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj" ("_applC" ("_position" is_value) ("_position" e))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Lem_list.allDistinct)
###             ("_applC" ("_position" pat_bindings)
###               ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_p)
###               ("_cargs" ("_position" tvs)
###                 ("_cargs" ("_position" tenv)
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" t0) ("_position" bindings))))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" type_e)
###                 ("_cargs" ("_position" tenv)
###                   ("_cargs"
###                     ("_applC" ("_position" bind_tvar)
###                       ("_cargs" ("_position" tvs) ("_position" Empty)))
###                     ("_cargs" ("_position" e) ("_position" t0)))))
###               ("\<^const>HOL.implies" ("_position" extra_checks)
###                 ("\<^const>HOL.All_binder" ("_position" tvs')
###                   ("\<^const>HOL.All_binder" ("_position" bindings')
###                     ("\<^const>HOL.All_binder" ("_position" t')
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" type_p)
###                             ("_cargs" ("_position" tvs')
###                               ("_cargs" ("_position" tenv)
###                                 ("_cargs" ("_position" p)
###                                   ("_cargs" ("_position" t')
###                                     ("_position" bindings'))))))
###                           ("_applC" ("_position" type_e)
###                             ("_cargs" ("_position" tenv)
###                               ("_cargs"
###                                 ("_applC" ("_position" bind_tvar)
###                                   ("_cargs" ("_position" tvs')
###                                     ("_position" Empty)))
###                                 ("_cargs" ("_position" e)
###                                   ("_position" t'))))))
###                         ("_applC" ("_position" list_all2)
###                           ("_cargs" ("_position" tscheme_inst)
###                             ("_cargs"
###                               ("_applC" ("_position" List.map)
###                                 ("_cargs" ("_position" snd)
###                                   ("_applC" ("_position" tenv_add_tvs)
###                                     ("_cargs" ("_position" tvs')
### ("_position" bindings')))))
###                               ("_applC" ("_position" List.map)
###                                 ("_cargs" ("_position" snd)
###                                   ("_applC" ("_position" tenv_add_tvs)
###                                     ("_cargs" ("_position" tvs)
### ("_position" bindings))))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dlet)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" p) ("_position" e))))
###                   ("_cargs" ("_position" empty_decls)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_applC" ("_position" tenv_add_tvs)
###                               ("_cargs" ("_position" tvs)
###                                 ("_position" bindings)))))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" tvs)
###       ("_idts" ("_position" mn)
###         ("_idts" ("_position" tenv)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" e)
###               ("_idts" ("_position" t0)
###                 ("_idts" ("_position" bindings)
###                   ("_idts" ("_position" decls) ("_position" locs))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj" ("_applC" ("_position" is_value) ("_position" e))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Lem_list.allDistinct)
###             ("_applC" ("_position" pat_bindings)
###               ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_p)
###               ("_cargs" ("_position" tvs)
###                 ("_cargs" ("_position" tenv)
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" t0) ("_position" bindings))))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" type_e)
###                 ("_cargs" ("_position" tenv)
###                   ("_cargs"
###                     ("_applC" ("_position" bind_tvar)
###                       ("_cargs" ("_position" tvs) ("_position" Empty)))
###                     ("_cargs" ("_position" e) ("_position" t0)))))
###               ("\<^const>HOL.implies" ("_position" extra_checks)
###                 ("\<^const>HOL.All_binder" ("_position" tvs')
###                   ("\<^const>HOL.All_binder" ("_position" bindings')
###                     ("\<^const>HOL.All_binder" ("_position" t')
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" type_p)
###                             ("_cargs" ("_position" tvs')
###                               ("_cargs" ("_position" tenv)
###                                 ("_cargs" ("_position" p)
###                                   ("_cargs" ("_position" t')
###                                     ("_position" bindings'))))))
###                           ("_applC" ("_position" type_e)
###                             ("_cargs" ("_position" tenv)
###                               ("_cargs"
###                                 ("_applC" ("_position" bind_tvar)
###                                   ("_cargs" ("_position" tvs')
###                                     ("_position" Empty)))
###                                 ("_cargs" ("_position" e)
###                                   ("_position" t'))))))
###                         ("_applC" ("_position" list_all2)
###                           ("_cargs" ("_position" tscheme_inst)
###                             ("_cargs"
###                               ("_applC" ("_position" List.map)
###                                 ("_cargs" ("_position" snd)
###                                   ("_applC" ("_position" tenv_add_tvs)
###                                     ("_cargs" ("_position" tvs')
### ("_position" bindings')))))
###                               ("_applC" ("_position" List.map)
###                                 ("_cargs" ("_position" snd)
###                                   ("_applC" ("_position" tenv_add_tvs)
###                                     ("_cargs" ("_position" tvs)
### ("_position" bindings))))))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dlet)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" p) ("_position" e))))
###                   ("_cargs" ("_position" empty_decls)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0)
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_applC" ("_position" tenv_add_tvs)
###                               ("_cargs" ("_position" tvs)
###                                 ("_position" bindings)))))
###                         ("_fields"
###                           ("_field" ("_constify" c0) ("_position" nsEmpty))
###                           ("_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1166 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" p)
###           ("_idts" ("_position" e)
###             ("_idts" ("_position" t0)
###               ("_idts" ("_position" bindings)
###                 ("_idts" ("_position" decls) ("_position" locs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies" ("_position" extra_checks)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" is_value) ("_position" e)))
###             ("_applC" ("_position" type_pe_determ)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs" ("_position" Empty)
###                   ("_cargs" ("_position" p) ("_position" e)))))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Lem_list.allDistinct)
###             ("_applC" ("_position" pat_bindings)
###               ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_p)
###               ("_cargs"
###                 ("_constrain" ("\<^const>Groups.zero_class.zero")
###                   ("_type_name" nat))
###                 ("_cargs" ("_position" tenv)
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" t0) ("_position" bindings))))))
###             ("_applC" ("_position" type_e)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs" ("_position" Empty)
###                   ("_cargs" ("_position" e) ("_position" t0)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dlet)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" p) ("_position" e))))
###                   ("_cargs" ("_position" empty_decls)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_applC" ("_position" tenv_add_tvs)
###                               ("_cargs"
###                                 ("_constrain"
###                                   ("\<^const>Groups.zero_class.zero")
###                                   ("_type_name" nat))
###                                 ("_position" bindings)))))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" p)
###           ("_idts" ("_position" e)
###             ("_idts" ("_position" t0)
###               ("_idts" ("_position" bindings)
###                 ("_idts" ("_position" decls) ("_position" locs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies" ("_position" extra_checks)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" is_value) ("_position" e)))
###             ("_applC" ("_position" type_pe_determ)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs" ("_position" Empty)
###                   ("_cargs" ("_position" p) ("_position" e)))))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Lem_list.allDistinct)
###             ("_applC" ("_position" pat_bindings)
###               ("_cargs" ("_position" p) ("\<^const>List.list.Nil"))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_p)
###               ("_cargs"
###                 ("_constrain" ("\<^const>Groups.zero_class.zero")
###                   ("_type_name" nat))
###                 ("_cargs" ("_position" tenv)
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" t0) ("_position" bindings))))))
###             ("_applC" ("_position" type_e)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs" ("_position" Empty)
###                   ("_cargs" ("_position" e) ("_position" t0)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dlet)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" p) ("_position" e))))
###                   ("_cargs" ("_position" empty_decls)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0)
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_applC" ("_position" tenv_add_tvs)
###                               ("_cargs"
###                                 ("_constrain"
###                                   ("\<^const>Groups.zero_class.zero")
###                                   ("_type_name" nat))
###                                 ("_position" bindings)))))
###                         ("_fields"
###                           ("_field" ("_constify" c0) ("_position" nsEmpty))
###                           ("_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1181 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" funs)
###           ("_idts" ("_position" bindings)
###             ("_idts" ("_position" tvs)
###               ("_idts" ("_position" decls) ("_position" locs))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" type_funs)
###           ("_cargs" ("_position" tenv)
###             ("_cargs"
###               ("_applC" ("_position" bind_var_list)
###                 ("_cargs"
###                   ("_constrain" ("\<^const>Groups.zero_class.zero")
###                     ("_type_name" nat))
###                   ("_cargs" ("_position" bindings)
###                     ("_applC" ("_position" bind_tvar)
###                       ("_cargs" ("_position" tvs) ("_position" Empty))))))
###               ("_cargs" ("_position" funs) ("_position" bindings)))))
###         ("\<^const>HOL.implies" ("_position" extra_checks)
###           ("\<^const>HOL.All_binder" ("_position" tvs')
###             ("\<^const>HOL.All_binder" ("_position" bindings')
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" type_funs)
###                   ("_cargs" ("_position" tenv)
###                     ("_cargs"
###                       ("_applC" ("_position" bind_var_list)
###                         ("_cargs"
###                           ("_constrain" ("\<^const>Groups.zero_class.zero")
###                             ("_type_name" nat))
###                           ("_cargs" ("_position" bindings')
###                             ("_applC" ("_position" bind_tvar)
###                               ("_cargs" ("_position" tvs')
###                                 ("_position" Empty))))))
###                       ("_cargs" ("_position" funs)
###                         ("_position" bindings')))))
###                 ("_applC" ("_position" list_all2)
###                   ("_cargs" ("_position" tscheme_inst)
###                     ("_cargs"
###                       ("_applC" ("_position" List.map)
###                         ("_cargs" ("_position" snd)
###                           ("_applC" ("_position" tenv_add_tvs)
###                             ("_cargs" ("_position" tvs')
###                               ("_position" bindings')))))
###                       ("_applC" ("_position" List.map)
###                         ("_cargs" ("_position" snd)
###                           ("_applC" ("_position" tenv_add_tvs)
###                             ("_cargs" ("_position" tvs)
###                               ("_position" bindings))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dletrec)
###                     ("_cargs" ("_position" locs) ("_position" funs)))
###                   ("_cargs" ("_position" empty_decls)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_applC" ("_position" tenv_add_tvs)
###                               ("_cargs" ("_position" tvs)
###                                 ("_position" bindings)))))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" funs)
###           ("_idts" ("_position" bindings)
###             ("_idts" ("_position" tvs)
###               ("_idts" ("_position" decls) ("_position" locs))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" type_funs)
###           ("_cargs" ("_position" tenv)
###             ("_cargs"
###               ("_applC" ("_position" bind_var_list)
###                 ("_cargs"
###                   ("_constrain" ("\<^const>Groups.zero_class.zero")
###                     ("_type_name" nat))
###                   ("_cargs" ("_position" bindings)
###                     ("_applC" ("_position" bind_tvar)
###                       ("_cargs" ("_position" tvs) ("_position" Empty))))))
###               ("_cargs" ("_position" funs) ("_position" bindings)))))
###         ("\<^const>HOL.implies" ("_position" extra_checks)
###           ("\<^const>HOL.All_binder" ("_position" tvs')
###             ("\<^const>HOL.All_binder" ("_position" bindings')
###               ("\<^const>HOL.implies"
###                 ("_applC" ("_position" type_funs)
###                   ("_cargs" ("_position" tenv)
###                     ("_cargs"
###                       ("_applC" ("_position" bind_var_list)
###                         ("_cargs"
###                           ("_constrain" ("\<^const>Groups.zero_class.zero")
###                             ("_type_name" nat))
###                           ("_cargs" ("_position" bindings')
###                             ("_applC" ("_position" bind_tvar)
###                               ("_cargs" ("_position" tvs')
###                                 ("_position" Empty))))))
###                       ("_cargs" ("_position" funs)
###                         ("_position" bindings')))))
###                 ("_applC" ("_position" list_all2)
###                   ("_cargs" ("_position" tscheme_inst)
###                     ("_cargs"
###                       ("_applC" ("_position" List.map)
###                         ("_cargs" ("_position" snd)
###                           ("_applC" ("_position" tenv_add_tvs)
###                             ("_cargs" ("_position" tvs')
###                               ("_position" bindings')))))
###                       ("_applC" ("_position" List.map)
###                         ("_cargs" ("_position" snd)
###                           ("_applC" ("_position" tenv_add_tvs)
###                             ("_cargs" ("_position" tvs)
###                               ("_position" bindings))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dletrec)
###                     ("_cargs" ("_position" locs) ("_position" funs)))
###                   ("_cargs" ("_position" empty_decls)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0)
###                           ("_applC" ("_position" alist_to_ns)
###                             ("_applC" ("_position" tenv_add_tvs)
###                               ("_cargs" ("_position" tvs)
###                                 ("_position" bindings)))))
###                         ("_fields"
###                           ("_field" ("_constify" c0) ("_position" nsEmpty))
###                           ("_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1193 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" tdefs)
###           ("_idts" ("_position" decls)
###             ("_idts" ("_position" defined_types')
###               ("_idts" ("_position" decls')
###                 ("_idts" ("_position" tenvT) ("_position" locs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_ctor_tenv)
###           ("_cargs"
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_position" tenvT)
###                 ("_applC" ("_position" t) ("_position" tenv))))
###             ("_position" tdefs)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" defined_types')
###             ("_applC" ("_position" List.set)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_applC" ("_position" mk_id)
###                           ("_cargs" ("_position" mn) ("_position" tn))))))
###                   ("_position" tdefs)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" defined_types')
###                 ("_applC" ("_position" defined_types0)
###                   ("_position" decls))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" tenvT)
###                 ("_applC" ("_position" alist_to_ns)
###                   ("_applC" ("_position" List.map)
###                     ("_cargs"
###                       ("_lambda" ("_position" x)
###                         ("_case_syntax" ("_position" x)
###                           ("_case1"
###                             ("_tuple" ("_position" tvs)
###                               ("_tuple_args" ("_position" tn)
###                                 ("_tuple_arg" ("_position" ctors))))
###                             ("_tuple" ("_position" tn)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" tvs)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" Tapp)
### ("_cargs"
###   ("_applC" ("_position" List.map)
###     ("_cargs" ("_position" Tvar) ("_position" tvs)))
###   ("_applC" ("_position" TC_name)
###     ("_applC" ("_position" mk_id)
###       ("_cargs" ("_position" mn) ("_position" tn)))))))))))))
###                       ("_position" tdefs)))))
###               ("\<^const>HOL.eq" ("_position" decls')
###                 ("_datatype_record"
###                   ("_datatype_fields"
###                     ("_datatype_field" ("_constify" defined_mods0)
###                       ("\<^const>Set.empty"))
###                     ("_datatype_fields"
###                       ("_datatype_field" ("_constify" defined_types0)
###                         ("_position" defined_types'))
###                       ("_datatype_field" ("_constify" defined_exns)
###                         ("\<^const>Set.empty")))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtype)
###                     ("_cargs" ("_position" locs) ("_position" tdefs)))
###                   ("_cargs" ("_position" decls')
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_applC" ("_position" build_ctor_tenv)
###                               ("_cargs" ("_position" mn)
###                                 ("_cargs"
###                                   ("_applC" ("_position" nsAppend)
###                                     ("_cargs" ("_position" tenvT)
### ("_applC" ("_position" t) ("_position" tenv))))
###                                   ("_position" tdefs)))))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" tenvT)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" tdefs)
###           ("_idts" ("_position" decls)
###             ("_idts" ("_position" defined_types')
###               ("_idts" ("_position" decls')
###                 ("_idts" ("_position" tenvT) ("_position" locs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_ctor_tenv)
###           ("_cargs"
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_position" tenvT)
###                 ("_applC" ("_position" t) ("_position" tenv))))
###             ("_position" tdefs)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" defined_types')
###             ("_applC" ("_position" List.set)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_applC" ("_position" mk_id)
###                           ("_cargs" ("_position" mn) ("_position" tn))))))
###                   ("_position" tdefs)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" defined_types')
###                 ("_applC" ("_position" defined_types0)
###                   ("_position" decls))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" tenvT)
###                 ("_applC" ("_position" alist_to_ns)
###                   ("_applC" ("_position" List.map)
###                     ("_cargs"
###                       ("_lambda" ("_position" x)
###                         ("_case_syntax" ("_position" x)
###                           ("_case1"
###                             ("_tuple" ("_position" tvs)
###                               ("_tuple_args" ("_position" tn)
###                                 ("_tuple_arg" ("_position" ctors))))
###                             ("_tuple" ("_position" tn)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" tvs)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" Tapp)
### ("_cargs"
###   ("_applC" ("_position" List.map)
###     ("_cargs" ("_position" Tvar) ("_position" tvs)))
###   ("_applC" ("_position" TC_name)
###     ("_applC" ("_position" mk_id)
###       ("_cargs" ("_position" mn) ("_position" tn)))))))))))))
###                       ("_position" tdefs)))))
###               ("\<^const>HOL.eq" ("_position" decls')
###                 ("_record"
###                   ("_fields"
###                     ("_field" ("_constify" defined_mods0)
###                       ("\<^const>Set.empty"))
###                     ("_fields"
###                       ("_field" ("_constify" defined_types0)
###                         ("_position" defined_types'))
###                       ("_field" ("_constify" defined_exns)
###                         ("\<^const>Set.empty")))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtype)
###                     ("_cargs" ("_position" locs) ("_position" tdefs)))
###                   ("_cargs" ("_position" decls')
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_applC" ("_position" build_ctor_tenv)
###                               ("_cargs" ("_position" mn)
###                                 ("_cargs"
###                                   ("_applC" ("_position" nsAppend)
###                                     ("_cargs" ("_position" tenvT)
### ("_applC" ("_position" t) ("_position" tenv))))
###                                   ("_position" tdefs)))))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" tenvT)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" tdefs)
###           ("_idts" ("_position" decls)
###             ("_idts" ("_position" defined_types')
###               ("_idts" ("_position" decls')
###                 ("_idts" ("_position" tenvT) ("_position" locs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_ctor_tenv)
###           ("_cargs"
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_position" tenvT)
###                 ("_applC" ("_position" t) ("_position" tenv))))
###             ("_position" tdefs)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" defined_types')
###             ("_applC" ("_position" List.set)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_applC" ("_position" mk_id)
###                           ("_cargs" ("_position" mn) ("_position" tn))))))
###                   ("_position" tdefs)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" defined_types')
###                 ("_applC" ("_position" defined_types0)
###                   ("_position" decls))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" tenvT)
###                 ("_applC" ("_position" alist_to_ns)
###                   ("_applC" ("_position" List.map)
###                     ("_cargs"
###                       ("_lambda" ("_position" x)
###                         ("_case_syntax" ("_position" x)
###                           ("_case1"
###                             ("_tuple" ("_position" tvs)
###                               ("_tuple_args" ("_position" tn)
###                                 ("_tuple_arg" ("_position" ctors))))
###                             ("_tuple" ("_position" tn)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" tvs)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" Tapp)
### ("_cargs"
###   ("_applC" ("_position" List.map)
###     ("_cargs" ("_position" Tvar) ("_position" tvs)))
###   ("_applC" ("_position" TC_name)
###     ("_applC" ("_position" mk_id)
###       ("_cargs" ("_position" mn) ("_position" tn)))))))))))))
###                       ("_position" tdefs)))))
###               ("\<^const>HOL.eq" ("_position" decls')
###                 ("_datatype_record"
###                   ("_datatype_fields"
###                     ("_datatype_field" ("_constify" defined_mods0)
###                       ("\<^const>Set.empty"))
###                     ("_datatype_fields"
###                       ("_datatype_field" ("_constify" defined_types0)
###                         ("_position" defined_types'))
###                       ("_datatype_field" ("_constify" defined_exns)
###                         ("\<^const>Set.empty")))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtype)
###                     ("_cargs" ("_position" locs) ("_position" tdefs)))
###                   ("_cargs" ("_position" decls')
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0)
###                             ("_applC" ("_position" build_ctor_tenv)
###                               ("_cargs" ("_position" mn)
###                                 ("_cargs"
###                                   ("_applC" ("_position" nsAppend)
###                                     ("_cargs" ("_position" tenvT)
### ("_applC" ("_position" t) ("_position" tenv))))
###                                   ("_position" tdefs)))))
###                           ("_field" ("_constify" t)
###                             ("_position" tenvT)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" tdefs)
###           ("_idts" ("_position" decls)
###             ("_idts" ("_position" defined_types')
###               ("_idts" ("_position" decls')
###                 ("_idts" ("_position" tenvT) ("_position" locs)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_ctor_tenv)
###           ("_cargs"
###             ("_applC" ("_position" nsAppend)
###               ("_cargs" ("_position" tenvT)
###                 ("_applC" ("_position" t) ("_position" tenv))))
###             ("_position" tdefs)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" defined_types')
###             ("_applC" ("_position" List.set)
###               ("_applC" ("_position" List.map)
###                 ("_cargs"
###                   ("_lambda" ("_position" x)
###                     ("_case_syntax" ("_position" x)
###                       ("_case1"
###                         ("_tuple" ("_position" tvs)
###                           ("_tuple_args" ("_position" tn)
###                             ("_tuple_arg" ("_position" ctors))))
###                         ("_applC" ("_position" mk_id)
###                           ("_cargs" ("_position" mn) ("_position" tn))))))
###                   ("_position" tdefs)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" disjnt)
###               ("_cargs" ("_position" defined_types')
###                 ("_applC" ("_position" defined_types0)
###                   ("_position" decls))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" tenvT)
###                 ("_applC" ("_position" alist_to_ns)
###                   ("_applC" ("_position" List.map)
###                     ("_cargs"
###                       ("_lambda" ("_position" x)
###                         ("_case_syntax" ("_position" x)
###                           ("_case1"
###                             ("_tuple" ("_position" tvs)
###                               ("_tuple_args" ("_position" tn)
###                                 ("_tuple_arg" ("_position" ctors))))
###                             ("_tuple" ("_position" tn)
###                               ("_tuple_arg"
###                                 ("_tuple" ("_position" tvs)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" Tapp)
### ("_cargs"
###   ("_applC" ("_position" List.map)
###     ("_cargs" ("_position" Tvar) ("_position" tvs)))
###   ("_applC" ("_position" TC_name)
###     ("_applC" ("_position" mk_id)
###       ("_cargs" ("_position" mn) ("_position" tn)))))))))))))
###                       ("_position" tdefs)))))
###               ("\<^const>HOL.eq" ("_position" decls')
###                 ("_record"
###                   ("_fields"
###                     ("_field" ("_constify" defined_mods0)
###                       ("\<^const>Set.empty"))
###                     ("_fields"
###                       ("_field" ("_constify" defined_types0)
###                         ("_position" defined_types'))
###                       ("_field" ("_constify" defined_exns)
###                         ("\<^const>Set.empty")))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtype)
###                     ("_cargs" ("_position" locs) ("_position" tdefs)))
###                   ("_cargs" ("_position" decls')
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0)
###                             ("_applC" ("_position" build_ctor_tenv)
###                               ("_cargs" ("_position" mn)
###                                 ("_cargs"
###                                   ("_applC" ("_position" nsAppend)
###                                     ("_cargs" ("_position" tenvT)
### ("_applC" ("_position" t) ("_position" tenv))))
###                                   ("_position" tdefs)))))
###                           ("_field" ("_constify" t)
###                             ("_position" tenvT)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1210 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" decls)
###         ("_idts" ("_position" tenv)
###           ("_idts" ("_position" tvs)
###             ("_idts" ("_position" tn)
###               ("_idts" ("_position" t0) ("_position" locs))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_freevars)
###           ("_cargs"
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" nat))
###             ("_cargs" ("_position" tvs) ("_position" t0))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_type_names)
###             ("_cargs" ("_applC" ("_position" t) ("_position" tenv))
###               ("_position" t0)))
###           ("_applC" ("_position" Lem_list.allDistinct) ("_position" tvs)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtabbrev)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" tvs)
###                         ("_cargs" ("_position" tn) ("_position" t0)))))
###                   ("_cargs" ("_position" empty_decls)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" t)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" tn)
###                                 ("_tuple" ("_position" tvs)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" type_name_subst)
### ("_cargs" ("_applC" ("_position" t) ("_position" tenv))
###   ("_position" t0)))))))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" decls)
###         ("_idts" ("_position" tenv)
###           ("_idts" ("_position" tvs)
###             ("_idts" ("_position" tn)
###               ("_idts" ("_position" t0) ("_position" locs))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_freevars)
###           ("_cargs"
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" nat))
###             ("_cargs" ("_position" tvs) ("_position" t0))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_type_names)
###             ("_cargs" ("_applC" ("_position" t) ("_position" tenv))
###               ("_position" t0)))
###           ("_applC" ("_position" Lem_list.allDistinct) ("_position" tvs)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dtabbrev)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" tvs)
###                         ("_cargs" ("_position" tn) ("_position" t0)))))
###                   ("_cargs" ("_position" empty_decls)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0) ("_position" nsEmpty))
###                           ("_field" ("_constify" t)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" tn)
###                                 ("_tuple" ("_position" tvs)
###                                   ("_tuple_arg"
###                                     ("_applC" ("_position" type_name_subst)
### ("_cargs" ("_applC" ("_position" t) ("_position" tenv))
###   ("_position" t0)))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1221 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" decls)
###               ("_idts" ("_position" decls') ("_position" locs))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_exn_tenv)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" cn) ("_position" ts))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("\<^const>Set.member"
###               ("_applC" ("_position" mk_id)
###                 ("_cargs" ("_position" mn) ("_position" cn)))
###               ("_applC" ("_position" defined_exns) ("_position" decls))))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" x)
###               ("_applC" ("_position" set) ("_position" ts))
###               ("_applC"
###                 ("_applC" ("_position" check_type_names)
###                   ("_applC" ("_position" t) ("_position" tenv)))
###                 ("_position" x)))
###             ("\<^const>HOL.eq" ("_position" decls')
###               ("_record"
###                 ("_fields"
###                   ("_field" ("_constify" defined_mods0)
###                     ("\<^const>Set.empty"))
###                   ("_fields"
###                     ("_field" ("_constify" defined_types0)
###                       ("\<^const>Set.empty"))
###                     ("_field" ("_constify" defined_exns)
###                       ("_Finset"
###                         ("_applC" ("_position" mk_id)
###                           ("_cargs" ("_position" mn)
###                             ("_position" cn)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dexn)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" cn) ("_position" ts))))
###                   ("_cargs" ("_position" decls')
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" cn)
###                                 ("_tuple" ("\<^const>List.list.Nil")
###                                   ("_tuple_args"
###                                     ("_applC" ("_position" List.map)
### ("_cargs"
###   ("_applC" ("_position" type_name_subst)
###     ("_applC" ("_position" t) ("_position" tenv)))
###   ("_position" ts)))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn))))))))))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" decls)
###               ("_idts" ("_position" decls') ("_position" locs))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_exn_tenv)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" cn) ("_position" ts))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("\<^const>Set.member"
###               ("_applC" ("_position" mk_id)
###                 ("_cargs" ("_position" mn) ("_position" cn)))
###               ("_applC" ("_position" defined_exns) ("_position" decls))))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" x)
###               ("_applC" ("_position" set) ("_position" ts))
###               ("_applC"
###                 ("_applC" ("_position" check_type_names)
###                   ("_applC" ("_position" t) ("_position" tenv)))
###                 ("_position" x)))
###             ("\<^const>HOL.eq" ("_position" decls')
###               ("_datatype_record"
###                 ("_datatype_fields"
###                   ("_datatype_field" ("_constify" defined_mods0)
###                     ("\<^const>Set.empty"))
###                   ("_datatype_fields"
###                     ("_datatype_field" ("_constify" defined_types0)
###                       ("\<^const>Set.empty"))
###                     ("_datatype_field" ("_constify" defined_exns)
###                       ("_Finset"
###                         ("_applC" ("_position" mk_id)
###                           ("_cargs" ("_position" mn)
###                             ("_position" cn)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dexn)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" cn) ("_position" ts))))
###                   ("_cargs" ("_position" decls')
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" cn)
###                                 ("_tuple" ("\<^const>List.list.Nil")
###                                   ("_tuple_args"
###                                     ("_applC" ("_position" List.map)
### ("_cargs"
###   ("_applC" ("_position" type_name_subst)
###     ("_applC" ("_position" t) ("_position" tenv)))
###   ("_position" ts)))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn))))))))))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" decls)
###               ("_idts" ("_position" decls') ("_position" locs))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_exn_tenv)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" cn) ("_position" ts))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("\<^const>Set.member"
###               ("_applC" ("_position" mk_id)
###                 ("_cargs" ("_position" mn) ("_position" cn)))
###               ("_applC" ("_position" defined_exns) ("_position" decls))))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" x)
###               ("_applC" ("_position" set) ("_position" ts))
###               ("_applC"
###                 ("_applC" ("_position" check_type_names)
###                   ("_applC" ("_position" t) ("_position" tenv)))
###                 ("_position" x)))
###             ("\<^const>HOL.eq" ("_position" decls')
###               ("_record"
###                 ("_fields"
###                   ("_field" ("_constify" defined_mods0)
###                     ("\<^const>Set.empty"))
###                   ("_fields"
###                     ("_field" ("_constify" defined_types0)
###                       ("\<^const>Set.empty"))
###                     ("_field" ("_constify" defined_exns)
###                       ("_Finset"
###                         ("_applC" ("_position" mk_id)
###                           ("_cargs" ("_position" mn)
###                             ("_position" cn)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dexn)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" cn) ("_position" ts))))
###                   ("_cargs" ("_position" decls')
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" cn)
###                                 ("_tuple" ("\<^const>List.list.Nil")
###                                   ("_tuple_args"
###                                     ("_applC" ("_position" List.map)
### ("_cargs"
###   ("_applC" ("_position" type_name_subst)
###     ("_applC" ("_position" t) ("_position" tenv)))
###   ("_position" ts)))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn))))))))))
###                           ("_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" decls)
###               ("_idts" ("_position" decls') ("_position" locs))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_exn_tenv)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" cn) ("_position" ts))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("\<^const>Set.member"
###               ("_applC" ("_position" mk_id)
###                 ("_cargs" ("_position" mn) ("_position" cn)))
###               ("_applC" ("_position" defined_exns) ("_position" decls))))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_position" x)
###               ("_applC" ("_position" set) ("_position" ts))
###               ("_applC"
###                 ("_applC" ("_position" check_type_names)
###                   ("_applC" ("_position" t) ("_position" tenv)))
###                 ("_position" x)))
###             ("\<^const>HOL.eq" ("_position" decls')
###               ("_datatype_record"
###                 ("_datatype_fields"
###                   ("_datatype_field" ("_constify" defined_mods0)
###                     ("\<^const>Set.empty"))
###                   ("_datatype_fields"
###                     ("_datatype_field" ("_constify" defined_types0)
###                       ("\<^const>Set.empty"))
###                     ("_datatype_field" ("_constify" defined_exns)
###                       ("_Finset"
###                         ("_applC" ("_position" mk_id)
###                           ("_cargs" ("_position" mn)
###                             ("_position" cn)))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_d)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" decls)
###               ("_cargs" ("_position" tenv)
###                 ("_cargs"
###                   ("_applC" ("_position" Dexn)
###                     ("_cargs" ("_position" locs)
###                       ("_cargs" ("_position" cn) ("_position" ts))))
###                   ("_cargs" ("_position" decls')
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" cn)
###                                 ("_tuple" ("\<^const>List.list.Nil")
###                                   ("_tuple_args"
###                                     ("_applC" ("_position" List.map)
### ("_cargs"
###   ("_applC" ("_position" type_name_subst)
###     ("_applC" ("_position" t) ("_position" tenv)))
###   ("_position" ts)))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn))))))))))
###                           ("_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_d"
  Proving monotonicity ...
### Ambiguous input (line 1235 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv) ("_position" decls))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_ds)
###       ("_cargs" ("_position" extra_checks)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" decls)
###             ("_cargs" ("_position" tenv)
###               ("_cargs" ("\<^const>List.list.Nil")
###                 ("_cargs" ("_position" empty_decls)
###                   ("_datatype_record"
###                     ("_datatype_fields"
###                       ("_datatype_field" ("_constify" v0)
###                         ("_position" nsEmpty))
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" c0)
###                           ("_position" nsEmpty))
###                         ("_datatype_field" ("_constify" t)
###                           ("_position" nsEmpty))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" mn)
###       ("_idts" ("_position" tenv) ("_position" decls))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_ds)
###       ("_cargs" ("_position" extra_checks)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" decls)
###             ("_cargs" ("_position" tenv)
###               ("_cargs" ("\<^const>List.list.Nil")
###                 ("_cargs" ("_position" empty_decls)
###                   ("_record"
###                     ("_fields"
###                       ("_field" ("_constify" v0) ("_position" nsEmpty))
###                       ("_fields"
###                         ("_field" ("_constify" c0) ("_position" nsEmpty))
###                         ("_field" ("_constify" t)
###                           ("_position" nsEmpty))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_ds"
  Proving monotonicity ...
### Ambiguous input (line 1252 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_idts" ("_position" mn) ("_position" tenvT))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_specs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" tenvT)
###           ("_cargs" ("\<^const>List.list.Nil")
###             ("_cargs" ("_position" empty_decls)
###               ("_datatype_record"
###                 ("_datatype_fields"
###                   ("_datatype_field" ("_constify" v0) ("_position" nsEmpty))
###                   ("_datatype_fields"
###                     ("_datatype_field" ("_constify" c0)
###                       ("_position" nsEmpty))
###                     ("_datatype_field" ("_constify" t)
###                       ("_position" nsEmpty))))))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" mn) ("_position" tenvT))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_specs)
###       ("_cargs" ("_position" mn)
###         ("_cargs" ("_position" tenvT)
###           ("_cargs" ("\<^const>List.list.Nil")
###             ("_cargs" ("_position" empty_decls)
###               ("_record"
###                 ("_fields" ("_field" ("_constify" v0) ("_position" nsEmpty))
###                   ("_fields"
###                     ("_field" ("_constify" c0) ("_position" nsEmpty))
###                     ("_field" ("_constify" t)
###                       ("_position" nsEmpty))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1259 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" t0)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" tenv)
###               ("_idts" ("_position" fvs)
###                 ("_idts" ("_position" decls) ("_position" subst)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_freevars)
###           ("_cargs"
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" nat))
###             ("_cargs" ("_position" fvs) ("_position" t0))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_type_names)
###             ("_cargs" ("_position" tenvT) ("_position" t0)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_specs)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" tenvT)
###                   ("_cargs" ("_position" specs)
###                     ("_cargs" ("_position" decls) ("_position" tenv))))))
###             ("\<^const>HOL.eq" ("_position" subst)
###               ("_applC" ("_position" map_of)
###                 ("_applC" ("_position" Lem_list_extra.zipSameLength)
###                   ("_cargs" ("_position" fvs)
###                     ("_applC" ("_position" List.map)
###                       ("_cargs" ("_position" Tvar_db)
###                         ("_applC" ("_position" genlist)
###                           ("_cargs"
###                             ("_lambda" ("_position" x) ("_position" x))
###                             ("_applC" ("_position" List.length)
###                               ("_position" fvs))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Sval)
###                   ("_cargs" ("_position" x) ("_position" t0)))
###                 ("_position" specs))
###               ("_cargs" ("_position" decls)
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0)
###                           ("_applC" ("_position" nsSing)
###                             ("_cargs" ("_position" x)
###                               ("_tuple"
###                                 ("_applC" ("_position" List.length)
###                                   ("_position" fvs))
###                                 ("_tuple_arg"
###                                   ("_applC" ("_position" type_subst)
###                                     ("_cargs" ("_position" subst)
### ("_applC" ("_position" type_name_subst)
###   ("_cargs" ("_position" tenvT) ("_position" t0))))))))))
###                         ("_fields"
###                           ("_field" ("_constify" c0) ("_position" nsEmpty))
###                           ("_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" x)
###         ("_idts" ("_position" t0)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" tenv)
###               ("_idts" ("_position" fvs)
###                 ("_idts" ("_position" decls) ("_position" subst)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_freevars)
###           ("_cargs"
###             ("_constrain" ("\<^const>Groups.zero_class.zero")
###               ("_type_name" nat))
###             ("_cargs" ("_position" fvs) ("_position" t0))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_type_names)
###             ("_cargs" ("_position" tenvT) ("_position" t0)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_specs)
###               ("_cargs" ("_position" mn)
###                 ("_cargs" ("_position" tenvT)
###                   ("_cargs" ("_position" specs)
###                     ("_cargs" ("_position" decls) ("_position" tenv))))))
###             ("\<^const>HOL.eq" ("_position" subst)
###               ("_applC" ("_position" map_of)
###                 ("_applC" ("_position" Lem_list_extra.zipSameLength)
###                   ("_cargs" ("_position" fvs)
###                     ("_applC" ("_position" List.map)
###                       ("_cargs" ("_position" Tvar_db)
###                         ("_applC" ("_position" genlist)
###                           ("_cargs"
###                             ("_lambda" ("_position" x) ("_position" x))
###                             ("_applC" ("_position" List.length)
###                               ("_position" fvs))))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Sval)
###                   ("_cargs" ("_position" x) ("_position" t0)))
###                 ("_position" specs))
###               ("_cargs" ("_position" decls)
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_applC" ("_position" nsSing)
###                             ("_cargs" ("_position" x)
###                               ("_tuple"
###                                 ("_applC" ("_position" List.length)
###                                   ("_position" fvs))
###                                 ("_tuple_arg"
###                                   ("_applC" ("_position" type_subst)
###                                     ("_cargs" ("_position" subst)
### ("_applC" ("_position" type_name_subst)
###   ("_cargs" ("_position" tenvT) ("_position" t0))))))))))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1274 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" td)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" decls')
###               ("_idts" ("_position" decls) ("_position" tenvT'))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" tenvT')
###           ("_applC" ("_position" alist_to_ns)
###             ("_applC" ("_position" List.map)
###               ("_cargs"
###                 ("_lambda" ("_position" x)
###                   ("_case_syntax" ("_position" x)
###                     ("_case1"
###                       ("_tuple" ("_position" tvs)
###                         ("_tuple_args" ("_position" tn)
###                           ("_tuple_arg" ("_position" ctors))))
###                       ("_tuple" ("_position" tn)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" tvs)
###                             ("_tuple_arg"
###                               ("_applC" ("_position" Tapp)
###                                 ("_cargs"
###                                   ("_applC" ("_position" List.map)
###                                     ("_cargs" ("_position" Tvar)
### ("_position" tvs)))
###                                   ("_applC" ("_position" TC_name)
###                                     ("_applC" ("_position" mk_id)
### ("_cargs" ("_position" mn) ("_position" tn)))))))))))))
###                 ("_position" td)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_ctor_tenv)
###             ("_cargs"
###               ("_applC" ("_position" nsAppend)
###                 ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###               ("_position" td)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_specs)
###               ("_cargs" ("_position" mn)
###                 ("_cargs"
###                   ("_applC" ("_position" nsAppend)
###                     ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                   ("_cargs" ("_position" specs)
###                     ("_cargs" ("_position" decls) ("_position" tenv))))))
###             ("\<^const>HOL.eq" ("_position" decls')
###               ("_record"
###                 ("_fields"
###                   ("_field" ("_constify" defined_mods0)
###                     ("\<^const>Set.empty"))
###                   ("_fields"
###                     ("_field" ("_constify" defined_types0)
###                       ("_applC" ("_position" List.set)
###                         ("_applC" ("_position" List.map)
###                           ("_cargs"
###                             ("_lambda" ("_position" x)
###                               ("_case_syntax" ("_position" x)
###                                 ("_case1"
###                                   ("_tuple" ("_position" tvs)
###                                     ("_tuple_args" ("_position" tn)
### ("_tuple_arg" ("_position" ctors))))
###                                   ("_applC" ("_position" mk_id)
###                                     ("_cargs" ("_position" mn)
### ("_position" tn))))))
###                             ("_position" td)))))
###                     ("_field" ("_constify" defined_exns)
###                       ("\<^const>Set.empty"))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stype) ("_position" td))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls) ("_position" decls')))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0)
###                             ("_applC" ("_position" build_ctor_tenv)
###                               ("_cargs" ("_position" mn)
###                                 ("_cargs"
###                                   ("_applC" ("_position" nsAppend)
###                                     ("_cargs" ("_position" tenvT')
### ("_position" tenvT)))
###                                   ("_position" td)))))
###                           ("_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" td)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" decls')
###               ("_idts" ("_position" decls) ("_position" tenvT'))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" tenvT')
###           ("_applC" ("_position" alist_to_ns)
###             ("_applC" ("_position" List.map)
###               ("_cargs"
###                 ("_lambda" ("_position" x)
###                   ("_case_syntax" ("_position" x)
###                     ("_case1"
###                       ("_tuple" ("_position" tvs)
###                         ("_tuple_args" ("_position" tn)
###                           ("_tuple_arg" ("_position" ctors))))
###                       ("_tuple" ("_position" tn)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" tvs)
###                             ("_tuple_arg"
###                               ("_applC" ("_position" Tapp)
###                                 ("_cargs"
###                                   ("_applC" ("_position" List.map)
###                                     ("_cargs" ("_position" Tvar)
### ("_position" tvs)))
###                                   ("_applC" ("_position" TC_name)
###                                     ("_applC" ("_position" mk_id)
### ("_cargs" ("_position" mn) ("_position" tn)))))))))))))
###                 ("_position" td)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_ctor_tenv)
###             ("_cargs"
###               ("_applC" ("_position" nsAppend)
###                 ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###               ("_position" td)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_specs)
###               ("_cargs" ("_position" mn)
###                 ("_cargs"
###                   ("_applC" ("_position" nsAppend)
###                     ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                   ("_cargs" ("_position" specs)
###                     ("_cargs" ("_position" decls) ("_position" tenv))))))
###             ("\<^const>HOL.eq" ("_position" decls')
###               ("_datatype_record"
###                 ("_datatype_fields"
###                   ("_datatype_field" ("_constify" defined_mods0)
###                     ("\<^const>Set.empty"))
###                   ("_datatype_fields"
###                     ("_datatype_field" ("_constify" defined_types0)
###                       ("_applC" ("_position" List.set)
###                         ("_applC" ("_position" List.map)
###                           ("_cargs"
###                             ("_lambda" ("_position" x)
###                               ("_case_syntax" ("_position" x)
###                                 ("_case1"
###                                   ("_tuple" ("_position" tvs)
###                                     ("_tuple_args" ("_position" tn)
### ("_tuple_arg" ("_position" ctors))))
###                                   ("_applC" ("_position" mk_id)
###                                     ("_cargs" ("_position" mn)
### ("_position" tn))))))
###                             ("_position" td)))))
###                     ("_datatype_field" ("_constify" defined_exns)
###                       ("\<^const>Set.empty"))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stype) ("_position" td))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls) ("_position" decls')))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0)
###                             ("_applC" ("_position" build_ctor_tenv)
###                               ("_cargs" ("_position" mn)
###                                 ("_cargs"
###                                   ("_applC" ("_position" nsAppend)
###                                     ("_cargs" ("_position" tenvT')
### ("_position" tenvT)))
###                                   ("_position" td)))))
###                           ("_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" td)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" decls')
###               ("_idts" ("_position" decls) ("_position" tenvT'))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" tenvT')
###           ("_applC" ("_position" alist_to_ns)
###             ("_applC" ("_position" List.map)
###               ("_cargs"
###                 ("_lambda" ("_position" x)
###                   ("_case_syntax" ("_position" x)
###                     ("_case1"
###                       ("_tuple" ("_position" tvs)
###                         ("_tuple_args" ("_position" tn)
###                           ("_tuple_arg" ("_position" ctors))))
###                       ("_tuple" ("_position" tn)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" tvs)
###                             ("_tuple_arg"
###                               ("_applC" ("_position" Tapp)
###                                 ("_cargs"
###                                   ("_applC" ("_position" List.map)
###                                     ("_cargs" ("_position" Tvar)
### ("_position" tvs)))
###                                   ("_applC" ("_position" TC_name)
###                                     ("_applC" ("_position" mk_id)
### ("_cargs" ("_position" mn) ("_position" tn)))))))))))))
###                 ("_position" td)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_ctor_tenv)
###             ("_cargs"
###               ("_applC" ("_position" nsAppend)
###                 ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###               ("_position" td)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_specs)
###               ("_cargs" ("_position" mn)
###                 ("_cargs"
###                   ("_applC" ("_position" nsAppend)
###                     ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                   ("_cargs" ("_position" specs)
###                     ("_cargs" ("_position" decls) ("_position" tenv))))))
###             ("\<^const>HOL.eq" ("_position" decls')
###               ("_record"
###                 ("_fields"
###                   ("_field" ("_constify" defined_mods0)
###                     ("\<^const>Set.empty"))
###                   ("_fields"
###                     ("_field" ("_constify" defined_types0)
###                       ("_applC" ("_position" List.set)
###                         ("_applC" ("_position" List.map)
###                           ("_cargs"
###                             ("_lambda" ("_position" x)
###                               ("_case_syntax" ("_position" x)
###                                 ("_case1"
###                                   ("_tuple" ("_position" tvs)
###                                     ("_tuple_args" ("_position" tn)
### ("_tuple_arg" ("_position" ctors))))
###                                   ("_applC" ("_position" mk_id)
###                                     ("_cargs" ("_position" mn)
### ("_position" tn))))))
###                             ("_position" td)))))
###                     ("_field" ("_constify" defined_exns)
###                       ("\<^const>Set.empty"))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stype) ("_position" td))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls) ("_position" decls')))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_applC" ("_position" build_ctor_tenv)
###                               ("_cargs" ("_position" mn)
###                                 ("_cargs"
###                                   ("_applC" ("_position" nsAppend)
###                                     ("_cargs" ("_position" tenvT')
### ("_position" tenvT)))
###                                   ("_position" td)))))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" td)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" decls')
###               ("_idts" ("_position" decls) ("_position" tenvT'))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" tenvT')
###           ("_applC" ("_position" alist_to_ns)
###             ("_applC" ("_position" List.map)
###               ("_cargs"
###                 ("_lambda" ("_position" x)
###                   ("_case_syntax" ("_position" x)
###                     ("_case1"
###                       ("_tuple" ("_position" tvs)
###                         ("_tuple_args" ("_position" tn)
###                           ("_tuple_arg" ("_position" ctors))))
###                       ("_tuple" ("_position" tn)
###                         ("_tuple_arg"
###                           ("_tuple" ("_position" tvs)
###                             ("_tuple_arg"
###                               ("_applC" ("_position" Tapp)
###                                 ("_cargs"
###                                   ("_applC" ("_position" List.map)
###                                     ("_cargs" ("_position" Tvar)
### ("_position" tvs)))
###                                   ("_applC" ("_position" TC_name)
###                                     ("_applC" ("_position" mk_id)
### ("_cargs" ("_position" mn) ("_position" tn)))))))))))))
###                 ("_position" td)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_ctor_tenv)
###             ("_cargs"
###               ("_applC" ("_position" nsAppend)
###                 ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###               ("_position" td)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" type_specs)
###               ("_cargs" ("_position" mn)
###                 ("_cargs"
###                   ("_applC" ("_position" nsAppend)
###                     ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                   ("_cargs" ("_position" specs)
###                     ("_cargs" ("_position" decls) ("_position" tenv))))))
###             ("\<^const>HOL.eq" ("_position" decls')
###               ("_datatype_record"
###                 ("_datatype_fields"
###                   ("_datatype_field" ("_constify" defined_mods0)
###                     ("\<^const>Set.empty"))
###                   ("_datatype_fields"
###                     ("_datatype_field" ("_constify" defined_types0)
###                       ("_applC" ("_position" List.set)
###                         ("_applC" ("_position" List.map)
###                           ("_cargs"
###                             ("_lambda" ("_position" x)
###                               ("_case_syntax" ("_position" x)
###                                 ("_case1"
###                                   ("_tuple" ("_position" tvs)
###                                     ("_tuple_args" ("_position" tn)
### ("_tuple_arg" ("_position" ctors))))
###                                   ("_applC" ("_position" mk_id)
###                                     ("_cargs" ("_position" mn)
### ("_position" tn))))))
###                             ("_position" td)))))
###                     ("_datatype_field" ("_constify" defined_exns)
###                       ("\<^const>Set.empty"))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stype) ("_position" td))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls) ("_position" decls')))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_applC" ("_position" build_ctor_tenv)
###                               ("_cargs" ("_position" mn)
###                                 ("_cargs"
###                                   ("_applC" ("_position" nsAppend)
###                                     ("_cargs" ("_position" tenvT')
### ("_position" tenvT)))
###                                   ("_position" td)))))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1296 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenvT')
###         ("_idts" ("_position" tvs)
###           ("_idts" ("_position" tn)
###             ("_idts" ("_position" t0)
###               ("_idts" ("_position" specs)
###                 ("_idts" ("_position" decls) ("_position" tenv)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct) ("_position" tvs))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_freevars)
###             ("_cargs"
###               ("_constrain" ("\<^const>Groups.zero_class.zero")
###                 ("_type_name" nat))
###               ("_cargs" ("_position" tvs) ("_position" t0))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" check_type_names)
###               ("_cargs" ("_position" tenvT) ("_position" t0)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" tenvT')
###                 ("_applC" ("_position" nsSing)
###                   ("_cargs" ("_position" tn)
###                     ("_tuple" ("_position" tvs)
###                       ("_tuple_arg"
###                         ("_applC" ("_position" type_name_subst)
###                           ("_cargs" ("_position" tenvT)
###                             ("_position" t0))))))))
###               ("_applC" ("_position" type_specs)
###                 ("_cargs" ("_position" mn)
###                   ("_cargs"
###                     ("_applC" ("_position" nsAppend)
###                       ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                     ("_cargs" ("_position" specs)
###                       ("_cargs" ("_position" decls)
###                         ("_position" tenv)))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stabbrev)
###                   ("_cargs" ("_position" tvs)
###                     ("_cargs" ("_position" tn) ("_position" t0))))
###                 ("_position" specs))
###               ("_cargs" ("_position" decls)
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0) ("_position" nsEmpty))
###                           ("_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenvT')
###         ("_idts" ("_position" tvs)
###           ("_idts" ("_position" tn)
###             ("_idts" ("_position" t0)
###               ("_idts" ("_position" specs)
###                 ("_idts" ("_position" decls) ("_position" tenv)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct) ("_position" tvs))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" check_freevars)
###             ("_cargs"
###               ("_constrain" ("\<^const>Groups.zero_class.zero")
###                 ("_type_name" nat))
###               ("_cargs" ("_position" tvs) ("_position" t0))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" check_type_names)
###               ("_cargs" ("_position" tenvT) ("_position" t0)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" tenvT')
###                 ("_applC" ("_position" nsSing)
###                   ("_cargs" ("_position" tn)
###                     ("_tuple" ("_position" tvs)
###                       ("_tuple_arg"
###                         ("_applC" ("_position" type_name_subst)
###                           ("_cargs" ("_position" tenvT)
###                             ("_position" t0))))))))
###               ("_applC" ("_position" type_specs)
###                 ("_cargs" ("_position" mn)
###                   ("_cargs"
###                     ("_applC" ("_position" nsAppend)
###                       ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                     ("_cargs" ("_position" specs)
###                       ("_cargs" ("_position" decls)
###                         ("_position" tenv)))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stabbrev)
###                   ("_cargs" ("_position" tvs)
###                     ("_cargs" ("_position" tn) ("_position" t0))))
###                 ("_position" specs))
###               ("_cargs" ("_position" decls)
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1308 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" specs) ("_position" decls)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_exn_tenv)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" cn) ("_position" ts))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" type_specs)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" tenvT)
###                 ("_cargs" ("_position" specs)
###                   ("_cargs" ("_position" decls) ("_position" tenv))))))
###           ("_Ball" ("_position" x)
###             ("_applC" ("_position" set) ("_position" ts))
###             ("_applC"
###               ("_applC" ("_position" check_type_names) ("_position" tenvT))
###               ("_position" x))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Sexn)
###                   ("_cargs" ("_position" cn) ("_position" ts)))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" defined_mods0)
###                           ("\<^const>Set.empty"))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" defined_types0)
###                             ("\<^const>Set.empty"))
###                           ("_datatype_field" ("_constify" defined_exns)
###                             ("_Finset"
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" cn))))))))))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" cn)
###                                 ("_tuple" ("\<^const>List.list.Nil")
###                                   ("_tuple_args"
###                                     ("_applC" ("_position" List.map)
### ("_cargs" ("_applC" ("_position" type_name_subst) ("_position" tenvT))
###   ("_position" ts)))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn))))))))))
###                           ("_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" specs) ("_position" decls)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_exn_tenv)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" cn) ("_position" ts))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" type_specs)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" tenvT)
###                 ("_cargs" ("_position" specs)
###                   ("_cargs" ("_position" decls) ("_position" tenv))))))
###           ("_Ball" ("_position" x)
###             ("_applC" ("_position" set) ("_position" ts))
###             ("_applC"
###               ("_applC" ("_position" check_type_names) ("_position" tenvT))
###               ("_position" x))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Sexn)
###                   ("_cargs" ("_position" cn) ("_position" ts)))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" defined_mods0)
###                           ("\<^const>Set.empty"))
###                         ("_fields"
###                           ("_field" ("_constify" defined_types0)
###                             ("\<^const>Set.empty"))
###                           ("_field" ("_constify" defined_exns)
###                             ("_Finset"
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" cn))))))))))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" cn)
###                                 ("_tuple" ("\<^const>List.list.Nil")
###                                   ("_tuple_args"
###                                     ("_applC" ("_position" List.map)
### ("_cargs" ("_applC" ("_position" type_name_subst) ("_position" tenvT))
###   ("_position" ts)))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn))))))))))
###                           ("_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" specs) ("_position" decls)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_exn_tenv)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" cn) ("_position" ts))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" type_specs)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" tenvT)
###                 ("_cargs" ("_position" specs)
###                   ("_cargs" ("_position" decls) ("_position" tenv))))))
###           ("_Ball" ("_position" x)
###             ("_applC" ("_position" set) ("_position" ts))
###             ("_applC"
###               ("_applC" ("_position" check_type_names) ("_position" tenvT))
###               ("_position" x))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Sexn)
###                   ("_cargs" ("_position" cn) ("_position" ts)))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" defined_mods0)
###                           ("\<^const>Set.empty"))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" defined_types0)
###                             ("\<^const>Set.empty"))
###                           ("_datatype_field" ("_constify" defined_exns)
###                             ("_Finset"
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" cn))))))))))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" cn)
###                                 ("_tuple" ("\<^const>List.list.Nil")
###                                   ("_tuple_args"
###                                     ("_applC" ("_position" List.map)
### ("_cargs" ("_applC" ("_position" type_name_subst) ("_position" tenvT))
###   ("_position" ts)))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn))))))))))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" cn)
###           ("_idts" ("_position" ts)
###             ("_idts" ("_position" specs) ("_position" decls)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" check_exn_tenv)
###           ("_cargs" ("_position" mn)
###             ("_cargs" ("_position" cn) ("_position" ts))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" type_specs)
###             ("_cargs" ("_position" mn)
###               ("_cargs" ("_position" tenvT)
###                 ("_cargs" ("_position" specs)
###                   ("_cargs" ("_position" decls) ("_position" tenv))))))
###           ("_Ball" ("_position" x)
###             ("_applC" ("_position" set) ("_position" ts))
###             ("_applC"
###               ("_applC" ("_position" check_type_names) ("_position" tenvT))
###               ("_position" x))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Sexn)
###                   ("_cargs" ("_position" cn) ("_position" ts)))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" defined_mods0)
###                           ("\<^const>Set.empty"))
###                         ("_fields"
###                           ("_field" ("_constify" defined_types0)
###                             ("\<^const>Set.empty"))
###                           ("_field" ("_constify" defined_exns)
###                             ("_Finset"
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" cn))))))))))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_applC" ("_position" nsSing)
###                               ("_cargs" ("_position" cn)
###                                 ("_tuple" ("\<^const>List.list.Nil")
###                                   ("_tuple_args"
###                                     ("_applC" ("_position" List.map)
### ("_cargs" ("_applC" ("_position" type_name_subst) ("_position" tenvT))
###   ("_position" ts)))
###                                     ("_tuple_arg"
### ("_applC" ("_position" TypeExn)
###   ("_applC" ("_position" mk_id)
###     ("_cargs" ("_position" mn) ("_position" cn))))))))))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" nsEmpty)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1322 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" tn)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" tvs)
###               ("_idts" ("_position" decls) ("_position" tenvT'))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct) ("_position" tvs))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" tenvT')
###             ("_applC" ("_position" nsSing)
###               ("_cargs" ("_position" tn)
###                 ("_tuple" ("_position" tvs)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Tapp)
###                       ("_cargs"
###                         ("_applC" ("_position" List.map)
###                           ("_cargs" ("_position" Tvar) ("_position" tvs)))
###                         ("_applC" ("_position" TC_name)
###                           ("_applC" ("_position" mk_id)
###                             ("_cargs" ("_position" mn)
###                               ("_position" tn)))))))))))
###           ("_applC" ("_position" type_specs)
###             ("_cargs" ("_position" mn)
###               ("_cargs"
###                 ("_applC" ("_position" nsAppend)
###                   ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                 ("_cargs" ("_position" specs)
###                   ("_cargs" ("_position" decls) ("_position" tenv)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stype_opq)
###                   ("_cargs" ("_position" tvs) ("_position" tn)))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" defined_mods0)
###                           ("\<^const>Set.empty"))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" defined_types0)
###                             ("_Finset"
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" tn)))))
###                           ("_datatype_field" ("_constify" defined_exns)
###                             ("\<^const>Set.empty")))))))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0) ("_position" nsEmpty))
###                           ("_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" tn)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" tvs)
###               ("_idts" ("_position" decls) ("_position" tenvT'))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct) ("_position" tvs))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" tenvT')
###             ("_applC" ("_position" nsSing)
###               ("_cargs" ("_position" tn)
###                 ("_tuple" ("_position" tvs)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Tapp)
###                       ("_cargs"
###                         ("_applC" ("_position" List.map)
###                           ("_cargs" ("_position" Tvar) ("_position" tvs)))
###                         ("_applC" ("_position" TC_name)
###                           ("_applC" ("_position" mk_id)
###                             ("_cargs" ("_position" mn)
###                               ("_position" tn)))))))))))
###           ("_applC" ("_position" type_specs)
###             ("_cargs" ("_position" mn)
###               ("_cargs"
###                 ("_applC" ("_position" nsAppend)
###                   ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                 ("_cargs" ("_position" specs)
###                   ("_cargs" ("_position" decls) ("_position" tenv)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stype_opq)
###                   ("_cargs" ("_position" tvs) ("_position" tn)))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" defined_mods0)
###                           ("\<^const>Set.empty"))
###                         ("_fields"
###                           ("_field" ("_constify" defined_types0)
###                             ("_Finset"
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" tn)))))
###                           ("_field" ("_constify" defined_exns)
###                             ("\<^const>Set.empty")))))))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" v0) ("_position" nsEmpty))
###                         ("_fields"
###                           ("_field" ("_constify" c0) ("_position" nsEmpty))
###                           ("_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" tn)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" tvs)
###               ("_idts" ("_position" decls) ("_position" tenvT'))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct) ("_position" tvs))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" tenvT')
###             ("_applC" ("_position" nsSing)
###               ("_cargs" ("_position" tn)
###                 ("_tuple" ("_position" tvs)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Tapp)
###                       ("_cargs"
###                         ("_applC" ("_position" List.map)
###                           ("_cargs" ("_position" Tvar) ("_position" tvs)))
###                         ("_applC" ("_position" TC_name)
###                           ("_applC" ("_position" mk_id)
###                             ("_cargs" ("_position" mn)
###                               ("_position" tn)))))))))))
###           ("_applC" ("_position" type_specs)
###             ("_cargs" ("_position" mn)
###               ("_cargs"
###                 ("_applC" ("_position" nsAppend)
###                   ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                 ("_cargs" ("_position" specs)
###                   ("_cargs" ("_position" decls) ("_position" tenv)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stype_opq)
###                   ("_cargs" ("_position" tvs) ("_position" tn)))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" defined_mods0)
###                           ("\<^const>Set.empty"))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" defined_types0)
###                             ("_Finset"
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" tn)))))
###                           ("_datatype_field" ("_constify" defined_exns)
###                             ("\<^const>Set.empty")))))))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" mn)
###     ("_idts" ("_position" tenvT)
###       ("_idts" ("_position" tenv)
###         ("_idts" ("_position" tn)
###           ("_idts" ("_position" specs)
###             ("_idts" ("_position" tvs)
###               ("_idts" ("_position" decls) ("_position" tenvT'))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" Lem_list.allDistinct) ("_position" tvs))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" tenvT')
###             ("_applC" ("_position" nsSing)
###               ("_cargs" ("_position" tn)
###                 ("_tuple" ("_position" tvs)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" Tapp)
###                       ("_cargs"
###                         ("_applC" ("_position" List.map)
###                           ("_cargs" ("_position" Tvar) ("_position" tvs)))
###                         ("_applC" ("_position" TC_name)
###                           ("_applC" ("_position" mk_id)
###                             ("_cargs" ("_position" mn)
###                               ("_position" tn)))))))))))
###           ("_applC" ("_position" type_specs)
###             ("_cargs" ("_position" mn)
###               ("_cargs"
###                 ("_applC" ("_position" nsAppend)
###                   ("_cargs" ("_position" tenvT') ("_position" tenvT)))
###                 ("_cargs" ("_position" specs)
###                   ("_cargs" ("_position" decls) ("_position" tenv)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_specs)
###         ("_cargs" ("_position" mn)
###           ("_cargs" ("_position" tenvT)
###             ("_cargs"
###               ("\<^const>List.list.Cons"
###                 ("_applC" ("_position" Stype_opq)
###                   ("_cargs" ("_position" tvs) ("_position" tn)))
###                 ("_position" specs))
###               ("_cargs"
###                 ("_applC" ("_position" union_decls)
###                   ("_cargs" ("_position" decls)
###                     ("_record"
###                       ("_fields"
###                         ("_field" ("_constify" defined_mods0)
###                           ("\<^const>Set.empty"))
###                         ("_fields"
###                           ("_field" ("_constify" defined_types0)
###                             ("_Finset"
###                               ("_applC" ("_position" mk_id)
###                                 ("_cargs" ("_position" mn)
###                                   ("_position" tn)))))
###                           ("_field" ("_constify" defined_exns)
###                             ("\<^const>Set.empty")))))))
###                 ("_applC" ("_position" extend_dec_tenv)
###                   ("_cargs" ("_position" tenv)
###                     ("_datatype_record"
###                       ("_datatype_fields"
###                         ("_datatype_field" ("_constify" v0)
###                           ("_position" nsEmpty))
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" c0)
###                             ("_position" nsEmpty))
###                           ("_datatype_field" ("_constify" t)
###                             ("_position" tenvT')))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_specs"
  Proving monotonicity ...
Found termination order: "{}"
Proofs for inductive predicate(s) "check_signature"
  Proving monotonicity ...
### Ambiguous input (line 1379 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tenvLift)
###       ("_cargs" ("_position" mn) ("_position" tenv)))
###     ("_record"
###       ("_fields"
###         ("_field" ("_constify" v0)
###           ("_applC" ("_position" nsLift)
###             ("_cargs" ("_position" mn)
###               ("_applC" ("_position" v0) ("_position" tenv)))))
###         ("_fields"
###           ("_field" ("_constify" c0)
###             ("_applC" ("_position" nsLift)
###               ("_cargs" ("_position" mn)
###                 ("_applC" ("_position" c0) ("_position" tenv)))))
###           ("_field" ("_constify" t)
###             ("_applC" ("_position" nsLift)
###               ("_cargs" ("_position" mn)
###                 ("_applC" ("_position" t) ("_position" tenv))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" tenvLift)
###       ("_cargs" ("_position" mn) ("_position" tenv)))
###     ("_datatype_record"
###       ("_datatype_fields"
###         ("_datatype_field" ("_constify" v0)
###           ("_applC" ("_position" nsLift)
###             ("_cargs" ("_position" mn)
###               ("_applC" ("_position" v0) ("_position" tenv)))))
###         ("_datatype_fields"
###           ("_datatype_field" ("_constify" c0)
###             ("_applC" ("_position" nsLift)
###               ("_cargs" ("_position" mn)
###                 ("_applC" ("_position" c0) ("_position" tenv)))))
###           ("_datatype_field" ("_constify" t)
###             ("_applC" ("_position" nsLift)
###               ("_cargs" ("_position" mn)
###                 ("_applC" ("_position" t) ("_position" tenv))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1393 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" tenv)
###       ("_idts" ("_position" mn)
###         ("_idts" ("_position" spec)
###           ("_idts" ("_position" ds)
###             ("_idts" ("_position" tenv_impl)
###               ("_idts" ("_position" tenv_spec)
###                 ("_idts" ("_position" decls)
###                   ("_idts" ("_position" decls_impl)
###                     ("_position" decls_spec))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods0) ("_position" decls))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" type_ds)
###             ("_cargs" ("_position" extra_checks)
###               ("_cargs" ("_list" ("_position" mn))
###                 ("_cargs" ("_position" decls)
###                   ("_cargs" ("_position" tenv)
###                     ("_cargs" ("_position" ds)
###                       ("_cargs" ("_position" decls_impl)
###                         ("_position" tenv_impl))))))))
###           ("_applC" ("_position" check_signature)
###             ("_cargs" ("_list" ("_position" mn))
###               ("_cargs" ("_applC" ("_position" t) ("_position" tenv))
###                 ("_cargs" ("_position" decls_impl)
###                   ("_cargs" ("_position" tenv_impl)
###                     ("_cargs" ("_position" spec)
###                       ("_cargs" ("_position" decls_spec)
###                         ("_position" tenv_spec)))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_top)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" decls)
###             ("_cargs" ("_position" tenv)
###               ("_cargs"
###                 ("_applC" ("_position" Tmod)
###                   ("_cargs" ("_position" mn)
###                     ("_cargs" ("_position" spec) ("_position" ds))))
###                 ("_cargs"
###                   ("_applC" ("_position" union_decls)
###                     ("_cargs"
###                       ("_record"
###                         ("_fields"
###                           ("_field" ("_constify" defined_mods0)
###                             ("_Finset" ("_list" ("_position" mn))))
###                           ("_fields"
###                             ("_field" ("_constify" defined_types0)
###                               ("\<^const>Set.empty"))
###                             ("_field" ("_constify" defined_exns)
###                               ("\<^const>Set.empty")))))
###                       ("_position" decls_spec)))
###                   ("_applC" ("_position" tenvLift)
###                     ("_cargs" ("_position" mn)
###                       ("_position" tenv_spec))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" tenv)
###       ("_idts" ("_position" mn)
###         ("_idts" ("_position" spec)
###           ("_idts" ("_position" ds)
###             ("_idts" ("_position" tenv_impl)
###               ("_idts" ("_position" tenv_spec)
###                 ("_idts" ("_position" decls)
###                   ("_idts" ("_position" decls_impl)
###                     ("_position" decls_spec))))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("\<^const>Set.member" ("_list" ("_position" mn))
###             ("_applC" ("_position" defined_mods0) ("_position" decls))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" type_ds)
###             ("_cargs" ("_position" extra_checks)
###               ("_cargs" ("_list" ("_position" mn))
###                 ("_cargs" ("_position" decls)
###                   ("_cargs" ("_position" tenv)
###                     ("_cargs" ("_position" ds)
###                       ("_cargs" ("_position" decls_impl)
###                         ("_position" tenv_impl))))))))
###           ("_applC" ("_position" check_signature)
###             ("_cargs" ("_list" ("_position" mn))
###               ("_cargs" ("_applC" ("_position" t) ("_position" tenv))
###                 ("_cargs" ("_position" decls_impl)
###                   ("_cargs" ("_position" tenv_impl)
###                     ("_cargs" ("_position" spec)
###                       ("_cargs" ("_position" decls_spec)
###                         ("_position" tenv_spec)))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" type_top)
###         ("_cargs" ("_position" extra_checks)
###           ("_cargs" ("_position" decls)
###             ("_cargs" ("_position" tenv)
###               ("_cargs"
###                 ("_applC" ("_position" Tmod)
###                   ("_cargs" ("_position" mn)
###                     ("_cargs" ("_position" spec) ("_position" ds))))
###                 ("_cargs"
###                   ("_applC" ("_position" union_decls)
###                     ("_cargs"
###                       ("_datatype_record"
###                         ("_datatype_fields"
###                           ("_datatype_field" ("_constify" defined_mods0)
###                             ("_Finset" ("_list" ("_position" mn))))
###                           ("_datatype_fields"
###                             ("_datatype_field" ("_constify" defined_types0)
###                               ("\<^const>Set.empty"))
###                             ("_datatype_field" ("_constify" defined_exns)
###                               ("\<^const>Set.empty")))))
###                       ("_position" decls_spec)))
###                   ("_applC" ("_position" tenvLift)
###                     ("_cargs" ("_position" mn)
###                       ("_position" tenv_spec))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_top"
  Proving monotonicity ...
### Ambiguous input (line 1405 of "$AFP/CakeML/generated/CakeML/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" tenv) ("_position" decls)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_prog)
###       ("_cargs" ("_position" extra_checks)
###         ("_cargs" ("_position" decls)
###           ("_cargs" ("_position" tenv)
###             ("_cargs" ("\<^const>List.list.Nil")
###               ("_cargs" ("_position" empty_decls)
###                 ("_datatype_record"
###                   ("_datatype_fields"
###                     ("_datatype_field" ("_constify" v0)
###                       ("_position" nsEmpty))
###                     ("_datatype_fields"
###                       ("_datatype_field" ("_constify" c0)
###                         ("_position" nsEmpty))
###                       ("_datatype_field" ("_constify" t)
###                         ("_position" nsEmpty)))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" extra_checks)
###     ("_idts" ("_position" tenv) ("_position" decls)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_prog)
###       ("_cargs" ("_position" extra_checks)
###         ("_cargs" ("_position" decls)
###           ("_cargs" ("_position" tenv)
###             ("_cargs" ("\<^const>List.list.Nil")
###               ("_cargs" ("_position" empty_decls)
###                 ("_record"
###                   ("_fields"
###                     ("_field" ("_constify" v0) ("_position" nsEmpty))
###                     ("_fields"
###                       ("_field" ("_constify" c0) ("_position" nsEmpty))
###                       ("_field" ("_constify" t)
###                         ("_position" nsEmpty)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_prog"
  Proving monotonicity ...
### theory "Draft.TypeSystem"
### 8.410s elapsed time, 11.587s cpu time, 3.489s GC time
Loading theory "Draft.TypeSystemTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.TypeSystemTemplates"
### 1.948s elapsed time, 2.350s cpu time, 0.237s GC time
val it = (): unit
