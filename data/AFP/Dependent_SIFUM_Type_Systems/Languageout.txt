Loading theory "Draft.Preliminaries" (required by "Draft.LanguageMoreTemplates" via "Draft.Language")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LanguageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LanguageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LanguageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.593s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LanguageMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.192s elapsed time, 0.782s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LanguageMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.308s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LanguageMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  Sec :: complete_lattice
  Inf_Sec == Inf :: Sec set => Sec
  Sup_Sec == Sup :: Sec set => Sec
  bot_Sec == bot :: Sec
  sup_Sec == sup :: Sec => Sec => Sec
  top_Sec == top :: Sec
  inf_Sec == inf :: Sec => Sec => Sec
  less_eq_Sec == less_eq :: Sec => Sec => bool
  less_Sec == less :: Sec => Sec => bool
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
consts
  stake :: "nat => 'a stream => 'a list"
locale sifum_security
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
  assumes "sifum_security dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
locale sifum_security_init
  fixes dma :: "('Var => 'Val) => 'Var => Sec"
    and \<C>_vars :: "'Var => 'Var set"
    and \<C> :: "'Var set"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and INIT :: "('Var => 'Val) => bool"
  assumes "sifum_security_init dma \<C>_vars eval"
  defines "\<C> == \<Union> (range \<C>_vars)"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Preliminaries"
### 0.913s elapsed time, 3.621s cpu time, 0.327s GC time
Loading theory "Draft.Language" (required by "Draft.LanguageMoreTemplates")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.027s elapsed time, 3.884s cpu time, 0.830s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.060s elapsed time, 3.881s cpu time, 0.794s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.043s elapsed time, 6.291s cpu time, 1.068s GC time
Loading theory "Draft.Templates" (required by "Draft.LanguageMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LanguageMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.567s elapsed time, 1.215s cpu time, 0.189s GC time
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
  assumes "sifum_lang eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang_no_dma
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
  assumes "sifum_lang_no_dma eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
consts
  update_modes :: "'Var ModeUpd => (Mode => 'Var set) => Mode => 'Var set"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "eval\<^sub>w_simplep"
  Proving monotonicity ...
consts
  cxt_to_stmt ::
    "('Var, 'AExp, 'BExp) Stmt list
     => ('Var, 'AExp, 'BExp) Stmt => ('Var, 'AExp, 'BExp) Stmt"
Proofs for inductive predicate(s) "no_await"
  Proving monotonicity ...
Proofs for inductive predicate(s) "is_final"
  Proving monotonicity ...
Proofs for inductive predicate(s) "eval\<^sub>wp"
  Proving monotonicity ...
### Ambiguous input (line 200 of "$AFP/Dependent_SIFUM_Type_Systems/Language.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cxt_to_stmt)
###         ("_cargs" ("_position" E) ("_position" c)))
###       ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###         ("_position" mu))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###           ("_position" mu)))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Language.Stmt.ModeDecl"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cxt_to_stmt)
###           ("_cargs" ("_position" E) ("_position" c)))
###         ("_position" c'))
###       ("_position" mu)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###           ("_position" mu)))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" cxt_to_stmt)
###         ("_cargs" ("_position" E) ("_position" c)))
###       ("\<^const>Language.Stmt.ModeDecl" ("_position" c')
###         ("_position" mu))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Language.Stmt.ModeDecl"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" c'))
###         ("_position" mu))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Language.Stmt.ModeDecl"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" cxt_to_stmt)
###           ("_cargs" ("_position" E) ("_position" c)))
###         ("_position" c'))
###       ("_position" mu)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>Language.Stmt.ModeDecl"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" c'))
###         ("_position" mu))
###       ("\<^const>HOL.eq" ("_position" E) ("\<^const>List.list.Nil")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 393 of "$AFP/Dependent_SIFUM_Type_Systems/Language.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.eval\<^sub>w_plus"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" eval\<^sub>B)
###           ("_cargs" ("_position" mem) ("_position" b)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem)))))
###       ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###         ("_position" mds') ("_position" mem')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>local.eval\<^sub>w_plus"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem))))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" eval\<^sub>B)
###       ("\<^const>local.eval\<^sub>w_plus"
###         ("\<^const>HOL.conj" ("_applC" ("_position" mem) ("_position" b))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem)))))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" eval\<^sub>B)
###       ("_cargs" ("_position" mem)
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###                 ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                   ("_position" mds) ("_position" mem)))))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem)))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("_applC" ("_position" no_await)
###         ("\<^const>local.eval\<^sub>w_plus"
###           ("\<^const>HOL.conj" ("_position" c\<^sub>1)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem))))
###           ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###             ("_position" mds') ("_position" mem')))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" is_final) ("_position" c\<^sub>2))
###           ("\<^const>local.eval\<^sub>w_plus"
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###               ("_position" mds) ("_position" mem))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###               ("_position" mds') ("_position" mem'))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.eval\<^sub>w_abv"
###         ("\<^const>local.conf\<^sub>w_abv"
###           ("_applC" ("_position" Await)
###             ("_cargs" ("_position" b) ("_position" c\<^sub>1)))
###           ("_position" mds) ("_position" mem))
###         ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###           ("_position" mds') ("_position" mem')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" eval\<^sub>B)
###         ("_cargs" ("_position" mem) ("_position" b)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" no_await) ("_position" c\<^sub>1))
###         ("_applC" ("_position" is_final)
###           ("\<^const>local.eval\<^sub>w_plus"
###             ("\<^const>HOL.conj" ("_position" c\<^sub>2)
###               ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>1)
###                 ("_position" mds) ("_position" mem)))
###             ("\<^const>local.conf\<^sub>w_abv" ("_position" c\<^sub>2)
###               ("_position" mds') ("_position" mem'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Language"
### 2.973s elapsed time, 5.745s cpu time, 1.054s GC time
Loading theory "Draft.LanguageMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.LanguageMoreTemplates"
### 0.374s elapsed time, 0.548s cpu time, 0.051s GC time
val it = (): unit
